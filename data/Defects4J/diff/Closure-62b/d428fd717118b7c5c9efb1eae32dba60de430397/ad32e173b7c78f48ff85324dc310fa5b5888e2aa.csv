is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,104,* Gets the variables that were referenced in this callback.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,106,public Set<Var> getReferencedVariables() {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,107,return referenceMap.keySet();
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,20,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,21,import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,22,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,23,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,24,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,26,import java.util.Map;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,29,"* An analysis pass that determines the visibility of variables -- that is,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,30,"* whether a variable is truly local, a local captured by an inner scope, a"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,31,"* parameter, or a global variable."
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,33,* SideEffectsAnalysis uses this class to partition a potentially infinite
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,34,* number of concrete storage locations into a (small) finite number of
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,35,* abstract storage locations based on a variable's storage visibility.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,37,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,39,public class VariableVisibilityAnalysis implements CompilerPass {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,41,enum VariableVisibility {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,43,"/** Local variable, not captured by closure */"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,44,"LOCAL,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,46,/** Local variable captured by a closure */
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,47,"CAPTURED_LOCAL,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,50,* Formal parameter declaration variable
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,52,* Parameters are different than local variables because they can be
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,53,* aliased by elements of the arguments object.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,55,"PARAMETER,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,57,/** A global variable */
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,58,GLOBAL
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,61,private AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,64,* Maps the declaring name node for a variable to that variable's
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,65,* visibility.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,67,"private Map<Node, VariableVisibility> visibilityByDeclaringNameNode;"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,69,public VariableVisibilityAnalysis(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,70,this.compiler = compiler;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,72,visibilityByDeclaringNameNode = Maps.newHashMap();
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,76,"* Returns the visibility of of a variable, given that variable's declaring"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,77,* name node.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,79,* The name node's parent must be one of:
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,80,* <pre>
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,81,*    Token.VAR (for a variable declaration)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,82,*    Token.FUNCTION (for a function declaration)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,83,*    Token.LP (for a function formal parameter)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,84,* </pre>
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,86,* The returned visibility will be one of:
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,87,* <pre>
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,88,*    LOCAL_VARIABLE : the variable is a local variable used only in its
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,89,*        declared scope
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,90,*    CAPTURED_LOCAL_VARIABLE : A local variable that is used in a capturing
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,91,*        closure
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,92,*     PARAMETER_VARIABLE : the variable is a formal parameter
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,93,*     GLOBAL_VARIABLE : the variable is declared in the global scope
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,94,*  </pre>
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,96,* @param declaringNameNode The name node for a declaration.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,98,public VariableVisibility getVariableVisibility(Node declaringNameNode) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,99,Node parent = declaringNameNode.getParent();
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,101,Preconditions.checkArgument(NodeUtil.isVar(parent)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,102,|| NodeUtil.isFunction(parent)
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,103,|| parent.getType() == Token.LP);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,105,return visibilityByDeclaringNameNode.get(declaringNameNode);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,109,* Determines the visibility class for each variable in root.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,111,@Override
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,112,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,113,ReferenceCollectingCallback callback =
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,114,"new ReferenceCollectingCallback(compiler,"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,115,ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,117,"NodeTraversal.traverse(compiler, root, callback);"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,119,for (Var variable : callback.getReferencedVariables()) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,120,ReferenceCollection referenceCollection =
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,121,callback.getReferenceCollection(variable);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,123,VariableVisibility visibility;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,125,if (variableIsParameter(variable)) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,126,visibility = VariableVisibility.PARAMETER;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,127,} else if (variable.isLocal()) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,128,if (referenceCollection.isEscaped()) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,129,visibility = VariableVisibility.CAPTURED_LOCAL;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,130,} else {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,131,visibility = VariableVisibility.LOCAL;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,133,} else if (variable.isGlobal()) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,134,visibility = VariableVisibility.GLOBAL;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,135,} else {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,136,"throw new IllegalStateException(""Un-handled variable visibility for "" +"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,137,variable);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,140,"visibilityByDeclaringNameNode.put(variable.getNameNode(), visibility);"
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,145,* Returns true if the variable is a formal parameter.
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,147,private static boolean variableIsParameter(Var variable) {
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,148,Node variableParent = variable.getParentNode();
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,150,return variableParent != null && variableParent.getType() == Token.LP;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,19,import com.google.common.base.Preconditions;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,20,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,21,import com.google.javascript.jscomp.VariableVisibilityAnalysis.VariableVisibility;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,22,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,23,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,26,* Tests of {@link VariableVisibilityAnalysis}.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,28,* @author dcc@google.com (Devin Coughlin)
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,30,public class VariableVisibilityAnalysisTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,32,private Compiler lastCompiler;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,33,private VariableVisibilityAnalysis lastAnalysis;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,35,@Override
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,36,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,37,lastAnalysis = new VariableVisibilityAnalysis(compiler);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,38,lastCompiler = compiler;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,40,return lastAnalysis;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,43,public void testCapturedVariables() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,44,String source =
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,45,"""global:var global;\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,46,"""function Outer() {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,47,"""  captured:var captured;\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,48,"""  notcaptured:var notCaptured;\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,49,"""  function Inner() {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,50,"""    alert(captured);"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,51,"""   }\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,52,"""}\n"";"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,54,analyze(source);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,56,"assertIsCapturedLocal(""captured"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,57,"assertIsUncapturedLocal(""notcaptured"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,60,public void testGlobals() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,61,String source =
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,62,"""global:var global;"";"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,64,analyze(source);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,66,"assertIsGlobal(""global"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,69,public void testParameters() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,70,String source =
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,71,"""function A(a,b,c) {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,72,"""}\n"";"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,74,analyze(source);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,76,"assertIsParameter(""a"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,77,"assertIsParameter(""b"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,78,"assertIsParameter(""c"");"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,81,public void testFunctions() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,82,String source =
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,83,"""function global() {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,84,"""  function inner() {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,85,"""  }\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,86,"""  function innerCaptured() {\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,87,"""    (function(){innerCaptured()})()\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,88,"""  }\n"" +"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,89,"""}\n"";"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,91,analyze(source);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,93,"assertFunctionHasVisibility(""global"","
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,94,VariableVisibility.GLOBAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,96,"assertFunctionHasVisibility(""inner"","
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,97,VariableVisibility.LOCAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,99,"assertFunctionHasVisibility(""innerCaptured"","
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,100,VariableVisibility.CAPTURED_LOCAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,103,"private void assertFunctionHasVisibility(String functionName,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,104,VariableVisibility visibility) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,106,Node functionNode = searchForFunction(functionName);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,107,assertNotNull(functionNode);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,109,Node nameNode = functionNode.getFirstChild();
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,110,"assertEquals(visibility, lastAnalysis.getVariableVisibility(nameNode));"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,113,"private void assertLabeledVariableHasVisibility(String label,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,114,VariableVisibility visibility) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,115,Node labeledVariable = searchLabel(label);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,117,Preconditions.checkState(NodeUtil.isVar(labeledVariable));
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,119,// VAR
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,120,//   NAME
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,121,Node nameNode = labeledVariable.getFirstChild();
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,123,"assertEquals(visibility, lastAnalysis.getVariableVisibility(nameNode));"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,126,private void assertIsCapturedLocal(String label) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,127,"assertLabeledVariableHasVisibility(label,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,128,VariableVisibility.CAPTURED_LOCAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,131,private void assertIsUncapturedLocal(String label) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,132,"assertLabeledVariableHasVisibility(label,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,133,VariableVisibility.LOCAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,136,private void assertIsGlobal(String label) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,137,"assertLabeledVariableHasVisibility(label,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,138,VariableVisibility.GLOBAL);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,141,private void assertIsParameter(String parameterName) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,142,Node parameterNode = searchForParameter(parameterName);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,144,assertNotNull(parameterNode);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,146,"assertEquals(VariableVisibility.PARAMETER,"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,147,lastAnalysis.getVariableVisibility(parameterNode));
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,150,private VariableVisibilityAnalysis analyze(String src) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,151,testSame(src);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,153,return lastAnalysis;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,157,* Finds a parameter NAME node with the given name in the source AST.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,159,* Behavior is undefined if there are multiple parameters with
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,160,* parameterName.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,162,private Node searchForParameter(final String parameterName) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,163,Preconditions.checkArgument(parameterName != null);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,165,final Node[] foundNode = new Node[1];
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,167,AbstractPostOrderCallback findParameter = new AbstractPostOrderCallback() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,169,@Override
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,170,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,171,if (n.getParent().getType() == Token.LP
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,172,&& parameterName.equals(n.getString())) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,174,foundNode[0] = n;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,179,"new NodeTraversal(lastCompiler, findParameter)"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,180,.traverse(lastCompiler.jsRoot);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,182,return foundNode[0];
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,186,* Finds a function node with the given name in the source AST.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,188,* Behavior is undefined if there are multiple functions with
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,189,* parameterName.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,191,private Node searchForFunction(final String functionName) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,192,Preconditions.checkArgument(functionName != null);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,194,final Node[] foundNode = new Node[1];
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,196,AbstractPostOrderCallback findFunction = new AbstractPostOrderCallback() {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,198,@Override
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,199,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,200,if (NodeUtil.isFunction(n)
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,201,&& functionName.equals(NodeUtil.getFunctionName(n))) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,202,foundNode[0] = n;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,207,"new NodeTraversal(lastCompiler, findFunction)"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,208,.traverse(lastCompiler.jsRoot);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,210,return foundNode[0];
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,213,// Shamelessly stolen from NameReferenceGraphConstructionTest
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,214,private Node searchLabel(String label) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,215,LabeledVariableSearcher s = new LabeledVariableSearcher(label);
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,217,"new NodeTraversal(lastCompiler, s).traverse(lastCompiler.jsRoot);"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,218,"assertNotNull(""Label "" + label + "" should be in the source code"", s.found);"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,220,return s.found;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,224,* Quick traversal to find a given labeled variable in the AST.
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,226,* Finds the variable for foo in:
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,227,* foo: var a = ...
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,229,private class LabeledVariableSearcher extends AbstractPostOrderCallback {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,230,Node found = null;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,231,final String target;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,233,LabeledVariableSearcher(String target) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,234,this.target = target;
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,236,@Override
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,237,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,238,if (n.getType() == Token.LABEL &&
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,239,target.equals(n.getFirstChild().getString())) {
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,241,// LABEL
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,242,//     VAR
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,243,//       NAME
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,245,found = n.getLastChild();

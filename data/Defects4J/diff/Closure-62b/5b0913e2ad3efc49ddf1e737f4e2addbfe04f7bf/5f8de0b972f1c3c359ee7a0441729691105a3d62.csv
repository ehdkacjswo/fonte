is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,33,rivate ImmutableSet<AbstractPeepholeOptimization> peepholeOptimizations;
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,33,// Use an array here for faster iteration compared to ImmutableSet
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,34,// TODO should sort based on likelihood that a given optimzation can
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,35,// modify something.
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,36,private final AbstractPeepholeOptimization[] peepholeOptimizations;
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,35,"eepholeOptimizationsPass(AbstractCompiler compiler,"
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,36,mmutableSet<AbstractPeepholeOptimization> optimizations) {
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,37,his.compiler = compiler;
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,38,his.peepholeOptimizations = optimizations;
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,47,"his(compiler, ImmutableSet.copyOf(optimizations));"
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,45,this.compiler = compiler;
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,46,this.peepholeOptimizations = optimizations;
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,44,"eturn new PeepholeOptimizationsPass(compiler, currentPeepholePasses);"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,44,"return new PeepholeOptimizationsPass(compiler,"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,45,currentPeepholePasses.toArray(
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,46,new AbstractPeepholeOptimization[currentPeepholePasses.size()]));

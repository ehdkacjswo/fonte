is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,21,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,22,import com.google.common.collect.Lists;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,23,mport com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,25,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,26,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,34,import java.util.Iterator;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,35,import java.util.List;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,37,import java.util.Set;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,48,"public static final String ARGUMENTS = ""arguments"";"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,229,tatic class ContextualRenameInverter extends AbstractPostOrderCallback
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,230,mplements CompilerPass {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,236,static class ContextualRenameInverter
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,237,"implements ScopedCallback, CompilerPass {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,233,/ A mapping from long names to short ones.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,234,"rivate Map<Var, String> nameMap = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,240,// The set of names referenced in the current scope.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,241,private Set<String> referencedNames = ImmutableSet.of();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,243,// Stack reference sets.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,244,private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,246,"// Name are globally unique initially, so we don't need a per-scope map."
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,247,"private Map<String, List<Node>> nameMap = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,253,"rivate static String getOrginalNameInternal(String name, int index) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,254,"eturn name.substring(0, index);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,266,private boolean containsSeparator(String name) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,267,return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,257,"rivate static String getNameSuffix(String name, int index) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,258,eturn name.substring(
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,259,"ndex + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,260,ame.length());
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,271,* Prepare a set for the new scope.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,273,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,274,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,275,return;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,278,referenceStack.push(referencedNames);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,279,referencedNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,263,Override
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,264,"ublic void visit(NodeTraversal t, Node node, Node parent) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,265,f (node.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,266,tring oldName = node.getString();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,267,f (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,268,cope scope = t.getScope();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,269,ar var = t.getScope().getVar(oldName);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,270,f (var == null || var.isGlobal()) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,271,eturn;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,283,"* Rename vars for the current scope, and merge any referenced"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,284,* names into the parent scope reference set.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,286,public void exitScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,287,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,288,return;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,274,f (nameMap.containsKey(var)) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,275,ode.setString(nameMap.get(var));
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,276, else {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,277,nt index = indexOfSeparator(oldName);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,278,"tring newName = getOrginalNameInternal(oldName, index);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,279,"tring suffix = getNameSuffix(oldName, index);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,281,/ The convention we are using here is that names of the form:
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,282,/    a$$1  ($$ followed by a digit are allowed to mask a global)
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,283,/    a$$inline_1 ($$ followed by anything that isn't a digit isn't
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,284,/       allowed to mask a global.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,285,/ This preserves existing behavior while allowing simpler diffs
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,286,/ when inlining is enabled.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,287,/ TODO(johnlenz): Remove this distiction when scoping is properly
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,288,/ checked.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,289,oolean recurseScopes = false;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,290,"f (!suffix.matches(""\\d+"")) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,291,/ Non-contextual renamed value.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,292,ecurseScopes = true;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,291,for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,292,Var v = it.next();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,293,handleScopeVar(v);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,295,"/ Before we change the name of this variable, double-check to"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,296,/ make sure we're not declaring a duplicate name in the
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,297,/ same scope as the var declaration.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,298,"/ TODO(johnlenz): This test isn't sufficient; specifically,"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,299,/ a reference to a global may have been introduced. Shortening
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,300,/ the name without checking for such a reference may mask the
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,301,/ global causing the wrong value to be referenced.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,302,"f (var.scope.isDeclared(newName, recurseScopes) ||"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,303,TokenStream.isJSIdentifier(newName)) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,304,ewName = oldName;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,305, else {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,306,"ar.scope.declare(newName, var.nameNode, null, null);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,308,/ Handle bleeding functions.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,309,ode parentNode = var.getParentNode();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,310,f (parentNode.getType() == Token.FUNCTION &&
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,311,arentNode == var.scope.getRootNode()) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,312,ar.getNameNode().setString(newName);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,315,ode.setString(newName);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,316,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,296,// Merge any names that were referenced but not declared in the current
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,297,// scope.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,298,Set<String> current = referencedNames;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,299,referencedNames = referenceStack.pop();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,300,// If there isn't anything left in the stack we will be going into the
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,301,// global scope: don't try to build a set of referenced names for the
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,302,// global scope.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,303,if (!referenceStack.isEmpty()) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,304,referencedNames.addAll(current);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,319,"ameMap.put(var, newName);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,309,* For the Var declared in the current scope determine if it is possible
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,310,* to revert the name to its orginal form without conflicting with other
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,311,* values.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,313,void handleScopeVar(Var v) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,314,String name  = v.getName();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,315,if (containsSeparator(name)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,316,String newName = getOrginalName(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,317,// Check if the new name is valid and if it would cause conflicts.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,318,if (TokenStream.isJSIdentifier(newName) &&
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,319,!referencedNames.contains(newName) &&
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,320,!newName.equals(ARGUMENTS)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,321,referencedNames.remove(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,322,// Adding a reference to the new name to prevent either the parent
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,323,// scopes or the current scope renaming another var to this new name.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,324,referencedNames.add(newName);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,325,List<Node> references = nameMap.get(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,326,Preconditions.checkState(references != null);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,327,for (Node n : references) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,328,Preconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,329,n.setString(newName);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,331,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,333,nameMap.remove(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,337,@Override
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,338,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,339,return true;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,342,@Override
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,343,"public void visit(NodeTraversal t, Node node, Node parent) {"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,344,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,345,return;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,348,if (NodeUtil.isReferenceName(node)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,349,String name = node.getString();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,350,// Add all referenced names to the set so it is possible to check for
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,351,// conflicts.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,352,referencedNames.add(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,353,// Store only references to candidate names in the node map.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,354,if (containsSeparator(name)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,355,"addCandidateNameReference(name, node);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,360,"private void addCandidateNameReference(String name, Node n) {"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,361,List<Node> nodes = nameMap.get(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,362,if (null == nodes) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,363,nodes = Lists.newLinkedList();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,364,"nameMap.put(name, nodes);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,366,nodes.add(n);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,370,f (global) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,371,eserveName(name);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,372, else {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,373,"/ It hasn't been declared locally yet, so increment the count."
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,374,f (!declarations.containsKey(name)) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,375,nt id = incrementNameCount(name);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,376,tring newName = null;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,377,f (id != 0) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,378,"ewName = getUniqueName(name, id);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,414,if (!name.equals(ARGUMENTS)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,415,if (global) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,416,reserveName(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,417,} else {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,418,"// It hasn't been declared locally yet, so increment the count."
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,419,if (!declarations.containsKey(name)) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,420,int id = incrementNameCount(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,421,String newName = null;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,422,if (id != 0) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,423,"newName = getUniqueName(name, id);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,425,"declarations.put(name, newName);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,380,"eclarations.put(name, newName);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,486,Preconditions.checkState(!name.equals(ARGUMENTS));
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1040,"* @return Whether the name is a reference to a variable, function or"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1041,*       function parameter (not a label or a empty anonymous function name).
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1043,static boolean isReferenceName(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1044,return isName(n) && !n.getString().isEmpty() && !isLabelName(n);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,82,emoveDuplicateDeclarations(root);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,87,// It is important that removeDuplicateDeclarations runs after
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,88,// MakeDeclaredNamesUnique in order for catch block exception names to be
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,89,"// handled properly. Specifically, catch block exception names are"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,90,"// only valid within the catch block, but our currect Scope logic"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,91,// has no concept of this and includes it in the containing function
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,92,// (or global scope). MakeDeclaredNamesUnique makes the catch exception
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,93,// names unique so that removeDuplicateDeclarations() will properly handle
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,94,// cases where a function scope variable conflict with a exception name:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,95,//   function f() {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,96,//      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,97,//      var e = 1; // f scope 'e'
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,99,// otherwise 'var e = 1' would be rewritten as 'e = 1'.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,100,// TODO(johnlenz): Introduce a seperate scope for catch nodes.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,101,removeDuplicateDeclarations(root);
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,92,ublic void testMakeLocalNamesUniqueWithContext0() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,92,private String wrapInFunction(String s) {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,93,"return ""function f(){"" + s + ""}"";"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,96,"public void testInFunction(String original, String expected) {"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,97,"test(wrapInFunction(original), wrapInFunction(expected));"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,100,public void testSameInFunction(String original) {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,101,testSame(wrapInFunction(original));
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,104,public void testMakeLocalNamesUniqueWithContext1() {
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,96,/ Local names are made unique.
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,112,test(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,113,"""var a;function foo(){var a$$inline_1;}"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,114,"""var a;function foo(){var a;}"");"
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,103,ublic void testMakeLocalNamesUniqueWithContext() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,117,public void testMakeLocalNamesUniqueWithContext2() {
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,145,ublic void testMakeLocalNamesUniqueWithContext2() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,159,public void testMakeLocalNamesUniqueWithContext3() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,174,public void testMakeLocalNamesUniqueWithContext4() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,175,// Set the test type
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,176,this.useDefaultRenamer = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,178,// Inversion does not handle exceptions correctly.
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,179,testInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,180,"""var e; try { } catch(e) {e;}; try { } catch(e) {e;}"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,181,"""var e; try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;}"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,182,testInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,183,"""var e; try { } catch(e) {e; try { } catch(e) {e;}}"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,184,"""var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} }"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,185,testInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,186,"""try { } catch(e) {e;}; try { } catch(e) {e;} var e;"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,187,"""try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;} var e;"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,188,testInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,189,"""try { } catch(e) {e; try { } catch(e) {e;}} var e;"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,190,"""try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} } var e;"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,192,invert = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,194,testSameInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,195,"""var e; try { } catch(e$$1) {e$$1;}; try { } catch(e$$2) {e$$2;}"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,196,testSameInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,197,"""var e; try { } catch(e$$1) {e$$1; try { } catch(e$$2) {e$$2;} };"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,198,testSameInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,199,"""try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;};var e$$2;"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,200,testSameInFunction(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,201,"""try { } catch(e) {e; try { } catch(e$$1) {e$$1;} };var e$$2"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,204,public void testArguments() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,205,// Set the test type
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,206,this.useDefaultRenamer = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,208,invert = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,209,"// Don't distinguish between ""arguments"", it can't be made unique."
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,210,testSameWithInversion(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,211,"""function foo(){var arguments;function bar(){var arguments;}}"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,212,"// Don't introduce new references to arguments, it is special."
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,213,testSameWithInversion(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,214,"""function foo(){var arguments$$1;}"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,274,public void testOnlyInversion2() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,275,invert = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,276,"testSame(""function () {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,277,"""try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}}"");"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,280,public void testOnlyInversion3() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,281,invert = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,282,test(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,283,"""function x1() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,284,"""  var a$$1;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,285,"""  function x2() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,286,"""    var a$$2;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,288,"""  function x3() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,289,"""    var a$$3;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,292,"""function x1() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,293,"""  var a$$1;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,294,"""  function x2() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,295,"""    var a;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,297,"""  function x3() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,298,"""    var a;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,303,public void testOnlyInversion4() {
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,304,invert = true;
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,305,test(
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,306,"""function x1() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,307,"""  var a$$1;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,308,"""  function x2() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,309,"""    var a;a$$1++"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,312,"""function x1() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,313,"""  var a$$1;"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,314,"""  function x2() {"" +"
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,315,"""    var a;a$$1++"" +"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,188,ublic void testRemoveDuplicateVarDeclarations() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,188,public void testRemoveDuplicateVarDeclarations1() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,203,public void testRemoveDuplicateVarDeclarations2() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,204,"test(""var e = 1; function f(){ try {} catch (e) {} var e = 2 }"","
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,205,"""var e = 1; function f(){ try {} catch (e$$2) {} var e$$1 = 2 }"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,198,nfo.getReturnType().evaluate(scope) :
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,198,"info.getReturnType().evaluate(scope, typeRegistry) :"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,219,aseType = ObjectType.cast(info.getBaseType().evaluate(scope));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,219,"baseType = ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,232,bjectType interType = ObjectType.cast(t.evaluate(scope));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,232,"ObjectType interType = ObjectType.cast(t.evaluate(scope, typeRegistry));"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,279,aybeThisType = ObjectType.cast(info.getThisType().evaluate(scope));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,279,maybeThisType = ObjectType.cast(
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,280,"info.getThisType().evaluate(scope, typeRegistry));"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,351,nfo.getParameterType(argumentName).evaluate(scope) :
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,352,"info.getParameterType(argumentName).evaluate(scope, typeRegistry) :"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,27,import com.google.javascript.rhino.JSTypeExpression;
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,30,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,31,import com.google.javascript.rhino.jstype.JSTypeNative;
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,68,static final DiagnosticType INVALID_DEFINE_TYPE_ERROR =
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,69,DiagnosticType.error(
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,70,"""JSC_INVALID_DEFINE_INIT_ERROR"","
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,71,"""@define tag only permits literal types"");"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,157,"* Only defines of literal number, string, or boolean are supported."
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,159,private boolean isValidDefineType(JSTypeExpression expression) {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,160,"JSType type = expression.evaluate(null, compiler.getTypeRegistry());"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,161,return !type.isUnknownType() && type.isSubtype(
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,162,compiler.getTypeRegistry().getNativeType(
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,163,JSTypeNative.NUMBER_STRING_BOOLEAN));
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,159,llDefines.add(name);
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,177,"// Process defines should not depend on check types being enabled,"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,178,// so we look for the JSDoc instead of the inferred type.
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,179,if (isValidDefineType(name.docInfo.getType())) {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,180,allDefines.add(name);
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,181,} else {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,182,JSError error = JSError.make(
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,183,"name.declaration.sourceName,"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,184,"name.declaration.node,"
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,185,INVALID_DEFINE_TYPE_ERROR);
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,186,compiler.report(error);
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,863,"nfo.getType().evaluate(t.getScope()), object,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,863,"info.getType().evaluate(t.getScope(), typeRegistry), object,"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,871,", rvalue, info.getEnumParameterType().evaluate(t.getScope()));"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,871,"t, rvalue, info.getEnumParameterType().evaluate("
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,872,"t.getScope(), typeRegistry));"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1276,", value,  info.getEnumParameterType().evaluate(t.getScope()));"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1277,"t, value,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1278,"info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1685,SType infoType = info.getType().evaluate(t.getScope());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1687,"JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,443,SType castType = info.getType().evaluate(syntacticScope);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,443,"JSType castType = info.getType().evaluate(syntacticScope, registry);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,166,"NodeTraversal.traverse(compiler, root, new DiscoverEnums(typeRegistry));"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,215,private static class DiscoverEnums extends AbstractShallowCallback {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,216,private final JSTypeRegistry registry;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,218,DiscoverEnums(JSTypeRegistry registry) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,219,this.registry = registry;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,222,@Override
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,223,"public void visit(NodeTraversal t, Node node, Node parent) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,224,Node nameNode = null;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,225,switch (node.getType()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,226,case Token.NAME:
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,227,nameNode = node;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,228,break;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,229,case Token.VAR:
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,230,if (node.hasOneChild()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,231,nameNode = node.getFirstChild();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,233,break;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,234,case Token.ASSIGN:
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,235,nameNode = node.getFirstChild();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,236,break;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,239,if (nameNode != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,240,JSDocInfo info = node.getJSDocInfo();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,241,if (info != null && info.hasEnumParameterType()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,242,registry.identifyEnumName(nameNode.getQualifiedName());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,283,sType = info.getType().evaluate(scope);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,319,"jsType = info.getType().evaluate(scope, typeRegistry);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,394,nfo.getEnumParameterType().evaluate(scope)));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,430,"info.getEnumParameterType().evaluate(scope, typeRegistry)));"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,432,nfo.getEnumParameterType().evaluate(scope));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,468,"info.getEnumParameterType().evaluate(scope, typeRegistry));"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,483,SType type = info.getType().evaluate(scope);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,519,"JSType type = info.getType().evaluate(scope, typeRegistry);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,937,SType realType = info.getTypedefType().evaluate(scope);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,973,"JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,969,ealType = info.getType().evaluate(scope);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1005,"realType = info.getType().evaluate(scope, typeRegistry);"
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,20,mport com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,34, Central registry for type info.
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,36,inal JSTypeRegistry registry;
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,58,"onfig(JSTypeRegistry registry, Set<String> annotationWhitelist,"
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,59,oolean isIdeMode) {
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,60,his.registry = registry;
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,52,"Config(Set<String> annotationWhitelist, boolean isIdeMode) {"
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,72,mport com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,88,rivate final JSTypeRegistry registry;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,119,his.registry = config.registry;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,266,f (info.hasEnumParameterType()) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,267,f (node.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,268,egistry.identifyEnumName(node.getString());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,269, else if (node.getType() == Token.VAR &&
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,270,ode.getChildCount() == 1) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,271,egistry.identifyEnumName(
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,272,ode.getFirstChild().getString());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,273, else if (node.getType() == Token.ASSIGN) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,274,egistry.identifyEnumName(
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,275,ode.getFirstChild().getQualifiedName());
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,29,mport com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,30,mport com.google.javascript.rhino.jstype.JSTypeNative;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,31,mport com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,48,rivate final JSTypeRegistry typeRegistry;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,106,his.typeRegistry = config.registry;
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,119,"ew JSTypeRegistry(NullErrorReporter.forOldRhino()),"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,694,f (!isValidDefineType(typeNode)) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,695,"arser.addWarning(""msg.jsdoc.define.badtype"","
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,696,"ineno, charno);"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,697, else if (!jsdocBuilder.recordDefineType(type)) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,688,if (!jsdocBuilder.recordDefineType(type)) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,952, Determines whether the given type is a valid {@code @define} type.
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,954,/ TODO(nicksantos): Move this into a check pass.
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,955,rivate boolean isValidDefineType(Node typeNode) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,956,"SType type = typeRegistry.createFromTypeNodes(typeNode, """", null);"
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,957,eturn !type.isUnknownType() && type.isSubtype(
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,958,ypeRegistry.getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN));
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1031,"ew JSTypeExpression(n, sourceName, typeRegistry);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1012,"new JSTypeExpression(n, sourceName);"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,47,eturn new Config(
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,48,"ypeRegistry, getAnnotationNames(), isIdeMode);"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,47,"return new Config(getAnnotationNames(), isIdeMode);"
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,45,mport com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,46,mport com.google.javascript.rhino.jstype.StaticScope;
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1058," Returns the description for the given thrown type, if it"
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1059, exists.
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1061,"ublic String getDescriptionForThrownType(JSType type,"
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1062,taticScope<JSType> scope) {
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1063,f (documentation == null || documentation.throwsDescriptions == null) {
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1064,eturn null;
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1067,or (JSTypeExpression typeExpr :
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1068,ocumentation.throwsDescriptions.keySet()) {
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1069,f (type.canAssignTo(typeExpr.evaluate(scope))) {
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1070,eturn documentation.throwsDescriptions.get(typeExpr);
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1074,eturn null;
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,64,** The type registry to use for resolution. */
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,65,rivate final JSTypeRegistry registry;
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,67,"ublic JSTypeExpression(Node root, String sourceName,"
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,68,STypeRegistry registry) {
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,64,"public JSTypeExpression(Node root, String sourceName) {"
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,71,his.registry = registry;
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,83,"ew Node(Token.EQUALS, expr.root), expr.sourceName, expr.registry);"
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,78,"new Node(Token.EQUALS, expr.root), expr.sourceName);"
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,104,ublic JSType evaluate(StaticScope<JSType> scope) {
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,99,"public JSType evaluate(StaticScope<JSType> scope, JSTypeRegistry registry) {"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,856,@Override
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,857,public String toDebugHashCodeString() {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,858,if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,859,return super.toDebugHashCodeString();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,862,StringBuilder b = new StringBuilder(32);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,863,"b.append(""function ("");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,864,int paramNum = (call == null || call.parameters == null) ?
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,865,0 : call.parameters.getChildCount();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,866,boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,867,if (hasKnownTypeOfThis) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,868,"b.append(""this:"");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,869,b.append(getDebugHashCodeStringOf(typeOfThis));
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,871,if (paramNum > 0) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,872,if (hasKnownTypeOfThis) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,873,"b.append("", "");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,875,Node p = call.parameters.getFirstChild();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,876,b.append(getDebugHashCodeStringOf(p.getJSType()));
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,877,p = p.getNext();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,878,while (p != null) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,879,"b.append("", "");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,880,b.append(getDebugHashCodeStringOf(p.getJSType()));
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,881,p = p.getNext();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,884,"b.append("")"");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,885,if (call != null && call.returnType != null) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,886,"b.append("": "");"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,887,b.append(getDebugHashCodeStringOf(call.returnType));
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,889,return b.toString();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,892,private String getDebugHashCodeStringOf(JSType type) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,893,if (type == this) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,894,"return ""me"";"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,895,} else {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,896,return type.toDebugHashCodeString();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,44,mport com.google.common.base.Preconditions;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,906,* A hash code function for diagnosing complicated issues
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,907,* around type-identity.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,909,public String toDebugHashCodeString() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,910,"return ""{"" + this.hashCode() + ""}"";"
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,296,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,297,public String toDebugHashCodeString() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,298,"return ""{proxy:"" + referencedType.toDebugHashCodeString() + ""}"";"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,44,import com.google.common.base.Joiner;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,47,import com.google.common.collect.Lists;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,50,import java.util.List;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,507,@Override
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,508,public String toDebugHashCodeString() {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,509,List<String> hashCodes = Lists.newArrayList();
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,510,for (JSType a : alternates) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,511,hashCodes.add(a.toDebugHashCodeString());
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,513,"return ""{("" + Joiner.on("","").join(hashCodes) + "")}"";"
False,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,408,"ssertTypeEquals(expected, new JSTypeExpression(actual, """", registry));"
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,408,"assertTypeEquals(expected, new JSTypeExpression(actual, """"));"
False,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,423,eturn n.evaluate(null);
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,423,"return n.evaluate(null, registry);"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,55,ew DefaultCodingConvention()).createInitialScope(null);
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,55,new DefaultCodingConvention()).createInitialScope(
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,56,new Node(Token.BLOCK));
False,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,70,ublic void testBasicDefine() {
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,70,public void testBasicDefine1() {
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,74,public void testBasicDefine2() {
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,75,"test(""/** @define {string} */ var DEF = 'a'"", ""var DEF=\""a\"""");"
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,78,public void testBasicDefine3() {
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,79,"test(""/** @define {number} */ var DEF = 0"", ""var DEF=0"");"
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,82,public void testDefineBadType() {
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,83,"test(""/** @define {Object} */ var DEF = {}"","
True,test/com/google/javascript/jscomp/ProcessDefinesTest.java,test/com/google/javascript/jscomp/ProcessDefinesTest.java,84,"null, ProcessDefines.INVALID_DEFINE_TYPE_ERROR);"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,42,ew DefaultCodingConvention()).createInitialScope(null);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,42,new DefaultCodingConvention()).createInitialScope(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,43,new Node(Token.BLOCK));
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,989,onfig config = new Config(
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,990,"egistry, ParserRunner.getAnnotationNames(), true);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,989,"Config config = new Config(ParserRunner.getAnnotationNames(), true);"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1172,ublic void testParseDefineErrors6() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1173,"arse(""@define {String}*/"", ""@define tag only permits literal types"");"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1667,ublic void testDocumentationThrows() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1668,SDocInfo jsdoc
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1669," parse(""@throws {number} This is a description.*/"", true);"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1671,"ssertEquals(""This is a description."","
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1672,"sdoc.getDescriptionForThrownType(NUMBER_TYPE, null));"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2306,"onfig config = new Config(registry, extraAnnotations, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2294,"Config config = new Config(extraAnnotations, true);"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2345,onfig config = new Config(
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2346,"egistry, extraAnnotations, parseDocumentation);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2333,"Config config = new Config(extraAnnotations, parseDocumentation);"
False,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,134,"ew Node(Token.BANG, Node.newString(""Number"")), """", registry));"
True,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,134,"new Node(Token.BANG, Node.newString(""Number"")), """"));"
False,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,424,"eturn new JSTypeExpression(Node.newString(s), """", registry);"
True,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,424,"return new JSTypeExpression(Node.newString(s), """");"
False,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,429,eturn n.evaluate(null);
True,test/com/google/javascript/rhino/JSDocInfoTest.java,test/com/google/javascript/rhino/JSDocInfoTest.java,429,"return n.evaluate(null, registry);"

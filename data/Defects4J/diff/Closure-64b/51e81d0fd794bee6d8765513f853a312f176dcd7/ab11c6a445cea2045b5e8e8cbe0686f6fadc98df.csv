is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,58,"* Whether the compiler should assume that a function's ""this"" value"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,59,"* never needs coercion (for example in non-strict ""null"" or ""undefined"" will"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,60,"* be coerced to the global ""this"" and primitives to objects)."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,62,private boolean assumeStrictThis;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,726,assumeStrictThis = false;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1228,* @return Whether assumeStrictThis is set.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1230,public boolean isAssumeStrictThis() {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1231,return assumeStrictThis;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1235,"* If true, enables enables additional optimizations."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1237,public void setAssumeStrictThis(boolean enable) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1238,this.assumeStrictThis = enable;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1046,rotected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1046,protected HotSwapCompilerPass createInternal(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1047,final AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1600,nableBlockInlining);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1601,"enableBlockInlining,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1602,options.isAssumeStrictThis());
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,39,"// A string to use to represent ""this"".  Anything that is not a valid"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,40,"// identifier can be used, so we use ""this""."
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,41,"static final String THIS_MARKER = ""this"";"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,52,"tatic Node inject(Node node, Node parent,"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,56,"static Node inject(AbstractCompiler compiler, Node node, Node parent,"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,69,return replacement;
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,71,} else if (node.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,72,Node replacementTemplate = replacements.get(THIS_MARKER);
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,73,Preconditions.checkNotNull(replacementTemplate);
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,74,if (replacementTemplate.getType() != Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,75,"// The name may need to be replaced more than once,"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,76,// so we need to clone the node.
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,77,Node replacement = replacementTemplate.cloneTree();
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,78,"parent.replaceChild(node, replacement);"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,80,// Remove the value.  This isn't required but it ensures that we won't
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,81,// inject side-effects multiple times as it will trigger the null
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,82,// check above if we do.
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,83,"if (NodeUtil.mayHaveSideEffects(replacementTemplate, compiler)) {"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,84,replacements.remove(THIS_MARKER);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,72," = inject(c, node, replacements);"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94,"c = inject(compiler, c, node, replacements);"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,89,f (callNode.getFirstChild().getType() != Token.NAME) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,90,f (NodeUtil.isFunctionObjectCall(callNode)) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,91,/ TODO(johnlenz): Support replace this with a value.
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,92,reconditions.checkNotNull(cArg);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,93,reconditions.checkState(cArg.getType() == Token.THIS);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94,Arg = cArg.getNext();
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,95, else {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,96,reconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,111,if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,112,"argMap.put(THIS_MARKER, cArg);"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,113,cArg = cArg.getNext();
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,114,} else {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,115,// 'apply' isn't supported yet.
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,116,Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,117,"argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,403,} else if (n.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,404,parametersReferenced.add(THIS_MARKER);
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,45,private final boolean assumeStrictThis;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,54,oolean allowDecomposition) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,55,"boolean allowDecomposition,"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,56,boolean assumeStrictThis) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,62,this.assumeStrictThis = assumeStrictThis;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,200,ode thisValue = callNode.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,201,f (thisValue == null || thisValue.getType() != Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,202,eturn false;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,203,if (!assumeStrictThis) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,204,Node thisValue = callNode.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,205,if (thisValue == null || thisValue.getType() != Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,206,return false;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,256,"afeReturnNode, null, argMap);"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,261,"null, safeReturnNode, null, argMap);"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,634,reconditions.checkNotNull(cArg);
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,635,reconditions.checkState(cArg.getType() == Token.THIS);
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,639,if (cArg == null || cArg.getType() != Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,640,return CanInlineResult.NO;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,18,import static com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER;
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,29,mport java.util.Set;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,32,import java.util.Set;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,180,"* Create a unique ""this"" name."
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,182,private String getUniqueThisName() {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,183,"return ""JSCompiler_inline_this_"" + safeNameIdSupplier.get();"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,194,"nTemplateRoot, null, argMap);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,203,"compiler, fnTemplateRoot, null, argMap);"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,213,ode newValue = entry.getValue().cloneTree();
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,214,"ode newNode = NodeUtil.newVarNode(name, newValue)"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,215,copyInformationFromForTree(newValue);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,216,"ewVars.add(0, newNode);"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,217,/ Remove the parameter from the list to replace.
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,218,ewArgMap.remove(name);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,222,if (name.equals(THIS_MARKER)) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,223,boolean referencesThis = NodeUtil.referencesThis(fnTemplateRoot);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,224,"// Update ""this"", this is only necessary if ""this"" is referenced"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,225,"// and the value of ""this"" is not Token.THIS, or the value of ""this"""
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,226,// has side effects.
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,228,Node value = entry.getValue();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,229,if (value.getType() != Token.THIS
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,230,&& (referencesThis
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,231,"|| NodeUtil.mayHaveSideEffects(value, compiler))) {"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,232,String newName = getUniqueThisName();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,233,Node newValue = entry.getValue().cloneTree();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,234,"Node newNode = NodeUtil.newVarNode(newName, newValue)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,235,.copyInformationFromForTree(newValue);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,236,"newVars.add(0, newNode);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,237,// Remove the parameter from the list to replace.
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,238,"newArgMap.put(THIS_MARKER,"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,239,"Node.newString(Token.NAME, newName)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,240,.copyInformationFromForTree(newValue));
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,242,} else {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,243,Node newValue = entry.getValue().cloneTree();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,244,"Node newNode = NodeUtil.newVarNode(name, newValue)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,245,.copyInformationFromForTree(newValue);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,246,"newVars.add(0, newNode);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,247,// Remove the parameter from the list to replace.
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,248,newArgMap.remove(name);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,224,"nTemplateRoot, null, newArgMap);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,255,"compiler, fnTemplateRoot, null, newArgMap);"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,79,oolean blockFunctionInliningEnabled) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,79,"boolean blockFunctionInliningEnabled,"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,80,boolean assumeStrictThis) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,88,"his.injector = new FunctionInjector(compiler, safeNameIdSupplier, true);"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,89,this.injector = new FunctionInjector(
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,90,"compiler, safeNameIdSupplier, true, assumeStrictThis);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,39,private boolean assumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,44,"ompiler, compiler.getUniqueNameIdSupplier(), true);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,45,"compiler, compiler.getUniqueNameIdSupplier(), true, assumeStrictThis);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,328,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,335,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,337,"helperCanInlineReferenceToFunction(CanInlineResult.YES,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,338,"""function foo(a){return true;}; "" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,339,"""function x() { foo.call(null, goo()); }"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,340,"""foo"", INLINE_BLOCK);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,351,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,357,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,358,"helperCanInlineReferenceToFunction(CanInlineResult.YES,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,359,"""function foo(a){return true;}; "" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,360,"""function x() { foo.call(bar, goo()); }"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,361,"""foo"", INLINE_BLOCK);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,372,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,378,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,379,"helperCanInlineReferenceToFunction(CanInlineResult.YES,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,380,"""function foo(a){return true;}; "" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,381,"""function x() { foo.call(new bar(), goo()); }"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,382,"""foo"", INLINE_BLOCK);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,394,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,401,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,402,// Handle the case of a missing 'this' value in a call.
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,403,"helperCanInlineReferenceToFunction(CanInlineResult.YES,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,404,"""function foo(){return true;}; "" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,405,"""function x() { foo.call(); }"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,406,"""foo"", INLINE_BLOCK);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1297,oolean allowDecomposition
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1329,boolean allowDecomposition) {
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1301,"ompiler, compiler.getUniqueNameIdSupplier(), allowDecomposition);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1332,"compiler, compiler.getUniqueNameIdSupplier(), allowDecomposition,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1333,assumeStrictThis);
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1353,"ompiler, compiler.getUniqueNameIdSupplier(), decompose);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1385,"compiler, compiler.getUniqueNameIdSupplier(), decompose,"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1386,assumeStrictThis);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,30,boolean assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,43,assumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,52,llowBlockInlining);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,54,"allowBlockInlining,"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,55,assumeStrictThis);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1632,public void testInlineWithThis1() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1633,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1634,"// If no ""this"" is provided it might need to be coerced to the global"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1635,"// ""this""."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1636,"testSame(""function f(){} f.call();"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1637,"testSame(""function f(){this} f.call();"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1639,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1640,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1641,"test(""function f(){} f.call();"", ""{}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1642,"test(""function f(){this} f.call();"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1643,"""{void 0;}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1646,public void testInlineWithThis2() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1647,"// ""this"" can always be replaced with ""this"""
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1648,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1649,"test(""function f(){} f.call(this);"", ""void 0"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1651,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1652,"test(""function f(){} f.call(this);"", ""void 0"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1655,public void testInlineWithThis3() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1656,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1657,"// If no ""this"" is provided it might need to be coerced to the global"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1658,"// ""this""."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1659,"testSame(""function f(){} f.call([]);"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1661,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1662,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1663,"test(""function f(){} f.call([]);"", ""{}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1666,public void testInlineWithThis4() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1667,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1668,"// If no ""this"" is provided it might need to be coerced to the global"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1669,"// ""this""."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1670,"testSame(""function f(){} f.call(new g);"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1672,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1673,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1674,"test(""function f(){} f.call(new g);"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1675,"""{var JSCompiler_inline_this_0=new g}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1678,public void testInlineWithThis5() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1679,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1680,"// If no ""this"" is provided it might need to be coerced to the global"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1681,"// ""this""."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1682,"testSame(""function f(){} f.call(g());"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1684,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1685,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1686,"test(""function f(){} f.call(g());"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1687,"""{var JSCompiler_inline_this_0=g()}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1690,public void testInlineWithThis6() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1691,assumeStrictThis = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1692,"// If no ""this"" is provided it might need to be coerced to the global"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1693,"// ""this""."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1694,"testSame(""function f(){this} f.call(new g);"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1696,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1697,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1698,"test(""function f(){this} f.call(new g);"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1699,"""{var JSCompiler_inline_this_0=new g;JSCompiler_inline_this_0}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1702,public void testInlineWithThis7() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1703,assumeStrictThis = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1704,"// In strict mode, ""this"" is never coerced so we can use the provided value."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1705,"test(""function f(a){a=1;this} f.call();"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1706,"""{var a$$inline_1=void 0; a$$inline_1=1; void 0;}"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1707,"test(""function f(a){a=1;this} f.call(x, x);"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1708,"""{var a$$inline_1=x; a$$inline_1=1; x;}"");"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,42,"ompiler.getUniqueNameIdSupplier(), true, false, true);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,42,"compiler.getUniqueNameIdSupplier(), true, false, true, true);"

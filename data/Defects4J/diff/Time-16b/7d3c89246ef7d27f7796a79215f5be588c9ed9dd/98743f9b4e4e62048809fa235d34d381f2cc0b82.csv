is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/tz/TestAll.java,JodaTime/src/test/org/joda/time/tz/TestAll.java,39,suite.addTest(TestCompiler.suite());
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,20,import java.io.IOException;
False,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,161,tatic DateTimeZone buildAmericaLosAngeles() {
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,165,static DateTimeZoneBuilder buildAmericaLosAngelesBuilder() {
False,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,183,"addRecurringSavings(""PDT"", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000)"
False,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,184,"toDateTimeZone(""America/Los_Angeles"");"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,187,".addRecurringSavings(""PDT"", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000);"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,190,static DateTimeZone buildAmericaLosAngeles() {
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,191,"return buildAmericaLosAngelesBuilder().toDateTimeZone(""America/Los_Angeles"");"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,212,"assertEquals(false, tz.isFixed());"
False,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,212,"rivate void testForwardTransitions(DateTimeZone tz, String[][] data) {"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,220,"static void testForwardTransitions(DateTimeZone tz, String[][] data) {"
False,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,250,"rivate void testReverseTransitions(DateTimeZone tz, String[][] data) {"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,258,"static void testReverseTransitions(DateTimeZone tz, String[][] data) {"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,277,public void testSerialization() throws IOException {
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,278,DateTimeZone tz = testSerialization
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,279,"(buildAmericaLosAngelesBuilder(), ""America/Los_Angeles"");"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,281,"assertEquals(false, tz.isFixed());"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,282,"testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,283,"testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,286,"static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,287,throws IOException
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,289,ByteArrayOutputStream out = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,290,builder.writeTo(out);
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,291,ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,292,"DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,293,"assertEquals(id, tz.getID());"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,294,return tz;
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,297,public void testFixed() throws IOException {
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,298,DateTimeZoneBuilder builder = new DateTimeZoneBuilder()
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,299,.setStandardOffset(3600000)
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,300,".setFixedSavings(""LMT"", 0);"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,301,"DateTimeZone tz = builder.toDateTimeZone(""Test"");"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,303,for (int i=0; i<2; i++) {
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,304,"assertEquals(""Test"", tz.getID());"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,305,"assertEquals(true, tz.isFixed());"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,306,"assertEquals(3600000, tz.getOffset(0));"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,307,"assertEquals(3600000, tz.getStandardOffset(0));"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,308,"assertEquals(0, tz.nextTransition(0));"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,309,"assertEquals(0, tz.previousTransition(0));"
True,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,JodaTime/src/test/org/joda/time/tz/TestBuilder.java,311,"tz = testSerialization(builder, ""Test"");"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,16,package org.joda.time.tz;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,18,import java.io.File;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,19,import java.io.FileOutputStream;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,20,import java.io.InputStream;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,21,import java.io.IOException;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,22,import java.io.StringBufferInputStream;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,24,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,25,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,27,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,30,* Test cases for ZoneInfoCompiler.
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,32,* @author Brian S O'Neill
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,34,public class TestCompiler extends TestCase {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,35,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,36,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,39,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,40,return new TestSuite(TestCompiler.class);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,43,static final String AMERICA_LOS_ANGELES_FILE =
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,44,"""# Rules for building just America/Los_Angeles time zone.\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,45,"""\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,46,"""Rule    US  1918    1919    -   Mar lastSun 2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,47,"""Rule    US  1918    1919    -   Oct lastSun 2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,48,"""Rule    US  1942    only    -   Feb 9   2:00    1:00    W # War\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,49,"""Rule    US  1945    only    -   Aug 14  23:00u  1:00    P # Peace\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,50,"""Rule    US  1945    only    -   Sep 30  2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,51,"""Rule    US  1967    max -   Oct lastSun 2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,52,"""Rule    US  1967    1973    -   Apr lastSun 2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,53,"""Rule    US  1974    only    -   Jan 6   2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,54,"""Rule    US  1975    only    -   Feb 23  2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,55,"""Rule    US  1976    1986    -   Apr lastSun 2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,56,"""Rule    US  1987    max -   Apr Sun>=1  2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,57,"""\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,58,"""Rule    CA  1948    only    -   Mar 14  2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,59,"""Rule    CA  1949    only    -   Jan  1  2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,60,"""Rule    CA  1950    1966    -   Apr lastSun 2:00    1:00    D\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,61,"""Rule    CA  1950    1961    -   Sep lastSun 2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,62,"""Rule    CA  1962    1966    -   Oct lastSun 2:00    0   S\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,63,"""\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,64,"""Zone America/Los_Angeles -7:52:58 - LMT 1883 Nov 18 12:00\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,65,"""            -8:00   US  P%sT    1946\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,66,"""            -8:00   CA  P%sT    1967\n"" +"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,67,"""            -8:00   US  P%sT"";"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,69,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,71,public TestCompiler(String name) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,72,super(name);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,75,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,76,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,77,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,80,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,81,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,84,public void testCompile() throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,85,Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,86,"DateTimeZone tz = provider.getZone(""America/Los_Angeles"");"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,88,"assertEquals(""America/Los_Angeles"", tz.getID());"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,89,"assertEquals(false, tz.isFixed());"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,90,"TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,91,"TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,94,private Provider compileAndLoad(String data) throws Exception {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,95,File tempDir = createDataFile(data);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,96,File destDir = makeTempDir();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,98,ZoneInfoCompiler.main(new String[] {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,99,"""-src"", tempDir.getAbsolutePath(),"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,100,"""-dst"", destDir.getAbsolutePath(),"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,101,"""tzdata"""
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,104,// Mark all files to be deleted on exit.
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,105,deleteOnExit(destDir);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,107,return new ZoneInfoProvider(destDir);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,110,private File createDataFile(String data) throws IOException {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,111,File tempDir = makeTempDir();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,113,"File tempFile = new File(tempDir, ""tzdata"");"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,114,tempFile.deleteOnExit();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,116,InputStream in = new StringBufferInputStream(data);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,118,FileOutputStream out = new FileOutputStream(tempFile);
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,119,byte[] buf = new byte[1000];
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,120,int amt;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,121,while ((amt = in.read(buf)) > 0) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,122,"out.write(buf, 0, amt);"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,124,out.close();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,125,in.close();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,127,return tempDir;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,130,private File makeTempDir() {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,131,"File tempDir = new File(System.getProperty(""java.io.tmpdir""));"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,132,"tempDir = new File(tempDir, ""joda-test-"" + (new java.util.Random().nextInt() & 0xffffff));"
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,133,tempDir.mkdirs();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,134,tempDir.deleteOnExit();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,135,return tempDir;
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,138,private void deleteOnExit(File tempFile) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,139,tempFile.deleteOnExit();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,140,if (tempFile.isDirectory()) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,141,File[] files = tempFile.listFiles();
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,142,for (int i=0; i<files.length; i++) {
True,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,JodaTime/src/test/org/joda/time/tz/TestCompiler.java,143,deleteOnExit(files[i]);

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,25,import java.util.TimeZone;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,672,* Get the date time as a <code>java.util.Date</code>.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,673,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,674,* The <code>Date</code> object created has exactly the same fields as this
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,675,"* date-time, except when the time would be invalid due to a daylight savings"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,676,"* gap. In that case, the time will be set to the earliest valid time after the gap."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,677,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,678,"* In the case of a daylight savings overlap, the earlier instant is selected."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,679,* <p>
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,680,* Converting to a JDK Date is full of complications as the JDK Date constructor
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,681,* doesn't behave as you might expect around DST transitions. This method works
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,682,* by taking a first guess and then adjusting. This also handles the situation
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,683,* where the JDK time zone data differs from the Joda-Time time zone data.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,685,"* @return a Date initialised with this date-time, never null"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,687,public Date toDate() {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,688,int dom = getDayOfMonth();
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,689,"Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,690,"getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,691,date.setTime(date.getTime() + getMillisOfSecond());
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,692,LocalDateTime check = LocalDateTime.fromDateFields(date);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,693,if (check.isBefore(this)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,694,// DST gap
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,695,// move forward in units of one minute until equal/after
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,696,while (check.isBefore(this)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,697,date.setTime(date.getTime() + 60000);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,698,check = LocalDateTime.fromDateFields(date);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,700,// move back in units of one second until date wrong
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,701,while (check.isBefore(this) == false) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,702,date.setTime(date.getTime() - 1000);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,703,check = LocalDateTime.fromDateFields(date);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,705,date.setTime(date.getTime() + 1000);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,706,} else if (check.equals(this)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,707,// check for DST overlap
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,708,Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,709,check = LocalDateTime.fromDateFields(earlier);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,710,if (check.equals(this)) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,711,date = earlier;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,714,return date;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,23,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,24,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,25,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,27,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,28,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,821,public void testToDate_summer() {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,822,"LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,824,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,825,"check(base, 2005, 7, 9, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,827,GregorianCalendar gcal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,828,gcal.clear();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,829,"gcal.set(Calendar.YEAR, 2005);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,830,"gcal.set(Calendar.MONTH, Calendar.JULY);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,831,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,832,"gcal.set(Calendar.HOUR_OF_DAY, 10);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,833,"gcal.set(Calendar.MINUTE, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,834,"gcal.set(Calendar.SECOND, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,835,"gcal.set(Calendar.MILLISECOND, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,836,"assertEquals(gcal.getTime(), test);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,839,public void testToDate_winter() {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,840,"LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,842,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,843,"check(base, 2005, 1, 9, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,845,GregorianCalendar gcal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,846,gcal.clear();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,847,"gcal.set(Calendar.YEAR, 2005);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,848,"gcal.set(Calendar.MONTH, Calendar.JANUARY);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,849,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,850,"gcal.set(Calendar.HOUR_OF_DAY, 10);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,851,"gcal.set(Calendar.MINUTE, 20);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,852,"gcal.set(Calendar.SECOND, 30);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,853,"gcal.set(Calendar.MILLISECOND, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,854,"assertEquals(gcal.getTime(), test);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,857,public void testToDate_springDST() {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,858,"LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,860,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,861,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,862,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,863,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,864,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,865,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,866,"check(base, 2007, 4, 2, 0, 20, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,867,"assertEquals(""Mon Apr 02 01:00:00 GMT+02:00 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,868,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,869,TimeZone.setDefault(currentZone);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,873,public void testToDate_springDST_2Hour40Savings() {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,874,"LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,876,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,877,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,878,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,879,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,880,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,881,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,882,"check(base, 2007, 4, 2, 0, 20, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,883,"assertEquals(""Mon Apr 02 02:40:00 GMT+03:40 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,884,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,885,TimeZone.setDefault(currentZone);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,889,public void testToDate_autumnDST() {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,890,"LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,892,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,893,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,894,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,895,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,896,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,897,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,898,"check(base, 2007, 10, 2, 0, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,899,"assertEquals(""Tue Oct 02 00:20:30 GMT+02:00 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,900,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,901,TimeZone.setDefault(currentZone);

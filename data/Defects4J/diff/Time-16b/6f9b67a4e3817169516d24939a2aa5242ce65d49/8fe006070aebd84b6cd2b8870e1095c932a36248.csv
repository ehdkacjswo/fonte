is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,137," Adds this period to the given instant, returning a new Instant."
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,137,"* Adds this period to the given instant, returning a new DateTime."
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,144, @return instant with the original value plus this period times scalar
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,144,* @return datetime with the original value plus this period times scalar
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,148,"nstant addTo(ReadableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,148,"DateTime addTo(ReadableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,59,import org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,61,mport org.joda.time.Instant;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,195," instant (if present), returning a new Instant."
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,195,"* instant (if present), returning a new DateTime."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,202, @return instant with the original value plus this period times scalar
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,202,* @return datetime with the original value plus this period times scalar
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,205,"ublic Instant addTo(ReadableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,205,"public DateTime addTo(ReadableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,208,"eturn new Instant(addTo(instantMillis, scalar, chrono));"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,208,"return new DateTime(addTo(instantMillis, scalar, chrono), chrono);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,"nstant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,"DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,350,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,364,"nstant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,365,"DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,367,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,380,"nstant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,382,"DateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,384,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,388,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,389,"expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,390,"expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,391,"expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,392,"expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,393,"expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,394,"expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,395,"expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,396,"expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,398,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,399,"DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,400,"assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,401,"assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,404,public void testAddToRI5() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,396,"nstant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,416,"DateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,418,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,"nstant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,"DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,349,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,363,"nstant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,364,"DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,366,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,379,"nstant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,381,"DateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,383,"assertEquals(ISOChronology.getInstance(), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,387,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,388,"expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,389,"expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,390,"expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,391,"expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,392,"expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,393,"expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,394,"expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,395,"expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,397,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,398,"DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,399,"assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,400,"assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,403,public void testAddToRI5() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,395,"nstant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,415,"DateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,417,"assertEquals(ISOChronology.getInstance(), added.getChronology());"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,214," @return the chronology, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,214,"* @return the chronology, never null"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,228," will be returned. Otherwise, the chronology is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,228,"* will be returned. Otherwise, the zone specified is returned."
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,231," @return the time zone, or default if null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,231,"* @return the time zone, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,242,* Gets the period type handling null.
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,243,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,244,"* If the zone is <code>null</code>, {@link PeriodType#getAllType()}"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,245,"* will be returned. Otherwise, the type specified is returned."
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,247,"* @param type  the time zone to use, null means the All type"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,248,"* @return the type to use, never null"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,250,public static final PeriodType getPeriodType(PeriodType type) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,251,if (type == null) {
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,252,return PeriodType.getAllType();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,254,return type;
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,58,mport org.joda.time.base.*;
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,58,import org.joda.time.base.BasePeriod;
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,59,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,72,xtends AbstractPeriod
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,73,extends BasePeriod
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,267," Validates a period type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,268, checking the type is suitable for this instance.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,270," @param type  the type to check, may be null"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,271," @return the validated type to use, not null"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,272, @throws IllegalArgumentException if the period type is not precise
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,274,rotected PeriodType checkPeriodType(PeriodType type) {
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,275,f (type == null) {
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,276,eturn PeriodType.getAllType();
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,278,eturn type;
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,289,uper.setPeriod(period);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,274,if (period == null) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,275,setPeriod(0L);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,276,} else {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,277,setPeriod(
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,278,"period.getYears(), period.getMonths(),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,279,"period.getWeeks(), period.getDays(),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,280,"period.getHours(), period.getMinutes(),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,281,"period.getSeconds(), period.getMillis());"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,318,uper.setPeriod(interval);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,311,if (interval == null) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,312,setPeriod(0L);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,313,} else {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,314,"setPeriod(interval.getStartMillis(), interval.getEndMillis());"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,343,uper.setPeriod(duration);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,340,long durationMillis = DateTimeUtils.getDurationMillis(duration);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,341,setPeriod(durationMillis);
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,370,uper.add(period);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,368,if (period != null) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,369,setPeriod(
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,370,"FieldUtils.safeAdd(getYears(), period.getYears()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,371,"FieldUtils.safeAdd(getMonths(), period.getMonths()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,372,"FieldUtils.safeAdd(getWeeks(), period.getWeeks()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,373,"FieldUtils.safeAdd(getDays(), period.getDays()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,374,"FieldUtils.safeAdd(getHours(), period.getHours()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,375,"FieldUtils.safeAdd(getMinutes(), period.getMinutes()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,376,"FieldUtils.safeAdd(getSeconds(), period.getSeconds()),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,377,"FieldUtils.safeAdd(getMillis(), period.getMillis())"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,389,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,390,"uper.add(years, months, weeks, days, hours, minutes, seconds, millis);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,394, Adds an interval to this one by converting it to a period using the same
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,395, period type and then adding each field in turn.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,398,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,399,setPeriod(
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,400,"FieldUtils.safeAdd(getYears(), years),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,401,"FieldUtils.safeAdd(getMonths(), months),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,402,"FieldUtils.safeAdd(getWeeks(), weeks),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,403,"FieldUtils.safeAdd(getDays(), days),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,404,"FieldUtils.safeAdd(getHours(), hours),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,405,"FieldUtils.safeAdd(getMinutes(), minutes),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,406,"FieldUtils.safeAdd(getSeconds(), seconds),"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,407,"FieldUtils.safeAdd(getMillis(), millis)"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,412,* Adds an interval to this one by dividing the interval into
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,413,* fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,401,uper.add(interval);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,419,if (interval != null) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,420,add(interval.toPeriod(getPeriodType()));
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,406, fields and then adding each field in turn.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,407, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,408," When dividing the duration, only precise fields in the period type will be used."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,409," For large durations, all the remaining duration will be added to the largest"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,410, available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,426,* fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,416,uper.add(duration);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,432,if (duration != null) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,433,"add(new Period(duration.getMillis(), getPeriodType()));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,420, Adds a duration to this one by dividing the duration into
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,421, fields and then adding each field in turn.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,422, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,423," When dividing the duration, only precise fields in the period type will be used."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,424," For large durations, all the remaining duration will be added to the largest"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,425, available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,438,* Adds a millisecond duration to this one by dividing the duration into
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,439,* fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,427, @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,441,"* @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,431,uper.add(duration);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,445,"add(new Period(duration, getPeriodType()));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,442,uper.normalize();
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,456,setPeriod(toDurationMillis());
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,464,uper.addYears(years);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,478,if (years != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,479,"setYears(FieldUtils.safeAdd(getYears(), years));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,486,uper.addMonths(months);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,502,if (months != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,503,"setMonths(FieldUtils.safeAdd(getMonths(), months));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,508,uper.addWeeks(weeks);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,526,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,527,"setWeeks(FieldUtils.safeAdd(getWeeks(), weeks));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,530,uper.addDays(days);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,550,if (days != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,551,"setDays(FieldUtils.safeAdd(getDays(), days));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,552,uper.addHours(hours);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,574,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,575,"setHours(FieldUtils.safeAdd(getHours(), hours));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,574,uper.addMinutes(minutes);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,598,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,599,"setMinutes(FieldUtils.safeAdd(getMinutes(), minutes));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,596,uper.addSeconds(seconds);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,622,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,623,"setSeconds(FieldUtils.safeAdd(getSeconds(), seconds));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,618,uper.addMillis(millis);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,646,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,647,"setMillis(FieldUtils.safeAdd(getMillis(), millis));"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,58,mport org.joda.time.base.*;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,58,import org.joda.time.base.BasePeriod;
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,90,ublic class Period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,91,xtends AbstractPeriod
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,90,public final class Period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,91,extends BasePeriod
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,270," Validates a period type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,271, checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,270,* Get this period as an immutable <code>Period</code> object
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,271,* by returning <code>this</code>.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,273," @param type  the type to check, may be null"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,274," @return the validated type to use, not null"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,275, @throws IllegalArgumentException if the period type is not precise
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,273,* @return <code>this</code>
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,277,rotected final PeriodType checkPeriodType(PeriodType type) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,278,f (type == null) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,279,eturn PeriodType.getAllType();
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,281,eturn type;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,275,public Period toPeriod() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,276,return this;
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,293,ublic final Period withPeriodType(PeriodType type) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,288,public Period withPeriodType(PeriodType type) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,312,ublic final Period withPeriodTypeRetainDuration(PeriodType type) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,307,public Period withPeriodTypeRetainDuration(PeriodType type) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,329,ublic final Period withFieldsNormalized() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,324,public Period withFieldsNormalized() {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,335," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,337,rotected final void setPeriod(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,341," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,343,"rotected final void setPeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,344,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,348," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,350,"rotected final void setPeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,354," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,356,rotected final void setPeriod(long duration) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,360," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,362,rotected final void setYears(int years) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,366," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,368,rotected final void setMonths(int months) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,372," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,374,rotected final void setWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,378," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,380,rotected final void setDays(int days) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,384," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,386,rotected final void setHours(int hours) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,390," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,392,rotected final void setMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,396," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,398,rotected final void setSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,402," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,404,rotected final void setMillis(int millis) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,61,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,67,mport org.joda.time.ReadWritablePeriod;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,68,mport org.joda.time.ReadableDuration;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,70,mport org.joda.time.ReadableInterval;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,72,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,73,mport org.joda.time.convert.PeriodConverter;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,78, AbstractDuration provides the common behaviour for duration classes.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,72,* AbstractPeriod provides the common behaviour for period classes.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,81, {@link ReadableDuration} interface should be used when different
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,82, kinds of durations are to be referenced.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,75,* {@link ReadablePeriod} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,76,* kinds of periods are to be referenced.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,84, AbstractDuration subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,78,* AbstractPeriod subclasses may be mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,93,** Serialization version */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,94,rivate static final long serialVersionUID = -2110953284060001145L;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,95,** Millis cache is currently unknown */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,96,rivate static final int STATE_UNKNOWN = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,97,** Millis cache is not calculable */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,98,rivate static final int STATE_NOT_CALCULABLE = 1;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,99,** Millis cache has been calculated and is valid */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,100,rivate static final int STATE_CALCULATED = 2;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,102,** The period type that allocates the duration to fields */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,103,rivate final PeriodType iType;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,104,** The object state */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,105,rivate transient int iState;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,106,"** The duration, if known */"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,107,rivate transient long iDuration;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,108,** Value for years */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,109,rivate int iYears;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,110,** Value for months */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,111,rivate int iMonths;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,112,** Value for weeks */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,113,rivate int iWeeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,114,** Value for days */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,115,rivate int iDays;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,116,** Value for hours */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,117,rivate int iHours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,118,** Value for minutes */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,119,rivate int iMinutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,120,** Value for seconds */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,121,rivate int iSeconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,122,** Value for millis */
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,123,rivate int iMillis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,126, Creates a period from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,127, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,128, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,129, the period type.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,131," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,132, @param type  which set of fields this period supports
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,133, @throws IllegalArgumentException if period type is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,135,"rotected AbstractPeriod(long duration, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,136,uper();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,137,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,138,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,139,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,140,"etPeriod(type, duration);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,144, Creates a period from a set of field values.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,146," @param years  amount of years in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,147," @param months  amount of months in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,148," @param weeks  amount of weeks in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,149," @param days  amount of days in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,150," @param hours  amount of hours in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,151," @param minutes  amount of minutes in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,152," @param seconds  amount of seconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,153," @param millis  amount of milliseconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,154, @param type  which set of fields this period supports
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,155, @throws IllegalArgumentException if period type is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,156, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,158,"rotected AbstractPeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,159,"nt hours, int minutes, int seconds, int millis,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,160,eriodType type) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,161,uper();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,162,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,163,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,164,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,165,"etPeriod(type, years, months, weeks, days, hours, minutes, seconds, millis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,169, Creates a period from the given interval endpoints.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,171," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,172," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,173, @param type  which set of fields this period supports
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,174, @throws IllegalArgumentException if period type is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,176,"rotected AbstractPeriod(long startInstant, long endInstant, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,177,uper();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,178,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,179,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,180,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,181,"etPeriod(type, startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,185, Creates a period from the given interval endpoints.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,187," @param startInstant  interval start, null means now"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,188," @param endInstant  interval end, null means now"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,189, @param type  which set of fields this period supports
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,190, @throws IllegalArgumentException if period type is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,192,rotected AbstractPeriod(
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,193,"eadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,194,uper();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,195,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,196,f (startInstant == null && endInstant == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,197,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,198, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,199,ong start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,200,ong end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,201,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,202,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,203,"etPeriod(type, start, end);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,208, Creates a new period based on another using the {@link ConverterManager}.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,210, @param period  the period to convert
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,211," @param type  which set of fields this period supports, null means use type from object"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,212, @throws IllegalArgumentException if period is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,213, @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,88,* Constructor.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,215,"rotected AbstractPeriod(Object period, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,90,protected AbstractPeriod() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,217,eriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,218,"ype = (type == null ? converter.getPeriodType(period, false) : type);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,219,ype = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,220,Type = type;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,221,f (this instanceof ReadWritablePeriod) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,222,"onverter.setInto((ReadWritablePeriod) this, period);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,223, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,224,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,225,"etPeriod(type, new MutablePeriod(period, type));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,231," Validates a period type, converting nulls to a default value and"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,232, checking the type is suitable for this instance.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,234," @param type  the type to check, may be null"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,235," @return the validated type to use, not null"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,236, @throws IllegalArgumentException if the period type is invalid
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,238,rotected abstract PeriodType checkPeriodType(PeriodType type);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,242, Returns the object which defines which fields this period supports.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,244,ublic final PeriodType getPeriodType() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,245,eturn iType;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,249," Is this period a precise length of time, or descriptive."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,250, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,251," A typical precise period could include millis, seconds, minutes or hours,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,252," but days, weeks, months and years usually vary in length, resulting in"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,253, an imprecise period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,254, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,255, An imprecise period can be made precise by pairing it with a
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,256, date in a {@link ReadableInterval}.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,258, @return true if the period is precise
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,260,ublic final boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,261,nt state = iState;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,262,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,263,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,265,eturn (state == STATE_CALCULATED);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,282,"ublic final long addTo(long instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,108,"public long addTo(long instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,299,"ublic final long addTo(long instant, int scalar, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,125,"public long addTo(long instant, int scalar, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,304,eriodType type = iType;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,130,PeriodType type = getPeriodType();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,310,"alue = scaleValue(iYears, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,136,"value = scaleValue(getYears(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,314,"alue = scaleValue(iMonths, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,140,"value = scaleValue(getMonths(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,318,"alue = scaleValue(iWeeks, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,144,"value = scaleValue(getWeeks(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,322,"alue = scaleValue(iDays, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,148,"value = scaleValue(getDays(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,326,"alue = scaleValue(iHours, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,152,"value = scaleValue(getHours(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,330,"alue = scaleValue(iMinutes, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,156,"value = scaleValue(getMinutes(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,334,"alue = scaleValue(iSeconds, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,160,"value = scaleValue(getSeconds(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,338,"alue = scaleValue(iMillis, scalar);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,164,"value = scaleValue(getMillis(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,379,"ublic final Instant addTo(ReadableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,205,"public Instant addTo(ReadableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,397,"ublic final void addInto(ReadWritableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,223,"public void addInto(ReadWritableInstant instant, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,406, Gets the years field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,408," @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,410,ublic final int getYears() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,411,eturn iYears;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,416, Gets the months field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,418," @return the number of months in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,420,ublic final int getMonths() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,421,eturn iMonths;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,426, Gets the weeks field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,428," @return the number of weeks in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,430,ublic final int getWeeks() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,431,eturn iWeeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,436, Gets the days field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,438," @return the number of days in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,440,ublic final int getDays() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,441,eturn iDays;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,446, Gets the hours field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,448," @return the number of hours in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,450,ublic final int getHours() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,451,eturn iHours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,456, Gets the minutes field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,458," @return the number of minutes in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,460,ublic final int getMinutes() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,461,eturn iMinutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,466, Gets the seconds field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,468," @return the number of seconds in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,470,ublic final int getSeconds() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,471,eturn iSeconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,476, Gets the millis field part of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,478," @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,480,ublic final int getMillis() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,481,eturn iMillis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,487, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,488," This will either typecast this instance, or create a new <code>Period</code>."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,490, @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,234,* @return a Period using the same field set and values
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,492,ublic final Period toPeriod() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,493,f (this instanceof Period) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,494,eturn (Period) this;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,236,public Period toPeriod() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,506,ublic final MutablePeriod toMutablePeriod() {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,247,public MutablePeriod toMutablePeriod() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,519,ublic final long toDurationMillis() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,520,nt state = iState;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,521,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,522,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,524,f (state != STATE_CALCULATED) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,525,"hrow new IllegalStateException(""Duration is imprecise"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,527,eturn iDuration;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,531," Gets the total millisecond duration of this period,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,532, failing if the period is imprecise.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,534, @return the total length of the period in milliseconds.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,535, @throws IllegalStateException if the period is imprecise
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,536, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,538,ublic final Duration toDuration() {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,260,public Duration toDuration() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,554,ublic final boolean equals(Object readablePeriod) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,276,public boolean equals(Object readablePeriod) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,583,ublic final int hashCode() {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,305,public int hashCode() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,613, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,615,rivate static void checkArgument(DurationField field) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,616,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,617,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,618,"""Time period does not support field '"" + field.getName() + ""'"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,623, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,625,rivate static void checkSupport(DurationField field) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,626,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,627,hrow new UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,628,"""Time period does not support field '"" + field.getName() + ""'"");"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,633, Sets all the fields in one go from another ReadablePeriod.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,634, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,635, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,636, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,637, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,639," @param period  the period to set, null means zero length period"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,640, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,642,rotected void setPeriod(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,643,f (period == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,644,"etPeriod(iType, 0L);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,645, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,646,"etPeriod(iType, period);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,651, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,653,"rivate void setPeriod(PeriodType type, ReadablePeriod period) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,654,"etPeriod(type,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,655,"eriod.getYears(), period.getMonths(),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,656,"eriod.getWeeks(), period.getDays(),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,657,"eriod.getHours(), period.getMinutes(),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,658,"eriod.getSeconds(), period.getMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,662, Sets all the fields in one go.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,663, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,664, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,665, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,666, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,668," @param years  amount of years in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,669," @param months  amount of months in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,670," @param weeks  amount of weeks in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,671," @param days  amount of days in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,672," @param hours  amount of hours in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,673," @param minutes  amount of minutes in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,674," @param seconds  amount of seconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,675," @param millis  amount of milliseconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,676, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,678,"rotected void setPeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,679,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,680,"etPeriod(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,684, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,686,"rivate void setPeriod(PeriodType type,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,687,"nt years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,688,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,689,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,690,heckArgument(type.years());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,692,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,693,heckArgument(type.months());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,695,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,696,heckArgument(type.weeks());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,698,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,699,heckArgument(type.days());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,701,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,702,heckArgument(type.hours());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,704,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,705,heckArgument(type.minutes());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,707,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,708,heckArgument(type.seconds());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,710,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,711,heckArgument(type.millis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,714,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,715,Years = years;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,716,Months = months;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,717,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,718,Days = days;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,719,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,720,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,721,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,722,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,723,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,727, Sets all the fields in one go from a millisecond interval.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,728, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,729, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,730, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,731, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,733," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,734," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,736,"rotected void setPeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,737,"etPeriod(iType, startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,741, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,743," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,744," @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,746,"rivate void setPeriod(PeriodType type, long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,747,ong baseTotalMillis = (endInstant - startInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,748,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,749,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,750,urationField field;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,751,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,752,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,753,"ears = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,754,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,756,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,757,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,758,"onths = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,759,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,761,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,762,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,763,"eeks = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,764,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,766,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,767,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,768,"ays = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,769,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,771,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,772,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,773,"ours = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,774,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,776,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,777,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,778,"inutes = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,779,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,781,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,782,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,783,"econds = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,784,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,786,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,787,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,788,"illis = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,789,"tartInstant = field.add(startInstant, millis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,792,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,793,Years = years;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,794,Months = months;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,795,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,796,Days = days;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,797,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,798,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,799,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,800,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,801,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,805, Sets all the fields in one go from a millisecond duration.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,806, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,807, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,808, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,809, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,811," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,812, @throws ArithmeticException if the set exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,814,rotected void setPeriod(long duration) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,815,"etPeriod(iType, duration);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,819, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,821," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,823,"rivate void setPeriod(PeriodType type, long duration) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,824,f (duration == 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,825,Duration = duration;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,826,Years = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,827,Months = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,828,Weeks = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,829,Days = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,830,Hours = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,831,Minutes = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,832,Seconds = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,833,Millis = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,834,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,835,eturn;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,838,ong startInstant = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,839,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,840,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,841,urationField field;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,843,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,844,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,845,"ears = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,846,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,848,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,849,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,850,"onths = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,851,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,853,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,854,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,855,"eeks = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,856,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,858,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,859,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,860,"ays = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,861,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,863,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,864,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,865,"ours = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,866,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,868,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,869,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,870,"inutes = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,871,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,873,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,874,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,875,"econds = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,876,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,878,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,879,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,880,"illis = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,881,"tartInstant = field.add(startInstant, millis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,884,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,885,Years = years;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,886,Months = months;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,887,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,888,Days = days;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,889,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,890,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,891,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,892,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,893,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,897, Sets all the fields in one go from an interval dividing the
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,898, fields using the period type.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,900," @param interval  the interval to set, null means zero length"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,902,rotected void setPeriod(ReadableInterval interval) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,903,f (interval != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,904,"etPeriod(interval.getStartMillis(), interval.getEndMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,905, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,906,etPeriod(0L);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,911, Sets all the fields in one go from a duration dividing the
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,912, fields using the period type.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,914," @param duration  the duration to set, null means zero length"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,916,rotected void setPeriod(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,917,f (duration != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,918,etPeriod(duration.getMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,919, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,920,etPeriod(0L);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,926," Walks through the field values, determining total millis and whether"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,927, this period is precise.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,929, @return new state
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,930, @throws ArithmeticException if the millis exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,932,rivate int updateTotalMillis() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,933,inal PeriodType type = iType;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,935,oolean isPrecise = true;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,936,ong totalMillis = 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,938,urationField field;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,939,"nt years = iYears, months = iMonths, weeks = iWeeks, days = iDays;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,940,"nt hours = iHours, minutes = iMinutes, seconds = iSeconds, millis = iMillis;"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,941,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,942,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,943,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,944,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,947,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,948,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,949,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,950,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,953,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,954,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,955,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,956,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,959,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,960,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,961,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,962,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,965,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,966,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,967,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,968,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,971,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,972,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,973,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,974,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,977,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,978,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,979,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,980,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,983,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,984,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,985,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,986,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,990,Duration = totalMillis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,991,f (isPrecise) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,992,eturn iState = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,993, else {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,994,eturn iState = STATE_NOT_CALCULABLE;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1000, Adds a period to this one by adding each field in turn.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1002," @param period  the period to add, null means add nothing"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1003, @throws IllegalArgumentException if the period being added contains a field
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1004, not supported by this period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1005, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1007,rotected void add(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1008,f (period != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1009,etPeriod(
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1010,"ieldUtils.safeAdd(getYears(), period.getYears()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1011,"ieldUtils.safeAdd(getMonths(), period.getMonths()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1012,"ieldUtils.safeAdd(getWeeks(), period.getWeeks()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1013,"ieldUtils.safeAdd(getDays(), period.getDays()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1014,"ieldUtils.safeAdd(getHours(), period.getHours()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1015,"ieldUtils.safeAdd(getMinutes(), period.getMinutes()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1016,"ieldUtils.safeAdd(getSeconds(), period.getSeconds()),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1017,"ieldUtils.safeAdd(getMillis(), period.getMillis())"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1023, Adds to each field of this period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1025," @param years  amount of years to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1026," @param months  amount of months to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1027," @param weeks  amount of weeks to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1028," @param days  amount of days to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1029," @param hours  amount of hours to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1030," @param minutes  amount of minutes to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1031," @param seconds  amount of seconds to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1032," @param millis  amount of milliseconds to add to this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1033, @throws IllegalArgumentException if the period being added contains a field
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1034, not supported by this period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1035, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1037,"rotected void add(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1038,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1039,etPeriod(
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1040,"ieldUtils.safeAdd(getYears(), years),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1041,"ieldUtils.safeAdd(getMonths(), months),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1042,"ieldUtils.safeAdd(getWeeks(), weeks),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1043,"ieldUtils.safeAdd(getDays(), days),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1044,"ieldUtils.safeAdd(getHours(), hours),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1045,"ieldUtils.safeAdd(getMinutes(), minutes),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1046,"ieldUtils.safeAdd(getSeconds(), seconds),"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1047,"ieldUtils.safeAdd(getMillis(), millis)"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1052, Adds an interval to this one by dividing the interval into
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1053, fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1055," @param interval  the interval to add, null means add nothing"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1056, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1058,rotected void add(ReadableInterval interval) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1059,f (interval != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1060,dd(interval.toPeriod(getPeriodType()));
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1065, Adds a duration to this one by dividing the duration into
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1066, fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1068," @param duration  the duration to add, null means add nothing"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1069, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1071,rotected void add(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1072,f (duration != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1073,"dd(new Period(duration.getMillis(), getPeriodType()));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1078, Adds a millisecond duration to this one by dividing the duration into
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1079, fields and calling {@link #add(ReadablePeriod)}.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1081," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1082, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1084,rotected void add(long duration) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1085,"dd(new Period(duration, getPeriodType()));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1089, Normalizes all the field values in this period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1090, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1091, This method converts to a milliecond duration and back again.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1093, @throws IllegalStateException if this period is imprecise
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1095,rotected void normalize() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1096,etPeriod(toDurationMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1101, Sets the number of years of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1103, @param years  the number of years
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1104, @throws UnsupportedOperationException if field is not supported.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1106,rotected void setYears(int years) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1107,f (years != iYears) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1108,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1109,heckSupport(iType.years());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1111,Years = years;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1112,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1117, Adds the specified years to the number of years in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1119, @param years  the number of years
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1120, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1121, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1123,rotected void addYears(int years) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1124,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1125,"etYears(FieldUtils.safeAdd(getYears(), years));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1131, Sets the number of months of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1133, @param months  the number of months
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1134, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1136,rotected void setMonths(int months) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1137,f (months != iMonths) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1138,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1139,heckSupport(iType.months());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1141,Months = months;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1142,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1147, Adds the specified months to the number of months in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1149, @param months  the number of months
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1150, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1151, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1153,rotected void addMonths(int months) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1154,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1155,"etMonths(FieldUtils.safeAdd(getMonths(), months));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1161, Sets the number of weeks of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1163, @param weeks  the number of weeks
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1164, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1166,rotected void setWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1167,f (weeks != iWeeks) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1168,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1169,heckSupport(iType.weeks());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1171,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1172,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1177, Adds the specified weeks to the number of weeks in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1179, @param weeks  the number of weeks
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1180, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1181, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1183,rotected void addWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1184,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1185,"etWeeks(FieldUtils.safeAdd(getWeeks(), weeks));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1191, Sets the number of days of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1193, @param days  the number of days
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1194, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1196,rotected void setDays(int days) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1197,f (days != iDays) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1198,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1199,heckSupport(iType.days());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1201,Days = days;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1202,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1207, Adds the specified days to the number of days in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1209, @param days  the number of days
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1210, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1211, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1213,rotected void addDays(int days) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1214,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1215,"etDays(FieldUtils.safeAdd(getDays(), days));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1221, Sets the number of hours of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1223, @param hours  the number of hours
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1224, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1226,rotected void setHours(int hours) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1227,f (hours != iHours) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1228,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1229,heckSupport(iType.hours());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1231,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1232,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1237, Adds the specified hours to the number of hours in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1239, @param hours  the number of hours
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1240, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1241, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1243,rotected void addHours(int hours) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1244,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1245,"etHours(FieldUtils.safeAdd(getHours(), hours));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1251, Sets the number of minutes of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1253, @param minutes  the number of minutes
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1254, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1256,rotected void setMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1257,f (minutes != iMinutes) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1258,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1259,heckSupport(iType.minutes());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1261,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1262,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1267, Adds the specified minutes to the number of minutes in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1269, @param minutes  the number of minutes
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1270, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1271, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1273,rotected void addMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1274,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1275,"etMinutes(FieldUtils.safeAdd(getMinutes(), minutes));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1281, Sets the number of seconds of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1283, @param seconds  the number of seconds
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1284, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1286,rotected void setSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1287,f (seconds != iSeconds) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1288,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1289,heckSupport(iType.seconds());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1291,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1292,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1297, Adds the specified seconds to the number of seconds in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1299, @param seconds  the number of seconds
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1300, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1301, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1303,rotected void addSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1304,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1305,"etSeconds(FieldUtils.safeAdd(getSeconds(), seconds));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1311, Sets the number of millis of the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1313, @param millis  the number of millis
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1314, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1316,rotected void setMillis(int millis) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1317,f (millis != iMillis) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1318,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1319,heckSupport(iType.millis());
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1321,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1322,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1327, Adds the specified millis to the number of millis in the period.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1329, @param millis  the number of millis
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1330, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1331, @throws ArithmeticException if the addition exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1333,rotected void addMillis(int millis) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1334,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,1335,"etMillis(FieldUtils.safeAdd(getMillis(), millis));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,10,* are met:
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,54,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,58,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,60,import org.joda.time.MutablePeriod;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,61,import org.joda.time.PeriodType;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,62,import org.joda.time.ReadWritablePeriod;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,63,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,64,import org.joda.time.ReadablePeriod;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,65,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,66,import org.joda.time.convert.PeriodConverter;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,67,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,70,* BasePeriod is an abstract implementation of ReadablePeriod that stores
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,71,* data in a <code>int</code> and <code>PeriodType</code> fields.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,72,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,73,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,74,* The {@link ReadablePeriod} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,75,* kinds of period objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,76,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,77,* BasePeriod subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,79,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,80,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,81,* @since 1.0
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,83,public abstract class BasePeriod
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,84,extends AbstractPeriod
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,85,"implements ReadablePeriod, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,87,/** Serialization version */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,88,private static final long serialVersionUID = -2110953284060001145L;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,90,/** Millis cache is currently unknown */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,91,private static final int STATE_UNKNOWN = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,92,/** Millis cache is not calculable */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,93,private static final int STATE_NOT_CALCULABLE = 1;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,94,/** Millis cache has been calculated and is valid */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,95,private static final int STATE_CALCULATED = 2;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,97,/** The period type that allocates the duration to fields */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,98,private final PeriodType iType;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,99,/** The object state */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,100,private transient int iState;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,101,"/** The duration, if known */"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,102,private transient long iDuration;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,103,/** Value for years */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,104,private int iYears;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,105,/** Value for months */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,106,private int iMonths;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,107,/** Value for weeks */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,108,private int iWeeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,109,/** Value for days */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,110,private int iDays;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,111,/** Value for hours */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,112,private int iHours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,113,/** Value for minutes */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,114,private int iMinutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,115,/** Value for seconds */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,116,private int iSeconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,117,/** Value for millis */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,118,private int iMillis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,122,* Creates a period from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,123,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,124,* The millisecond duration will be split to fields using a UTC version of
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,125,* the period type.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,127,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,128,* @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,129,* @throws IllegalArgumentException if period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,131,"protected BasePeriod(long duration, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,132,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,133,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,134,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,135,// Only call a private method
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,136,"setPeriod(type, duration);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,140,* Creates a period from a set of field values.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,142,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,143,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,144,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,145,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,146,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,147,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,148,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,149,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,150,* @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,151,* @throws IllegalArgumentException if period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,152,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,154,"protected BasePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,155,"int hours, int minutes, int seconds, int millis,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,156,PeriodType type) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,157,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,158,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,159,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,160,// Only call a private method
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,161,"setPeriod(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,165,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,167,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,168,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,169,* @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,170,* @throws IllegalArgumentException if period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,172,"protected BasePeriod(long startInstant, long endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,173,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,174,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,175,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,176,// Only call a private method
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,177,"setPeriod(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,181,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,183,"* @param startInstant  interval start, null means now"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,184,"* @param endInstant  interval end, null means now"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,185,* @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,186,* @throws IllegalArgumentException if period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,188,protected BasePeriod(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,189,"ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,190,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,191,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,192,if (startInstant == null && endInstant == null) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,193,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,194,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,195,long start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,196,long end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,197,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,198,// Only call a private method
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,199,"setPeriod(type, start, end);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,204,* Creates a new period based on another using the {@link ConverterManager}.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,206,* @param period  the period to convert
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,207,"* @param type  which set of fields this period supports, null means use type from object"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,208,* @throws IllegalArgumentException if period is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,209,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,211,"protected BasePeriod(Object period, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,212,super();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,213,PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,214,"type = (type == null ? converter.getPeriodType(period, false) : type);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,215,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,216,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,217,if (this instanceof ReadWritablePeriod) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,218,"converter.setInto((ReadWritablePeriod) this, period);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,219,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,220,// Only call a private method
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,221,"setPeriod(type, new MutablePeriod(period, type));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,227,"* Validates a period type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,228,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,230,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,231,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,232,* @throws IllegalArgumentException if the period type is invalid
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,234,protected PeriodType checkPeriodType(PeriodType type) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,235,return DateTimeUtils.getPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,240,* Returns the object which defines which fields this period supports.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,242,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,243,return iType;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,247,"* Is this period a precise length of time, or descriptive."
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,248,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,249,"* A typical precise period could include millis, seconds, minutes or hours,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,250,"* but days, weeks, months and years usually vary in length, resulting in"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,251,* an imprecise period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,252,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,253,* An imprecise period can be made precise by pairing it with a
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,254,* date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,256,* @return true if the period is precise
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,258,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,259,int state = iState;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,260,if (state == STATE_UNKNOWN) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,261,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,263,return (state == STATE_CALCULATED);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,268,* Gets the years field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,270,"* @return the number of years in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,272,public int getYears() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,273,return iYears;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,278,* Gets the months field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,280,"* @return the number of months in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,282,public int getMonths() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,283,return iMonths;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,288,* Gets the weeks field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,290,"* @return the number of weeks in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,292,public int getWeeks() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,293,return iWeeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,298,* Gets the days field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,300,"* @return the number of days in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,302,public int getDays() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,303,return iDays;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,308,* Gets the hours field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,310,"* @return the number of hours in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,312,public int getHours() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,313,return iHours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,318,* Gets the minutes field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,320,"* @return the number of minutes in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,322,public int getMinutes() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,323,return iMinutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,328,* Gets the seconds field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,330,"* @return the number of seconds in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,332,public int getSeconds() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,333,return iSeconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,338,* Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,340,"* @return the number of millis in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,342,public int getMillis() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,343,return iMillis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,348,"* Gets the total millisecond duration of this period,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,349,* failing if the period is imprecise.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,351,* @return the total length of the period in milliseconds.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,352,* @throws IllegalStateException if the period is imprecise
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,353,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,355,public long toDurationMillis() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,356,int state = iState;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,357,if (state == STATE_UNKNOWN) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,358,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,360,if (state != STATE_CALCULATED) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,361,"throw new IllegalStateException(""Duration is imprecise"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,363,return iDuration;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,368,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,370,private static void checkArgument(DurationField field) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,371,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,372,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,373,"(""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,378,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,380,private static void checkSupport(DurationField field) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,381,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,382,throw new UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,383,"(""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,388,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,390,"private void setPeriod(PeriodType type, ReadablePeriod period) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,391,"setPeriod(type,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,392,"period.getYears(), period.getMonths(),"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,393,"period.getWeeks(), period.getDays(),"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,394,"period.getHours(), period.getMinutes(),"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,395,"period.getSeconds(), period.getMillis());"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,399,* Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,401,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,402,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,403,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,404,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,405,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,406,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,407,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,408,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,409,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,411,"protected void setPeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,412,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,413,"setPeriod(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,417,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,419,"private void setPeriod(PeriodType type,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,420,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,421,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,422,if (years != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,423,checkArgument(type.years());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,425,if (months != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,426,checkArgument(type.months());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,428,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,429,checkArgument(type.weeks());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,431,if (days != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,432,checkArgument(type.days());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,434,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,435,checkArgument(type.hours());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,437,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,438,checkArgument(type.minutes());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,440,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,441,checkArgument(type.seconds());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,443,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,444,checkArgument(type.millis());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,447,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,448,iYears = years;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,449,iMonths = months;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,450,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,451,iDays = days;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,452,iHours = hours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,453,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,455,iMillis = millis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,456,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,460,* Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,462,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,463,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,465,"protected void setPeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,466,"setPeriod(iType, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,470,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,472,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,473,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,475,"private void setPeriod(PeriodType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,476,long baseTotalMillis = (endInstant - startInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,477,"int years = 0, months = 0, weeks = 0, days = 0;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,478,"int hours = 0, minutes = 0, seconds = 0, millis = 0;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,479,DurationField field;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,480,field = type.years();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,481,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,482,"years = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,483,"startInstant = field.add(startInstant, years);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,485,field = type.months();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,486,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,487,"months = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,488,"startInstant = field.add(startInstant, months);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,490,field = type.weeks();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,491,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,492,"weeks = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,493,"startInstant = field.add(startInstant, weeks);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,495,field = type.days();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,496,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,497,"days = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,498,"startInstant = field.add(startInstant, days);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,500,field = type.hours();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,501,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,502,"hours = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,503,"startInstant = field.add(startInstant, hours);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,505,field = type.minutes();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,506,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,507,"minutes = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,508,"startInstant = field.add(startInstant, minutes);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,510,field = type.seconds();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,511,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,512,"seconds = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,513,"startInstant = field.add(startInstant, seconds);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,515,field = type.millis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,516,if (field.isSupported()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,517,"millis = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,518,"startInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,521,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,522,iYears = years;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,523,iMonths = months;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,524,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,525,iDays = days;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,526,iHours = hours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,527,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,528,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,529,iMillis = millis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,530,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,534,* Sets all the fields in one go from a millisecond duration.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,536,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,537,* @throws ArithmeticException if the set exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,539,protected void setPeriod(long duration) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,540,"setPeriod(iType, duration);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,544,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,546,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,548,"private void setPeriod(PeriodType type, long duration) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,549,if (duration == 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,550,iDuration = duration;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,551,iYears = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,552,iMonths = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,553,iWeeks = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,554,iDays = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,555,iHours = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,556,iMinutes = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,557,iSeconds = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,558,iMillis = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,559,iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,560,return;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,563,long startInstant = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,564,"int years = 0, months = 0, weeks = 0, days = 0;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,565,"int hours = 0, minutes = 0, seconds = 0, millis = 0;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,566,DurationField field;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,568,field = type.years();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,569,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,570,"years = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,571,"startInstant = field.add(startInstant, years);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,573,field = type.months();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,574,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,575,"months = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,576,"startInstant = field.add(startInstant, months);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,578,field = type.weeks();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,579,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,580,"weeks = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,581,"startInstant = field.add(startInstant, weeks);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,583,field = type.days();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,584,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,585,"days = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,586,"startInstant = field.add(startInstant, days);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,588,field = type.hours();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,589,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,590,"hours = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,591,"startInstant = field.add(startInstant, hours);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,593,field = type.minutes();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,594,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,595,"minutes = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,596,"startInstant = field.add(startInstant, minutes);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,598,field = type.seconds();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,599,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,600,"seconds = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,601,"startInstant = field.add(startInstant, seconds);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,603,field = type.millis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,604,if (field.isSupported() && field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,605,"millis = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,606,"startInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,609,// assign fields in one block to reduce threading issues
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,610,iYears = years;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,611,iMonths = months;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,612,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,613,iDays = days;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,614,iHours = hours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,615,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,616,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,617,iMillis = millis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,618,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,623,"* Walks through the field values, determining total millis and whether"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,624,* this period is precise.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,626,* @return new state
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,627,* @throws ArithmeticException if the millis exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,629,private int updateTotalMillis() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,630,PeriodType type = iType;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,632,boolean isPrecise = true;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,633,long totalMillis = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,635,DurationField field;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,636,"int years = iYears, months = iMonths, weeks = iWeeks, days = iDays;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,637,"int hours = iHours, minutes = iMinutes, seconds = iSeconds, millis = iMillis;"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,638,if (years != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,639,field = type.years();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,640,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,641,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,644,if (months != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,645,field = type.months();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,646,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,647,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,650,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,651,field = type.weeks();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,652,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,653,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,656,if (days != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,657,field = type.days();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,658,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,659,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,662,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,663,field = type.hours();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,664,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,665,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,668,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,669,field = type.minutes();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,670,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,671,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,674,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,675,field = type.seconds();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,676,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,677,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,680,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,681,field = type.millis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,682,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,683,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,687,iDuration = totalMillis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,688,if (isPrecise) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,689,return iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,690,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,691,return iState = STATE_NOT_CALCULABLE;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,697,* Sets the number of years of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,699,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,700,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,702,protected void setYears(int years) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,703,if (years != iYears) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,704,if (years != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,705,checkSupport(iType.years());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,707,iYears = years;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,708,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,714,* Sets the number of months of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,716,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,717,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,719,protected void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,720,if (months != iMonths) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,721,if (months != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,722,checkSupport(iType.months());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,724,iMonths = months;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,725,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,731,* Sets the number of weeks of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,733,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,734,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,736,protected void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,737,if (weeks != iWeeks) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,738,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,739,checkSupport(iType.weeks());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,741,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,742,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,748,* Sets the number of days of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,750,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,751,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,753,protected void setDays(int days) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,754,if (days != iDays) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,755,if (days != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,756,checkSupport(iType.days());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,758,iDays = days;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,759,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,765,* Sets the number of hours of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,767,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,768,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,770,protected void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,771,if (hours != iHours) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,772,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,773,checkSupport(iType.hours());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,775,iHours = hours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,776,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,782,* Sets the number of minutes of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,784,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,785,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,787,protected void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,788,if (minutes != iMinutes) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,789,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,790,checkSupport(iType.minutes());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,792,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,793,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,799,* Sets the number of seconds of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,801,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,802,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,804,protected void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,805,if (seconds != iSeconds) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,806,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,807,checkSupport(iType.seconds());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,809,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,810,iState = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,816,* Sets the number of millis of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,818,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,819,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,821,protected void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,822,if (millis != iMillis) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,823,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,824,checkSupport(iType.millis());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,826,iMillis = millis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,827,iState = STATE_UNKNOWN;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,66,mport org.joda.time.base.AbstractPeriod;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,66,import org.joda.time.base.BasePeriod;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,199,lass MockMutablePeriod extends AbstractPeriod {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,199,class MockMutablePeriod extends BasePeriod {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,203,rotected PeriodType checkPeriodType(PeriodType type) {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,204,eturn PeriodType.getAllType();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,66,mport org.joda.time.base.AbstractPeriod;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,66,import org.joda.time.base.BasePeriod;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,198,lass MockPeriod extends AbstractPeriod {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,198,class MockPeriod extends BasePeriod {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,202,rotected PeriodType checkPeriodType(PeriodType type) {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,203,eturn PeriodType.getAllType();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,596,ublic void testImmutable() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,597,ockChangeDuration test = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,598,est.testSetPeriod_RP();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,599,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,601,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,602,est.testSetPeriod_RD();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,603,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,605,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,606,est.testSetPeriod_ints();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,607,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,609,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,610,est.testSetPeriod_1();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,611,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,613,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,614,est.testSetPeriod_2();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,615,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,617,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,618,est.testSetYears();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,619,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,621,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,622,est.testSetMonths();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,623,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,625,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,626,est.testSetWeeks();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,627,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,629,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,630,est.testSetDays();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,631,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,633,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,634,est.testSetHours();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,635,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,637,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,638,est.testSetMinutes();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,639,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,641,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,642,est.testSetSeconds();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,643,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,645,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,646,est.testSetMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,647,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,649,est = new MockChangeDuration(111L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,650,est.testNormalize();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,651,"ssertEquals(111L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,654,tatic class MockChangeDuration extends Period {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,655,ockChangeDuration(long duration) {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,656,uper(duration);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,658,ublic void testSetPeriod_RP() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,659,etPeriod((ReadablePeriod) null);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,661,ublic void testSetPeriod_RD() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,662,etPeriod((ReadableDuration) null);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,664,ublic void testSetPeriod_ints() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,665,"etPeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,667,ublic void testSetPeriod_1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,668,etPeriod(123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,670,ublic void testSetPeriod_2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,671,"etPeriod(123L, 321L);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,673,ublic void testSetYears() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,674,etYears(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,676,ublic void testSetMonths() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,677,etMonths(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,679,ublic void testSetWeeks() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,680,etWeeks(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,682,ublic void testSetDays() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,683,etDays(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,685,ublic void testSetHours() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,686,etHours(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,688,ublic void testSetMinutes() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,689,etMinutes(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,691,ublic void testSetSeconds() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,692,etSeconds(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,694,ublic void testSetMillis() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,695,etMillis(1);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,697,ublic void testNormalize() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,698,uper.normalize();

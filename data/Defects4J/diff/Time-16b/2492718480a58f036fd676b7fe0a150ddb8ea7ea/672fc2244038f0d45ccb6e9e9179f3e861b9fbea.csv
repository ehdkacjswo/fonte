is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,18,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,19,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,20,import java.io.ObjectOutputStream;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,21,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,22,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,23,import java.util.Date;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,24,import java.util.HashSet;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,25,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,26,import java.util.Set;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,28,import org.joda.time.base.AbstractPartial;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,29,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,30,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,31,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,32,import org.joda.time.field.AbstractReadableInstantFieldProperty;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,33,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,34,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,37,* LocalTime is an immutable time class representing a time
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,38,* without a time zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,39,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,40,* LocalTime implements the {@link ReadablePartial} interface.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,41,"* To do this, the interface methods focus on the key fields -"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,42,"* HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,43,"* However, <b>all</b> time fields may in fact be queried."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,44,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,45,* Calculations on LocalTime are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,46,* This chronology will be set internally to be in the UTC time zone
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,47,* for all calculations.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,49,* <p>Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,50,* <ul>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,51,* <li><code>getHourOfDay()</code>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,52,* <li><code>hourOfDay().get()</code>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,53,* </ul>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,54,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,55,* field:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,56,* <ul>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,57,* <li>numeric value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,58,* <li>text value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,59,* <li>short text value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,60,* <li>maximum/minimum values
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,61,* <li>add/subtract
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,62,* <li>set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,63,* <li>rounding
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,64,* </ul>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,66,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,67,"* LocalTime is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,68,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,70,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,71,* @since 1.0
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,73,public final class LocalTime
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,74,extends AbstractPartial
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,75,"implements ReadablePartial, Serializable {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,77,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,78,private static final long serialVersionUID = -12873158713873L;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,80,/** The index of the hourOfDay field in the field array */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,81,private static final int HOUR_OF_DAY = 0;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,82,/** The index of the minuteOfHour field in the field array */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,83,private static final int MINUTE_OF_HOUR = 1;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,84,/** The index of the secondOfMinute field in the field array */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,85,private static final int SECOND_OF_MINUTE = 2;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,86,/** The index of the millisOfSecond field in the field array */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,87,private static final int MILLIS_OF_SECOND = 3;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,88,/** Set of known duration types. */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,89,private static final Set TIME_DURATION_TYPES = new HashSet();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,90,static {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,91,TIME_DURATION_TYPES.add(DurationFieldType.millis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,92,TIME_DURATION_TYPES.add(DurationFieldType.seconds());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,93,TIME_DURATION_TYPES.add(DurationFieldType.minutes());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,94,TIME_DURATION_TYPES.add(DurationFieldType.hours());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,97,/** The local millis from 1970-01-01T00:00:00 */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,98,private long iLocalMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,99,/** The chronology to use in UTC */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,100,private Chronology iChronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,104,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,105,* ISO chronology in the default zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,106,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,107,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,109,public static LocalTime nowDefaultZone() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,110,"return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,114,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,115,* ISO chronology in the specified zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,116,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,117,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,118,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,120,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,122,public static LocalTime now(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,123,"return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,127,* Constructs an instance set to the current local time evaluated using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,128,* specified chronology and zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,129,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,130,"* If the chronology is null, ISO chronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,131,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,133,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,135,public static LocalTime now(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,136,"return forInstant(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,141,* Constructs a LocalTime from a <code>java.util.Calendar</code>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,142,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,143,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,144,* Each field is queried from the Calendar and assigned to the LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,145,"* This is useful if you have been using the Calendar as a local time,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,146,* ignoing the zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,147,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,148,* This factory method ignores the type of the calendar and always
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,149,* creates a LocalTime with ISO chronology. It is expected that you
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,150,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,151,* this is not validated.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,153,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,154,* @return the created LocalTime
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,155,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,156,* @throws IllegalArgumentException if the date is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,158,public static LocalTime forFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,159,if (calendar == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,160,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,162,return new LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,163,"calendar.get(Calendar.HOUR_OF_DAY),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,164,"calendar.get(Calendar.MINUTE),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,165,"calendar.get(Calendar.SECOND),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,166,calendar.get(Calendar.MILLISECOND)
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,171,* Constructs a LocalTime from a <code>java.util.Date</code>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,172,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,173,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,174,* Each field is queried from the Date and assigned to the LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,175,"* This is useful if you have been using the Date as a local time,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,176,* ignoing the zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,177,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,178,* This factory method always creates a LocalTime with ISO chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,180,* @param date  the Date to extract fields from
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,181,* @return the created LocalTime
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,182,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,183,* @throws IllegalArgumentException if the date is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,185,public static LocalTime forFields(Date date) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,186,if (date == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,187,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,189,return new LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,190,"date.getHours(),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,191,"date.getMinutes(),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,192,"date.getSeconds(),"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,193,(int) (date.getTime() % 1000)
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,199,* Constructs an instance set to the local time defined by the specified
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,200,* instant evaluated using ISO chronology in the default zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,201,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,202,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,204,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,206,public static LocalTime forInstantDefaultZone(long instant) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,207,"return forInstant(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,211,* Constructs an instance set to the local time defined by the specified
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,212,* instant evaluated using ISO chronology in the specified zone.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,213,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,214,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,215,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,217,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,218,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,220,"public static LocalTime forInstant(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,221,"return forInstant(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,225,* Constructs an instance set to the local time defined by the specified
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,226,* instant evaluated using the specified chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,227,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,228,"* If the chronology is null, ISO chronology in the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,229,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,231,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,232,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,234,"public static LocalTime forInstant(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,235,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,236,"long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,237,"return new LocalTime(localMillis, chronology.withUTC());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,242,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,243,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,244,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,245,"* If the object contains no time zone, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,246,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,247,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,248,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,249,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,250,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,252,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,253,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,255,public static LocalTime forInstant(Object instant) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,256,"return forInstant(instant, (Chronology) null);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,260,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,261,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,262,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,263,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,264,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,265,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,266,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,267,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,268,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,269,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,271,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,272,* @param zone  the time zone
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,273,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,275,"public static LocalTime forInstant(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,276,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,277,"Chronology chrono = converter.getChronology(instant, zone);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,278,"long millis = converter.getInstantMillis(instant, chrono);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,279,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,280,"return forInstant(millis, chrono);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,284,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,285,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,286,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,287,"* If the chronology is null, ISO in the default time zone is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,288,"* Once the constructor is completed, the zone is no longer used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,289,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,290,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,291,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,292,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,294,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,295,* @param chronology  the chronology
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,296,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,298,"public static LocalTime forInstant(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,299,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,300,"Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,301,"long millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,302,"return forInstant(millis, chrono);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,306,* Constructs an instance set to the local time defined by the specified
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,307,* instant evaluated using the specified local (UTC) chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,309,* @param localMillis  the local milliseconds from 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,310,"* @param chronology  the UTC chronology, not null"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,312,"LocalTime(long localMillis, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,313,super();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,314,chronology.millisOfDay().get(localMillis);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,315,iLocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,316,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,321,* Constructs an instance set to the specified time
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,322,* using <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,324,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,325,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,327,public LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,328,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,329,int minuteOfHour) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,330,"this(hourOfDay, minuteOfHour, 0, 0, ISOChronology.getInstanceUTC());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,334,* Constructs an instance set to the specified time
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,335,* using <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,337,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,338,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,339,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,341,public LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,342,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,343,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,344,int secondOfMinute) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,345,"this(hourOfDay, minuteOfHour, secondOfMinute, 0, ISOChronology.getInstanceUTC());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,349,* Constructs an instance set to the specified time
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,350,* using <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,352,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,353,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,354,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,355,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,357,public LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,358,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,359,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,360,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,361,int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,362,"this(hourOfDay, minuteOfHour, secondOfMinute,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,363,"millisOfSecond, ISOChronology.getInstanceUTC());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,367,* Constructs an instance set to the specified time
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,368,"* using the specified chronology, whose zone is ignored."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,369,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,370,"* If the chronology is null, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,372,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,373,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,374,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,375,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,376,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,378,public LocalTime(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,379,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,380,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,381,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,382,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,383,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,384,super();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,385,chronology = DateTimeUtils.getChronology(chronology).withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,386,long instant = chronology.getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,387,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,388,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,389,iLocalMillis = instant;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,394,"* Gets the number of fields in this partial, which is four."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,395,"* The supported fields are HourOfDay, MinuteOfHour, SecondOfMinute"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,396,* and MillisOfSecond.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,398,"* @return the field count, four"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,400,public int size() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,401,return 4;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,405,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,406,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,407,* This method must not use any instance variables.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,409,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,410,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,411,* @return the field
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,413,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,414,switch (index) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,415,case HOUR_OF_DAY:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,416,return chrono.hourOfDay();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,417,case MINUTE_OF_HOUR:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,418,return chrono.minuteOfHour();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,419,case SECOND_OF_MINUTE:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,420,return chrono.secondOfMinute();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,421,case MILLIS_OF_SECOND:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,422,return chrono.millisOfSecond();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,423,default:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,424,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,429,* Gets the value of the field at the specifed index.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,430,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,431,* This method is required to support the <code>ReadablePartial</code>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,432,"* interface. The supported fields are HourOfDay, MinuteOfHour,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,433,* SecondOfMinute and MillisOfSecond.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,435,"* @param index  the index, zero to two"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,436,* @return the value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,437,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,439,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,440,switch (index) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,441,case HOUR_OF_DAY:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,442,return getChronology().hourOfDay().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,443,case MINUTE_OF_HOUR:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,444,return getChronology().minuteOfHour().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,445,case SECOND_OF_MINUTE:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,446,return getChronology().secondOfMinute().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,447,case MILLIS_OF_SECOND:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,448,return getChronology().millisOfSecond().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,449,default:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,450,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,456,* Get the value of one of the fields of time.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,457,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,458,* This method gets the value of the specified field.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,459,* For example:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,460,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,461,* DateTime dt = new DateTime();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,462,* int hourOfDay = dt.get(DateTimeFieldType.hourOfDay());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,463,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,465,"* @param fieldType  a field type, usually obtained from DateTimeFieldType, not null"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,466,* @return the value of that field
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,467,* @throws IllegalArgumentException if the field type is null
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,469,public int get(DateTimeFieldType fieldType) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,470,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,471,"throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,473,if (isSupported(fieldType) == false) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,474,"throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,476,return fieldType.getField(getChronology()).get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,480,* Checks if the field type specified is supported by this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,481,* local time and chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,482,* This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,484,"* @param type  a field type, usually obtained from DateTimeFieldType"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,485,* @return true if the field type is supported
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,487,public boolean isSupported(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,488,if (type == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,489,return false;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,491,return isSupported(type.getDurationType());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,495,* Checks if the duration type specified is supported by this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,496,* local time and chronology.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,498,"* @param type  a duration type, usually obtained from DurationFieldType"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,499,* @return true if the field type is supported
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,501,public boolean isSupported(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,502,if (type == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,503,return false;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,505,DurationField field = type.getField(getChronology());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,506,if (TIME_DURATION_TYPES.contains(type) ||
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,507,field.getUnitMillis() < getChronology().days().getUnitMillis()) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,508,return field.isSupported();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,510,return false;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,515,* Gets the local milliseconds from the Java epoch
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,516,* of 1970-01-01T00:00:00 (not fixed to any specific time zone).
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,518,* @return the number of milliseconds since 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,520,long getLocalMillis() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,521,return iLocalMillis;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,525,* Gets the chronology of the time.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,527,* @return the Chronology that the time is using
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,529,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,530,return iChronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,535,* Gets a copy of this LocalTime with different local millis.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,536,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,537,* The returned object will be a new instance of the same type.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,538,"* Only the millis will change, the chronology is kept."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,539,* The returned object will be either be a new instance or <code>this</code>.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,541,"* @param newMillis  the new millis, from 1970-01-01T00:00:00"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,542,* @return a copy of this time with different millis
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,544,LocalTime withLocalMillis(long newMillis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,545,"return (newMillis == getLocalMillis() ? this : new LocalTime(newMillis, getChronology()));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,550,* Gets a copy of this LocalTime with the partial set of fields replacing
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,551,* those from this instance.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,552,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,553,"* For example, if the partial contains an hour and minute then those two"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,554,* fields will be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,555,* Unsupported fields are ignored.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,556,"* If the partial is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,558,"* @param partial  the partial set of fields to apply to this time, null ignored"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,559,* @return a copy of this time with a different set of fields
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,560,* @throws IllegalArgumentException if any value is invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,562,public LocalTime withFields(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,563,if (partial == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,564,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,566,"return withLocalMillis(getChronology().set(partial, getLocalMillis()));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,570,* Gets a copy of this LocalTime with the specified field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,571,* to a new value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,572,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,573,"* For example, if the field type is <code>hourOfDay</code> then the hour of day"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,574,* field would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,575,"* If the field type is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,576,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,577,* These lines are equivalent:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,578,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,579,* LocalTime updated = dt.withHourOfDay(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,580,"* LocalTime updated = dt.withField(DateTimeFieldType.hourOfDay(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,581,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,583,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,584,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,585,* @return a copy of this time with the field set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,586,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,588,"public LocalTime withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,589,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,590,"throw new IllegalArgumentException(""Field must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,592,if (isSupported(fieldType) == false) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,593,"throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,595,"long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,596,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,600,* Gets a copy of this LocalTime with the value of the specified
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,601,* field increased.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,602,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,603,"* If the addition is zero or the field is null, then <code>this</code>"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,604,* is returned.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,605,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,606,"* If the addition causes the maximum value of the field to be exceeded,"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,607,* then the value will wrap. Thus 23:59 plus two minutes yields 00:01.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,608,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,609,* These lines are equivalent:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,610,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,611,* LocalTime added = dt.plusHours(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,612,"* LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,613,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,615,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,616,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,617,* @return a copy of this time with the field updated
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,618,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,619,* @throws ArithmeticException if the result exceeds the internal capacity
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,621,"public LocalTime withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,622,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,623,"throw new IllegalArgumentException(""Field must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,625,if (isSupported(fieldType) == false) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,626,"throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,628,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,629,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,631,"long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,632,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,637,* Gets a copy of this LocalTime with the specified period added.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,638,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,639,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,640,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,641,* This method is typically used to add multiple copies of complex
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,642,* period instances. Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,643,"* like {@link #withFieldAdded(DurationFieldType, int)}"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,644,* or {@link #plusHours(int)}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,646,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,647,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,648,* @return a copy of this time with the period added
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,649,* @throws ArithmeticException if the result exceeds the internal capacity
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,651,"public LocalTime withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,652,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,653,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,655,"long instant = getChronology().add(period, getLocalMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,656,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,661,* Gets a copy of this LocalTime with the specified period added.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,662,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,663,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,664,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,665,* This method is typically used to add complex period instances.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,666,* Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,667,* like {@link #plusYears(int)}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,669,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,670,* @return a copy of this time with the period added
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,671,* @throws ArithmeticException if the result exceeds the internal capacity
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,673,public LocalTime plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,674,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,679,* Returns a new LocalTime plus the specified number of hours.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,680,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,681,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,682,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,683,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,684,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,685,* LocalTime added = dt.plusHours(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,686,* LocalTime added = dt.plus(Period.hours(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,687,"* LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,688,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,690,"* @param hours  the amount of hours to add, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,691,* @return the new LocalTime plus the increased hours
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,693,public LocalTime plusHours(int hours) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,694,if (hours == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,695,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,697,"long instant = getChronology().hours().add(getLocalMillis(), hours);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,698,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,702,* Returns a new LocalTime plus the specified number of minutes.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,703,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,704,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,705,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,706,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,707,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,708,* LocalTime added = dt.plusMinutes(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,709,* LocalTime added = dt.plus(Period.minutes(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,710,"* LocalTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,711,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,713,"* @param minutes  the amount of minutes to add, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,714,* @return the new LocalTime plus the increased minutes
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,716,public LocalTime plusMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,717,if (minutes == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,718,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,720,"long instant = getChronology().minutes().add(getLocalMillis(), minutes);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,721,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,725,* Returns a new LocalTime plus the specified number of seconds.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,726,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,727,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,728,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,729,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,730,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,731,* LocalTime added = dt.plusSeconds(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,732,* LocalTime added = dt.plus(Period.seconds(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,733,"* LocalTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,734,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,736,"* @param seconds  the amount of seconds to add, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,737,* @return the new LocalTime plus the increased seconds
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,739,public LocalTime plusSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,740,if (seconds == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,741,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,743,"long instant = getChronology().seconds().add(getLocalMillis(), seconds);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,744,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,748,* Returns a new LocalTime plus the specified number of millis.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,749,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,750,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,751,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,752,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,753,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,754,* LocalTime added = dt.plusMillis(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,755,* LocalTime added = dt.plus(Period.millis(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,756,"* LocalTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,757,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,759,"* @param millis  the amount of millis to add, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,760,* @return the new LocalTime plus the increased millis
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,762,public LocalTime plusMillis(int millis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,763,if (millis == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,764,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,766,"long instant = getChronology().millis().add(getLocalMillis(), millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,767,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,772,* Gets a copy of this LocalTime with the specified period taken away.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,773,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,774,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,775,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,776,* This method is typically used to subtract complex period instances.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,777,* Subtracting one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,778,* like {@link #minusYears(int)}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,780,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,781,* @return a copy of this time with the period taken away
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,782,* @throws ArithmeticException if the result exceeds the internal capacity
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,784,public LocalTime minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,785,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,790,* Returns a new LocalTime minus the specified number of hours.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,791,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,792,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,793,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,794,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,795,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,796,* LocalTime subtracted = dt.minusHours(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,797,* LocalTime subtracted = dt.minus(Period.hours(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,798,"* LocalTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,799,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,801,"* @param hours  the amount of hours to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,802,* @return the new LocalTime minus the increased hours
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,804,public LocalTime minusHours(int hours) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,805,if (hours == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,806,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,808,"long instant = getChronology().hours().subtract(getLocalMillis(), hours);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,809,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,813,* Returns a new LocalTime minus the specified number of minutes.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,814,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,815,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,816,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,817,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,818,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,819,* LocalTime subtracted = dt.minusMinutes(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,820,* LocalTime subtracted = dt.minus(Period.minutes(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,821,"* LocalTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,822,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,824,"* @param minutes  the amount of minutes to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,825,* @return the new LocalTime minus the increased minutes
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,827,public LocalTime minusMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,828,if (minutes == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,829,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,831,"long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,832,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,836,* Returns a new LocalTime minus the specified number of seconds.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,837,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,838,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,839,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,840,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,841,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,842,* LocalTime subtracted = dt.minusSeconds(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,843,* LocalTime subtracted = dt.minus(Period.seconds(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,844,"* LocalTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,845,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,847,"* @param seconds  the amount of seconds to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,848,* @return the new LocalTime minus the increased seconds
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,850,public LocalTime minusSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,851,if (seconds == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,852,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,854,"long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,855,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,859,* Returns a new LocalTime minus the specified number of millis.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,860,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,861,* This LocalTime instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,862,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,863,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,864,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,865,* LocalTime subtracted = dt.minusMillis(6);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,866,* LocalTime subtracted = dt.minus(Period.millis(6));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,867,"* LocalTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,868,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,870,"* @param millis  the amount of millis to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,871,* @return the new LocalTime minus the increased millis
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,873,public LocalTime minusMillis(int millis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,874,if (millis == 0) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,875,return this;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,877,"long instant = getChronology().millis().subtract(getLocalMillis(), millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,878,return withLocalMillis(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,883,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,884,* many useful methods.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,886,* @param fieldType  the field type to get the chronology for
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,887,* @return the property object
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,888,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,890,public Property property(DateTimeFieldType fieldType) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,891,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,892,"throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,894,if (isSupported(fieldType) == false) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,895,"throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,897,"return new Property(this, fieldType.getField(getChronology()));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,902,* Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,904,* @return the hour of day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,906,public int getHourOfDay() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,907,return getChronology().hourOfDay().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,911,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,913,* @return the minute of hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,915,public int getMinuteOfHour() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,916,return getChronology().minuteOfHour().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,920,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,922,* @return the second of minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,924,public int getSecondOfMinute() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,925,return getChronology().secondOfMinute().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,929,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,931,* @return the millis of second
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,933,public int getMillisOfSecond() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,934,return getChronology().millisOfSecond().get(getLocalMillis());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,939,* Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,941,* @param hour  the hour of day
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,943,public void withHourOfDay(int hour) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,944,"getChronology().hourOfDay().set(getLocalMillis(), hour);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,948,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,950,* @param minute  the minute of hour
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,952,public void withMinuteOfHour(int minute) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,953,"getChronology().minuteOfHour().set(getLocalMillis(), minute);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,957,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,959,* @param second  the second of minute
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,961,public void withSecondOfMinute(int second) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,962,"getChronology().secondOfMinute().set(getLocalMillis(), second);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,966,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,968,* @param millis  the millis of second
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,970,public void withMillisOfSecond(int millis) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,971,"getChronology().millisOfSecond().set(getLocalMillis(), millis);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,976,* Get the hour of day field property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,978,* @return the hour of day property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,980,public Property hourOfDay() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,981,"return new Property(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,985,* Get the minute of hour field property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,987,* @return the minute of hour property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,989,public Property minuteOfHour() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,990,"return new Property(this, getChronology().minuteOfHour());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,994,* Get the second of minute field property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,996,* @return the second of minute property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,998,public Property secondOfMinute() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,999,"return new Property(this, getChronology().secondOfMinute());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1003,* Get the millis of second property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1005,* @return the millis of second property
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1007,public Property millisOfSecond() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1008,"return new Property(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1013,* Output the time in ISO8601 format (HH:mm:ss.SSSZ).
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1015,* @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1017,public String toString() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1018,return ISODateTimeFormat.time().print(this);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1022,* Output the time using the specified format pattern.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1024,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1025,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1027,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1028,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1029,return toString();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1031,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1035,* Output the time using the specified format pattern.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1037,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1038,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1039,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1041,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1042,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1043,return toString();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1045,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1050,* LocalTime.Property binds a LocalTime to a DateTimeField allowing
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1051,* powerful datetime functionality to be easily accessed.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1052,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1053,"* The simplest use of this class is as an alternative get method, here used to"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1054,* get the year '1972' (as an int) and the month 'December' (as a String).
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1055,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1056,"* LocalTime dt = new LocalTime(1972, 12, 3, 0, 0);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1057,* int year = dt.year().get();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1058,* String monthStr = dt.month().getAsText();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1059,* </pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1060,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1061,* Methods are also provided that allow date modification. These return new instances
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1062,* of DateTime - they do not modify the original. The example below yields two
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1063,* independent immutable date objects 20 years apart.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1064,* <pre>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1065,"* DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1066,* DateTime dt1920 = dt.year().setCopy(1920);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1067,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1068,"* LocalTime.Propery itself is thread-safe and immutable, as well as the"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1069,* LocalTime being operated on.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1071,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1072,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1073,* @since 1.2
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1075,public static final class Property extends AbstractReadableInstantFieldProperty {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1077,/** Serialization version */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1078,private static final long serialVersionUID = -325842547277223L;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1080,/** The instant this property is working against */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1081,private transient LocalTime iInstant;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1082,/** The field this property is working against */
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1083,private transient DateTimeField iField;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1086,* Constructor.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1088,* @param instant  the instant to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1089,* @param field  the field to use
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1091,"Property(LocalTime instant, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1092,super();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1093,iInstant = instant;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1094,iField = field;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1098,* Writes the property in a safe serialization format.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1100,private void writeObject(ObjectOutputStream oos) throws IOException {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1101,oos.writeObject(iInstant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1102,oos.writeObject(iField.getType());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1106,* Reads the property from a safe serialization format.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1108,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1109,iInstant = (LocalTime) oos.readObject();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1110,DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1111,iField = type.getField(iInstant.getChronology());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1116,* Gets the field being used.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1118,* @return the field
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1120,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1121,return iField;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1125,* Gets the milliseconds of the time that this property is linked to.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1127,* @return the milliseconds
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1129,protected long getMillis() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1130,return iInstant.getLocalMillis();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1134,* Gets the LocalTime object linked to this property.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1136,* @return the linked LocalTime
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1138,public LocalTime getLocalTime() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1139,return iInstant;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1144,* Adds to this field in a copy of this LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1145,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1146,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1148,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1149,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1150,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1152,public LocalTime plus(int value) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1153,"return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1157,* Adds to this field in a copy of this LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1158,* If the addition exceeds the maximum value (eg. 23:59) it will
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1159,* wrap to the minimum value (eg. 00:00).
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1160,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1161,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1163,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1164,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1165,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1167,public LocalTime plus(long value) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1168,// TODO
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1169,"return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1173,"* Adds to this field, possibly wrapped, in a copy of this LocalTime."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1174,* A field wrapped operation only changes this field.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1175,* Thus 10:59 plusWrapField one minute goes to 10:00.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1176,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1177,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1179,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1180,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1181,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1183,public LocalTime plusWrapField(int value) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1184,"return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1189,* Sets this field in a copy of the LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1190,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1191,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1193,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1194,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1195,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1197,public LocalTime withValue(int value) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1198,"return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1202,* Sets this field in a copy of the LocalTime to a parsed text value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1203,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1204,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1206,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1207,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1208,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1209,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1211,"public LocalTime withValue(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1212,"return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1216,* Sets this field in a copy of the LocalTime to a parsed text value.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1217,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1218,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1220,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1221,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1222,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1224,public LocalTime withValue(String text) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1225,"return withValue(text, null);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1230,* Returns a new LocalTime with this field set to the maximum value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1231,* for this field.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1232,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1233,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1235,* @return a copy of the LocalTime with this field set to its maximum
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1237,public LocalTime withMaximumValue() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1238,return withValue(getMaximumValue());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1242,* Returns a new LocalTime with this field set to the minimum value
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1243,* for this field.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1244,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1245,* The LocalTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1247,* @return a copy of the LocalTime with this field set to its minimum
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1249,public LocalTime withMinimumValue() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1250,return withValue(getMinimumValue());
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1255,* Rounds to the lowest whole unit of this field on a copy of this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1256,* LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1257,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1258,"* For example, rounding floor on the hourOfDay field of a LocalTime"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1259,* where the time is 10:30 would result in new LocalTime with the
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1260,* time of 10:00.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1262,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1264,public LocalTime withRoundedFloor() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1265,return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1269,* Rounds to the highest whole unit of this field on a copy of this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1270,* LocalTime.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1271,* <p>
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1272,"* For example, rounding floor on the hourOfDay field of a LocalTime"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1273,* where the time is 10:30 would result in new LocalTime with the
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1274,* time of 11:00.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1276,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1278,public LocalTime withRoundedCeiling() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1279,return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1283,* Rounds to the nearest whole unit of this field on a copy of this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1284,"* LocalTime, favoring the floor if halfway."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1286,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1288,public LocalTime withRoundedHalfFloor() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1289,return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1293,* Rounds to the nearest whole unit of this field on a copy of this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1294,"* LocalTime, favoring the ceiling if halfway."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1296,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1298,public LocalTime withRoundedHalfCeiling() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1299,return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1303,* Rounds to the nearest whole unit of this field on a copy of this
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1304,"* LocalTime.  If halfway, the ceiling is favored over the floor"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1305,* only if it makes this field's value even.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1307,* @return a copy of the LocalTime with the field value changed
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1309,public LocalTime withRoundedHalfEven() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1310,return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));

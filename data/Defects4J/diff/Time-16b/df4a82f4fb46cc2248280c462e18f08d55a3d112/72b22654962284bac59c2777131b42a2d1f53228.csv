is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,6,  You may obtain a copy of the License at
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,14,  limitations under the License.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,16,ackage org.joda.time;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,18,mport java.io.Serializable;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,19,mport java.util.ArrayList;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,20,mport java.util.Calendar;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,21,mport java.util.Date;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,22,mport java.util.List;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,23,mport java.util.Locale;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,25,mport org.joda.convert.FromString;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,26,mport org.joda.convert.ToString;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,27,mport org.joda.time.base.BasePartial;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,28,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,29,mport org.joda.time.field.AbstractPartialFieldProperty;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,30,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,31,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,32,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,33,mport org.joda.time.format.DateTimeFormatterBuilder;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,34,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,37, MonthDay is an immutable partial supporting the monthOfYear and dayOfMonth fields.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,38, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,39, NOTE: This class only supports the two fields listed above.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,40," It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,41, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,42, Calculations on MonthDay are performed using a {@link Chronology}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,43, This chronology is set to be in the UTC time zone for all calculations.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,44, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,45, One use case for this class is to store a birthday without the year (to avoid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,46, storing the age of the person).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,47, This class can be used as the gMonthDay type in XML Schema.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,48, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,49, Each individual field can be queried in two ways:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,50, <ul>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,51, <li><code>getMonthOfYear()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,52, <li><code>monthOfYear().get()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,53, </ul>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,54, The second technique also provides access to other useful methods on the
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,55, field:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,56, <ul>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,57, <li>numeric value - <code>monthOfYear().get()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,58, <li>text value - <code>monthOfYear().getAsText()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,59, <li>short text value - <code>monthOfYear().getAsShortText()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,60, <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,61, <li>add/subtract - <code>monthOfYear().addToCopy()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,62, <li>set - <code>monthOfYear().setCopy()</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,63, </ul>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,64, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,65," MonthDay is thread-safe and immutable, provided that the Chronology is as well."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,66, All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,68, @author Chris Pheby
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,69, @since 2.0
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,71,ublic final class MonthDay
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,72,xtends BasePartial
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,73,"mplements ReadablePartial, Serializable {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,75,** Serialization version */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,76,rivate static final long serialVersionUID = 2954560699050434609L;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,78,** The singleton set of field types */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,79,rivate static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,80,"ateTimeFieldType.monthOfYear(),"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,81,"ateTimeFieldType.dayOfMonth(), };"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,83,** The singleton set of field types */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,84,rivate static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,85,appendOptional(ISODateTimeFormat.localDateParser().getParser())
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,86,"appendOptional(DateTimeFormat.forPattern(""--MM-dd"").getParser()).toFormatter();"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,88,** The index of the monthOfYear field in the field array */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,89,ublic static final int MONTH_OF_YEAR = 0;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,90,** The index of the day field in the field array */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,91,ublic static final int DAY_OF_MONTH = 1;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,95, Parses a {@code MonthDay} from the specified string.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,96, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,97, This uses {@link ISODateTimeFormat#localDateParser()} or the format {@code --MM-dd}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,99," @param str  the string to parse, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,100, @since 2.0
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,102,FromString
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,103,ublic static MonthDay parse(String str) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,104,"eturn parse(str, PARSER);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,108, Parses a {@code MonthDay} from the specified string using a formatter.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,110," @param str  the string to parse, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,111," @param formatter  the formatter to use, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,112, @since 2.0
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,114,"ublic static MonthDay parse(String str, DateTimeFormatter formatter) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,115,ocalDate date = formatter.parseLocalDate(str);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,116,"eturn new MonthDay(date.getMonthOfYear(), date.getDayOfMonth());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,121, Constructs a MonthDay from a <code>java.util.Calendar</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,122, using exactly the same field values avoiding any time zone effects.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,123, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,124, Each field is queried from the Calendar and assigned to the MonthDay.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,125, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,126, This factory method ignores the type of the calendar and always
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,127, creates a MonthDay with ISO chronology. It is expected that you
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,128, will only pass in instances of <code>GregorianCalendar</code> however
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,129, this is not validated.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,131, @param calendar  the Calendar to extract fields from
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,132," @return the created MonthDay, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,133, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,134, @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,136,ublic static MonthDay fromCalendarFields(Calendar calendar) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,137,f (calendar == null) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,138,"hrow new IllegalArgumentException(""The calendar must not be null"");"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,140,"eturn new MonthDay(calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,144, Constructs a MonthDay from a <code>java.util.Date</code>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,145, using exactly the same field values avoiding any time zone effects.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,146, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,147, Each field is queried from the Date and assigned to the MonthDay.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,148, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,149, This factory method always creates a MonthDay with ISO chronology.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,151, @param date  the Date to extract fields from
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,152," @return the created MonthDay, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,153, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,154, @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,156,"SuppressWarnings(""deprecation"")"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,157,ublic static MonthDay fromDateFields(Date date) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,158,f (date == null) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,159,"hrow new IllegalArgumentException(""The date must not be null"");"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,161,"eturn new MonthDay(date.getMonth() + 1, date.getDate());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,166," Constructs a MonthDay with the current monthOfYear, using ISOChronology in"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,167, the default zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,168, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,169," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,170," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,171, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,173,ublic MonthDay() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,174,uper();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,178," Constructs a MonthDay with the current month-day, using ISOChronology in"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,179, the specified zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,180, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,181, The constructor uses the specified time zone to obtain the current month-day.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,182," Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,183, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,185," @param zone  the zone to use, null means default zone"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,187,ublic MonthDay(DateTimeZone zone) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,188,uper(ISOChronology.getInstance(zone));
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,192," Constructs a MonthDay with the current month-day, using the specified chronology"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,193, and zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,194, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,195, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,196," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,197, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,199," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,201,ublic MonthDay(Chronology chronology) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,202,uper(chronology);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,206, Constructs a MonthDay extracting the partial fields from the specified
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,207, milliseconds using the ISOChronology in the default zone.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,208, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,209," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,210," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,211, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,213, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,215,ublic MonthDay(long instant) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,216,uper(instant);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,220, Constructs a MonthDay extracting the partial fields from the specified
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,221, milliseconds using the chronology provided.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,222, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,223, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,224," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,225, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,227, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,228," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,230,"ublic MonthDay(long instant, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,231,"uper(instant, chronology);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,235, Constructs a MonthDay from an Object that represents some form of time.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,236, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,237, The recognised object types are defined in
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,238, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,239," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,240, The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,241, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,242," The chronology used will be derived from the object, defaulting to ISO."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,244," @param instant  the date-time object, null means now"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,245, @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,247,ublic MonthDay(Object instant) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,248,"uper(instant, null, ISODateTimeFormat.localDateParser());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,252," Constructs a MonthDay from an Object that represents some form of time,"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,253, using the specified chronology.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,254, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,255, The recognised object types are defined in
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,256, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,257," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,258, The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,259, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,260, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,261," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,262, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,263, The specified chronology overrides that of the object.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,265," @param instant  the date-time object, null means now"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,266," @param chronology  the chronology, null means ISO default"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,267, @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,269,"ublic MonthDay(Object instant, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,270,"uper(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,274, Constructs a MonthDay with specified year and month
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,275, using <code>ISOChronology</code>.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,276, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,277, The constructor uses the no time zone initialising the fields as provided.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,278," Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,279, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,281, @param monthOfYear  the month of the year
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,282, @param dayOfMonth  the day of the month
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,284,"ublic MonthDay(int monthOfYear, int dayOfMonth) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,285,"his(monthOfYear, dayOfMonth, null);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,289, Constructs an instance set to the specified monthOfYear and dayOfMonth
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,290," using the specified chronology, whose zone is ignored."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,291, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,292," If the chronology is null, <code>ISOChronology</code> is used."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,293, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,294, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,295," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,296, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,298, @param monthOfYear  the month of the year
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,299, @param dayOfMonth  the day of the month
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,300," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,302,"ublic MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,303,"uper(new int[] {monthOfYear, dayOfMonth}, chronology);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,307, Constructs a MonthDay with chronology from this instance and new values.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,309, @param partial  the partial to base this new instance on
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,310, @param values  the new set of values
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,312,"onthDay(MonthDay partial, int[] values) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,313,"uper(partial, values);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,317, Constructs a MonthDay with values from this instance and a new chronology.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,319, @param partial  the partial to base this new instance on
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,320, @param chrono  the new chronology
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,322,"onthDay(MonthDay partial, Chronology chrono) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,323,"uper(partial, chrono);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,327, Handle broken serialization from other tools.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,328," @return the resolved object, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,330,rivate Object readResolve() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,331,f (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,332,"eturn new MonthDay(this, getChronology().withUTC());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,334,eturn this;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,339," Gets the number of fields in this partial, which is two."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,340, The supported fields are MonthOfYear and DayOfMonth.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,341, Note that only these fields may be queried.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,343," @return the field count, two"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,345,ublic int size() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,346,eturn 2;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,350, Gets the field for a specific index in the chronology specified.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,351, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,352, This method must not use any instance variables.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,354, @param index  the index to retrieve
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,355, @param chrono  the chronology to use
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,356," @return the field, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,358,"rotected DateTimeField getField(int index, Chronology chrono) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,359,witch (index) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,360,ase MONTH_OF_YEAR:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,361,eturn chrono.monthOfYear();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,362,ase DAY_OF_MONTH:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,363,eturn chrono.dayOfMonth();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,364,efault:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,365,"hrow new IndexOutOfBoundsException(""Invalid index: "" + index);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,370, Gets the field type at the specified index.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,372, @param index  the index to retrieve
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,373," @return the field at the specified index, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,374, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,376,ublic DateTimeFieldType getFieldType(int index) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,377,eturn FIELD_TYPES[index];
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,381, Gets an array of the field type of each of the fields that this partial supports.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,382, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,383," The fields are returned largest to smallest, Month, Day."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,385," @return the array of field types (cloned), largest to smallest, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,387,ublic DateTimeFieldType[] getFieldTypes() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,388,eturn (DateTimeFieldType[]) FIELD_TYPES.clone();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,393, Returns a copy of this month-day with the specified chronology.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,394, This instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,395, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,396," This method retains the values of the fields, thus the result will"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,397, typically refer to a different instant.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,398, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,399," The time zone of the specified chronology is ignored, as MonthDay"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,400, operates without a time zone.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,402," @param newChronology  the new chronology, null means ISO"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,403," @return a copy of this month-day with a different chronology, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,404, @throws IllegalArgumentException if the values are invalid for the new chronology
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,406,ublic MonthDay withChronologyRetainFields(Chronology newChronology) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,407,ewChronology = DateTimeUtils.getChronology(newChronology);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,408,ewChronology = newChronology.withUTC();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,409,f (newChronology == getChronology()) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,410,eturn this;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,411, else {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,412,"onthDay newMonthDay = new MonthDay(this, newChronology);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,413,"ewChronology.validate(newMonthDay, getValues());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,414,eturn newMonthDay;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,419, Returns a copy of this month-day with the specified field set to a new value.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,420, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,421," For example, if the field type is <code>dayOfMonth</code> then the day"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,422, would be changed in the returned instance.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,423, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,424, These three lines are equivalent:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,425, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,426," MonthDay updated = md.withField(DateTimeFieldType.dayOfMonth(), 6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,427, MonthDay updated = md.dayOfMonth().setCopy(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,428, MonthDay updated = md.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,429, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,431," @param fieldType  the field type to set, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,432, @param value  the value to set
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,433," @return a copy of this instance with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,434, @throws IllegalArgumentException if the value is null or invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,436,"ublic MonthDay withField(DateTimeFieldType fieldType, int value) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,437,nt index = indexOfSupported(fieldType);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,438,f (value == getValue(index)) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,439,eturn this;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,441,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,442,"ewValues = getField(index).set(this, index, newValues, value);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,443,"eturn new MonthDay(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,447, Returns a copy of this month-day with the value of the specified field increased.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,448, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,449," If the addition is zero, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,450, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,451, These three lines are equivalent:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,452, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,453," MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,454, MonthDay added = md.plusDays(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,455, MonthDay added = md.dayOfMonth().addToCopy(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,456, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,458," @param fieldType  the field type to add to, not null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,459, @param amount  the amount to add
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,460," @return a copy of this instance with the field updated, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,461, @throws IllegalArgumentException if the value is null or invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,462, @throws ArithmeticException if the new date-time exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,464,"ublic MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,465,nt index = indexOfSupported(fieldType);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,466,f (amount == 0) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,467,eturn this;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,469,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,470,"ewValues = getField(index).add(this, index, newValues, amount);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,471,"eturn new MonthDay(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,475, Returns a copy of this month-day with the specified period added.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,476, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,477," If the addition is zero, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,478, Fields in the period that aren't present in the partial are ignored.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,479, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,480, This method is typically used to add multiple copies of complex
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,481, period instances. Adding one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,482," like {@link #withFieldAdded(DurationFieldType, int)}"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,483, or {@link #plusMonths(int)}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,485," @param period  the period to add to this one, null means zero"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,486," @param scalar  the amount of times to add, such as -1 to subtract once"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,487," @return a copy of this instance with the period added, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,488, @throws ArithmeticException if the new date-time exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,490,"ublic MonthDay withPeriodAdded(ReadablePeriod period, int scalar) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,491,f (period == null || scalar == 0) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,492,eturn this;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,494,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,495,or (int i = 0; i < period.size(); i++) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,496,urationFieldType fieldType = period.getFieldType(i);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,497,nt index = indexOf(fieldType);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,498,f (index >= 0) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,499,"ewValues = getField(index).add(this, index, newValues,"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,500,"ieldUtils.safeMultiply(period.getValue(i), scalar));"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,503,"eturn new MonthDay(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,508, Returns a copy of this month-day with the specified period added.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,509, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,510," If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,511, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,512, This method is typically used to add complex period instances.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,513, Adding one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,514, like {@link #plusMonths(int)}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,516," @param period  the duration to add to this one, null means zero"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,517," @return a copy of this instance with the period added, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,518, @throws ArithmeticException if the new month-day exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,520,ublic MonthDay plus(ReadablePeriod period) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,521,"eturn withPeriodAdded(period, 1);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,526, Returns a copy of this month-day plus the specified number of months.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,527, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,528, This month-day instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,529, The month will wrap at the end of the year from December to January.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,530, The day will be adjusted to the last valid value if necessary.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,531, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,532, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,533, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,534, MonthDay added = md.plusMonths(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,535, MonthDay added = md.plus(Period.months(6));
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,536," MonthDay added = md.withFieldAdded(DurationFieldType.months(), 6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,537, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,539," @param months  the amount of months to add, may be negative"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,540," @return the new month-day plus the increased months, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,542,ublic MonthDay plusMonths(int months) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,543,"eturn withFieldAdded(DurationFieldType.months(), months);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,547, Returns a copy of this month-day plus the specified number of days.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,548, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,549, This month-day instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,550, The month will wrap at the end of the year from December to January.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,551, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,552, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,553, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,554, MonthDay added = md.plusDays(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,555, MonthDay added = md.plus(Period.days(6));
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,556," MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,557, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,559," @param days  the amount of days to add, may be negative"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,560," @return the new month-day plus the increased days, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,562,ublic MonthDay plusDays(int days) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,563,"eturn withFieldAdded(DurationFieldType.days(), days);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,568, Returns a copy of this month-day with the specified period taken away.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,569, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,570," If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,571, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,572, This method is typically used to subtract complex period instances.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,573, Subtracting one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,574, like {@link #minusMonths(int)}.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,576, @param period  the period to reduce this instant by
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,577," @return a copy of this instance with the period taken away, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,578, @throws ArithmeticException if the new month-day exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,580,ublic MonthDay minus(ReadablePeriod period) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,581,"eturn withPeriodAdded(period, -1);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,586, Returns a copy of this month-day minus the specified number of months.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,587, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,588, This MonthDay instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,589, The month will wrap at the end of the year from January to December.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,590, The day will be adjusted to the last valid value if necessary.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,591, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,592, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,593, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,594, MonthDay subtracted = md.minusMonths(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,595, MonthDay subtracted = md.minus(Period.months(6));
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,596," MonthDay subtracted = md.withFieldAdded(DurationFieldType.months(), -6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,597, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,599," @param months  the amount of months to subtract, may be negative"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,600," @return the new month-day minus the increased months, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,602,ublic MonthDay minusMonths(int months) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,603,"eturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,607, Returns a copy of this month-day minus the specified number of months.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,608, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,609, This month-day instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,610, The month will wrap at the end of the year from January to December.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,611, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,612, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,613, <pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,614, MonthDay subtracted = md.minusDays(6);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,615, MonthDay subtracted = md.minus(Period.days(6));
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,616," MonthDay subtracted = md.withFieldAdded(DurationFieldType.days(), -6);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,617, </pre>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,619," @param days  the amount of days to subtract, may be negative"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,620," @return the new month-day minus the increased days, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,622,ublic MonthDay minusDays(int days) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,623,"eturn withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,628, Converts this object to a LocalDate with the same month-day and chronology.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,630," @param year  the year to use, valid for chronology"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,631," @return a LocalDate with the same month-day and chronology, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,633,ublic LocalDate toLocalDate(int year) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,634,"eturn new LocalDate(year, getMonthOfYear(), getDayOfMonth(), getChronology());"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,639, Get the month of year field value.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,641, @return the month of year
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,643,ublic int getMonthOfYear() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,644,eturn getValue(MONTH_OF_YEAR);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,648, Get the day of month field value.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,650, @return the day of month
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,652,ublic int getDayOfMonth() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,653,eturn getValue(DAY_OF_MONTH);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,658, Returns a copy of this month-day with the month of year field updated.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,659, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,660," MonthDay is immutable, so there are no set methods."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,661," Instead, this method returns a new instance with the value of"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,662, month of year changed.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,664, @param monthOfYear  the month of year to set
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,665," @return a copy of this object with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,666, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,668,ublic MonthDay withMonthOfYear(int monthOfYear) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,669,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,670,"ewValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,671,"eturn new MonthDay(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,675, Returns a copy of this month-day with the day of month field updated.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,676, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,677," MonthDay is immutable, so there are no set methods."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,678," Instead, this method returns a new instance with the value of"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,679, day of month changed.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,681, @param dayOfMonth  the day of month to set
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,682," @return a copy of this object with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,683, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,685,ublic MonthDay withDayOfMonth(int dayOfMonth) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,686,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,687,"ewValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,688,"eturn new MonthDay(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,693," Gets the property object for the specified type, which contains"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,694, many useful methods.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,696, @param type  the field type to get the property for
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,697, @return the property object
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,698, @throws IllegalArgumentException if the field is null or unsupported
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,700,ublic Property property(DateTimeFieldType type) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,701,"eturn new Property(this, indexOfSupported(type));"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,706, Get the month of year field property which provides access to advanced functionality.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,708, @return the month of year property
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,710,ublic Property monthOfYear() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,711,"eturn new Property(this, MONTH_OF_YEAR);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,715, Get the day of month field property which provides access to advanced functionality.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,717, @return the day of month property
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,719,ublic Property dayOfMonth() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,720,"eturn new Property(this, DAY_OF_MONTH);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,725, Output the month-day in ISO8601 format (--MM-dd).
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,727, @return ISO8601 time formatted string.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,729,ToString
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,730,ublic String toString() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,731,ist<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,732,ields.add(DateTimeFieldType.monthOfYear());
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,733,ields.add(DateTimeFieldType.dayOfMonth());
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,734,"eturn ISODateTimeFormat.forFields(fields, true, true).print(this);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,738, Output the month-day using the specified format pattern.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,740," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,741, @see org.joda.time.format.DateTimeFormat
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,743,ublic String toString(String pattern) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,744,f (pattern == null) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,745,eturn toString();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,747,eturn DateTimeFormat.forPattern(pattern).print(this);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,751, Output the month-day using the specified format pattern.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,753," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,754," @param locale  Locale to use, null means default"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,755, @see org.joda.time.format.DateTimeFormat
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,757,"ublic String toString(String pattern, Locale locale) throws IllegalArgumentException {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,758,f (pattern == null) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,759,eturn toString();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,761,eturn DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,766, The property class for <code>MonthDay</code>.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,767, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,768, This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,770, @author Chris Pheby
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,771, @since 2.0
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,773,ublic static class Property extends AbstractPartialFieldProperty implements Serializable {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,775,** Serialization version */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,776,rivate static final long serialVersionUID = 5727734012190224363L;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,778,** The partial */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,779,rivate final MonthDay iBase;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,780,** The field index */
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,781,rivate final int iFieldIndex;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,784, Constructs a property.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,786, @param partial  the partial instance
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,787, @param fieldIndex  the index in the partial
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,789,"roperty(MonthDay partial, int fieldIndex) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,790,uper();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,791,Base = partial;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,792,FieldIndex = fieldIndex;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,796, Gets the field that this property uses.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,798, @return the field
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,800,ublic DateTimeField getField() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,801,eturn iBase.getField(iFieldIndex);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,805, Gets the partial that this property belongs to.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,807, @return the partial
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,809,rotected ReadablePartial getReadablePartial() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,810,eturn iBase;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,814, Gets the partial that this property belongs to.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,816, @return the partial
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,818,ublic MonthDay getMonthDay() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,819,eturn iBase;
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,823, Gets the value of this field.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,825, @return the field value
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,827,ublic int get() {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,828,eturn iBase.getValue(iFieldIndex);
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,833, Adds to the value of this field in a copy of this MonthDay.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,834, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,835, The value will be added to this field. If the value is too large to be
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,836, added solely to this field then it will affect larger fields.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,837, Smaller fields are unaffected.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,838, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,839, The MonthDay attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,840," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,842, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,843, @return a copy of the MonthDay with the field value changed
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,844, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,846,ublic MonthDay addToCopy(int valueToAdd) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,847,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,848,"ewValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,849,"eturn new MonthDay(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,853, Adds to the value of this field in a copy of this MonthDay wrapping
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,854, within this field if the maximum value is reached.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,855, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,856, The value will be added to this field. If the value is too large to be
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,857, added solely to this field then it wraps within this field.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,858, Other fields are unaffected.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,859, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,860," For example,"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,861, <code>--12-30</code> addWrapField one month returns <code>--01-30</code>.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,862, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,863, The MonthDay attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,864," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,866, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,867, @return a copy of the MonthDay with the field value changed
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,868, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,870,ublic MonthDay addWrapFieldToCopy(int valueToAdd) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,871,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,872,"ewValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,873,"eturn new MonthDay(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,878, Sets this field in a copy of the MonthDay.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,879, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,880, The MonthDay attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,881," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,883, @param value  the value to set the field in the copy to
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,884, @return a copy of the MonthDay with the field value changed
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,885, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,887,ublic MonthDay setCopy(int value) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,888,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,889,"ewValues = getField().set(iBase, iFieldIndex, newValues, value);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,890,"eturn new MonthDay(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,894, Sets this field in a copy of the MonthDay to a parsed text value.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,895, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,896, The MonthDay attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,897," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,899, @param text  the text value to set
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,900, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,901, @return a copy of the MonthDay with the field value changed
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,902, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,904,"ublic MonthDay setCopy(String text, Locale locale) {"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,905,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,906,"ewValues = getField().set(iBase, iFieldIndex, newValues, text, locale);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,907,"eturn new MonthDay(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,911, Sets this field in a copy of the MonthDay to a parsed text value.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,912, <p>
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,913, The MonthDay attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,914," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,916, @param text  the text value to set
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,917, @return a copy of the MonthDay with the field value changed
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,918, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,920,ublic MonthDay setCopy(String text) {
False,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,921,"eturn setCopy(text, null);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,14,*  limitations under the License.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,16,package org.joda.time;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,18,import java.io.Serializable;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,19,import java.util.ArrayList;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,20,import java.util.Calendar;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,21,import java.util.Date;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,22,import java.util.List;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,23,import java.util.Locale;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,25,import org.joda.convert.FromString;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,26,import org.joda.convert.ToString;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,27,import org.joda.time.base.BasePartial;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,28,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,29,import org.joda.time.field.AbstractPartialFieldProperty;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,30,import org.joda.time.field.FieldUtils;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,31,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,32,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,33,import org.joda.time.format.DateTimeFormatterBuilder;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,34,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,37,* MonthDay is an immutable partial supporting the monthOfYear and dayOfMonth fields.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,38,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,39,* NOTE: This class only supports the two fields listed above.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,40,"* It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,41,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,42,* Calculations on MonthDay are performed using a {@link Chronology}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,43,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,44,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,45,* One use case for this class is to store a birthday without the year (to avoid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,46,* storing the age of the person).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,47,* This class can be used as the gMonthDay type in XML Schema.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,48,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,49,* Each individual field can be queried in two ways:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,50,* <ul>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,51,* <li><code>getMonthOfYear()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,52,* <li><code>monthOfYear().get()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,53,* </ul>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,54,* The second technique also provides access to other useful methods on the
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,55,* field:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,56,* <ul>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,57,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,58,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,59,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,60,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,61,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,62,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,63,* </ul>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,64,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,65,"* MonthDay is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,66,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,68,* @author Chris Pheby
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,69,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,71,public final class MonthDay
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,72,extends BasePartial
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,73,"implements ReadablePartial, Serializable {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,75,/** Serialization version */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,76,private static final long serialVersionUID = 2954560699050434609L;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,78,/** The singleton set of field types */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,79,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,80,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,81,"DateTimeFieldType.dayOfMonth(), };"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,83,/** The singleton set of field types */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,84,private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,85,.appendOptional(ISODateTimeFormat.localDateParser().getParser())
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,86,".appendOptional(DateTimeFormat.forPattern(""--MM-dd"").getParser()).toFormatter();"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,88,/** The index of the monthOfYear field in the field array */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,89,public static final int MONTH_OF_YEAR = 0;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,90,/** The index of the day field in the field array */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,91,public static final int DAY_OF_MONTH = 1;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,95,* Parses a {@code MonthDay} from the specified string.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,96,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,97,* This uses {@link ISODateTimeFormat#localDateParser()} or the format {@code --MM-dd}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,99,"* @param str  the string to parse, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,100,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,102,@FromString
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,103,public static MonthDay parse(String str) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,104,"return parse(str, PARSER);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,108,* Parses a {@code MonthDay} from the specified string using a formatter.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,110,"* @param str  the string to parse, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,111,"* @param formatter  the formatter to use, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,112,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,114,"public static MonthDay parse(String str, DateTimeFormatter formatter) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,115,LocalDate date = formatter.parseLocalDate(str);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,116,"return new MonthDay(date.getMonthOfYear(), date.getDayOfMonth());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,121,* Constructs a MonthDay from a <code>java.util.Calendar</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,122,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,123,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,124,* Each field is queried from the Calendar and assigned to the MonthDay.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,125,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,126,* This factory method ignores the type of the calendar and always
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,127,* creates a MonthDay with ISO chronology. It is expected that you
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,128,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,129,* this is not validated.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,131,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,132,"* @return the created MonthDay, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,133,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,134,* @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,136,public static MonthDay fromCalendarFields(Calendar calendar) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,137,if (calendar == null) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,138,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,140,"return new MonthDay(calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH));"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,144,* Constructs a MonthDay from a <code>java.util.Date</code>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,145,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,146,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,147,* Each field is queried from the Date and assigned to the MonthDay.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,148,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,149,* This factory method always creates a MonthDay with ISO chronology.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,151,* @param date  the Date to extract fields from
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,152,"* @return the created MonthDay, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,153,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,154,* @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,156,"@SuppressWarnings(""deprecation"")"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,157,public static MonthDay fromDateFields(Date date) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,158,if (date == null) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,159,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,161,"return new MonthDay(date.getMonth() + 1, date.getDate());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,166,"* Constructs a MonthDay with the current monthOfYear, using ISOChronology in"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,167,* the default zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,168,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,169,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,170,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,171,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,173,public MonthDay() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,174,super();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,178,"* Constructs a MonthDay with the current month-day, using ISOChronology in"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,179,* the specified zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,180,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,181,* The constructor uses the specified time zone to obtain the current month-day.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,182,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,183,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,185,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,187,public MonthDay(DateTimeZone zone) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,188,super(ISOChronology.getInstance(zone));
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,192,"* Constructs a MonthDay with the current month-day, using the specified chronology"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,193,* and zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,194,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,195,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,196,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,197,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,199,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,201,public MonthDay(Chronology chronology) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,202,super(chronology);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,206,* Constructs a MonthDay extracting the partial fields from the specified
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,207,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,208,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,209,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,210,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,211,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,213,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,215,public MonthDay(long instant) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,216,super(instant);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,220,* Constructs a MonthDay extracting the partial fields from the specified
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,221,* milliseconds using the chronology provided.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,222,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,223,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,224,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,225,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,227,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,228,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,230,"public MonthDay(long instant, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,231,"super(instant, chronology);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,235,* Constructs a MonthDay from an Object that represents some form of time.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,236,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,237,* The recognised object types are defined in
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,238,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,239,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,240,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,241,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,242,"* The chronology used will be derived from the object, defaulting to ISO."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,244,"* @param instant  the date-time object, null means now"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,245,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,247,public MonthDay(Object instant) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,248,"super(instant, null, ISODateTimeFormat.localDateParser());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,252,"* Constructs a MonthDay from an Object that represents some form of time,"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,253,* using the specified chronology.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,254,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,255,* The recognised object types are defined in
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,256,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,257,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,258,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,259,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,260,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,261,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,262,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,263,* The specified chronology overrides that of the object.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,265,"* @param instant  the date-time object, null means now"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,266,"* @param chronology  the chronology, null means ISO default"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,267,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,269,"public MonthDay(Object instant, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,270,"super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,274,* Constructs a MonthDay with specified year and month
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,275,* using <code>ISOChronology</code>.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,276,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,277,* The constructor uses the no time zone initialising the fields as provided.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,278,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,279,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,281,* @param monthOfYear  the month of the year
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,282,* @param dayOfMonth  the day of the month
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,284,"public MonthDay(int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,285,"this(monthOfYear, dayOfMonth, null);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,289,* Constructs an instance set to the specified monthOfYear and dayOfMonth
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,290,"* using the specified chronology, whose zone is ignored."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,291,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,292,"* If the chronology is null, <code>ISOChronology</code> is used."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,293,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,294,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,295,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,296,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,298,* @param monthOfYear  the month of the year
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,299,* @param dayOfMonth  the day of the month
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,300,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,302,"public MonthDay(int monthOfYear, int dayOfMonth, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,303,"super(new int[] {monthOfYear, dayOfMonth}, chronology);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,307,* Constructs a MonthDay with chronology from this instance and new values.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,309,* @param partial  the partial to base this new instance on
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,310,* @param values  the new set of values
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,312,"MonthDay(MonthDay partial, int[] values) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,313,"super(partial, values);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,317,* Constructs a MonthDay with values from this instance and a new chronology.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,319,* @param partial  the partial to base this new instance on
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,320,* @param chrono  the new chronology
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,322,"MonthDay(MonthDay partial, Chronology chrono) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,323,"super(partial, chrono);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,327,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,328,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,330,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,331,if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,332,"return new MonthDay(this, getChronology().withUTC());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,334,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,339,"* Gets the number of fields in this partial, which is two."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,340,* The supported fields are MonthOfYear and DayOfMonth.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,341,* Note that only these fields may be queried.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,343,"* @return the field count, two"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,345,public int size() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,346,return 2;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,350,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,351,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,352,* This method must not use any instance variables.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,354,* @param index  the index to retrieve
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,355,* @param chrono  the chronology to use
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,356,"* @return the field, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,358,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,359,switch (index) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,360,case MONTH_OF_YEAR:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,361,return chrono.monthOfYear();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,362,case DAY_OF_MONTH:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,363,return chrono.dayOfMonth();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,364,default:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,365,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,370,* Gets the field type at the specified index.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,372,* @param index  the index to retrieve
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,373,"* @return the field at the specified index, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,374,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,376,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,377,return FIELD_TYPES[index];
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,381,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,382,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,383,"* The fields are returned largest to smallest, Month, Day."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,385,"* @return the array of field types (cloned), largest to smallest, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,387,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,388,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,393,* Returns a copy of this month-day with the specified chronology.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,394,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,395,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,396,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,397,* typically refer to a different instant.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,398,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,399,"* The time zone of the specified chronology is ignored, as MonthDay"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,400,* operates without a time zone.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,402,"* @param newChronology  the new chronology, null means ISO"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,403,"* @return a copy of this month-day with a different chronology, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,404,* @throws IllegalArgumentException if the values are invalid for the new chronology
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,406,public MonthDay withChronologyRetainFields(Chronology newChronology) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,407,newChronology = DateTimeUtils.getChronology(newChronology);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,408,newChronology = newChronology.withUTC();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,409,if (newChronology == getChronology()) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,410,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,411,} else {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,412,"MonthDay newMonthDay = new MonthDay(this, newChronology);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,413,"newChronology.validate(newMonthDay, getValues());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,414,return newMonthDay;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,419,* Returns a copy of this month-day with the specified field set to a new value.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,420,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,421,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,422,* would be changed in the returned instance.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,423,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,424,* These three lines are equivalent:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,425,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,426,"* MonthDay updated = md.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,427,* MonthDay updated = md.dayOfMonth().setCopy(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,428,* MonthDay updated = md.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,429,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,431,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,432,* @param value  the value to set
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,433,"* @return a copy of this instance with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,434,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,436,"public MonthDay withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,437,int index = indexOfSupported(fieldType);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,438,if (value == getValue(index)) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,439,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,441,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,442,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,443,"return new MonthDay(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,447,* Returns a copy of this month-day with the value of the specified field increased.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,448,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,449,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,450,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,451,* These three lines are equivalent:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,452,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,453,"* MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,454,* MonthDay added = md.plusDays(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,455,* MonthDay added = md.dayOfMonth().addToCopy(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,456,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,458,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,459,* @param amount  the amount to add
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,460,"* @return a copy of this instance with the field updated, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,461,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,462,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,464,"public MonthDay withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,465,int index = indexOfSupported(fieldType);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,466,if (amount == 0) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,467,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,469,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,470,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,471,"return new MonthDay(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,475,* Returns a copy of this month-day with the specified period added.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,476,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,477,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,478,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,479,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,480,* This method is typically used to add multiple copies of complex
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,481,* period instances. Adding one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,482,"* like {@link #withFieldAdded(DurationFieldType, int)}"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,483,* or {@link #plusMonths(int)}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,485,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,486,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,487,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,488,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,490,"public MonthDay withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,491,if (period == null || scalar == 0) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,492,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,494,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,495,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,496,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,497,int index = indexOf(fieldType);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,498,if (index >= 0) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,499,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,500,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,503,"return new MonthDay(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,508,* Returns a copy of this month-day with the specified period added.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,509,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,510,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,511,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,512,* This method is typically used to add complex period instances.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,513,* Adding one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,514,* like {@link #plusMonths(int)}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,516,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,517,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,518,* @throws ArithmeticException if the new month-day exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,520,public MonthDay plus(ReadablePeriod period) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,521,"return withPeriodAdded(period, 1);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,526,* Returns a copy of this month-day plus the specified number of months.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,527,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,528,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,529,* The month will wrap at the end of the year from December to January.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,530,* The day will be adjusted to the last valid value if necessary.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,531,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,532,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,533,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,534,* MonthDay added = md.plusMonths(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,535,* MonthDay added = md.plus(Period.months(6));
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,536,"* MonthDay added = md.withFieldAdded(DurationFieldType.months(), 6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,537,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,539,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,540,"* @return the new month-day plus the increased months, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,542,public MonthDay plusMonths(int months) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,543,"return withFieldAdded(DurationFieldType.months(), months);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,547,* Returns a copy of this month-day plus the specified number of days.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,548,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,549,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,550,* The month will wrap at the end of the year from December to January.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,551,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,552,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,553,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,554,* MonthDay added = md.plusDays(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,555,* MonthDay added = md.plus(Period.days(6));
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,556,"* MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,557,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,559,"* @param days  the amount of days to add, may be negative"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,560,"* @return the new month-day plus the increased days, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,562,public MonthDay plusDays(int days) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,563,"return withFieldAdded(DurationFieldType.days(), days);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,568,* Returns a copy of this month-day with the specified period taken away.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,569,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,570,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,571,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,572,* This method is typically used to subtract complex period instances.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,573,* Subtracting one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,574,* like {@link #minusMonths(int)}.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,576,* @param period  the period to reduce this instant by
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,577,"* @return a copy of this instance with the period taken away, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,578,* @throws ArithmeticException if the new month-day exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,580,public MonthDay minus(ReadablePeriod period) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,581,"return withPeriodAdded(period, -1);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,586,* Returns a copy of this month-day minus the specified number of months.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,587,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,588,* This MonthDay instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,589,* The month will wrap at the end of the year from January to December.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,590,* The day will be adjusted to the last valid value if necessary.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,591,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,592,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,593,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,594,* MonthDay subtracted = md.minusMonths(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,595,* MonthDay subtracted = md.minus(Period.months(6));
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,596,"* MonthDay subtracted = md.withFieldAdded(DurationFieldType.months(), -6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,597,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,599,"* @param months  the amount of months to subtract, may be negative"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,600,"* @return the new month-day minus the increased months, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,602,public MonthDay minusMonths(int months) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,603,"return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,607,* Returns a copy of this month-day minus the specified number of months.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,608,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,609,* This month-day instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,610,* The month will wrap at the end of the year from January to December.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,611,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,612,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,613,* <pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,614,* MonthDay subtracted = md.minusDays(6);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,615,* MonthDay subtracted = md.minus(Period.days(6));
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,616,"* MonthDay subtracted = md.withFieldAdded(DurationFieldType.days(), -6);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,617,* </pre>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,619,"* @param days  the amount of days to subtract, may be negative"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,620,"* @return the new month-day minus the increased days, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,622,public MonthDay minusDays(int days) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,623,"return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,628,* Converts this object to a LocalDate with the same month-day and chronology.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,630,"* @param year  the year to use, valid for chronology"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,631,"* @return a LocalDate with the same month-day and chronology, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,633,public LocalDate toLocalDate(int year) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,634,"return new LocalDate(year, getMonthOfYear(), getDayOfMonth(), getChronology());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,639,* Get the month of year field value.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,641,* @return the month of year
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,643,public int getMonthOfYear() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,644,return getValue(MONTH_OF_YEAR);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,648,* Get the day of month field value.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,650,* @return the day of month
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,652,public int getDayOfMonth() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,653,return getValue(DAY_OF_MONTH);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,658,* Returns a copy of this month-day with the month of year field updated.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,659,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,660,"* MonthDay is immutable, so there are no set methods."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,661,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,662,* month of year changed.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,664,* @param monthOfYear  the month of year to set
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,665,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,666,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,668,public MonthDay withMonthOfYear(int monthOfYear) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,669,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,670,"newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,671,"return new MonthDay(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,675,* Returns a copy of this month-day with the day of month field updated.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,676,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,677,"* MonthDay is immutable, so there are no set methods."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,678,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,679,* day of month changed.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,681,* @param dayOfMonth  the day of month to set
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,682,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,683,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,685,public MonthDay withDayOfMonth(int dayOfMonth) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,686,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,687,"newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,688,"return new MonthDay(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,693,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,694,* many useful methods.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,696,* @param type  the field type to get the property for
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,697,* @return the property object
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,698,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,700,public Property property(DateTimeFieldType type) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,701,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,706,* Get the month of year field property which provides access to advanced functionality.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,708,* @return the month of year property
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,710,public Property monthOfYear() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,711,"return new Property(this, MONTH_OF_YEAR);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,715,* Get the day of month field property which provides access to advanced functionality.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,717,* @return the day of month property
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,719,public Property dayOfMonth() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,720,"return new Property(this, DAY_OF_MONTH);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,725,* Output the month-day in ISO8601 format (--MM-dd).
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,727,* @return ISO8601 time formatted string.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,729,@ToString
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,730,public String toString() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,731,List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,732,fields.add(DateTimeFieldType.monthOfYear());
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,733,fields.add(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,734,"return ISODateTimeFormat.forFields(fields, true, true).print(this);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,738,* Output the month-day using the specified format pattern.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,740,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,741,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,743,public String toString(String pattern) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,744,if (pattern == null) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,745,return toString();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,747,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,751,* Output the month-day using the specified format pattern.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,753,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,754,"* @param locale  Locale to use, null means default"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,755,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,757,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,758,if (pattern == null) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,759,return toString();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,761,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,766,* The property class for <code>MonthDay</code>.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,767,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,768,* This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,770,* @author Chris Pheby
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,771,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,773,public static class Property extends AbstractPartialFieldProperty implements Serializable {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,775,/** Serialization version */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,776,private static final long serialVersionUID = 5727734012190224363L;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,778,/** The partial */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,779,private final MonthDay iBase;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,780,/** The field index */
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,781,private final int iFieldIndex;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,784,* Constructs a property.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,786,* @param partial  the partial instance
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,787,* @param fieldIndex  the index in the partial
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,789,"Property(MonthDay partial, int fieldIndex) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,790,super();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,791,iBase = partial;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,792,iFieldIndex = fieldIndex;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,796,* Gets the field that this property uses.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,798,* @return the field
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,800,public DateTimeField getField() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,801,return iBase.getField(iFieldIndex);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,805,* Gets the partial that this property belongs to.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,807,* @return the partial
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,809,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,810,return iBase;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,814,* Gets the partial that this property belongs to.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,816,* @return the partial
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,818,public MonthDay getMonthDay() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,819,return iBase;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,823,* Gets the value of this field.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,825,* @return the field value
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,827,public int get() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,828,return iBase.getValue(iFieldIndex);
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,833,* Adds to the value of this field in a copy of this MonthDay.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,834,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,835,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,836,* added solely to this field then it will affect larger fields.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,837,* Smaller fields are unaffected.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,838,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,839,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,840,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,842,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,843,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,844,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,846,public MonthDay addToCopy(int valueToAdd) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,847,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,848,"newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,849,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,853,* Adds to the value of this field in a copy of this MonthDay wrapping
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,854,* within this field if the maximum value is reached.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,855,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,856,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,857,* added solely to this field then it wraps within this field.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,858,* Other fields are unaffected.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,859,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,860,"* For example,"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,861,* <code>--12-30</code> addWrapField one month returns <code>--01-30</code>.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,862,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,863,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,864,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,866,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,867,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,868,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,870,public MonthDay addWrapFieldToCopy(int valueToAdd) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,871,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,872,"newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,873,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,878,* Sets this field in a copy of the MonthDay.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,879,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,880,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,881,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,883,* @param value  the value to set the field in the copy to
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,884,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,885,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,887,public MonthDay setCopy(int value) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,888,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,889,"newValues = getField().set(iBase, iFieldIndex, newValues, value);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,890,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,894,* Sets this field in a copy of the MonthDay to a parsed text value.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,895,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,896,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,897,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,899,* @param text  the text value to set
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,900,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,901,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,902,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,904,"public MonthDay setCopy(String text, Locale locale) {"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,905,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,906,"newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,907,"return new MonthDay(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,911,* Sets this field in a copy of the MonthDay to a parsed text value.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,912,* <p>
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,913,* The MonthDay attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,914,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,916,* @param text  the text value to set
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,917,* @return a copy of the MonthDay with the field value changed
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,918,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,920,public MonthDay setCopy(String text) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,src/main/java/org/joda/time/MonthDay.java,921,"return setCopy(text, null);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,6,  You may obtain a copy of the License at
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,14,  limitations under the License.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,16,ackage org.joda.time;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,18,mport java.io.Serializable;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,19,mport java.util.Calendar;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,20,mport java.util.Date;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,21,mport java.util.Locale;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,23,mport org.joda.convert.FromString;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,24,mport org.joda.convert.ToString;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,25,mport org.joda.time.base.BasePartial;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,26,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,27,mport org.joda.time.field.AbstractPartialFieldProperty;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,28,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,29,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,30,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,31,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,34, YearMonth is an immutable partial supporting the year and monthOfYear fields.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,35, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,36, NOTE: This class only supports the two fields listed above.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,37," It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,38, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,39, Calculations on YearMonth are performed using a {@link Chronology}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,40, This chronology is set to be in the UTC time zone for all calculations.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,41, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,42," One use case for this class is to store a credit card expiry date, as that only"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,43, references the year and month.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,44, This class can be used as the gYearMonth type in XML Schema.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,45, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,46, Each individual field can be queried in two ways:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,47, <ul>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,48, <li><code>getMonthOfYear()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,49, <li><code>monthOfYear().get()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,50, </ul>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,51, The second technique also provides access to other useful methods on the
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,52, field:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,53, <ul>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,54, <li>numeric value - <code>monthOfYear().get()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,55, <li>text value - <code>monthOfYear().getAsText()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,56, <li>short text value - <code>monthOfYear().getAsShortText()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,57, <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,58, <li>add/subtract - <code>monthOfYear().addToCopy()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,59, <li>set - <code>monthOfYear().setCopy()</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,60, </ul>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,61, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,62," YearMonth is thread-safe and immutable, provided that the Chronology is as well."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,63, All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,65, @author Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,66, @since 2.0
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,68,ublic final class YearMonth
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,69,xtends BasePartial
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,70,"mplements ReadablePartial, Serializable {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,72,** Serialization version */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,73,rivate static final long serialVersionUID = 797544782896179L;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,74,** The singleton set of field types */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,75,rivate static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,76,"ateTimeFieldType.year(),"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,77,"ateTimeFieldType.monthOfYear(),"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,80,** The index of the year field in the field array */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,81,ublic static final int YEAR = 0;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,82,** The index of the monthOfYear field in the field array */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,83,ublic static final int MONTH_OF_YEAR = 1;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,87, Parses a {@code YearMonth} from the specified string.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,88, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,89, This uses {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,91," @param str  the string to parse, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,92, @since 2.0
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,94,FromString
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,95,ublic static YearMonth parse(String str) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,96,"eturn parse(str, ISODateTimeFormat.localDateParser());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,100, Parses a {@code YearMonth} from the specified string using a formatter.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,102," @param str  the string to parse, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,103," @param formatter  the formatter to use, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,104, @since 2.0
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,106,"ublic static YearMonth parse(String str, DateTimeFormatter formatter) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,107,ocalDate date = formatter.parseLocalDate(str);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,108,"eturn new YearMonth(date.getYear(), date.getMonthOfYear());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,113, Constructs a YearMonth from a <code>java.util.Calendar</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,114, using exactly the same field values avoiding any time zone effects.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,115, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,116, Each field is queried from the Calendar and assigned to the YearMonth.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,117, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,118, This factory method ignores the type of the calendar and always
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,119, creates a YearMonth with ISO chronology. It is expected that you
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,120, will only pass in instances of <code>GregorianCalendar</code> however
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,121, this is not validated.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,123, @param calendar  the Calendar to extract fields from
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,124," @return the created YearMonth, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,125, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,126, @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,128,ublic static YearMonth fromCalendarFields(Calendar calendar) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,129,f (calendar == null) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,130,"hrow new IllegalArgumentException(""The calendar must not be null"");"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,132,"eturn new YearMonth(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,136, Constructs a YearMonth from a <code>java.util.Date</code>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,137, using exactly the same field values avoiding any time zone effects.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,138, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,139, Each field is queried from the Date and assigned to the YearMonth.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,140, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,141, This factory method always creates a YearMonth with ISO chronology.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,143, @param date  the Date to extract fields from
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,144," @return the created YearMonth, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,145, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,146, @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,148,"SuppressWarnings(""deprecation"")"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,149,ublic static YearMonth fromDateFields(Date date) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,150,f (date == null) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,151,"hrow new IllegalArgumentException(""The date must not be null"");"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,153,"eturn new YearMonth(date.getYear() + 1900, date.getMonth() + 1);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,158," Constructs a YearMonth with the current year-month, using ISOChronology in"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,159, the default zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,160, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,161," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,162," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,163, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,165,ublic YearMonth() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,166,uper();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,170," Constructs a YearMonth with the current year-month, using ISOChronology in"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,171, the specified zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,172, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,173, The constructor uses the specified time zone to obtain the current year-month.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,174," Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,175, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,177," @param zone  the zone to use, null means default zone"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,179,ublic YearMonth(DateTimeZone zone) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,180,uper(ISOChronology.getInstance(zone));
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,184," Constructs a YearMonth with the current year-month, using the specified chronology"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,185, and zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,186, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,187, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,188," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,189, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,191," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,193,ublic YearMonth(Chronology chronology) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,194,uper(chronology);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,198, Constructs a YearMonth extracting the partial fields from the specified
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,199, milliseconds using the ISOChronology in the default zone.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,200, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,201," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,202," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,203, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,205, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,207,ublic YearMonth(long instant) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,208,uper(instant);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,212, Constructs a YearMonth extracting the partial fields from the specified
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,213, milliseconds using the chronology provided.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,214, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,215, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,216," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,217, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,219, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,220," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,222,"ublic YearMonth(long instant, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,223,"uper(instant, chronology);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,227, Constructs a YearMonth from an Object that represents some form of time.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,228, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,229, The recognised object types are defined in
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,230, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,231," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,232, The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,233, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,234," The chronology used will be derived from the object, defaulting to ISO."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,236," @param instant  the date-time object, null means now"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,237, @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,239,ublic YearMonth(Object instant) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,240,"uper(instant, null, ISODateTimeFormat.localDateParser());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,244," Constructs a YearMonth from an Object that represents some form of time,"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,245, using the specified chronology.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,246, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,247, The recognised object types are defined in
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,248, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,249," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,250, The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,251, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,252, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,253," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,254, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,255, The specified chronology overrides that of the object.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,257," @param instant  the date-time object, null means now"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,258," @param chronology  the chronology, null means ISO default"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,259, @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,261,"ublic YearMonth(Object instant, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,262,"uper(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,266, Constructs a YearMonth with specified year and month
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,267, using <code>ISOChronology</code>.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,268, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,269, The constructor uses the no time zone initialising the fields as provided.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,270," Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,271, are performed without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,273, @param year  the year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,274, @param monthOfYear  the month of the year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,276,"ublic YearMonth(int year, int monthOfYear) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,277,"his(year, monthOfYear, null);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,281, Constructs an instance set to the specified year and month
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,282," using the specified chronology, whose zone is ignored."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,283, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,284," If the chronology is null, <code>ISOChronology</code> is used."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,285, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,286, The constructor uses the time zone of the chronology specified.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,287," Once the constructor is complete, all further calculations are performed"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,288, without reference to a time-zone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,290, @param year  the year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,291, @param monthOfYear  the month of the year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,292," @param chronology  the chronology, null means ISOChronology in the default zone"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,294,"ublic YearMonth(int year, int monthOfYear, Chronology chronology) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,295,"uper(new int[] {year, monthOfYear}, chronology);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,299, Constructs a YearMonth with chronology from this instance and new values.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,301, @param partial  the partial to base this new instance on
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,302, @param values  the new set of values
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,304,"earMonth(YearMonth partial, int[] values) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,305,"uper(partial, values);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,309, Constructs a YearMonth with values from this instance and a new chronology.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,311, @param partial  the partial to base this new instance on
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,312, @param chrono  the new chronology
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,314,"earMonth(YearMonth partial, Chronology chrono) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,315,"uper(partial, chrono);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,319, Handle broken serialization from other tools.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,320," @return the resolved object, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,322,rivate Object readResolve() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,323,f (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,324,"eturn new YearMonth(this, getChronology().withUTC());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,326,eturn this;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,331," Gets the number of fields in this partial, which is two."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,332, The supported fields are Year and MonthOfYear.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,333, Note that only these fields may be queried.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,335," @return the field count, two"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,337,ublic int size() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,338,eturn 2;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,342, Gets the field for a specific index in the chronology specified.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,343, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,344, This method must not use any instance variables.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,346, @param index  the index to retrieve
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,347, @param chrono  the chronology to use
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,348," @return the field, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,350,"rotected DateTimeField getField(int index, Chronology chrono) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,351,witch (index) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,352,ase YEAR:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,353,eturn chrono.year();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,354,ase MONTH_OF_YEAR:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,355,eturn chrono.monthOfYear();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,356,efault:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,357,"hrow new IndexOutOfBoundsException(""Invalid index: "" + index);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,362, Gets the field type at the specified index.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,364, @param index  the index to retrieve
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,365," @return the field at the specified index, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,366, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,368,ublic DateTimeFieldType getFieldType(int index) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,369,eturn FIELD_TYPES[index];
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,373, Gets an array of the field type of each of the fields that this partial supports.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,374, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,375," The fields are returned largest to smallest, Year, Month."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,377," @return the array of field types (cloned), largest to smallest, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,379,ublic DateTimeFieldType[] getFieldTypes() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,380,eturn (DateTimeFieldType[]) FIELD_TYPES.clone();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,385, Returns a copy of this year-month with the specified chronology.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,386, This instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,387, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,388," This method retains the values of the fields, thus the result will"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,389, typically refer to a different instant.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,390, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,391," The time zone of the specified chronology is ignored, as YearMonth"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,392, operates without a time zone.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,394," @param newChronology  the new chronology, null means ISO"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,395," @return a copy of this year-month with a different chronology, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,396, @throws IllegalArgumentException if the values are invalid for the new chronology
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,398,ublic YearMonth withChronologyRetainFields(Chronology newChronology) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,399,ewChronology = DateTimeUtils.getChronology(newChronology);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,400,ewChronology = newChronology.withUTC();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,401,f (newChronology == getChronology()) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,402,eturn this;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,403, else {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,404,"earMonth newYearMonth = new YearMonth(this, newChronology);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,405,"ewChronology.validate(newYearMonth, getValues());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,406,eturn newYearMonth;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,411, Returns a copy of this year-month with the specified field set to a new value.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,412, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,413," For example, if the field type is <code>monthOfYear</code> then the month"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,414, would be changed in the returned instance.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,415, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,416, These three lines are equivalent:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,417, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,418," YearMonth updated = ym.withField(DateTimeFieldType.monthOfYear(), 6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,419, YearMonth updated = ym.monthOfYear().setCopy(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,420, YearMonth updated = ym.property(DateTimeFieldType.monthOfYear()).setCopy(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,421, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,423," @param fieldType  the field type to set, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,424, @param value  the value to set
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,425," @return a copy of this instance with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,426, @throws IllegalArgumentException if the value is null or invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,428,"ublic YearMonth withField(DateTimeFieldType fieldType, int value) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,429,nt index = indexOfSupported(fieldType);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,430,f (value == getValue(index)) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,431,eturn this;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,433,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,434,"ewValues = getField(index).set(this, index, newValues, value);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,435,"eturn new YearMonth(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,439, Returns a copy of this year-month with the value of the specified field increased.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,440, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,441," If the addition is zero, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,442, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,443, These three lines are equivalent:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,444, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,445," YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,446, YearMonth added = ym.plusMonths(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,447, YearMonth added = ym.monthOfYear().addToCopy(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,448, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,450," @param fieldType  the field type to add to, not null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,451, @param amount  the amount to add
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,452," @return a copy of this instance with the field updated, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,453, @throws IllegalArgumentException if the value is null or invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,454, @throws ArithmeticException if the new date-time exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,456,"ublic YearMonth withFieldAdded(DurationFieldType fieldType, int amount) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,457,nt index = indexOfSupported(fieldType);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,458,f (amount == 0) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,459,eturn this;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,461,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,462,"ewValues = getField(index).add(this, index, newValues, amount);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,463,"eturn new YearMonth(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,467, Returns a copy of this year-month with the specified period added.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,468, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,469," If the addition is zero, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,470, Fields in the period that aren't present in the partial are ignored.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,471, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,472, This method is typically used to add multiple copies of complex
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,473, period instances. Adding one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,474," like {@link #withFieldAdded(DurationFieldType, int)}"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,475, or {@link #plusYears(int)}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,477," @param period  the period to add to this one, null means zero"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,478," @param scalar  the amount of times to add, such as -1 to subtract once"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,479," @return a copy of this instance with the period added, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,480, @throws ArithmeticException if the new date-time exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,482,"ublic YearMonth withPeriodAdded(ReadablePeriod period, int scalar) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,483,f (period == null || scalar == 0) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,484,eturn this;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,486,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,487,or (int i = 0; i < period.size(); i++) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,488,urationFieldType fieldType = period.getFieldType(i);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,489,nt index = indexOf(fieldType);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,490,f (index >= 0) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,491,"ewValues = getField(index).add(this, index, newValues,"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,492,"ieldUtils.safeMultiply(period.getValue(i), scalar));"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,495,"eturn new YearMonth(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,500, Returns a copy of this year-month with the specified period added.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,501, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,502," If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,503, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,504, This method is typically used to add complex period instances.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,505, Adding one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,506, like {@link #plusYears(int)}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,508," @param period  the duration to add to this one, null means zero"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,509," @return a copy of this instance with the period added, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,510, @throws ArithmeticException if the new year-month exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,512,ublic YearMonth plus(ReadablePeriod period) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,513,"eturn withPeriodAdded(period, 1);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,518, Returns a copy of this year-month plus the specified number of years.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,519, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,520, This year-month instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,521, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,522, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,523, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,524, YearMonth added = ym.plusYears(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,525, YearMonth added = ym.plus(Period.years(6));
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,526," YearMonth added = ym.withFieldAdded(DurationFieldType.years(), 6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,527, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,529," @param years  the amount of years to add, may be negative"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,530," @return the new year-month plus the increased years, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,532,ublic YearMonth plusYears(int years) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,533,"eturn withFieldAdded(DurationFieldType.years(), years);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,537, Returns a copy of this year-month plus the specified number of months.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,538, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,539, This year-month instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,540, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,541, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,542, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,543, YearMonth added = ym.plusMonths(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,544, YearMonth added = ym.plus(Period.months(6));
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,545," YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,546, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,548," @param months  the amount of months to add, may be negative"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,549," @return the new year-month plus the increased months, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,551,ublic YearMonth plusMonths(int months) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,552,"eturn withFieldAdded(DurationFieldType.months(), months);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,557, Returns a copy of this year-month with the specified period taken away.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,558, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,559," If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,560, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,561, This method is typically used to subtract complex period instances.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,562, Subtracting one field is best achieved using methods
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,563, like {@link #minusYears(int)}.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,565, @param period  the period to reduce this instant by
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,566," @return a copy of this instance with the period taken away, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,567, @throws ArithmeticException if the new year-month exceeds the capacity
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,569,ublic YearMonth minus(ReadablePeriod period) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,570,"eturn withPeriodAdded(period, -1);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,575, Returns a copy of this year-month minus the specified number of years.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,576, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,577, This year-month instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,578, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,579, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,580, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,581, YearMonth subtracted = ym.minusYears(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,582, YearMonth subtracted = ym.minus(Period.years(6));
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,583," YearMonth subtracted = ym.withFieldAdded(DurationFieldType.years(), -6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,584, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,586," @param years  the amount of years to subtract, may be negative"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,587," @return the new year-month minus the increased years, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,589,ublic YearMonth minusYears(int years) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,590,"eturn withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(years));"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,594, Returns a copy of this year-month minus the specified number of months.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,595, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,596, This year-month instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,597, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,598, The following three lines are identical in effect:
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,599, <pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,600, YearMonth subtracted = ym.minusMonths(6);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,601, YearMonth subtracted = ym.minus(Period.months(6));
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,602," YearMonth subtracted = ym.withFieldAdded(DurationFieldType.months(), -6);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,603, </pre>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,605," @param months  the amount of months to subtract, may be negative"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,606," @return the new year-month minus the increased months, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,608,ublic YearMonth minusMonths(int months) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,609,"eturn withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,614, Converts this object to a LocalDate with the same year-month and chronology.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,616," @param dayOfMonth the day of month to use, valid for chronology, such as 1-31 for ISO"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,617," @return a LocalDate with the same year-month and chronology, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,619,ublic LocalDate toLocalDate(int dayOfMonth) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,620,"eturn new LocalDate(getYear(), getMonthOfYear(), dayOfMonth, getChronology());"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,625, Converts this object to an Interval representing the whole month.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,626, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,627, The interval will use the chronology of the year-month in the default zone.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,628, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,629, This instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,631," @return an interval over the month, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,633,ublic Interval toInterval() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,634,eturn toInterval(null);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,638, Converts this object to an Interval representing the whole month.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,639, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,640, The interval will use the chronology of the year-month in the specified zone.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,641, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,642, This instance is immutable and unaffected by this method call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,644," @param zone  the zone to get the Interval in, null means default"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,645," @return an interval over the month, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,647,ublic Interval toInterval(DateTimeZone zone) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,648,one = DateTimeUtils.getZone(zone);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,649,ateTime start = toLocalDate(1).toDateTimeAtStartOfDay(zone);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,650,ateTime end = plusMonths(1).toLocalDate(1).toDateTimeAtStartOfDay(zone);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,651,"eturn new Interval(start, end);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,656, Get the year field value.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,658, @return the year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,660,ublic int getYear() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,661,eturn getValue(YEAR);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,665, Get the month of year field value.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,667, @return the month of year
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,669,ublic int getMonthOfYear() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,670,eturn getValue(MONTH_OF_YEAR);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,675, Returns a copy of this year-month with the year field updated.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,676, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,677," YearMonth is immutable, so there are no set methods."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,678," Instead, this method returns a new instance with the value of"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,679, year changed.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,681, @param year  the year to set
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,682," @return a copy of this object with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,683, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,685,ublic YearMonth withYear(int year) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,686,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,687,"ewValues = getChronology().year().set(this, YEAR, newValues, year);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,688,"eturn new YearMonth(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,692, Returns a copy of this year-month with the month of year field updated.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,693, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,694," YearMonth is immutable, so there are no set methods."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,695," Instead, this method returns a new instance with the value of"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,696, month of year changed.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,698, @param monthOfYear  the month of year to set
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,699," @return a copy of this object with the field set, never null"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,700, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,702,ublic YearMonth withMonthOfYear(int monthOfYear) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,703,nt[] newValues = getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,704,"ewValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,705,"eturn new YearMonth(this, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,710," Gets the property object for the specified type, which contains"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,711, many useful methods.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,713, @param type  the field type to get the property for
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,714, @return the property object
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,715, @throws IllegalArgumentException if the field is null or unsupported
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,717,ublic Property property(DateTimeFieldType type) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,718,"eturn new Property(this, indexOfSupported(type));"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,723, Get the year field property which provides access to advanced functionality.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,725, @return the year property
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,727,ublic Property year() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,728,"eturn new Property(this, YEAR);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,732, Get the month of year field property which provides access to advanced functionality.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,734, @return the month of year property
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,736,ublic Property monthOfYear() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,737,"eturn new Property(this, MONTH_OF_YEAR);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,742, Output the year-month in ISO8601 format (yyyy-MM).
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,744, @return ISO8601 time formatted string.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,746,ToString
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,747,ublic String toString() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,748,eturn ISODateTimeFormat.yearMonth().print(this);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,752, Output the year-month using the specified format pattern.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,754," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,755, @see org.joda.time.format.DateTimeFormat
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,757,ublic String toString(String pattern) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,758,f (pattern == null) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,759,eturn toString();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,761,eturn DateTimeFormat.forPattern(pattern).print(this);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,765, Output the year-month using the specified format pattern.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,767," @param pattern  the pattern specification, null means use <code>toString</code>"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,768," @param locale  Locale to use, null means default"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,769, @see org.joda.time.format.DateTimeFormat
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,771,"ublic String toString(String pattern, Locale locale) throws IllegalArgumentException {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,772,f (pattern == null) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,773,eturn toString();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,775,eturn DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,780, The property class for <code>YearMonth</code>.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,781, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,782, This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,784, @author Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,785, @since 2.0
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,787,ublic static class Property extends AbstractPartialFieldProperty implements Serializable {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,789,** Serialization version */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,790,rivate static final long serialVersionUID = 5727734012190224363L;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,792,** The partial */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,793,rivate final YearMonth iBase;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,794,** The field index */
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,795,rivate final int iFieldIndex;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,798, Constructs a property.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,800, @param partial  the partial instance
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,801, @param fieldIndex  the index in the partial
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,803,"roperty(YearMonth partial, int fieldIndex) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,804,uper();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,805,Base = partial;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,806,FieldIndex = fieldIndex;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,810, Gets the field that this property uses.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,812, @return the field
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,814,ublic DateTimeField getField() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,815,eturn iBase.getField(iFieldIndex);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,819, Gets the partial that this property belongs to.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,821, @return the partial
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,823,rotected ReadablePartial getReadablePartial() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,824,eturn iBase;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,828, Gets the partial that this property belongs to.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,830, @return the partial
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,832,ublic YearMonth getYearMonth() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,833,eturn iBase;
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,837, Gets the value of this field.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,839, @return the field value
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,841,ublic int get() {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,842,eturn iBase.getValue(iFieldIndex);
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,847, Adds to the value of this field in a copy of this YearMonth.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,848, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,849, The value will be added to this field. If the value is too large to be
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,850, added solely to this field then it will affect larger fields.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,851, Smaller fields are unaffected.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,852, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,853," If the result would be too large, beyond the maximum year, then an"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,854, IllegalArgumentException is thrown.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,855, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,856, The YearMonth attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,857," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,859, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,860, @return a copy of the YearMonth with the field value changed
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,861, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,863,ublic YearMonth addToCopy(int valueToAdd) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,864,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,865,"ewValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,866,"eturn new YearMonth(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,870, Adds to the value of this field in a copy of this YearMonth wrapping
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,871, within this field if the maximum value is reached.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,872, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,873, The value will be added to this field. If the value is too large to be
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,874, added solely to this field then it wraps within this field.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,875, Other fields are unaffected.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,876, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,877," For example,"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,878, <code>2004-12</code> addWrapField one month returns <code>2004-01</code>.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,879, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,880, The YearMonth attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,881," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,883, @param valueToAdd  the value to add to the field in the copy
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,884, @return a copy of the YearMonth with the field value changed
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,885, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,887,ublic YearMonth addWrapFieldToCopy(int valueToAdd) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,888,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,889,"ewValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,890,"eturn new YearMonth(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,895, Sets this field in a copy of the YearMonth.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,896, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,897, The YearMonth attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,898," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,900, @param value  the value to set the field in the copy to
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,901, @return a copy of the YearMonth with the field value changed
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,902, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,904,ublic YearMonth setCopy(int value) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,905,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,906,"ewValues = getField().set(iBase, iFieldIndex, newValues, value);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,907,"eturn new YearMonth(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,911, Sets this field in a copy of the YearMonth to a parsed text value.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,912, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,913, The YearMonth attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,914," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,916, @param text  the text value to set
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,917, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,918, @return a copy of the YearMonth with the field value changed
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,919, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,921,"ublic YearMonth setCopy(String text, Locale locale) {"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,922,nt[] newValues = iBase.getValues();
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,923,"ewValues = getField().set(iBase, iFieldIndex, newValues, text, locale);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,924,"eturn new YearMonth(iBase, newValues);"
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,928, Sets this field in a copy of the YearMonth to a parsed text value.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,929, <p>
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,930, The YearMonth attached to this property is unchanged by this call.
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,931," Instead, a new instance is returned."
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,933, @param text  the text value to set
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,934, @return a copy of the YearMonth with the field value changed
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,935, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,937,ublic YearMonth setCopy(String text) {
False,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,938,"eturn setCopy(text, null);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,14,*  limitations under the License.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,16,package org.joda.time;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,18,import java.io.Serializable;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,19,import java.util.Calendar;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,20,import java.util.Date;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,21,import java.util.Locale;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,23,import org.joda.convert.FromString;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,24,import org.joda.convert.ToString;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,25,import org.joda.time.base.BasePartial;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,27,import org.joda.time.field.AbstractPartialFieldProperty;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,28,import org.joda.time.field.FieldUtils;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,29,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,30,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,31,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,34,* YearMonth is an immutable partial supporting the year and monthOfYear fields.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,35,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,36,* NOTE: This class only supports the two fields listed above.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,37,"* It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,38,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,39,* Calculations on YearMonth are performed using a {@link Chronology}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,40,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,41,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,42,"* One use case for this class is to store a credit card expiry date, as that only"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,43,* references the year and month.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,44,* This class can be used as the gYearMonth type in XML Schema.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,45,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,46,* Each individual field can be queried in two ways:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,47,* <ul>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,48,* <li><code>getMonthOfYear()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,49,* <li><code>monthOfYear().get()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,50,* </ul>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,51,* The second technique also provides access to other useful methods on the
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,52,* field:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,53,* <ul>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,54,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,55,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,56,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,57,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,58,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,59,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,60,* </ul>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,61,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,62,"* YearMonth is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,63,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,65,* @author Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,66,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,68,public final class YearMonth
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,69,extends BasePartial
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,70,"implements ReadablePartial, Serializable {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,72,/** Serialization version */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,73,private static final long serialVersionUID = 797544782896179L;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,74,/** The singleton set of field types */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,75,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,76,"DateTimeFieldType.year(),"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,77,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,80,/** The index of the year field in the field array */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,81,public static final int YEAR = 0;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,82,/** The index of the monthOfYear field in the field array */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,83,public static final int MONTH_OF_YEAR = 1;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,87,* Parses a {@code YearMonth} from the specified string.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,88,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,89,* This uses {@link ISODateTimeFormat#localDateParser()}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,91,"* @param str  the string to parse, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,92,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,94,@FromString
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,95,public static YearMonth parse(String str) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,96,"return parse(str, ISODateTimeFormat.localDateParser());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,100,* Parses a {@code YearMonth} from the specified string using a formatter.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,102,"* @param str  the string to parse, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,103,"* @param formatter  the formatter to use, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,104,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,106,"public static YearMonth parse(String str, DateTimeFormatter formatter) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,107,LocalDate date = formatter.parseLocalDate(str);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,108,"return new YearMonth(date.getYear(), date.getMonthOfYear());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,113,* Constructs a YearMonth from a <code>java.util.Calendar</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,114,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,115,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,116,* Each field is queried from the Calendar and assigned to the YearMonth.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,117,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,118,* This factory method ignores the type of the calendar and always
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,119,* creates a YearMonth with ISO chronology. It is expected that you
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,120,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,121,* this is not validated.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,123,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,124,"* @return the created YearMonth, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,125,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,126,* @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,128,public static YearMonth fromCalendarFields(Calendar calendar) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,129,if (calendar == null) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,130,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,132,"return new YearMonth(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,136,* Constructs a YearMonth from a <code>java.util.Date</code>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,137,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,138,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,139,* Each field is queried from the Date and assigned to the YearMonth.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,140,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,141,* This factory method always creates a YearMonth with ISO chronology.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,143,* @param date  the Date to extract fields from
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,144,"* @return the created YearMonth, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,145,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,146,* @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,148,"@SuppressWarnings(""deprecation"")"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,149,public static YearMonth fromDateFields(Date date) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,150,if (date == null) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,151,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,153,"return new YearMonth(date.getYear() + 1900, date.getMonth() + 1);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,158,"* Constructs a YearMonth with the current year-month, using ISOChronology in"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,159,* the default zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,160,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,161,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,162,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,163,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,165,public YearMonth() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,166,super();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,170,"* Constructs a YearMonth with the current year-month, using ISOChronology in"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,171,* the specified zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,172,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,173,* The constructor uses the specified time zone to obtain the current year-month.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,174,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,175,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,177,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,179,public YearMonth(DateTimeZone zone) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,180,super(ISOChronology.getInstance(zone));
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,184,"* Constructs a YearMonth with the current year-month, using the specified chronology"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,185,* and zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,186,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,187,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,188,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,189,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,191,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,193,public YearMonth(Chronology chronology) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,194,super(chronology);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,198,* Constructs a YearMonth extracting the partial fields from the specified
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,199,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,200,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,201,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,202,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,203,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,205,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,207,public YearMonth(long instant) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,208,super(instant);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,212,* Constructs a YearMonth extracting the partial fields from the specified
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,213,* milliseconds using the chronology provided.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,214,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,215,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,216,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,217,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,219,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,220,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,222,"public YearMonth(long instant, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,223,"super(instant, chronology);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,227,* Constructs a YearMonth from an Object that represents some form of time.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,228,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,229,* The recognised object types are defined in
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,230,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,231,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,232,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,233,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,234,"* The chronology used will be derived from the object, defaulting to ISO."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,236,"* @param instant  the date-time object, null means now"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,237,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,239,public YearMonth(Object instant) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,240,"super(instant, null, ISODateTimeFormat.localDateParser());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,244,"* Constructs a YearMonth from an Object that represents some form of time,"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,245,* using the specified chronology.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,246,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,247,* The recognised object types are defined in
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,248,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,249,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,250,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,251,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,252,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,253,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,254,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,255,* The specified chronology overrides that of the object.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,257,"* @param instant  the date-time object, null means now"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,258,"* @param chronology  the chronology, null means ISO default"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,259,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,261,"public YearMonth(Object instant, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,262,"super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,266,* Constructs a YearMonth with specified year and month
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,267,* using <code>ISOChronology</code>.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,268,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,269,* The constructor uses the no time zone initialising the fields as provided.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,270,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,271,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,273,* @param year  the year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,274,* @param monthOfYear  the month of the year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,276,"public YearMonth(int year, int monthOfYear) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,277,"this(year, monthOfYear, null);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,281,* Constructs an instance set to the specified year and month
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,282,"* using the specified chronology, whose zone is ignored."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,283,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,284,"* If the chronology is null, <code>ISOChronology</code> is used."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,285,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,286,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,287,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,288,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,290,* @param year  the year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,291,* @param monthOfYear  the month of the year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,292,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,294,"public YearMonth(int year, int monthOfYear, Chronology chronology) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,295,"super(new int[] {year, monthOfYear}, chronology);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,299,* Constructs a YearMonth with chronology from this instance and new values.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,301,* @param partial  the partial to base this new instance on
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,302,* @param values  the new set of values
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,304,"YearMonth(YearMonth partial, int[] values) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,305,"super(partial, values);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,309,* Constructs a YearMonth with values from this instance and a new chronology.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,311,* @param partial  the partial to base this new instance on
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,312,* @param chrono  the new chronology
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,314,"YearMonth(YearMonth partial, Chronology chrono) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,315,"super(partial, chrono);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,319,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,320,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,322,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,323,if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,324,"return new YearMonth(this, getChronology().withUTC());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,326,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,331,"* Gets the number of fields in this partial, which is two."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,332,* The supported fields are Year and MonthOfYear.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,333,* Note that only these fields may be queried.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,335,"* @return the field count, two"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,337,public int size() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,338,return 2;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,342,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,343,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,344,* This method must not use any instance variables.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,346,* @param index  the index to retrieve
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,347,* @param chrono  the chronology to use
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,348,"* @return the field, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,350,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,351,switch (index) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,352,case YEAR:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,353,return chrono.year();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,354,case MONTH_OF_YEAR:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,355,return chrono.monthOfYear();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,356,default:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,357,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,362,* Gets the field type at the specified index.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,364,* @param index  the index to retrieve
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,365,"* @return the field at the specified index, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,366,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,368,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,369,return FIELD_TYPES[index];
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,373,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,374,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,375,"* The fields are returned largest to smallest, Year, Month."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,377,"* @return the array of field types (cloned), largest to smallest, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,379,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,380,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,385,* Returns a copy of this year-month with the specified chronology.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,386,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,387,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,388,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,389,* typically refer to a different instant.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,390,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,391,"* The time zone of the specified chronology is ignored, as YearMonth"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,392,* operates without a time zone.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,394,"* @param newChronology  the new chronology, null means ISO"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,395,"* @return a copy of this year-month with a different chronology, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,396,* @throws IllegalArgumentException if the values are invalid for the new chronology
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,398,public YearMonth withChronologyRetainFields(Chronology newChronology) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,399,newChronology = DateTimeUtils.getChronology(newChronology);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,400,newChronology = newChronology.withUTC();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,401,if (newChronology == getChronology()) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,402,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,403,} else {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,404,"YearMonth newYearMonth = new YearMonth(this, newChronology);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,405,"newChronology.validate(newYearMonth, getValues());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,406,return newYearMonth;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,411,* Returns a copy of this year-month with the specified field set to a new value.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,412,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,413,"* For example, if the field type is <code>monthOfYear</code> then the month"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,414,* would be changed in the returned instance.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,415,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,416,* These three lines are equivalent:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,417,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,418,"* YearMonth updated = ym.withField(DateTimeFieldType.monthOfYear(), 6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,419,* YearMonth updated = ym.monthOfYear().setCopy(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,420,* YearMonth updated = ym.property(DateTimeFieldType.monthOfYear()).setCopy(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,421,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,423,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,424,* @param value  the value to set
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,425,"* @return a copy of this instance with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,426,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,428,"public YearMonth withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,429,int index = indexOfSupported(fieldType);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,430,if (value == getValue(index)) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,431,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,433,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,434,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,435,"return new YearMonth(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,439,* Returns a copy of this year-month with the value of the specified field increased.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,440,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,441,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,442,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,443,* These three lines are equivalent:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,444,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,445,"* YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,446,* YearMonth added = ym.plusMonths(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,447,* YearMonth added = ym.monthOfYear().addToCopy(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,448,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,450,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,451,* @param amount  the amount to add
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,452,"* @return a copy of this instance with the field updated, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,453,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,454,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,456,"public YearMonth withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,457,int index = indexOfSupported(fieldType);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,458,if (amount == 0) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,459,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,461,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,462,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,463,"return new YearMonth(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,467,* Returns a copy of this year-month with the specified period added.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,468,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,469,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,470,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,471,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,472,* This method is typically used to add multiple copies of complex
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,473,* period instances. Adding one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,474,"* like {@link #withFieldAdded(DurationFieldType, int)}"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,475,* or {@link #plusYears(int)}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,477,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,478,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,479,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,480,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,482,"public YearMonth withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,483,if (period == null || scalar == 0) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,484,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,486,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,487,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,488,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,489,int index = indexOf(fieldType);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,490,if (index >= 0) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,491,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,492,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,495,"return new YearMonth(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,500,* Returns a copy of this year-month with the specified period added.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,501,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,502,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,503,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,504,* This method is typically used to add complex period instances.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,505,* Adding one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,506,* like {@link #plusYears(int)}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,508,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,509,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,510,* @throws ArithmeticException if the new year-month exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,512,public YearMonth plus(ReadablePeriod period) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,513,"return withPeriodAdded(period, 1);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,518,* Returns a copy of this year-month plus the specified number of years.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,519,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,520,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,521,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,522,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,523,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,524,* YearMonth added = ym.plusYears(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,525,* YearMonth added = ym.plus(Period.years(6));
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,526,"* YearMonth added = ym.withFieldAdded(DurationFieldType.years(), 6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,527,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,529,"* @param years  the amount of years to add, may be negative"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,530,"* @return the new year-month plus the increased years, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,532,public YearMonth plusYears(int years) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,533,"return withFieldAdded(DurationFieldType.years(), years);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,537,* Returns a copy of this year-month plus the specified number of months.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,538,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,539,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,540,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,541,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,542,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,543,* YearMonth added = ym.plusMonths(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,544,* YearMonth added = ym.plus(Period.months(6));
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,545,"* YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,546,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,548,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,549,"* @return the new year-month plus the increased months, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,551,public YearMonth plusMonths(int months) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,552,"return withFieldAdded(DurationFieldType.months(), months);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,557,* Returns a copy of this year-month with the specified period taken away.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,558,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,559,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,560,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,561,* This method is typically used to subtract complex period instances.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,562,* Subtracting one field is best achieved using methods
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,563,* like {@link #minusYears(int)}.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,565,* @param period  the period to reduce this instant by
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,566,"* @return a copy of this instance with the period taken away, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,567,* @throws ArithmeticException if the new year-month exceeds the capacity
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,569,public YearMonth minus(ReadablePeriod period) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,570,"return withPeriodAdded(period, -1);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,575,* Returns a copy of this year-month minus the specified number of years.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,576,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,577,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,578,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,579,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,580,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,581,* YearMonth subtracted = ym.minusYears(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,582,* YearMonth subtracted = ym.minus(Period.years(6));
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,583,"* YearMonth subtracted = ym.withFieldAdded(DurationFieldType.years(), -6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,584,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,586,"* @param years  the amount of years to subtract, may be negative"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,587,"* @return the new year-month minus the increased years, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,589,public YearMonth minusYears(int years) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,590,"return withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(years));"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,594,* Returns a copy of this year-month minus the specified number of months.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,595,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,596,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,597,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,598,* The following three lines are identical in effect:
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,599,* <pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,600,* YearMonth subtracted = ym.minusMonths(6);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,601,* YearMonth subtracted = ym.minus(Period.months(6));
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,602,"* YearMonth subtracted = ym.withFieldAdded(DurationFieldType.months(), -6);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,603,* </pre>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,605,"* @param months  the amount of months to subtract, may be negative"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,606,"* @return the new year-month minus the increased months, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,608,public YearMonth minusMonths(int months) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,609,"return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,614,* Converts this object to a LocalDate with the same year-month and chronology.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,616,"* @param dayOfMonth the day of month to use, valid for chronology, such as 1-31 for ISO"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,617,"* @return a LocalDate with the same year-month and chronology, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,619,public LocalDate toLocalDate(int dayOfMonth) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,620,"return new LocalDate(getYear(), getMonthOfYear(), dayOfMonth, getChronology());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,625,* Converts this object to an Interval representing the whole month.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,626,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,627,* The interval will use the chronology of the year-month in the default zone.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,628,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,629,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,631,"* @return an interval over the month, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,633,public Interval toInterval() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,634,return toInterval(null);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,638,* Converts this object to an Interval representing the whole month.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,639,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,640,* The interval will use the chronology of the year-month in the specified zone.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,641,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,642,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,644,"* @param zone  the zone to get the Interval in, null means default"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,645,"* @return an interval over the month, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,647,public Interval toInterval(DateTimeZone zone) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,648,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,649,DateTime start = toLocalDate(1).toDateTimeAtStartOfDay(zone);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,650,DateTime end = plusMonths(1).toLocalDate(1).toDateTimeAtStartOfDay(zone);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,651,"return new Interval(start, end);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,656,* Get the year field value.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,658,* @return the year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,660,public int getYear() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,661,return getValue(YEAR);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,665,* Get the month of year field value.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,667,* @return the month of year
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,669,public int getMonthOfYear() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,670,return getValue(MONTH_OF_YEAR);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,675,* Returns a copy of this year-month with the year field updated.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,676,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,677,"* YearMonth is immutable, so there are no set methods."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,678,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,679,* year changed.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,681,* @param year  the year to set
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,682,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,683,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,685,public YearMonth withYear(int year) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,686,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,687,"newValues = getChronology().year().set(this, YEAR, newValues, year);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,688,"return new YearMonth(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,692,* Returns a copy of this year-month with the month of year field updated.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,693,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,694,"* YearMonth is immutable, so there are no set methods."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,695,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,696,* month of year changed.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,698,* @param monthOfYear  the month of year to set
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,699,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,700,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,702,public YearMonth withMonthOfYear(int monthOfYear) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,703,int[] newValues = getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,704,"newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,705,"return new YearMonth(this, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,710,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,711,* many useful methods.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,713,* @param type  the field type to get the property for
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,714,* @return the property object
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,715,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,717,public Property property(DateTimeFieldType type) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,718,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,723,* Get the year field property which provides access to advanced functionality.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,725,* @return the year property
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,727,public Property year() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,728,"return new Property(this, YEAR);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,732,* Get the month of year field property which provides access to advanced functionality.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,734,* @return the month of year property
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,736,public Property monthOfYear() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,737,"return new Property(this, MONTH_OF_YEAR);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,742,* Output the year-month in ISO8601 format (yyyy-MM).
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,744,* @return ISO8601 time formatted string.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,746,@ToString
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,747,public String toString() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,748,return ISODateTimeFormat.yearMonth().print(this);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,752,* Output the year-month using the specified format pattern.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,754,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,755,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,757,public String toString(String pattern) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,758,if (pattern == null) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,759,return toString();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,761,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,765,* Output the year-month using the specified format pattern.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,767,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,768,"* @param locale  Locale to use, null means default"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,769,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,771,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,772,if (pattern == null) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,773,return toString();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,775,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,780,* The property class for <code>YearMonth</code>.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,781,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,782,* This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,784,* @author Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,785,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,787,public static class Property extends AbstractPartialFieldProperty implements Serializable {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,789,/** Serialization version */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,790,private static final long serialVersionUID = 5727734012190224363L;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,792,/** The partial */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,793,private final YearMonth iBase;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,794,/** The field index */
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,795,private final int iFieldIndex;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,798,* Constructs a property.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,800,* @param partial  the partial instance
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,801,* @param fieldIndex  the index in the partial
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,803,"Property(YearMonth partial, int fieldIndex) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,804,super();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,805,iBase = partial;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,806,iFieldIndex = fieldIndex;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,810,* Gets the field that this property uses.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,812,* @return the field
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,814,public DateTimeField getField() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,815,return iBase.getField(iFieldIndex);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,819,* Gets the partial that this property belongs to.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,821,* @return the partial
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,823,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,824,return iBase;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,828,* Gets the partial that this property belongs to.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,830,* @return the partial
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,832,public YearMonth getYearMonth() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,833,return iBase;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,837,* Gets the value of this field.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,839,* @return the field value
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,841,public int get() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,842,return iBase.getValue(iFieldIndex);
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,847,* Adds to the value of this field in a copy of this YearMonth.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,848,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,849,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,850,* added solely to this field then it will affect larger fields.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,851,* Smaller fields are unaffected.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,852,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,853,"* If the result would be too large, beyond the maximum year, then an"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,854,* IllegalArgumentException is thrown.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,855,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,856,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,857,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,859,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,860,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,861,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,863,public YearMonth addToCopy(int valueToAdd) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,864,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,865,"newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,866,"return new YearMonth(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,870,* Adds to the value of this field in a copy of this YearMonth wrapping
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,871,* within this field if the maximum value is reached.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,872,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,873,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,874,* added solely to this field then it wraps within this field.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,875,* Other fields are unaffected.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,876,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,877,"* For example,"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,878,* <code>2004-12</code> addWrapField one month returns <code>2004-01</code>.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,879,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,880,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,881,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,883,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,884,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,885,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,887,public YearMonth addWrapFieldToCopy(int valueToAdd) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,888,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,889,"newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,890,"return new YearMonth(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,895,* Sets this field in a copy of the YearMonth.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,896,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,897,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,898,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,900,* @param value  the value to set the field in the copy to
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,901,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,902,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,904,public YearMonth setCopy(int value) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,905,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,906,"newValues = getField().set(iBase, iFieldIndex, newValues, value);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,907,"return new YearMonth(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,911,* Sets this field in a copy of the YearMonth to a parsed text value.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,912,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,913,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,914,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,916,* @param text  the text value to set
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,917,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,918,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,919,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,921,"public YearMonth setCopy(String text, Locale locale) {"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,922,int[] newValues = iBase.getValues();
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,923,"newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,924,"return new YearMonth(iBase, newValues);"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,928,* Sets this field in a copy of the YearMonth to a parsed text value.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,929,* <p>
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,930,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,931,"* Instead, a new instance is returned."
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,933,* @param text  the text value to set
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,934,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,935,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,937,public YearMonth setCopy(String text) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,src/main/java/org/joda/time/YearMonth.java,938,"return setCopy(text, null);"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,2,  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,6,  You may obtain a copy of the License at
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,14,  limitations under the License.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,16,ackage org.joda.time.base;
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,19, BaseLocal is an abstract implementation of ReadablePartial that
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,20, use a local milliseconds internal representation.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,21, <p>
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,22, This class should generally not be used directly by API users.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,23, The {@link org.joda.time.ReadablePartial} interface should be used when different
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,24, kinds of partial objects are to be referenced.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,25, <p>
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,26, BasePartial subclasses may be mutable and not thread-safe.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,28, @author Stephen Colebourne
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,29, @since 1.5
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,31,ublic abstract class BaseLocal
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,32,xtends AbstractPartial {
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,34,** Serialization version */
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,35,rivate static final long serialVersionUID = 276453175381783L;
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,39," Constructs a partial with the current time, using ISOChronology in"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,40, the default zone to extract the fields.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,41, <p>
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,42," The constructor uses the default time zone, resulting in the local time"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,43," being initialised. Once the constructor is complete, all further calculations"
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,44, are performed without reference to a timezone (by switching to UTC).
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,46,rotected BaseLocal() {
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,47,uper();
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,52, Gets the local milliseconds from the Java epoch
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,53, of 1970-01-01T00:00:00 (not fixed to any specific time zone).
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,54, <p>
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,55, This method is useful in certain circustances for high performance
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,56, access to the datetime fields.
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,58, @return the number of milliseconds since 1970-01-01T00:00:00
False,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,60,rotected abstract long getLocalMillis();
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,14,*  limitations under the License.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,16,package org.joda.time.base;
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,19,* BaseLocal is an abstract implementation of ReadablePartial that
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,20,* use a local milliseconds internal representation.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,21,* <p>
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,22,* This class should generally not be used directly by API users.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,23,* The {@link org.joda.time.ReadablePartial} interface should be used when different
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,24,* kinds of partial objects are to be referenced.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,25,* <p>
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,26,* BasePartial subclasses may be mutable and not thread-safe.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,28,* @author Stephen Colebourne
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,29,* @since 1.5
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,31,public abstract class BaseLocal
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,32,extends AbstractPartial {
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,34,/** Serialization version */
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,35,private static final long serialVersionUID = 276453175381783L;
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,39,"* Constructs a partial with the current time, using ISOChronology in"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,40,* the default zone to extract the fields.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,41,* <p>
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,42,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,43,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,44,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,46,protected BaseLocal() {
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,47,super();
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,52,* Gets the local milliseconds from the Java epoch
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,53,* of 1970-01-01T00:00:00 (not fixed to any specific time zone).
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,54,* <p>
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,55,* This method is useful in certain circustances for high performance
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,56,* access to the datetime fields.
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,58,* @return the number of milliseconds since 1970-01-01T00:00:00
True,JodaTime/src/main/java/org/joda/time/base/BaseLocal.java,src/main/java/org/joda/time/base/BaseLocal.java,60,protected abstract long getLocalMillis();
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,2,  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,18,ublic class MockZone extends DateTimeZone {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,20,ong transition;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,21,nt winterOffset;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,22,nt sizeMillis;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,24,"ublic MockZone(long transition, int winterOffset, int sizeSecs) {"
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,25,"uper(""MockZone"");"
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,26,his.transition = transition;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,27,his.winterOffset = winterOffset;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,28,his.sizeMillis = sizeSecs * 1000;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,31,ublic int getOffset(long instant) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,32,eturn (instant < transition ? winterOffset : winterOffset + sizeMillis);
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,35,ublic int getStandardOffset(long instant) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,36,eturn winterOffset;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,39,ublic long nextTransition(long instant) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,40,eturn (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,43,ublic long previousTransition(long instant) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,44,eturn (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,47,ublic boolean isFixed() {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,48,eturn false;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,51,ublic String getNameKey(long instant) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,52,eturn null;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,55,ublic boolean equals(Object object) {
False,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,56,eturn false;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,18,public class MockZone extends DateTimeZone {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,20,long transition;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,21,int winterOffset;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,22,int sizeMillis;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,24,"public MockZone(long transition, int winterOffset, int sizeSecs) {"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,25,"super(""MockZone"");"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,26,this.transition = transition;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,27,this.winterOffset = winterOffset;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,28,this.sizeMillis = sizeSecs * 1000;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,31,public int getOffset(long instant) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,32,return (instant < transition ? winterOffset : winterOffset + sizeMillis);
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,35,public int getStandardOffset(long instant) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,36,return winterOffset;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,39,public long nextTransition(long instant) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,40,return (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,43,public long previousTransition(long instant) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,44,return (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,47,public boolean isFixed() {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,48,return false;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,51,public String getNameKey(long instant) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,52,return null;
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,55,public boolean equals(Object object) {
True,JodaTime/src/test/java/org/joda/time/MockZone.java,src/test/java/org/joda/time/MockZone.java,56,return false;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,2,  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,18,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,19,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,21,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,22,mport org.joda.time.tz.DateTimeZoneBuilder;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,25, This class is a JUnit test for DateTimeZone.
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,27, @author Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,29,ublic class TestDateTimeZoneCutover extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,31,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,32,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,35,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,36,eturn new TestSuite(TestDateTimeZoneCutover.class);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,39,ublic TestDateTimeZoneCutover(String name) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,40,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,43,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,46,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,50,/------------------------ Bug [1710316] --------------------------------
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,52,/ The behaviour of getOffsetFromLocal is defined in its javadoc
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,53,"/ However, this definition doesn't work for all DateTimeField operations"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,55,** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,56,rivate static long CUTOVER_GAZA = 1175378400000L;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,57,rivate static int OFFSET_GAZA = 7200000;  // +02:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,58,"rivate static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA, 3600);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,61,ublic void test_MockGazaIsCorrect() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,62,"ateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,63,"ssertEquals(""2007-03-31T23:59:59.999+02:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,64,"ateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,65,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,66,"ateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,67,"ssertEquals(""2007-04-01T01:00:00.001+03:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,70,ublic void test_getOffsetFromLocal_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,71,"oTest_getOffsetFromLocal_Gaza(-1, 23, 0, ""2007-03-31T23:00:00.000+02:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,72,"oTest_getOffsetFromLocal_Gaza(-1, 23, 30, ""2007-03-31T23:30:00.000+02:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,73,"oTest_getOffsetFromLocal_Gaza(0, 0, 0, ""2007-04-01T01:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,74,"oTest_getOffsetFromLocal_Gaza(0, 0, 30, ""2007-04-01T01:30:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,75,"oTest_getOffsetFromLocal_Gaza(0, 1, 0, ""2007-04-01T01:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,76,"oTest_getOffsetFromLocal_Gaza(0, 1, 30, ""2007-04-01T01:30:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,77,"oTest_getOffsetFromLocal_Gaza(0, 2, 0, ""2007-04-01T02:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,78,"oTest_getOffsetFromLocal_Gaza(0, 3, 0, ""2007-04-01T03:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,79,"oTest_getOffsetFromLocal_Gaza(0, 4, 0, ""2007-04-01T04:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,80,"oTest_getOffsetFromLocal_Gaza(0, 5, 0, ""2007-04-01T05:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,81,"oTest_getOffsetFromLocal_Gaza(0, 6, 0, ""2007-04-01T06:00:00.000+03:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,84,"rivate void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,85,"ateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,86,nt offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,87,"ateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,88,"ssertEquals(res.toString(), expected, res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,91,ublic void test_DateTime_roundFloor_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,92,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,93,"ssertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,94,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,95,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,98,ublic void test_DateTime_roundCeiling_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,99,"ateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,100,"ssertEquals(""2007-03-31T20:00:00.000+02:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,101,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,102,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,105,ublic void test_DateTime_setHourZero_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,106,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,107,"ssertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,108,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,109,t.hourOfDay().setCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,110,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,111, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,112,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,116,ublic void test_DateTime_withHourZero_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,117,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,118,"ssertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,119,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,120,t.withHourOfDay(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,121,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,122, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,123,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,127,ublic void test_DateTime_withDay_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,128,"ateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,129,"ssertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,130,ateTime res = dt.withDayOfMonth(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,131,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,134,ublic void test_DateTime_minusHour_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,135,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,136,"ssertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,138,ateTime minus7 = dt.minusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,139,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", minus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,140,ateTime minus8 = dt.minusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,141,"ssertEquals(""2007-03-31T23:00:00.000+02:00"", minus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,142,ateTime minus9 = dt.minusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,143,"ssertEquals(""2007-03-31T22:00:00.000+02:00"", minus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,146,ublic void test_DateTime_plusHour_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,147,"ateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,148,"ssertEquals(""2007-03-31T16:00:00.000+02:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,150,ateTime plus7 = dt.plusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,151,"ssertEquals(""2007-03-31T23:00:00.000+02:00"", plus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,152,ateTime plus8 = dt.plusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,153,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", plus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,154,ateTime plus9 = dt.plusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,155,"ssertEquals(""2007-04-01T02:00:00.000+03:00"", plus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,158,ublic void test_DateTime_minusDay_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,159,"ateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,160,"ssertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,162,ateTime minus1 = dt.minusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,163,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", minus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,164,ateTime minus2 = dt.minusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,165,"ssertEquals(""2007-03-31T00:00:00.000+02:00"", minus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,168,ublic void test_DateTime_plusDay_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,169,"ateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,170,"ssertEquals(""2007-03-31T00:00:00.000+02:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,172,ateTime plus1 = dt.plusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,173,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,174,ateTime plus2 = dt.plusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,175,"ssertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,178,ublic void test_DateTime_plusDayMidGap_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,179,"ateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,180,"ssertEquals(""2007-03-31T00:30:00.000+02:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,182,ateTime plus1 = dt.plusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,183,"ssertEquals(""2007-04-01T01:30:00.000+03:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,184,ateTime plus2 = dt.plusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,185,"ssertEquals(""2007-04-02T00:30:00.000+03:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,188,ublic void test_DateTime_addWrapFieldDay_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,189,"ateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,190,"ssertEquals(""2007-04-30T00:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,192,ateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,193,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,194,ateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,195,"ssertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,198,ublic void test_DateTime_withZoneRetainFields_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,199,"ateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,200,"ssertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,202,ateTime res = dt.withZoneRetainFields(MOCK_GAZA);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,203,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,206,ublic void test_MutableDateTime_withZoneRetainFields_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,207,"utableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,208,"ssertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,210,t.setZoneRetainFields(MOCK_GAZA);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,211,"ssertEquals(""2007-04-01T01:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,214,ublic void test_LocalDate_new_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,215,"ocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,216,"ssertEquals(""2007-04-01"", date1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,218,"ocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,219,"ssertEquals(""2007-03-31"", date2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,222,ublic void test_LocalDate_toDateMidnight_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,223,"ocalDate date = new LocalDate(2007, 4, 1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,224,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,225,ate.toDateMidnight(MOCK_GAZA);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,226,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,227, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,228,"ssertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,232,ublic void test_DateTime_new_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,233,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,234,"ew DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,235,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,236, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,237,"ssertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,241,ublic void test_DateTime_newValid_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,242,"ew DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,243,"ew DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,244,"ew DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,245,"ew DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,246,"ew DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,247,"ew DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,248,"ew DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,249,"ew DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,252,ublic void test_DateTime_parse_Gaza() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,253,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,254,"ew DateTime(""2007-04-01T00:00"", MOCK_GAZA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,255,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,256, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,257,"ssertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,262,/------------------------ Bug [1710316] --------------------------------
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,264,** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,265,rivate static long CUTOVER_TURK = 1175403600000L;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,266,rivate static int OFFSET_TURK = -18000000;  // -05:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,267,"rivate static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,270,ublic void test_MockTurkIsCorrect() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,271,"ateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,272,"ssertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,273,"ateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,274,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,275,"ateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,276,"ssertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,279,ublic void test_getOffsetFromLocal_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,280,"oTest_getOffsetFromLocal_Turk(-1, 23, 0, ""2007-03-31T23:00:00.000-05:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,281,"oTest_getOffsetFromLocal_Turk(-1, 23, 30, ""2007-03-31T23:30:00.000-05:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,282,"oTest_getOffsetFromLocal_Turk(0, 0, 0, ""2007-04-01T01:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,283,"oTest_getOffsetFromLocal_Turk(0, 0, 30, ""2007-04-01T01:30:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,284,"oTest_getOffsetFromLocal_Turk(0, 1, 0, ""2007-04-01T01:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,285,"oTest_getOffsetFromLocal_Turk(0, 1, 30, ""2007-04-01T01:30:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,286,"oTest_getOffsetFromLocal_Turk(0, 2, 0, ""2007-04-01T02:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,287,"oTest_getOffsetFromLocal_Turk(0, 3, 0, ""2007-04-01T03:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,288,"oTest_getOffsetFromLocal_Turk(0, 4, 0, ""2007-04-01T04:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,289,"oTest_getOffsetFromLocal_Turk(0, 5, 0, ""2007-04-01T05:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,290,"oTest_getOffsetFromLocal_Turk(0, 6, 0, ""2007-04-01T06:00:00.000-04:00"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,293,"rivate void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,294,"ateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,295,nt offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,296,"ateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,297,"ssertEquals(res.toString(), expected, res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,300,ublic void test_DateTime_roundFloor_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,301,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,302,"ssertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,303,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,304,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,307,ublic void test_DateTime_roundFloorNotDST_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,308,"ateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,309,"ssertEquals(""2007-04-02T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,310,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,311,"ssertEquals(""2007-04-02T00:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,314,ublic void test_DateTime_roundCeiling_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,315,"ateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,316,"ssertEquals(""2007-03-31T20:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,317,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,318,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,321,ublic void test_DateTime_setHourZero_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,322,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,323,"ssertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,324,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,325,t.hourOfDay().setCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,326,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,327, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,328,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,332,ublic void test_DateTime_withHourZero_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,333,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,334,"ssertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,335,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,336,t.withHourOfDay(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,337,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,338, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,339,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,343,ublic void test_DateTime_withDay_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,344,"ateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,345,"ssertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,346,ateTime res = dt.withDayOfMonth(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,347,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,350,ublic void test_DateTime_minusHour_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,351,"ateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,352,"ssertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,354,ateTime minus7 = dt.minusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,355,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", minus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,356,ateTime minus8 = dt.minusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,357,"ssertEquals(""2007-03-31T23:00:00.000-05:00"", minus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,358,ateTime minus9 = dt.minusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,359,"ssertEquals(""2007-03-31T22:00:00.000-05:00"", minus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,362,ublic void test_DateTime_plusHour_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,363,"ateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,364,"ssertEquals(""2007-03-31T16:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,366,ateTime plus7 = dt.plusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,367,"ssertEquals(""2007-03-31T23:00:00.000-05:00"", plus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,368,ateTime plus8 = dt.plusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,369,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", plus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,370,ateTime plus9 = dt.plusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,371,"ssertEquals(""2007-04-01T02:00:00.000-04:00"", plus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,374,ublic void test_DateTime_minusDay_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,375,"ateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,376,"ssertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,378,ateTime minus1 = dt.minusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,379,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", minus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,380,ateTime minus2 = dt.minusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,381,"ssertEquals(""2007-03-31T00:00:00.000-05:00"", minus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,384,ublic void test_DateTime_plusDay_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,385,"ateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,386,"ssertEquals(""2007-03-31T00:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,388,ateTime plus1 = dt.plusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,389,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,390,ateTime plus2 = dt.plusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,391,"ssertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,394,ublic void test_DateTime_plusDayMidGap_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,395,"ateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,396,"ssertEquals(""2007-03-31T00:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,398,ateTime plus1 = dt.plusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,399,"ssertEquals(""2007-04-01T01:30:00.000-04:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,400,ateTime plus2 = dt.plusDays(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,401,"ssertEquals(""2007-04-02T00:30:00.000-04:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,404,ublic void test_DateTime_addWrapFieldDay_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,405,"ateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,406,"ssertEquals(""2007-04-30T00:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,408,ateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,409,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,410,ateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,411,"ssertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,414,ublic void test_DateTime_withZoneRetainFields_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,415,"ateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,416,"ssertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,418,ateTime res = dt.withZoneRetainFields(MOCK_TURK);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,419,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,422,ublic void test_MutableDateTime_setZoneRetainFields_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,423,"utableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,424,"ssertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,426,t.setZoneRetainFields(MOCK_TURK);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,427,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,430,ublic void test_LocalDate_new_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,431,"ocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,432,"ssertEquals(""2007-04-01"", date1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,434,"ocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,435,"ssertEquals(""2007-03-31"", date2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,438,ublic void test_LocalDate_toDateMidnight_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,439,"ocalDate date = new LocalDate(2007, 4, 1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,440,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,441,ate.toDateMidnight(MOCK_TURK);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,442,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,443, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,444,"ssertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,448,ublic void test_DateTime_new_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,449,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,450,"ew DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,451,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,452, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,453,"ssertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,457,ublic void test_DateTime_newValid_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,458,"ew DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,459,"ew DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,460,"ew DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,461,"ew DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,462,"ew DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,463,"ew DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,464,"ew DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,467,ublic void test_DateTime_parse_Turk() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,468,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,469,"ew DateTime(""2007-04-01T00:00"", MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,470,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,471, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,472,"ssertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,479,** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,480,rivate static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,481,"rivate static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(""America/New_York"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,482,"/  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,483,/  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,484,"/  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,485,/  System.out.println(y);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,488,ublic void test_NewYorkIsCorrect_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,489,"ateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,490,"ssertEquals(""2007-03-11T01:59:59.999-05:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,491,"ateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,492,"ssertEquals(""2007-03-11T03:00:00.000-04:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,493,"ateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,494,"ssertEquals(""2007-03-11T03:00:00.001-04:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,497,ublic void test_getOffsetFromLocal_NewYork_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,498,"oTest_getOffsetFromLocal(3, 11, 1, 0, ""2007-03-11T01:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,499,"oTest_getOffsetFromLocal(3, 11, 1,30, ""2007-03-11T01:30:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,501,"oTest_getOffsetFromLocal(3, 11, 2, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,502,"oTest_getOffsetFromLocal(3, 11, 2,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,504,"oTest_getOffsetFromLocal(3, 11, 3, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,505,"oTest_getOffsetFromLocal(3, 11, 3,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,506,"oTest_getOffsetFromLocal(3, 11, 4, 0, ""2007-03-11T04:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,507,"oTest_getOffsetFromLocal(3, 11, 5, 0, ""2007-03-11T05:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,508,"oTest_getOffsetFromLocal(3, 11, 6, 0, ""2007-03-11T06:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,509,"oTest_getOffsetFromLocal(3, 11, 7, 0, ""2007-03-11T07:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,510,"oTest_getOffsetFromLocal(3, 11, 8, 0, ""2007-03-11T08:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,513,ublic void test_DateTime_setHourAcross_NewYork_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,514,"ateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,515,"ssertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,516,ateTime res = dt.hourOfDay().setCopy(4);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,517,"ssertEquals(""2007-03-11T04:00:00.000-04:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,520,ublic void test_DateTime_setHourForward_NewYork_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,521,"ateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,522,"ssertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,524,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,525,t.hourOfDay().setCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,526,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,527, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,528,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,532,ublic void test_DateTime_setHourBack_NewYork_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,533,"ateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,534,"ssertEquals(""2007-03-11T08:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,536,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,537,t.hourOfDay().setCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,538,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,539, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,540,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,545,ublic void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,546,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,547,"ssertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,548,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,549,"ssertEquals(""2007-03-11T00:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,552,ublic void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,553,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,554,"ssertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,555,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,556,"ssertEquals(""2007-03-11T00:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,559,ublic void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,560,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,561,"ssertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,562,ateTime rounded = dt.hourOfDay().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,563,"ssertEquals(""2007-03-11T01:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,566,ublic void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,567,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,568,"ssertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,569,ateTime rounded = dt.hourOfDay().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,570,"ssertEquals(""2007-03-11T03:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,573,ublic void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,574,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,575,"ssertEquals(""2007-03-11T01:30:40.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,576,ateTime rounded = dt.minuteOfHour().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,577,"ssertEquals(""2007-03-11T01:30:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,580,ublic void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,581,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,582,"ssertEquals(""2007-03-11T03:30:40.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,583,ateTime rounded = dt.minuteOfHour().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,584,"ssertEquals(""2007-03-11T03:30:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,588,ublic void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,589,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,590,"ssertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,591,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,592,"ssertEquals(""2007-03-12T00:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,595,ublic void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,596,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,597,"ssertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,598,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,599,"ssertEquals(""2007-03-12T00:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,602,ublic void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,603,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,604,"ssertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,605,ateTime rounded = dt.hourOfDay().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,606,"ssertEquals(""2007-03-11T03:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,609,ublic void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,610,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,611,"ssertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,612,ateTime rounded = dt.hourOfDay().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,613,"ssertEquals(""2007-03-11T04:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,616,ublic void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,617,"ateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,618,"ssertEquals(""2007-03-11T01:30:40.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,619,ateTime rounded = dt.minuteOfHour().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,620,"ssertEquals(""2007-03-11T01:31:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,623,ublic void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,624,"ateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,625,"ssertEquals(""2007-03-11T03:30:40.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,626,ateTime rounded = dt.minuteOfHour().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,627,"ssertEquals(""2007-03-11T03:31:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,631,** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,632,rivate static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,635,ublic void test_NewYorkIsCorrect_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,636,"ateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,637,"ssertEquals(""2007-11-04T01:59:59.999-04:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,638,"ateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,639,"ssertEquals(""2007-11-04T01:00:00.000-05:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,640,"ateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,641,"ssertEquals(""2007-11-04T01:00:00.001-05:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,644,ublic void test_getOffsetFromLocal_NewYork_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,645,"oTest_getOffsetFromLocal(11, 4, 0, 0, ""2007-11-04T00:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,646,"oTest_getOffsetFromLocal(11, 4, 0,30, ""2007-11-04T00:30:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,648,"oTest_getOffsetFromLocal(11, 4, 1, 0, ""2007-11-04T01:00:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,649,"oTest_getOffsetFromLocal(11, 4, 1,30, ""2007-11-04T01:30:00.000-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,651,"oTest_getOffsetFromLocal(11, 4, 2, 0, ""2007-11-04T02:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,652,"oTest_getOffsetFromLocal(11, 4, 2,30, ""2007-11-04T02:30:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,653,"oTest_getOffsetFromLocal(11, 4, 3, 0, ""2007-11-04T03:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,654,"oTest_getOffsetFromLocal(11, 4, 3,30, ""2007-11-04T03:30:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,655,"oTest_getOffsetFromLocal(11, 4, 4, 0, ""2007-11-04T04:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,656,"oTest_getOffsetFromLocal(11, 4, 5, 0, ""2007-11-04T05:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,657,"oTest_getOffsetFromLocal(11, 4, 6, 0, ""2007-11-04T06:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,658,"oTest_getOffsetFromLocal(11, 4, 7, 0, ""2007-11-04T07:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,659,"oTest_getOffsetFromLocal(11, 4, 8, 0, ""2007-11-04T08:00:00.000-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,662,ublic void test_DateTime_constructor_NewYork_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,663,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,664,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,667,ublic void test_DateTime_plusHour_NewYork_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,668,"ateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,669,"ssertEquals(""2007-11-03T18:00:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,671,ateTime plus6 = dt.plusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,672,"ssertEquals(""2007-11-04T00:00:00.000-04:00"", plus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,673,ateTime plus7 = dt.plusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,674,"ssertEquals(""2007-11-04T01:00:00.000-04:00"", plus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,675,ateTime plus8 = dt.plusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,676,"ssertEquals(""2007-11-04T01:00:00.000-05:00"", plus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,677,ateTime plus9 = dt.plusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,678,"ssertEquals(""2007-11-04T02:00:00.000-05:00"", plus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,681,ublic void test_DateTime_minusHour_NewYork_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,682,"ateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,683,"ssertEquals(""2007-11-04T08:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,685,ateTime minus6 = dt.minusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,686,"ssertEquals(""2007-11-04T02:00:00.000-05:00"", minus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,687,ateTime minus7 = dt.minusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,688,"ssertEquals(""2007-11-04T01:00:00.000-05:00"", minus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,689,ateTime minus8 = dt.minusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,690,"ssertEquals(""2007-11-04T01:00:00.000-04:00"", minus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,691,ateTime minus9 = dt.minusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,692,"ssertEquals(""2007-11-04T00:00:00.000-04:00"", minus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,696,ublic void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,697,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,698,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,699,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,700,"ssertEquals(""2007-11-04T00:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,703,ublic void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,704,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,705,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,706,ateTime rounded = dt.dayOfMonth().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,707,"ssertEquals(""2007-11-04T00:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,710,ublic void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,711,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,712,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,713,ateTime rounded = dt.hourOfDay().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,714,"ssertEquals(""2007-11-04T01:00:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,717,ublic void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,718,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,719,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,720,ateTime rounded = dt.hourOfDay().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,721,"ssertEquals(""2007-11-04T01:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,724,ublic void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,725,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,726,"ssertEquals(""2007-11-04T01:30:40.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,727,ateTime rounded = dt.minuteOfHour().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,728,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,731,ublic void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,732,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,733,"ssertEquals(""2007-11-04T01:30:40.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,734,ateTime rounded = dt.minuteOfHour().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,735,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,738,ublic void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,739,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,740,"ssertEquals(""2007-11-04T01:30:40.500-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,741,ateTime rounded = dt.secondOfMinute().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,742,"ssertEquals(""2007-11-04T01:30:40.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,745,ublic void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,746,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,747,"ssertEquals(""2007-11-04T01:30:40.500-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,748,ateTime rounded = dt.secondOfMinute().roundFloorCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,749,"ssertEquals(""2007-11-04T01:30:40.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,753,ublic void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,754,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,755,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,756,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,757,"ssertEquals(""2007-11-05T00:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,760,ublic void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,761,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,762,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,763,ateTime rounded = dt.dayOfMonth().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,764,"ssertEquals(""2007-11-05T00:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,767,ublic void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,768,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,769,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,770,ateTime rounded = dt.hourOfDay().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,771,"ssertEquals(""2007-11-04T01:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,774,ublic void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,775,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,776,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,777,ateTime rounded = dt.hourOfDay().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,778,"ssertEquals(""2007-11-04T02:00:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,781,ublic void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,782,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,783,"ssertEquals(""2007-11-04T01:30:40.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,784,ateTime rounded = dt.minuteOfHour().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,785,"ssertEquals(""2007-11-04T01:31:00.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,788,ublic void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,789,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,790,"ssertEquals(""2007-11-04T01:30:40.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,791,ateTime rounded = dt.minuteOfHour().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,792,"ssertEquals(""2007-11-04T01:31:00.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,795,ublic void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,796,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,797,"ssertEquals(""2007-11-04T01:30:40.500-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,798,ateTime rounded = dt.secondOfMinute().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,799,"ssertEquals(""2007-11-04T01:30:41.000-04:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,802,ublic void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,803,"ateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,804,"ssertEquals(""2007-11-04T01:30:40.500-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,805,ateTime rounded = dt.secondOfMinute().roundCeilingCopy();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,806,"ssertEquals(""2007-11-04T01:30:41.000-05:00"", rounded.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,810,** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,811,rivate static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,812,"rivate static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(""Europe/Moscow"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,815,ublic void test_MoscowIsCorrect_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,816,"/      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,817,/      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,818,"/      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,819,/      System.out.println(y);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,820,"ateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,821,"ssertEquals(""2007-03-25T01:59:59.999+03:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,822,"ateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,823,"ssertEquals(""2007-03-25T03:00:00.000+04:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,824,"ateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,825,"ssertEquals(""2007-03-25T03:00:00.001+04:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,828,ublic void test_getOffsetFromLocal_Moscow_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,829,"oTest_getOffsetFromLocal(3, 25, 1, 0, ""2007-03-25T01:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,830,"oTest_getOffsetFromLocal(3, 25, 1,30, ""2007-03-25T01:30:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,832,"oTest_getOffsetFromLocal(3, 25, 2, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,833,"oTest_getOffsetFromLocal(3, 25, 2,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,835,"oTest_getOffsetFromLocal(3, 25, 3, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,836,"oTest_getOffsetFromLocal(3, 25, 3,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,837,"oTest_getOffsetFromLocal(3, 25, 4, 0, ""2007-03-25T04:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,838,"oTest_getOffsetFromLocal(3, 25, 5, 0, ""2007-03-25T05:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,839,"oTest_getOffsetFromLocal(3, 25, 6, 0, ""2007-03-25T06:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,840,"oTest_getOffsetFromLocal(3, 25, 7, 0, ""2007-03-25T07:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,841,"oTest_getOffsetFromLocal(3, 25, 8, 0, ""2007-03-25T08:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,844,ublic void test_DateTime_setHourAcross_Moscow_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,845,"ateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,846,"ssertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,847,ateTime res = dt.hourOfDay().setCopy(4);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,848,"ssertEquals(""2007-03-25T04:00:00.000+04:00"", res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,851,ublic void test_DateTime_setHourForward_Moscow_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,852,"ateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,853,"ssertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,855,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,856,t.hourOfDay().setCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,857,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,858, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,859,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,863,ublic void test_DateTime_setHourBack_Moscow_Spring() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,864,"ateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,865,"ssertEquals(""2007-03-25T08:00:00.000+04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,867,ry {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,868,t.hourOfDay().setCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,869,ail();
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,870, catch (IllegalFieldValueException ex) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,871,/ expected
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,876,** America/New_York cutover from 02:59 to 02:00 on 2007-10-28 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,877,rivate static long CUTOVER_MOSCOW_AUTUMN = 1193526000000L;  // 2007-10-28T02:00:00.000+03:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,880,ublic void test_MoscowIsCorrect_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,881,"ateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,882,"ssertEquals(""2007-10-28T02:59:59.999+04:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,883,"ateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,884,"ssertEquals(""2007-10-28T02:00:00.000+03:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,885,"ateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,886,"ssertEquals(""2007-10-28T02:00:00.001+03:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,889,ublic void test_getOffsetFromLocal_Moscow_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,890,"oTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,891,"oTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,892,"oTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,893,"oTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,895,"oTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,896,"oTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,897,"oTest_getOffsetFromLocal(10, 28, 2,30,59,999, ""2007-10-28T02:30:59.999+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,898,"oTest_getOffsetFromLocal(10, 28, 2,59,59,998, ""2007-10-28T02:59:59.998+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,899,"oTest_getOffsetFromLocal(10, 28, 2,59,59,999, ""2007-10-28T02:59:59.999+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,901,"oTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,902,"oTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,903,"oTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,904,"oTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,905,"oTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,906,"oTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,907,"oTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,910,ublic void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,911,or (int min = 0; min < 60; min++) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,912,f (min < 10) {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,913,"oTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:0"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,914, else {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,915,"oTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,920,ublic void test_DateTime_constructor_Moscow_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,921,"ateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,922,"ssertEquals(""2007-10-28T02:30:00.000+04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,925,ublic void test_DateTime_plusHour_Moscow_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,926,"ateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,927,"ssertEquals(""2007-10-27T19:00:00.000+04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,929,ateTime plus6 = dt.plusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,930,"ssertEquals(""2007-10-28T01:00:00.000+04:00"", plus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,931,ateTime plus7 = dt.plusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,932,"ssertEquals(""2007-10-28T02:00:00.000+04:00"", plus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,933,ateTime plus8 = dt.plusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,934,"ssertEquals(""2007-10-28T02:00:00.000+03:00"", plus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,935,ateTime plus9 = dt.plusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,936,"ssertEquals(""2007-10-28T03:00:00.000+03:00"", plus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,939,ublic void test_DateTime_minusHour_Moscow_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,940,"ateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,941,"ssertEquals(""2007-10-28T09:00:00.000+03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,943,ateTime minus6 = dt.minusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,944,"ssertEquals(""2007-10-28T03:00:00.000+03:00"", minus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,945,ateTime minus7 = dt.minusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,946,"ssertEquals(""2007-10-28T02:00:00.000+03:00"", minus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,947,ateTime minus8 = dt.minusHours(8);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,948,"ssertEquals(""2007-10-28T02:00:00.000+04:00"", minus8.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,949,ateTime minus9 = dt.minusHours(9);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,950,"ssertEquals(""2007-10-28T01:00:00.000+04:00"", minus9.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,956,** America/Guatemala cutover from 23:59 to 23:00 on 2006-09-30 */
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,957,rivate static long CUTOVER_GUATEMALA_AUTUMN = 1159678800000L; // 2006-09-30T23:00:00.000-06:00
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,958,"rivate static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(""America/Guatemala"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,961,ublic void test_GuatemataIsCorrect_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,962,"ateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,963,"ssertEquals(""2006-09-30T23:59:59.999-05:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,964,"ateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,965,"ssertEquals(""2006-09-30T23:00:00.000-06:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,966,"ateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,967,"ssertEquals(""2006-09-30T23:00:00.001-06:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,970,ublic void test_getOffsetFromLocal_Guatemata_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,971,"oTest_getOffsetFromLocal( 2006, 9,30,23, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,972,"2006-09-30T23:00:00.000-05:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,973,"oTest_getOffsetFromLocal( 2006, 9,30,23,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,974,"2006-09-30T23:30:00.000-05:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,976,"oTest_getOffsetFromLocal( 2006, 9,30,23, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,977,"2006-09-30T23:00:00.000-05:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,978,"oTest_getOffsetFromLocal( 2006, 9,30,23,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,979,"2006-09-30T23:30:00.000-05:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,981,"oTest_getOffsetFromLocal( 2006,10, 1, 0, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,982,"2006-10-01T00:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,983,"oTest_getOffsetFromLocal( 2006,10, 1, 0,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,984,"2006-10-01T00:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,985,"oTest_getOffsetFromLocal( 2006,10, 1, 1, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,986,"2006-10-01T01:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,987,"oTest_getOffsetFromLocal( 2006,10, 1, 1,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,988,"2006-10-01T01:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,989,"oTest_getOffsetFromLocal( 2006,10, 1, 2, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,990,"2006-10-01T02:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,991,"oTest_getOffsetFromLocal( 2006,10, 1, 2,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,992,"2006-10-01T02:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,993,"oTest_getOffsetFromLocal( 2006,10, 1, 3, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,994,"2006-10-01T03:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,995,"oTest_getOffsetFromLocal( 2006,10, 1, 3,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,996,"2006-10-01T03:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,997,"oTest_getOffsetFromLocal( 2006,10, 1, 4, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,998,"2006-10-01T04:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,999,"oTest_getOffsetFromLocal( 2006,10, 1, 4,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1000,"2006-10-01T04:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1001,"oTest_getOffsetFromLocal( 2006,10, 1, 5, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1002,"2006-10-01T05:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1003,"oTest_getOffsetFromLocal( 2006,10, 1, 5,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1004,"2006-10-01T05:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1005,"oTest_getOffsetFromLocal( 2006,10, 1, 6, 0,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1006,"2006-10-01T06:00:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1007,"oTest_getOffsetFromLocal( 2006,10, 1, 6,30,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1008,"2006-10-01T06:30:00.000-06:00"", ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1011,ublic void test_DateTime_plusHour_Guatemata_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1012,"ateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1013,"ssertEquals(""2006-09-30T20:00:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1015,ateTime plus1 = dt.plusHours(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1016,"ssertEquals(""2006-09-30T21:00:00.000-05:00"", plus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1017,ateTime plus2 = dt.plusHours(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1018,"ssertEquals(""2006-09-30T22:00:00.000-05:00"", plus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1019,ateTime plus3 = dt.plusHours(3);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1020,"ssertEquals(""2006-09-30T23:00:00.000-05:00"", plus3.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1021,ateTime plus4 = dt.plusHours(4);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1022,"ssertEquals(""2006-09-30T23:00:00.000-06:00"", plus4.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1023,ateTime plus5 = dt.plusHours(5);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1024,"ssertEquals(""2006-10-01T00:00:00.000-06:00"", plus5.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1025,ateTime plus6 = dt.plusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1026,"ssertEquals(""2006-10-01T01:00:00.000-06:00"", plus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1027,ateTime plus7 = dt.plusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1028,"ssertEquals(""2006-10-01T02:00:00.000-06:00"", plus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1031,ublic void test_DateTime_minusHour_Guatemata_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1032,"ateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1033,"ssertEquals(""2006-10-01T02:00:00.000-06:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1035,ateTime minus1 = dt.minusHours(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1036,"ssertEquals(""2006-10-01T01:00:00.000-06:00"", minus1.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1037,ateTime minus2 = dt.minusHours(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1038,"ssertEquals(""2006-10-01T00:00:00.000-06:00"", minus2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1039,ateTime minus3 = dt.minusHours(3);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1040,"ssertEquals(""2006-09-30T23:00:00.000-06:00"", minus3.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1041,ateTime minus4 = dt.minusHours(4);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1042,"ssertEquals(""2006-09-30T23:00:00.000-05:00"", minus4.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1043,ateTime minus5 = dt.minusHours(5);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1044,"ssertEquals(""2006-09-30T22:00:00.000-05:00"", minus5.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1045,ateTime minus6 = dt.minusHours(6);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1046,"ssertEquals(""2006-09-30T21:00:00.000-05:00"", minus6.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1047,ateTime minus7 = dt.minusHours(7);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1048,"ssertEquals(""2006-09-30T20:00:00.000-05:00"", minus7.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1055,ublic void test_DateTime_JustAfterLastEverOverlap() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1056,/ based on America/Argentina/Catamarca in file 2009s
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1057,ateTimeZone zone = new DateTimeZoneBuilder()
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1058,setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1059,"addRecurringSavings(""SUMMER"", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1060,"w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1061,"addRecurringSavings(""WINTER"", 0, 2000, 2008,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1062,"w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1063,"toDateTimeZone(""Zone"", false);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1065,"ocalDate date = new LocalDate(2008, 8, 10);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1066,"ssertEquals(""2008-08-10"", date.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1068,ateTime dt = date.toDateTimeAtStartOfDay(zone);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1069,"ssertEquals(""2008-08-10T00:00:00.000-03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1072,/    public void test_toDateMidnight_SaoPaolo() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1073,/        // RFE: 1684259
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1074,"/        DateTimeZone zone = DateTimeZone.forID(""America/Sao_Paulo"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1075,"/        LocalDate baseDate = new LocalDate(2006, 11, 5);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1076,/        DateMidnight dm = baseDate.toDateMidnight(zone);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1077,"/        assertEquals(""2006-11-05T00:00:00.000-03:00"", dm.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1078,/        DateTime dt = baseDate.toDateTimeAtMidnight(zone);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1079,"/        assertEquals(""2006-11-05T00:00:00.000-03:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1083,"rivate static final DateTimeZone ZONE_PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1085,ublic void testWithMinuteOfHourInDstChange_mockZone() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1086,"ateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1087,"ssertEquals(""2010-10-31T01:15:00.000+00:30"", cutover.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1088,"ateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1089,"ateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1090,"ssertEquals(""2010-10-31T01:00:00.000+01:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1091,"ateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1092,"ssertEquals(""2010-10-31T01:59:00.000+00:30"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1094,ateTime testPre1 = pre.withMinuteOfHour(30);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1095,"ssertEquals(""2010-10-31T01:30:00.000+01:00"", testPre1.toString());  // retain offset"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1096,ateTime testPre2 = pre.withMinuteOfHour(50);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1097,"ssertEquals(""2010-10-31T01:50:00.000+00:30"", testPre2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1099,ateTime testPost1 = post.withMinuteOfHour(30);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1100,"ssertEquals(""2010-10-31T01:30:00.000+00:30"", testPost1.toString());  // retain offset"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1101,ateTime testPost2 = post.withMinuteOfHour(10);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1102,"ssertEquals(""2010-10-31T01:10:00.000+01:00"", testPost2.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1105,ublic void testWithHourOfDayInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1106,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1107,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1108,ateTime test = dateTime.withHourOfDay(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1109,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1112,ublic void testWithMinuteOfHourInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1113,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1114,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1115,ateTime test = dateTime.withMinuteOfHour(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1116,"ssertEquals(""2010-10-31T02:00:10.123+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1119,ublic void testWithSecondOfMinuteInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1120,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1121,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1122,ateTime test = dateTime.withSecondOfMinute(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1123,"ssertEquals(""2010-10-31T02:30:00.123+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1126,ublic void testWithMillisOfSecondInDstChange_Paris_summer() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1127,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1128,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1129,ateTime test = dateTime.withMillisOfSecond(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1130,"ssertEquals(""2010-10-31T02:30:10.000+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1133,ublic void testWithMillisOfSecondInDstChange_Paris_winter() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1134,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+01:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1135,"ssertEquals(""2010-10-31T02:30:10.123+01:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1136,ateTime test = dateTime.withMillisOfSecond(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1137,"ssertEquals(""2010-10-31T02:30:10.000+01:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1140,ublic void testWithMillisOfSecondInDstChange_NewYork_summer() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1141,"ateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-04:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1142,"ssertEquals(""2007-11-04T01:30:00.123-04:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1143,ateTime test = dateTime.withMillisOfSecond(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1144,"ssertEquals(""2007-11-04T01:30:00.000-04:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1147,ublic void testWithMillisOfSecondInDstChange_NewYork_winter() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1148,"ateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-05:00"", ZONE_NEW_YORK);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1149,"ssertEquals(""2007-11-04T01:30:00.123-05:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1150,ateTime test = dateTime.withMillisOfSecond(0);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1151,"ssertEquals(""2007-11-04T01:30:00.000-05:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1154,ublic void testPlusMinutesInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1155,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1156,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1157,ateTime test = dateTime.plusMinutes(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1158,"ssertEquals(""2010-10-31T02:31:10.123+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1161,ublic void testPlusSecondsInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1162,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1163,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1164,ateTime test = dateTime.plusSeconds(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1165,"ssertEquals(""2010-10-31T02:30:11.123+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1168,ublic void testPlusMillisInDstChange() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1169,"ateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1170,"ssertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1171,ateTime test = dateTime.plusMillis(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1172,"ssertEquals(""2010-10-31T02:30:10.124+02:00"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1175,ublic void testBug2182444_usCentral() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1176,"hronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(""US/Central""));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1177,hronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1178,"ateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1179,"ateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1180,"ssertTrue(""Should be standard time"", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1181,"ssertFalse(""Should be daylight time"", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1183,ateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1184,ateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1185,"ssertEquals(1, usCentralStandardInUSCentral.getHourOfDay());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1186,"ssertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1187,ssertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1188,"ssertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1189,"ssertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1190,"ssertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1191,"ssertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1194,ublic void testBug2182444_ausNSW() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1195,"hronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(""Australia/NSW""));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1196,hronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1197,"ateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1198,"ateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1199,"ssertTrue(""Should be standard time"", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1200,"ssertFalse(""Should be daylight time"", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1202,ateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1203,ateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1204,"ssertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1205,"ssertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1206,ssertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1207,"ssertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1208,"ssertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1209,"ssertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1210,"ssertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1213,ublic void testPeriod() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1214,"ateTime a = new DateTime(""2010-10-31T02:00:00.000+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1215,"ateTime b = new DateTime(""2010-10-31T02:01:00.000+02:00"", ZONE_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1216,"eriod period = new Period(a, b, PeriodType.standard());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1217,"ssertEquals(""PT1M"", period.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1220,ublic void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1221,"inal DateTimeZone fromDTZ = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1222,"inal DateTimeZone toDTZ = DateTimeZone.forID(""Europe/Lisbon"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1223,"ateTime baseBefore = new DateTime(2007, 10, 28, 1, 15, fromDTZ).minusHours(1);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1224,"ateTime baseAfter = new DateTime(2007, 10, 28, 1, 15, fromDTZ);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1225,ateTime testBefore = baseBefore.withZoneRetainFields(toDTZ);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1226,ateTime testAfter = baseAfter.withZoneRetainFields(toDTZ);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1227,/ toString ignores time-zone but includes offset
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1228,"ssertEquals(baseBefore.toString(), testBefore.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1229,"ssertEquals(baseAfter.toString(), testAfter.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1232,ublic void testBug3192457_adjustOffset() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1233,"inal DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1234,"ateTime base = new DateTime(2007, 10, 28, 3, 15, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1235,ateTime baseBefore = base.minusHours(2);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1236,ateTime baseAfter = base.minusHours(1);
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1238,"ssertSame(base, base.withEarlierOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1239,"ssertSame(base, base.withLaterOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1240,"ssertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1241,"ssertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1243,"ssertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1244,"ssertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1247,/ ensure Summer time picked
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1249,ublic void testDateTimeCreation_europe() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1250,"ateTimeZone zone = DateTimeZone.forID(""Europe/Athens"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1251,"ateTime base = new DateTime(2011, 10, 30, 3, 15, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1252,"ssertEquals(""2011-10-30T03:15:00.000+03:00"", base.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1253,"ssertEquals(""2011-10-30T03:15:00.000+02:00"", base.plusHours(1).toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1256,ublic void testDateTimeCreation_us() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1257,"ateTimeZone zone = DateTimeZone.forID(""America/Los_Angeles"");"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1258,"ateTime base = new DateTime(2010, 11, 7, 1, 15, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1259,"ssertEquals(""2010-11-07T01:15:00.000-07:00"", base.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1260,"ssertEquals(""2010-11-07T01:15:00.000-08:00"", base.plusHours(1).toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1266,"rivate void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1267,"oTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1270,"rivate void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1271,"oTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1274,"rivate void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1275,"oTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1278,"rivate void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1279,"ateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1280,nt offset = zone.getOffsetFromLocal(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1281,"ateTime res = new DateTime(dt.getMillis() - offset, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1282,"ssertEquals(res.toString(), expected, res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,21,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,22,import org.joda.time.tz.DateTimeZoneBuilder;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,25,* This class is a JUnit test for DateTimeZone.
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,27,* @author Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,29,public class TestDateTimeZoneCutover extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,31,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,32,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,35,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,36,return new TestSuite(TestDateTimeZoneCutover.class);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,39,public TestDateTimeZoneCutover(String name) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,40,super(name);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,43,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,46,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,50,//------------------------ Bug [1710316] --------------------------------
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,52,// The behaviour of getOffsetFromLocal is defined in its javadoc
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,53,"// However, this definition doesn't work for all DateTimeField operations"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,55,/** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,56,private static long CUTOVER_GAZA = 1175378400000L;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,57,private static int OFFSET_GAZA = 7200000;  // +02:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,58,"private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA, 3600);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,61,public void test_MockGazaIsCorrect() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,62,"DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,63,"assertEquals(""2007-03-31T23:59:59.999+02:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,64,"DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,65,"assertEquals(""2007-04-01T01:00:00.000+03:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,66,"DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,67,"assertEquals(""2007-04-01T01:00:00.001+03:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,70,public void test_getOffsetFromLocal_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,71,"doTest_getOffsetFromLocal_Gaza(-1, 23, 0, ""2007-03-31T23:00:00.000+02:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,72,"doTest_getOffsetFromLocal_Gaza(-1, 23, 30, ""2007-03-31T23:30:00.000+02:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,73,"doTest_getOffsetFromLocal_Gaza(0, 0, 0, ""2007-04-01T01:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,74,"doTest_getOffsetFromLocal_Gaza(0, 0, 30, ""2007-04-01T01:30:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,75,"doTest_getOffsetFromLocal_Gaza(0, 1, 0, ""2007-04-01T01:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,76,"doTest_getOffsetFromLocal_Gaza(0, 1, 30, ""2007-04-01T01:30:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,77,"doTest_getOffsetFromLocal_Gaza(0, 2, 0, ""2007-04-01T02:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,78,"doTest_getOffsetFromLocal_Gaza(0, 3, 0, ""2007-04-01T03:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,79,"doTest_getOffsetFromLocal_Gaza(0, 4, 0, ""2007-04-01T04:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,80,"doTest_getOffsetFromLocal_Gaza(0, 5, 0, ""2007-04-01T05:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,81,"doTest_getOffsetFromLocal_Gaza(0, 6, 0, ""2007-04-01T06:00:00.000+03:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,84,"private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,85,"DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,86,int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,87,"DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,88,"assertEquals(res.toString(), expected, res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,91,public void test_DateTime_roundFloor_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,92,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,93,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,94,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,95,"assertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,98,public void test_DateTime_roundCeiling_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,99,"DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,100,"assertEquals(""2007-03-31T20:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,101,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,102,"assertEquals(""2007-04-01T01:00:00.000+03:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,105,public void test_DateTime_setHourZero_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,106,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,107,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,108,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,109,dt.hourOfDay().setCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,110,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,111,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,112,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,116,public void test_DateTime_withHourZero_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,117,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,118,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,119,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,120,dt.withHourOfDay(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,121,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,122,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,123,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,127,public void test_DateTime_withDay_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,128,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,129,"assertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,130,DateTime res = dt.withDayOfMonth(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,131,"assertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,134,public void test_DateTime_minusHour_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,135,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,136,"assertEquals(""2007-04-01T08:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,138,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,139,"assertEquals(""2007-04-01T01:00:00.000+03:00"", minus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,140,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,141,"assertEquals(""2007-03-31T23:00:00.000+02:00"", minus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,142,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,143,"assertEquals(""2007-03-31T22:00:00.000+02:00"", minus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,146,public void test_DateTime_plusHour_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,147,"DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,148,"assertEquals(""2007-03-31T16:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,150,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,151,"assertEquals(""2007-03-31T23:00:00.000+02:00"", plus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,152,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,153,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,154,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,155,"assertEquals(""2007-04-01T02:00:00.000+03:00"", plus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,158,public void test_DateTime_minusDay_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,159,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,160,"assertEquals(""2007-04-02T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,162,DateTime minus1 = dt.minusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,163,"assertEquals(""2007-04-01T01:00:00.000+03:00"", minus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,164,DateTime minus2 = dt.minusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,165,"assertEquals(""2007-03-31T00:00:00.000+02:00"", minus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,168,public void test_DateTime_plusDay_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,169,"DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,170,"assertEquals(""2007-03-31T00:00:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,172,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,173,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,174,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,175,"assertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,178,public void test_DateTime_plusDayMidGap_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,179,"DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,180,"assertEquals(""2007-03-31T00:30:00.000+02:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,182,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,183,"assertEquals(""2007-04-01T01:30:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,184,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,185,"assertEquals(""2007-04-02T00:30:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,188,public void test_DateTime_addWrapFieldDay_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,189,"DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,190,"assertEquals(""2007-04-30T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,192,DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,193,"assertEquals(""2007-04-01T01:00:00.000+03:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,194,DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,195,"assertEquals(""2007-04-02T00:00:00.000+03:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,198,public void test_DateTime_withZoneRetainFields_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,199,"DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,200,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,202,DateTime res = dt.withZoneRetainFields(MOCK_GAZA);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,203,"assertEquals(""2007-04-01T01:00:00.000+03:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,206,public void test_MutableDateTime_withZoneRetainFields_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,207,"MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,208,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,210,dt.setZoneRetainFields(MOCK_GAZA);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,211,"assertEquals(""2007-04-01T01:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,214,public void test_LocalDate_new_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,215,"LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,216,"assertEquals(""2007-04-01"", date1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,218,"LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,219,"assertEquals(""2007-03-31"", date2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,222,public void test_LocalDate_toDateMidnight_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,223,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,224,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,225,date.toDateMidnight(MOCK_GAZA);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,226,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,227,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,228,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,232,public void test_DateTime_new_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,233,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,234,"new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,235,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,236,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,237,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,241,public void test_DateTime_newValid_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,242,"new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,243,"new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,244,"new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,245,"new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,246,"new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,247,"new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,248,"new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,249,"new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,252,public void test_DateTime_parse_Gaza() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,253,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,254,"new DateTime(""2007-04-01T00:00"", MOCK_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,255,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,256,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,257,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,262,//------------------------ Bug [1710316] --------------------------------
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,264,/** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,265,private static long CUTOVER_TURK = 1175403600000L;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,266,private static int OFFSET_TURK = -18000000;  // -05:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,267,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,270,public void test_MockTurkIsCorrect() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,271,"DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,272,"assertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,273,"DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,274,"assertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,275,"DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,276,"assertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,279,public void test_getOffsetFromLocal_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,280,"doTest_getOffsetFromLocal_Turk(-1, 23, 0, ""2007-03-31T23:00:00.000-05:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,281,"doTest_getOffsetFromLocal_Turk(-1, 23, 30, ""2007-03-31T23:30:00.000-05:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,282,"doTest_getOffsetFromLocal_Turk(0, 0, 0, ""2007-04-01T01:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,283,"doTest_getOffsetFromLocal_Turk(0, 0, 30, ""2007-04-01T01:30:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,284,"doTest_getOffsetFromLocal_Turk(0, 1, 0, ""2007-04-01T01:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,285,"doTest_getOffsetFromLocal_Turk(0, 1, 30, ""2007-04-01T01:30:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,286,"doTest_getOffsetFromLocal_Turk(0, 2, 0, ""2007-04-01T02:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,287,"doTest_getOffsetFromLocal_Turk(0, 3, 0, ""2007-04-01T03:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,288,"doTest_getOffsetFromLocal_Turk(0, 4, 0, ""2007-04-01T04:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,289,"doTest_getOffsetFromLocal_Turk(0, 5, 0, ""2007-04-01T05:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,290,"doTest_getOffsetFromLocal_Turk(0, 6, 0, ""2007-04-01T06:00:00.000-04:00"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,293,"private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,294,"DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,295,int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,296,"DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,297,"assertEquals(res.toString(), expected, res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,300,public void test_DateTime_roundFloor_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,301,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,302,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,303,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,304,"assertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,307,public void test_DateTime_roundFloorNotDST_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,308,"DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,309,"assertEquals(""2007-04-02T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,310,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,311,"assertEquals(""2007-04-02T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,314,public void test_DateTime_roundCeiling_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,315,"DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,316,"assertEquals(""2007-03-31T20:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,317,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,318,"assertEquals(""2007-04-01T01:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,321,public void test_DateTime_setHourZero_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,322,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,323,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,324,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,325,dt.hourOfDay().setCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,326,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,327,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,328,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,332,public void test_DateTime_withHourZero_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,333,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,334,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,335,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,336,dt.withHourOfDay(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,337,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,338,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,339,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,343,public void test_DateTime_withDay_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,344,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,345,"assertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,346,DateTime res = dt.withDayOfMonth(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,347,"assertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,350,public void test_DateTime_minusHour_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,351,"DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,352,"assertEquals(""2007-04-01T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,354,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,355,"assertEquals(""2007-04-01T01:00:00.000-04:00"", minus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,356,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,357,"assertEquals(""2007-03-31T23:00:00.000-05:00"", minus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,358,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,359,"assertEquals(""2007-03-31T22:00:00.000-05:00"", minus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,362,public void test_DateTime_plusHour_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,363,"DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,364,"assertEquals(""2007-03-31T16:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,366,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,367,"assertEquals(""2007-03-31T23:00:00.000-05:00"", plus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,368,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,369,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,370,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,371,"assertEquals(""2007-04-01T02:00:00.000-04:00"", plus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,374,public void test_DateTime_minusDay_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,375,"DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,376,"assertEquals(""2007-04-02T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,378,DateTime minus1 = dt.minusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,379,"assertEquals(""2007-04-01T01:00:00.000-04:00"", minus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,380,DateTime minus2 = dt.minusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,381,"assertEquals(""2007-03-31T00:00:00.000-05:00"", minus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,384,public void test_DateTime_plusDay_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,385,"DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,386,"assertEquals(""2007-03-31T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,388,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,389,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,390,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,391,"assertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,394,public void test_DateTime_plusDayMidGap_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,395,"DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,396,"assertEquals(""2007-03-31T00:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,398,DateTime plus1 = dt.plusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,399,"assertEquals(""2007-04-01T01:30:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,400,DateTime plus2 = dt.plusDays(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,401,"assertEquals(""2007-04-02T00:30:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,404,public void test_DateTime_addWrapFieldDay_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,405,"DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,406,"assertEquals(""2007-04-30T00:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,408,DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,409,"assertEquals(""2007-04-01T01:00:00.000-04:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,410,DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,411,"assertEquals(""2007-04-02T00:00:00.000-04:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,414,public void test_DateTime_withZoneRetainFields_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,415,"DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,416,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,418,DateTime res = dt.withZoneRetainFields(MOCK_TURK);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,419,"assertEquals(""2007-04-01T01:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,422,public void test_MutableDateTime_setZoneRetainFields_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,423,"MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,424,"assertEquals(""2007-04-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,426,dt.setZoneRetainFields(MOCK_TURK);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,427,"assertEquals(""2007-04-01T01:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,430,public void test_LocalDate_new_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,431,"LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,432,"assertEquals(""2007-04-01"", date1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,434,"LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,435,"assertEquals(""2007-03-31"", date2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,438,public void test_LocalDate_toDateMidnight_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,439,"LocalDate date = new LocalDate(2007, 4, 1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,440,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,441,date.toDateMidnight(MOCK_TURK);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,442,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,443,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,444,"assertEquals(true, ex.getMessage().startsWith(""Illegal instant due to time zone offset transition""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,448,public void test_DateTime_new_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,449,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,450,"new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,451,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,452,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,453,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,457,public void test_DateTime_newValid_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,458,"new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,459,"new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,460,"new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,461,"new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,462,"new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,463,"new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,464,"new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,467,public void test_DateTime_parse_Turk() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,468,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,469,"new DateTime(""2007-04-01T00:00"", MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,470,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,471,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,472,"assertEquals(true, ex.getMessage().indexOf(""Illegal instant due to time zone offset transition"") >= 0);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,479,/** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,480,private static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,481,"private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(""America/New_York"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,482,"//  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,483,//  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,484,"//  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,485,//  System.out.println(y);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,488,public void test_NewYorkIsCorrect_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,489,"DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,490,"assertEquals(""2007-03-11T01:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,491,"DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,492,"assertEquals(""2007-03-11T03:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,493,"DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,494,"assertEquals(""2007-03-11T03:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,497,public void test_getOffsetFromLocal_NewYork_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,498,"doTest_getOffsetFromLocal(3, 11, 1, 0, ""2007-03-11T01:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,499,"doTest_getOffsetFromLocal(3, 11, 1,30, ""2007-03-11T01:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,501,"doTest_getOffsetFromLocal(3, 11, 2, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,502,"doTest_getOffsetFromLocal(3, 11, 2,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,504,"doTest_getOffsetFromLocal(3, 11, 3, 0, ""2007-03-11T03:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,505,"doTest_getOffsetFromLocal(3, 11, 3,30, ""2007-03-11T03:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,506,"doTest_getOffsetFromLocal(3, 11, 4, 0, ""2007-03-11T04:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,507,"doTest_getOffsetFromLocal(3, 11, 5, 0, ""2007-03-11T05:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,508,"doTest_getOffsetFromLocal(3, 11, 6, 0, ""2007-03-11T06:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,509,"doTest_getOffsetFromLocal(3, 11, 7, 0, ""2007-03-11T07:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,510,"doTest_getOffsetFromLocal(3, 11, 8, 0, ""2007-03-11T08:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,513,public void test_DateTime_setHourAcross_NewYork_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,514,"DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,515,"assertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,516,DateTime res = dt.hourOfDay().setCopy(4);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,517,"assertEquals(""2007-03-11T04:00:00.000-04:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,520,public void test_DateTime_setHourForward_NewYork_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,521,"DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,522,"assertEquals(""2007-03-11T00:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,524,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,525,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,526,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,527,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,528,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,532,public void test_DateTime_setHourBack_NewYork_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,533,"DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,534,"assertEquals(""2007-03-11T08:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,536,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,537,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,538,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,539,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,540,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,545,public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,546,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,547,"assertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,548,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,549,"assertEquals(""2007-03-11T00:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,552,public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,553,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,554,"assertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,555,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,556,"assertEquals(""2007-03-11T00:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,559,public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,560,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,561,"assertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,562,DateTime rounded = dt.hourOfDay().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,563,"assertEquals(""2007-03-11T01:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,566,public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,567,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,568,"assertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,569,DateTime rounded = dt.hourOfDay().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,570,"assertEquals(""2007-03-11T03:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,573,public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,574,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,575,"assertEquals(""2007-03-11T01:30:40.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,576,DateTime rounded = dt.minuteOfHour().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,577,"assertEquals(""2007-03-11T01:30:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,580,public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,581,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,582,"assertEquals(""2007-03-11T03:30:40.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,583,DateTime rounded = dt.minuteOfHour().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,584,"assertEquals(""2007-03-11T03:30:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,588,public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,589,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,590,"assertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,591,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,592,"assertEquals(""2007-03-12T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,595,public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,596,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,597,"assertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,598,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,599,"assertEquals(""2007-03-12T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,602,public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,603,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,604,"assertEquals(""2007-03-11T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,605,DateTime rounded = dt.hourOfDay().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,606,"assertEquals(""2007-03-11T03:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,609,public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,610,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,611,"assertEquals(""2007-03-11T03:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,612,DateTime rounded = dt.hourOfDay().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,613,"assertEquals(""2007-03-11T04:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,616,public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,617,"DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,618,"assertEquals(""2007-03-11T01:30:40.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,619,DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,620,"assertEquals(""2007-03-11T01:31:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,623,public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,624,"DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,625,"assertEquals(""2007-03-11T03:30:40.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,626,DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,627,"assertEquals(""2007-03-11T03:31:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,631,/** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,632,private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,635,public void test_NewYorkIsCorrect_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,636,"DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,637,"assertEquals(""2007-11-04T01:59:59.999-04:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,638,"DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,639,"assertEquals(""2007-11-04T01:00:00.000-05:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,640,"DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,641,"assertEquals(""2007-11-04T01:00:00.001-05:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,644,public void test_getOffsetFromLocal_NewYork_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,645,"doTest_getOffsetFromLocal(11, 4, 0, 0, ""2007-11-04T00:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,646,"doTest_getOffsetFromLocal(11, 4, 0,30, ""2007-11-04T00:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,648,"doTest_getOffsetFromLocal(11, 4, 1, 0, ""2007-11-04T01:00:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,649,"doTest_getOffsetFromLocal(11, 4, 1,30, ""2007-11-04T01:30:00.000-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,651,"doTest_getOffsetFromLocal(11, 4, 2, 0, ""2007-11-04T02:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,652,"doTest_getOffsetFromLocal(11, 4, 2,30, ""2007-11-04T02:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,653,"doTest_getOffsetFromLocal(11, 4, 3, 0, ""2007-11-04T03:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,654,"doTest_getOffsetFromLocal(11, 4, 3,30, ""2007-11-04T03:30:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,655,"doTest_getOffsetFromLocal(11, 4, 4, 0, ""2007-11-04T04:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,656,"doTest_getOffsetFromLocal(11, 4, 5, 0, ""2007-11-04T05:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,657,"doTest_getOffsetFromLocal(11, 4, 6, 0, ""2007-11-04T06:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,658,"doTest_getOffsetFromLocal(11, 4, 7, 0, ""2007-11-04T07:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,659,"doTest_getOffsetFromLocal(11, 4, 8, 0, ""2007-11-04T08:00:00.000-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,662,public void test_DateTime_constructor_NewYork_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,663,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,664,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,667,public void test_DateTime_plusHour_NewYork_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,668,"DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,669,"assertEquals(""2007-11-03T18:00:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,671,DateTime plus6 = dt.plusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,672,"assertEquals(""2007-11-04T00:00:00.000-04:00"", plus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,673,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,674,"assertEquals(""2007-11-04T01:00:00.000-04:00"", plus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,675,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,676,"assertEquals(""2007-11-04T01:00:00.000-05:00"", plus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,677,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,678,"assertEquals(""2007-11-04T02:00:00.000-05:00"", plus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,681,public void test_DateTime_minusHour_NewYork_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,682,"DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,683,"assertEquals(""2007-11-04T08:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,685,DateTime minus6 = dt.minusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,686,"assertEquals(""2007-11-04T02:00:00.000-05:00"", minus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,687,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,688,"assertEquals(""2007-11-04T01:00:00.000-05:00"", minus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,689,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,690,"assertEquals(""2007-11-04T01:00:00.000-04:00"", minus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,691,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,692,"assertEquals(""2007-11-04T00:00:00.000-04:00"", minus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,696,public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,697,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,698,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,699,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,700,"assertEquals(""2007-11-04T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,703,public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,704,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,705,"assertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,706,DateTime rounded = dt.dayOfMonth().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,707,"assertEquals(""2007-11-04T00:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,710,public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,711,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,712,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,713,DateTime rounded = dt.hourOfDay().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,714,"assertEquals(""2007-11-04T01:00:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,717,public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,718,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,719,"assertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,720,DateTime rounded = dt.hourOfDay().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,721,"assertEquals(""2007-11-04T01:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,724,public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,725,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,726,"assertEquals(""2007-11-04T01:30:40.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,727,DateTime rounded = dt.minuteOfHour().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,728,"assertEquals(""2007-11-04T01:30:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,731,public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,732,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,733,"assertEquals(""2007-11-04T01:30:40.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,734,DateTime rounded = dt.minuteOfHour().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,735,"assertEquals(""2007-11-04T01:30:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,738,public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,739,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,740,"assertEquals(""2007-11-04T01:30:40.500-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,741,DateTime rounded = dt.secondOfMinute().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,742,"assertEquals(""2007-11-04T01:30:40.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,745,public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,746,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,747,"assertEquals(""2007-11-04T01:30:40.500-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,748,DateTime rounded = dt.secondOfMinute().roundFloorCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,749,"assertEquals(""2007-11-04T01:30:40.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,753,public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,754,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,755,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,756,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,757,"assertEquals(""2007-11-05T00:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,760,public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,761,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,762,"assertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,763,DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,764,"assertEquals(""2007-11-05T00:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,767,public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,768,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,769,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,770,DateTime rounded = dt.hourOfDay().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,771,"assertEquals(""2007-11-04T01:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,774,public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,775,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,776,"assertEquals(""2007-11-04T01:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,777,DateTime rounded = dt.hourOfDay().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,778,"assertEquals(""2007-11-04T02:00:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,781,public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,782,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,783,"assertEquals(""2007-11-04T01:30:40.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,784,DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,785,"assertEquals(""2007-11-04T01:31:00.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,788,public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,789,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,790,"assertEquals(""2007-11-04T01:30:40.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,791,DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,792,"assertEquals(""2007-11-04T01:31:00.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,795,public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,796,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,797,"assertEquals(""2007-11-04T01:30:40.500-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,798,DateTime rounded = dt.secondOfMinute().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,799,"assertEquals(""2007-11-04T01:30:41.000-04:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,802,public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,803,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,804,"assertEquals(""2007-11-04T01:30:40.500-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,805,DateTime rounded = dt.secondOfMinute().roundCeilingCopy();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,806,"assertEquals(""2007-11-04T01:30:41.000-05:00"", rounded.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,810,/** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,811,private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,812,"private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(""Europe/Moscow"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,815,public void test_MoscowIsCorrect_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,816,"//      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,817,//      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,818,"//      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,819,//      System.out.println(y);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,820,"DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,821,"assertEquals(""2007-03-25T01:59:59.999+03:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,822,"DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,823,"assertEquals(""2007-03-25T03:00:00.000+04:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,824,"DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,825,"assertEquals(""2007-03-25T03:00:00.001+04:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,828,public void test_getOffsetFromLocal_Moscow_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,829,"doTest_getOffsetFromLocal(3, 25, 1, 0, ""2007-03-25T01:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,830,"doTest_getOffsetFromLocal(3, 25, 1,30, ""2007-03-25T01:30:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,832,"doTest_getOffsetFromLocal(3, 25, 2, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,833,"doTest_getOffsetFromLocal(3, 25, 2,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,835,"doTest_getOffsetFromLocal(3, 25, 3, 0, ""2007-03-25T03:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,836,"doTest_getOffsetFromLocal(3, 25, 3,30, ""2007-03-25T03:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,837,"doTest_getOffsetFromLocal(3, 25, 4, 0, ""2007-03-25T04:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,838,"doTest_getOffsetFromLocal(3, 25, 5, 0, ""2007-03-25T05:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,839,"doTest_getOffsetFromLocal(3, 25, 6, 0, ""2007-03-25T06:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,840,"doTest_getOffsetFromLocal(3, 25, 7, 0, ""2007-03-25T07:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,841,"doTest_getOffsetFromLocal(3, 25, 8, 0, ""2007-03-25T08:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,844,public void test_DateTime_setHourAcross_Moscow_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,845,"DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,846,"assertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,847,DateTime res = dt.hourOfDay().setCopy(4);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,848,"assertEquals(""2007-03-25T04:00:00.000+04:00"", res.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,851,public void test_DateTime_setHourForward_Moscow_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,852,"DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,853,"assertEquals(""2007-03-25T00:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,855,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,856,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,857,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,858,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,859,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,863,public void test_DateTime_setHourBack_Moscow_Spring() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,864,"DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,865,"assertEquals(""2007-03-25T08:00:00.000+04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,867,try {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,868,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,869,fail();
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,870,} catch (IllegalFieldValueException ex) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,871,// expected
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,876,/** America/New_York cutover from 02:59 to 02:00 on 2007-10-28 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,877,private static long CUTOVER_MOSCOW_AUTUMN = 1193526000000L;  // 2007-10-28T02:00:00.000+03:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,880,public void test_MoscowIsCorrect_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,881,"DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,882,"assertEquals(""2007-10-28T02:59:59.999+04:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,883,"DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,884,"assertEquals(""2007-10-28T02:00:00.000+03:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,885,"DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,886,"assertEquals(""2007-10-28T02:00:00.001+03:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,889,public void test_getOffsetFromLocal_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,890,"doTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,891,"doTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,892,"doTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,893,"doTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,895,"doTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,896,"doTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,897,"doTest_getOffsetFromLocal(10, 28, 2,30,59,999, ""2007-10-28T02:30:59.999+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,898,"doTest_getOffsetFromLocal(10, 28, 2,59,59,998, ""2007-10-28T02:59:59.998+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,899,"doTest_getOffsetFromLocal(10, 28, 2,59,59,999, ""2007-10-28T02:59:59.999+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,901,"doTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,902,"doTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,903,"doTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,904,"doTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,905,"doTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,906,"doTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,907,"doTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,910,public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,911,for (int min = 0; min < 60; min++) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,912,if (min < 10) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,913,"doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:0"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,914,} else {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,915,"doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,920,public void test_DateTime_constructor_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,921,"DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,922,"assertEquals(""2007-10-28T02:30:00.000+04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,925,public void test_DateTime_plusHour_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,926,"DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,927,"assertEquals(""2007-10-27T19:00:00.000+04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,929,DateTime plus6 = dt.plusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,930,"assertEquals(""2007-10-28T01:00:00.000+04:00"", plus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,931,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,932,"assertEquals(""2007-10-28T02:00:00.000+04:00"", plus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,933,DateTime plus8 = dt.plusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,934,"assertEquals(""2007-10-28T02:00:00.000+03:00"", plus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,935,DateTime plus9 = dt.plusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,936,"assertEquals(""2007-10-28T03:00:00.000+03:00"", plus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,939,public void test_DateTime_minusHour_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,940,"DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,941,"assertEquals(""2007-10-28T09:00:00.000+03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,943,DateTime minus6 = dt.minusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,944,"assertEquals(""2007-10-28T03:00:00.000+03:00"", minus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,945,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,946,"assertEquals(""2007-10-28T02:00:00.000+03:00"", minus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,947,DateTime minus8 = dt.minusHours(8);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,948,"assertEquals(""2007-10-28T02:00:00.000+04:00"", minus8.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,949,DateTime minus9 = dt.minusHours(9);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,950,"assertEquals(""2007-10-28T01:00:00.000+04:00"", minus9.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,956,/** America/Guatemala cutover from 23:59 to 23:00 on 2006-09-30 */
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,957,private static long CUTOVER_GUATEMALA_AUTUMN = 1159678800000L; // 2006-09-30T23:00:00.000-06:00
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,958,"private static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(""America/Guatemala"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,961,public void test_GuatemataIsCorrect_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,962,"DateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,963,"assertEquals(""2006-09-30T23:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,964,"DateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,965,"assertEquals(""2006-09-30T23:00:00.000-06:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,966,"DateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,967,"assertEquals(""2006-09-30T23:00:00.001-06:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,970,public void test_getOffsetFromLocal_Guatemata_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,971,"doTest_getOffsetFromLocal( 2006, 9,30,23, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,972,"""2006-09-30T23:00:00.000-05:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,973,"doTest_getOffsetFromLocal( 2006, 9,30,23,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,974,"""2006-09-30T23:30:00.000-05:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,976,"doTest_getOffsetFromLocal( 2006, 9,30,23, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,977,"""2006-09-30T23:00:00.000-05:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,978,"doTest_getOffsetFromLocal( 2006, 9,30,23,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,979,"""2006-09-30T23:30:00.000-05:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,981,"doTest_getOffsetFromLocal( 2006,10, 1, 0, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,982,"""2006-10-01T00:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,983,"doTest_getOffsetFromLocal( 2006,10, 1, 0,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,984,"""2006-10-01T00:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,985,"doTest_getOffsetFromLocal( 2006,10, 1, 1, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,986,"""2006-10-01T01:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,987,"doTest_getOffsetFromLocal( 2006,10, 1, 1,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,988,"""2006-10-01T01:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,989,"doTest_getOffsetFromLocal( 2006,10, 1, 2, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,990,"""2006-10-01T02:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,991,"doTest_getOffsetFromLocal( 2006,10, 1, 2,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,992,"""2006-10-01T02:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,993,"doTest_getOffsetFromLocal( 2006,10, 1, 3, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,994,"""2006-10-01T03:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,995,"doTest_getOffsetFromLocal( 2006,10, 1, 3,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,996,"""2006-10-01T03:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,997,"doTest_getOffsetFromLocal( 2006,10, 1, 4, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,998,"""2006-10-01T04:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,999,"doTest_getOffsetFromLocal( 2006,10, 1, 4,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1000,"""2006-10-01T04:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1001,"doTest_getOffsetFromLocal( 2006,10, 1, 5, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1002,"""2006-10-01T05:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1003,"doTest_getOffsetFromLocal( 2006,10, 1, 5,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1004,"""2006-10-01T05:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1005,"doTest_getOffsetFromLocal( 2006,10, 1, 6, 0,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1006,"""2006-10-01T06:00:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1007,"doTest_getOffsetFromLocal( 2006,10, 1, 6,30,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1008,"""2006-10-01T06:30:00.000-06:00"", ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1011,public void test_DateTime_plusHour_Guatemata_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1012,"DateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1013,"assertEquals(""2006-09-30T20:00:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1015,DateTime plus1 = dt.plusHours(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1016,"assertEquals(""2006-09-30T21:00:00.000-05:00"", plus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1017,DateTime plus2 = dt.plusHours(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1018,"assertEquals(""2006-09-30T22:00:00.000-05:00"", plus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1019,DateTime plus3 = dt.plusHours(3);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1020,"assertEquals(""2006-09-30T23:00:00.000-05:00"", plus3.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1021,DateTime plus4 = dt.plusHours(4);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1022,"assertEquals(""2006-09-30T23:00:00.000-06:00"", plus4.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1023,DateTime plus5 = dt.plusHours(5);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1024,"assertEquals(""2006-10-01T00:00:00.000-06:00"", plus5.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1025,DateTime plus6 = dt.plusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1026,"assertEquals(""2006-10-01T01:00:00.000-06:00"", plus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1027,DateTime plus7 = dt.plusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1028,"assertEquals(""2006-10-01T02:00:00.000-06:00"", plus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1031,public void test_DateTime_minusHour_Guatemata_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1032,"DateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1033,"assertEquals(""2006-10-01T02:00:00.000-06:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1035,DateTime minus1 = dt.minusHours(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1036,"assertEquals(""2006-10-01T01:00:00.000-06:00"", minus1.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1037,DateTime minus2 = dt.minusHours(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1038,"assertEquals(""2006-10-01T00:00:00.000-06:00"", minus2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1039,DateTime minus3 = dt.minusHours(3);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1040,"assertEquals(""2006-09-30T23:00:00.000-06:00"", minus3.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1041,DateTime minus4 = dt.minusHours(4);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1042,"assertEquals(""2006-09-30T23:00:00.000-05:00"", minus4.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1043,DateTime minus5 = dt.minusHours(5);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1044,"assertEquals(""2006-09-30T22:00:00.000-05:00"", minus5.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1045,DateTime minus6 = dt.minusHours(6);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1046,"assertEquals(""2006-09-30T21:00:00.000-05:00"", minus6.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1047,DateTime minus7 = dt.minusHours(7);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1048,"assertEquals(""2006-09-30T20:00:00.000-05:00"", minus7.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1055,public void test_DateTime_JustAfterLastEverOverlap() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1056,// based on America/Argentina/Catamarca in file 2009s
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1057,DateTimeZone zone = new DateTimeZoneBuilder()
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1058,.setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1059,".addRecurringSavings(""SUMMER"", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1060,"'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1061,".addRecurringSavings(""WINTER"", 0, 2000, 2008,"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1062,"'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1063,".toDateTimeZone(""Zone"", false);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1065,"LocalDate date = new LocalDate(2008, 8, 10);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1066,"assertEquals(""2008-08-10"", date.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1068,DateTime dt = date.toDateTimeAtStartOfDay(zone);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1069,"assertEquals(""2008-08-10T00:00:00.000-03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1072,//    public void test_toDateMidnight_SaoPaolo() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1073,//        // RFE: 1684259
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1074,"//        DateTimeZone zone = DateTimeZone.forID(""America/Sao_Paulo"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1075,"//        LocalDate baseDate = new LocalDate(2006, 11, 5);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1076,//        DateMidnight dm = baseDate.toDateMidnight(zone);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1077,"//        assertEquals(""2006-11-05T00:00:00.000-03:00"", dm.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1078,//        DateTime dt = baseDate.toDateTimeAtMidnight(zone);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1079,"//        assertEquals(""2006-11-05T00:00:00.000-03:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1083,"private static final DateTimeZone ZONE_PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1085,public void testWithMinuteOfHourInDstChange_mockZone() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1086,"DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1087,"assertEquals(""2010-10-31T01:15:00.000+00:30"", cutover.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1088,"DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1089,"DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1090,"assertEquals(""2010-10-31T01:00:00.000+01:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1091,"DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1092,"assertEquals(""2010-10-31T01:59:00.000+00:30"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1094,DateTime testPre1 = pre.withMinuteOfHour(30);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1095,"assertEquals(""2010-10-31T01:30:00.000+01:00"", testPre1.toString());  // retain offset"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1096,DateTime testPre2 = pre.withMinuteOfHour(50);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1097,"assertEquals(""2010-10-31T01:50:00.000+00:30"", testPre2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1099,DateTime testPost1 = post.withMinuteOfHour(30);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1100,"assertEquals(""2010-10-31T01:30:00.000+00:30"", testPost1.toString());  // retain offset"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1101,DateTime testPost2 = post.withMinuteOfHour(10);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1102,"assertEquals(""2010-10-31T01:10:00.000+01:00"", testPost2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1105,public void testWithHourOfDayInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1106,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1107,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1108,DateTime test = dateTime.withHourOfDay(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1109,"assertEquals(""2010-10-31T02:30:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1112,public void testWithMinuteOfHourInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1113,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1114,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1115,DateTime test = dateTime.withMinuteOfHour(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1116,"assertEquals(""2010-10-31T02:00:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1119,public void testWithSecondOfMinuteInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1120,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1121,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1122,DateTime test = dateTime.withSecondOfMinute(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1123,"assertEquals(""2010-10-31T02:30:00.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1126,public void testWithMillisOfSecondInDstChange_Paris_summer() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1127,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1128,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1129,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1130,"assertEquals(""2010-10-31T02:30:10.000+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1133,public void testWithMillisOfSecondInDstChange_Paris_winter() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1134,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+01:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1135,"assertEquals(""2010-10-31T02:30:10.123+01:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1136,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1137,"assertEquals(""2010-10-31T02:30:10.000+01:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1140,public void testWithMillisOfSecondInDstChange_NewYork_summer() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1141,"DateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1142,"assertEquals(""2007-11-04T01:30:00.123-04:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1143,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1144,"assertEquals(""2007-11-04T01:30:00.000-04:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1147,public void testWithMillisOfSecondInDstChange_NewYork_winter() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1148,"DateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1149,"assertEquals(""2007-11-04T01:30:00.123-05:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1150,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1151,"assertEquals(""2007-11-04T01:30:00.000-05:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1154,public void testPlusMinutesInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1155,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1156,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1157,DateTime test = dateTime.plusMinutes(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1158,"assertEquals(""2010-10-31T02:31:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1161,public void testPlusSecondsInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1162,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1163,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1164,DateTime test = dateTime.plusSeconds(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1165,"assertEquals(""2010-10-31T02:30:11.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1168,public void testPlusMillisInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1169,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1170,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1171,DateTime test = dateTime.plusMillis(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1172,"assertEquals(""2010-10-31T02:30:10.124+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1175,public void testBug2182444_usCentral() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1176,"Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(""US/Central""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1177,Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1178,"DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1179,"DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1180,"assertTrue(""Should be standard time"", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1181,"assertFalse(""Should be daylight time"", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1183,DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1184,DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1185,"assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1186,"assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1187,assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1188,"assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1189,"assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1190,"assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1191,"assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1194,public void testBug2182444_ausNSW() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1195,"Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(""Australia/NSW""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1196,Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1197,"DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1198,"DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1199,"assertTrue(""Should be standard time"", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1200,"assertFalse(""Should be daylight time"", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1202,DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1203,DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1204,"assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1205,"assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1206,assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1207,"assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1208,"assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1209,"assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1210,"assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1213,public void testPeriod() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1214,"DateTime a = new DateTime(""2010-10-31T02:00:00.000+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1215,"DateTime b = new DateTime(""2010-10-31T02:01:00.000+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1216,"Period period = new Period(a, b, PeriodType.standard());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1217,"assertEquals(""PT1M"", period.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1220,public void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1221,"final DateTimeZone fromDTZ = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1222,"final DateTimeZone toDTZ = DateTimeZone.forID(""Europe/Lisbon"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1223,"DateTime baseBefore = new DateTime(2007, 10, 28, 1, 15, fromDTZ).minusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1224,"DateTime baseAfter = new DateTime(2007, 10, 28, 1, 15, fromDTZ);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1225,DateTime testBefore = baseBefore.withZoneRetainFields(toDTZ);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1226,DateTime testAfter = baseAfter.withZoneRetainFields(toDTZ);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1227,// toString ignores time-zone but includes offset
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1228,"assertEquals(baseBefore.toString(), testBefore.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1229,"assertEquals(baseAfter.toString(), testAfter.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1232,public void testBug3192457_adjustOffset() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1233,"final DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1234,"DateTime base = new DateTime(2007, 10, 28, 3, 15, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1235,DateTime baseBefore = base.minusHours(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1236,DateTime baseAfter = base.minusHours(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1238,"assertSame(base, base.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1239,"assertSame(base, base.withLaterOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1240,"assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1241,"assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1243,"assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1244,"assertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1247,// ensure Summer time picked
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1249,public void testDateTimeCreation_europe() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1250,"DateTimeZone zone = DateTimeZone.forID(""Europe/Athens"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1251,"DateTime base = new DateTime(2011, 10, 30, 3, 15, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1252,"assertEquals(""2011-10-30T03:15:00.000+03:00"", base.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1253,"assertEquals(""2011-10-30T03:15:00.000+02:00"", base.plusHours(1).toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1256,public void testDateTimeCreation_us() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1257,"DateTimeZone zone = DateTimeZone.forID(""America/Los_Angeles"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1258,"DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1259,"assertEquals(""2010-11-07T01:15:00.000-07:00"", base.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1260,"assertEquals(""2010-11-07T01:15:00.000-08:00"", base.plusHours(1).toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1266,"private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1267,"doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1270,"private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1271,"doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1274,"private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1275,"doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1278,"private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1279,"DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1280,int offset = zone.getOffsetFromLocal(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1281,"DateTime res = new DateTime(dt.getMillis() - offset, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1282,"assertEquals(res.toString(), expected, res.toString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,18,mport java.io.ByteArrayInputStream;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,19,mport java.io.ByteArrayOutputStream;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,20,mport java.io.ObjectInputStream;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,21,mport java.io.ObjectOutputStream;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,22,mport java.util.Arrays;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,23,mport java.util.Locale;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,25,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,26,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,28,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,29,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,30,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,31,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,32,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,33,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,36, This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Basics}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,38,ublic class TestMonthDay_Basics extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,41,"rivate static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,42,"rivate static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,43,rivate static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,44,/    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,45,rivate static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,46,rivate static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,47,/    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,48,/    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,49,/    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,50,rivate static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,51,/    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,52,/    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,53,rivate static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,54,rivate static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,56,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,57,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,59,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,61,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,62,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,65,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,66,eturn new TestSuite(TestMonthDay_Basics.class);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,69,ublic TestMonthDay_Basics(String name) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,70,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,73,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,74,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,75,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,76,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,79,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,80,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,81,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,82,one = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,86,ublic void testGet() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,87,onthDay test = new MonthDay();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,88,"ssertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,89,"ssertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,90,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,91,est.get(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,92,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,93, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,94,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,95,est.get(DateTimeFieldType.year());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,96,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,97, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,100,ublic void testSize() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,101,onthDay test = new MonthDay();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,102,"ssertEquals(2, test.size());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,105,ublic void testGetFieldType() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,106,onthDay test = new MonthDay(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,107,"ssertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,108,"ssertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,110,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,111,est.getFieldType(-1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,112, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,113,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,114,est.getFieldType(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,115, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,118,ublic void testGetFieldTypes() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,119,onthDay test = new MonthDay(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,120,ateTimeFieldType[] fields = test.getFieldTypes();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,121,"ssertEquals(2, fields.length);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,122,"ssertSame(DateTimeFieldType.monthOfYear(), fields[0]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,123,"ssertSame(DateTimeFieldType.dayOfMonth(), fields[1]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,124,"ssertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,127,ublic void testGetField() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,128,onthDay test = new MonthDay(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,129,"ssertSame(COPTIC_UTC.monthOfYear(), test.getField(0));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,130,"ssertSame(COPTIC_UTC.dayOfMonth(), test.getField(1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,131,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,132,est.getField(-1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,133, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,134,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,135,est.getField(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,136, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,139,ublic void testGetFields() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,140,onthDay test = new MonthDay(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,141,ateTimeField[] fields = test.getFields();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,142,"ssertEquals(2, fields.length);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,143,"ssertSame(COPTIC_UTC.monthOfYear(), fields[0]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,144,"ssertSame(COPTIC_UTC.dayOfMonth(), fields[1]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,145,"ssertNotSame(test.getFields(), test.getFields());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,148,ublic void testGetValue() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,149,onthDay test = new MonthDay();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,150,"ssertEquals(6, test.getValue(0));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,151,"ssertEquals(9, test.getValue(1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,152,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,153,est.getValue(-1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,154, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,155,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,156,est.getValue(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,157, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,160,ublic void testGetValues() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,161,onthDay test = new MonthDay();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,162,nt[] values = test.getValues();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,163,"ssertEquals(2, values.length);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,164,"ssertEquals(6, values[0]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,165,"ssertEquals(9, values[1]);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,166,"ssertNotSame(test.getValues(), test.getValues());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,169,ublic void testIsSupported() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,170,onthDay test = new MonthDay(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,171,"ssertEquals(false, test.isSupported(DateTimeFieldType.year()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,172,"ssertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,173,"ssertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,174,"ssertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,177,ublic void testEqualsHashCode() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,178,"onthDay test1 = new MonthDay(10, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,179,"onthDay test2 = new MonthDay(10, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,180,"ssertEquals(true, test1.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,181,"ssertEquals(true, test2.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,182,"ssertEquals(true, test1.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,183,"ssertEquals(true, test2.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,184,"ssertEquals(true, test1.hashCode() == test2.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,185,"ssertEquals(true, test1.hashCode() == test1.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,186,"ssertEquals(true, test2.hashCode() == test2.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,188,"onthDay test3 = new MonthDay(10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,189,"ssertEquals(false, test1.equals(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,190,"ssertEquals(false, test2.equals(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,191,"ssertEquals(false, test3.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,192,"ssertEquals(false, test3.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,193,"ssertEquals(false, test1.hashCode() == test3.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,194,"ssertEquals(false, test2.hashCode() == test3.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,196,"ssertEquals(false, test1.equals(""Hello""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,197,"ssertEquals(true, test1.equals(new MockMD()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,198,"ssertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,201,lass MockMD extends MockPartial {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,203,Override
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,204,ublic Chronology getChronology() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,205,eturn COPTIC_UTC;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,208,Override
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,209,ublic DateTimeField[] getFields() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,210,eturn new DateTimeField[] {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,211,"OPTIC_UTC.monthOfYear(),"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,212,OPTIC_UTC.dayOfMonth()
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,216,Override
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,217,ublic int[] getValues() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,218,"eturn new int[] {10, 6};"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,223,ublic void testCompareTo() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,224,"onthDay test1 = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,225,"onthDay test1a = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,226,"ssertEquals(0, test1.compareTo(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,227,"ssertEquals(0, test1a.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,228,"ssertEquals(0, test1.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,229,"ssertEquals(0, test1a.compareTo(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,231,"onthDay test2 = new MonthDay(6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,232,"ssertEquals(-1, test1.compareTo(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,233,"ssertEquals(+1, test2.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,235,"onthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,236,"ssertEquals(-1, test1.compareTo(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,237,"ssertEquals(+1, test3.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,238,"ssertEquals(0, test3.compareTo(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,240,ateTimeFieldType[] types = new DateTimeFieldType[] {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,241,"ateTimeFieldType.monthOfYear(),"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,242,ateTimeFieldType.dayOfMonth()
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,244,"nt[] values = new int[] {6, 6};"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,245,"artial p = new Partial(types, values);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,246,"ssertEquals(0, test1.compareTo(p));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,247,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,248,est1.compareTo(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,249,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,250, catch (NullPointerException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,251,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,252,est1.compareTo(new LocalTime());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,253,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,254, catch (ClassCastException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,255,artial partial = new Partial()
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,256,"with(DateTimeFieldType.centuryOfEra(), 1)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,257,"with(DateTimeFieldType.halfdayOfDay(), 0)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,258,"with(DateTimeFieldType.dayOfMonth(), 9);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,259,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,260,"ew MonthDay(10, 6).compareTo(partial);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,261,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,262, catch (ClassCastException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,266,ublic void testIsEqual_MD() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,267,"onthDay test1 = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,268,"onthDay test1a = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,269,"ssertEquals(true, test1.isEqual(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,270,"ssertEquals(true, test1a.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,271,"ssertEquals(true, test1.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,272,"ssertEquals(true, test1a.isEqual(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,274,"onthDay test2 = new MonthDay(6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,275,"ssertEquals(false, test1.isEqual(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,276,"ssertEquals(false, test2.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,278,"onthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,279,"ssertEquals(false, test1.isEqual(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,280,"ssertEquals(false, test3.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,281,"ssertEquals(true, test3.isEqual(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,283,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,284,"ew MonthDay(6, 7).isEqual(null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,285,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,286, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,290,ublic void testIsBefore_MD() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,291,"onthDay test1 = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,292,"onthDay test1a = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,293,"ssertEquals(false, test1.isBefore(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,294,"ssertEquals(false, test1a.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,295,"ssertEquals(false, test1.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,296,"ssertEquals(false, test1a.isBefore(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,298,"onthDay test2 = new MonthDay(6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,299,"ssertEquals(true, test1.isBefore(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,300,"ssertEquals(false, test2.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,302,"onthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,303,"ssertEquals(true, test1.isBefore(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,304,"ssertEquals(false, test3.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,305,"ssertEquals(false, test3.isBefore(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,307,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,308,"ew MonthDay(6, 7).isBefore(null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,309,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,310, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,314,ublic void testIsAfter_MD() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,315,"onthDay test1 = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,316,"onthDay test1a = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,317,"ssertEquals(false, test1.isAfter(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,318,"ssertEquals(false, test1a.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,319,"ssertEquals(false, test1.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,320,"ssertEquals(false, test1a.isAfter(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,322,"onthDay test2 = new MonthDay(6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,323,"ssertEquals(false, test1.isAfter(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,324,"ssertEquals(true, test2.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,326,"onthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,327,"ssertEquals(false, test1.isAfter(test3));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,328,"ssertEquals(true, test3.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,329,"ssertEquals(false, test3.isAfter(test2));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,331,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,332,"ew MonthDay(6, 7).isAfter(null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,333,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,334, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,338,ublic void testWithChronologyRetainFields_Chrono() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,339,"onthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,340,onthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,341,"heck(base, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,342,"ssertEquals(COPTIC_UTC, base.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,343,"heck(test, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,344,"ssertEquals(BUDDHIST_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,347,ublic void testWithChronologyRetainFields_sameChrono() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,348,"onthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,349,onthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,350,"ssertSame(base, test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,353,ublic void testWithChronologyRetainFields_nullChrono() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,354,"onthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,355,onthDay test = base.withChronologyRetainFields(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,356,"heck(base, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,357,"ssertEquals(COPTIC_UTC, base.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,358,"heck(test, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,359,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,363,ublic void testWithField() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,364,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,365,"onthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,367,"ssertEquals(new MonthDay(9, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,368,"ssertEquals(new MonthDay(10, 6), result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,371,ublic void testWithField_nullField() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,372,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,373,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,374,"est.withField(null, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,375,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,376, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,379,ublic void testWithField_unknownField() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,380,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,381,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,382,"est.withField(DateTimeFieldType.hourOfDay(), 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,383,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,384, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,387,ublic void testWithField_same() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,388,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,389,"onthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,390,"ssertEquals(new MonthDay(9, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,391,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,395,ublic void testWithFieldAdded() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,396,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,397,"onthDay result = test.withFieldAdded(DurationFieldType.months(), 1);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,399,"ssertEquals(new MonthDay(9, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,400,"ssertEquals(new MonthDay(10, 6), result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,403,ublic void testWithFieldAdded_nullField_zero() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,404,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,405,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,406,"est.withFieldAdded(null, 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,407,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,408, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,411,ublic void testWithFieldAdded_nullField_nonZero() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,412,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,413,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,414,"est.withFieldAdded(null, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,415,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,416, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,419,ublic void testWithFieldAdded_zero() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,420,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,421,"onthDay result = test.withFieldAdded(DurationFieldType.months(), 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,422,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,425,ublic void testWithFieldAdded_unknownField() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,426,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,427,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,428,"est.withFieldAdded(DurationFieldType.hours(), 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,429,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,430, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,434,ublic void testPlus_RP() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,435,"onthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,436,"onthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,437,"onthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,438,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,440,esult = test.plus((ReadablePeriod) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,441,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,444,ublic void testPlusMonths_int() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,445,"onthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,446,onthDay result = test.plusMonths(1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,447,"onthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,448,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,451,ublic void testPlusMonths_int_same() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,452,"onthDay test = new MonthDay(6, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,453,onthDay result = test.plusMonths(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,454,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,457,ublic void testPlusMonths_int_wrap() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,458,"onthDay test = new MonthDay(6, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,459,onthDay result = test.plusMonths(10);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,460,"onthDay expected = new MonthDay(4, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,461,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,464,ublic void testPlusMonths_int_adjust() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,465,"onthDay test = new MonthDay(7, 31, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,466,onthDay result = test.plusMonths(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,467,"onthDay expected = new MonthDay(9, 30, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,468,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,471,ublic void testPlusDays_int() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,472,"onthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,473,onthDay result = test.plusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,474,"onthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,475,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,478,ublic void testPlusDays_same() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,479,"onthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,480,onthDay result = test.plusDays(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,481,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,485,ublic void testMinus_RP() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,486,"onthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,487,"onthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,488,"onthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,489,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,491,esult = test.minus((ReadablePeriod) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,492,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,495,ublic void testMinusMonths_int() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,496,"onthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,497,onthDay result = test.minusMonths(1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,498,"onthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,499,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,502,ublic void testMinusMonths_int_same() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,503,"onthDay test = new MonthDay(6, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,504,onthDay result = test.minusMonths(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,505,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,508,ublic void testMinusMonths_int_wrap() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,509,"onthDay test = new MonthDay(6, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,510,onthDay result = test.minusMonths(10);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,511,"onthDay expected = new MonthDay(8, 5, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,512,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,515,ublic void testMinusMonths_int_adjust() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,516,"onthDay test = new MonthDay(7, 31, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,517,onthDay result = test.minusMonths(3);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,518,"onthDay expected = new MonthDay(4, 30, ISO_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,519,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,522,ublic void testMinusDays_int() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,523,"onthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,524,onthDay result = test.minusDays(1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,525,"onthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,526,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,529,ublic void testMinusDays_same() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,530,"onthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,531,onthDay result = test.minusDays(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,532,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,536,ublic void testToLocalDate() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,537,"onthDay base = new MonthDay(6, 6, COPTIC_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,538,ocalDate test = base.toLocalDate(2009);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,539,"ssertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,540,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,541,ase.toLocalDate(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,542,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,543, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,547,ublic void testToDateTime_RI() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,548,"onthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,549,"ateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,551,ateTime test = base.toDateTime(dt);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,552,"heck(base, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,553,ateTime expected = dt;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,554,xpected = expected.monthOfYear().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,555,xpected = expected.dayOfMonth().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,556,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,559,ublic void testToDateTime_nullRI() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,560,"onthDay base = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,561,"ateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,562,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,564,ateTime test = base.toDateTime((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,565,"heck(base, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,566,ateTime expected = dt;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,567,xpected = expected.monthOfYear().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,568,xpected = expected.dayOfMonth().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,569,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,573,ublic void testWithers() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,574,"onthDay test = new MonthDay(10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,575,"heck(test.withMonthOfYear(5), 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,576,"heck(test.withDayOfMonth(2), 10, 2);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,577,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,578,est.withMonthOfYear(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,579,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,580, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,581,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,582,est.withMonthOfYear(13);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,583,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,584, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,588,ublic void testProperty() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,589,"onthDay test = new MonthDay(6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,590,"ssertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,591,"ssertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,592,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,593,est.property(DateTimeFieldType.millisOfDay());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,594,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,595, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,596,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,597,est.property(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,598,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,599, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,603,ublic void testSerialization() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,604,"onthDay test = new MonthDay(5, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,606,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,607,bjectOutputStream oos = new ObjectOutputStream(baos);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,608,os.writeObject(test);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,609,yte[] bytes = baos.toByteArray();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,610,os.close();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,612,yteArrayInputStream bais = new ByteArrayInputStream(bytes);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,613,bjectInputStream ois = new ObjectInputStream(bais);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,614,onthDay result = (MonthDay) ois.readObject();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,615,is.close();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,617,"ssertEquals(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,618,"ssertTrue(Arrays.equals(test.getValues(), result.getValues()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,619,"ssertTrue(Arrays.equals(test.getFields(), result.getFields()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,620,"ssertEquals(test.getChronology(), result.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,624,ublic void testToString() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,625,"onthDay test = new MonthDay(5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,626,"ssertEquals(""--05-06"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,630,ublic void testToString_String() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,631,"onthDay test = new MonthDay(5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,632,"ssertEquals(""05 \ufffd\ufffd"", test.toString(""MM HH""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,633,"ssertEquals(""--05-06"", test.toString((String) null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,637,ublic void testToString_String_Locale() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,638,"onthDay test = new MonthDay(5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,639,"ssertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.ENGLISH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,640,"ssertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,641,"ssertEquals(""--05-06"", test.toString(null, Locale.ENGLISH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,642,"ssertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,643,"ssertEquals(""--05-06"", test.toString(null, null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,647,ublic void testToString_DTFormatter() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,648,"onthDay test = new MonthDay(5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,649,"ssertEquals(""05 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""MM HH"")));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,650,"ssertEquals(""--05-06"", test.toString((DateTimeFormatter) null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,654,"rivate void check(MonthDay test, int month, int day) {"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,655,"ssertEquals(month, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,656,"ssertEquals(day, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,23,import java.util.Locale;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,25,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,26,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,28,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,30,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,31,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,32,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,33,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,36,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Basics}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,38,public class TestMonthDay_Basics extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,42,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,43,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,44,//    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,45,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,46,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,47,//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,48,//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,49,//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,50,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,51,//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,52,//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,53,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,54,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,56,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,57,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,59,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,61,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,62,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,65,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,66,return new TestSuite(TestMonthDay_Basics.class);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,69,public TestMonthDay_Basics(String name) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,70,super(name);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,73,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,74,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,75,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,76,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,79,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,80,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,81,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,82,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,86,public void testGet() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,87,MonthDay test = new MonthDay();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,88,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,89,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,90,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,91,test.get(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,92,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,93,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,94,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,95,test.get(DateTimeFieldType.year());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,96,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,97,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,100,public void testSize() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,101,MonthDay test = new MonthDay();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,102,"assertEquals(2, test.size());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,105,public void testGetFieldType() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,106,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,107,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,108,"assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,110,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,111,test.getFieldType(-1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,112,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,113,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,114,test.getFieldType(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,115,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,118,public void testGetFieldTypes() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,119,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,120,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,121,"assertEquals(2, fields.length);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,122,"assertSame(DateTimeFieldType.monthOfYear(), fields[0]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,123,"assertSame(DateTimeFieldType.dayOfMonth(), fields[1]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,124,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,127,public void testGetField() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,128,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,129,"assertSame(COPTIC_UTC.monthOfYear(), test.getField(0));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,130,"assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,131,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,132,test.getField(-1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,133,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,134,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,135,test.getField(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,136,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,139,public void testGetFields() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,140,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,141,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,142,"assertEquals(2, fields.length);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,143,"assertSame(COPTIC_UTC.monthOfYear(), fields[0]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,144,"assertSame(COPTIC_UTC.dayOfMonth(), fields[1]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,145,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,148,public void testGetValue() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,149,MonthDay test = new MonthDay();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,150,"assertEquals(6, test.getValue(0));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,151,"assertEquals(9, test.getValue(1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,152,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,153,test.getValue(-1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,154,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,155,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,156,test.getValue(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,157,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,160,public void testGetValues() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,161,MonthDay test = new MonthDay();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,162,int[] values = test.getValues();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,163,"assertEquals(2, values.length);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,164,"assertEquals(6, values[0]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,165,"assertEquals(9, values[1]);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,166,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,169,public void testIsSupported() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,170,MonthDay test = new MonthDay(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,171,"assertEquals(false, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,172,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,173,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,174,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,177,public void testEqualsHashCode() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,178,"MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,179,"MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,180,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,181,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,182,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,183,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,184,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,185,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,186,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,188,"MonthDay test3 = new MonthDay(10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,189,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,190,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,191,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,192,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,193,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,194,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,196,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,197,"assertEquals(true, test1.equals(new MockMD()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,198,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,201,class MockMD extends MockPartial {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,203,@Override
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,204,public Chronology getChronology() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,205,return COPTIC_UTC;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,208,@Override
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,209,public DateTimeField[] getFields() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,210,return new DateTimeField[] {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,211,"COPTIC_UTC.monthOfYear(),"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,212,COPTIC_UTC.dayOfMonth()
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,216,@Override
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,217,public int[] getValues() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,218,"return new int[] {10, 6};"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,223,public void testCompareTo() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,224,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,225,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,226,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,227,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,228,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,229,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,231,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,232,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,233,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,235,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,236,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,237,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,238,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,240,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,241,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,242,DateTimeFieldType.dayOfMonth()
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,244,"int[] values = new int[] {6, 6};"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,245,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,246,"assertEquals(0, test1.compareTo(p));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,247,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,248,test1.compareTo(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,249,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,250,} catch (NullPointerException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,251,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,252,test1.compareTo(new LocalTime());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,253,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,254,} catch (ClassCastException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,255,Partial partial = new Partial()
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,256,".with(DateTimeFieldType.centuryOfEra(), 1)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,257,".with(DateTimeFieldType.halfdayOfDay(), 0)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,258,".with(DateTimeFieldType.dayOfMonth(), 9);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,259,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,260,"new MonthDay(10, 6).compareTo(partial);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,261,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,262,} catch (ClassCastException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,266,public void testIsEqual_MD() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,267,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,268,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,269,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,270,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,271,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,272,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,274,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,275,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,276,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,278,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,279,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,280,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,281,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,283,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,284,"new MonthDay(6, 7).isEqual(null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,285,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,286,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,290,public void testIsBefore_MD() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,291,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,292,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,293,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,294,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,295,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,296,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,298,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,299,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,300,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,302,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,303,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,304,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,305,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,307,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,308,"new MonthDay(6, 7).isBefore(null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,309,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,310,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,314,public void testIsAfter_MD() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,315,"MonthDay test1 = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,316,"MonthDay test1a = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,317,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,318,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,319,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,320,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,322,"MonthDay test2 = new MonthDay(6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,323,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,324,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,326,"MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,327,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,328,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,329,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,331,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,332,"new MonthDay(6, 7).isAfter(null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,333,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,334,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,338,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,339,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,340,MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,341,"check(base, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,342,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,343,"check(test, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,344,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,347,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,348,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,349,MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,350,"assertSame(base, test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,353,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,354,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,355,MonthDay test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,356,"check(base, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,357,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,358,"check(test, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,359,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,363,public void testWithField() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,364,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,365,"MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,367,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,368,"assertEquals(new MonthDay(10, 6), result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,371,public void testWithField_nullField() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,372,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,373,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,374,"test.withField(null, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,375,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,376,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,379,public void testWithField_unknownField() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,380,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,381,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,382,"test.withField(DateTimeFieldType.hourOfDay(), 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,383,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,384,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,387,public void testWithField_same() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,388,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,389,"MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,390,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,391,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,395,public void testWithFieldAdded() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,396,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,397,"MonthDay result = test.withFieldAdded(DurationFieldType.months(), 1);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,399,"assertEquals(new MonthDay(9, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,400,"assertEquals(new MonthDay(10, 6), result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,403,public void testWithFieldAdded_nullField_zero() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,404,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,405,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,406,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,407,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,408,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,411,public void testWithFieldAdded_nullField_nonZero() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,412,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,413,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,414,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,415,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,416,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,419,public void testWithFieldAdded_zero() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,420,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,421,"MonthDay result = test.withFieldAdded(DurationFieldType.months(), 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,422,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,425,public void testWithFieldAdded_unknownField() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,426,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,427,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,428,"test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,429,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,430,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,434,public void testPlus_RP() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,435,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,436,"MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,437,"MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,438,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,440,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,441,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,444,public void testPlusMonths_int() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,445,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,446,MonthDay result = test.plusMonths(1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,447,"MonthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,448,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,451,public void testPlusMonths_int_same() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,452,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,453,MonthDay result = test.plusMonths(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,454,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,457,public void testPlusMonths_int_wrap() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,458,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,459,MonthDay result = test.plusMonths(10);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,460,"MonthDay expected = new MonthDay(4, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,461,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,464,public void testPlusMonths_int_adjust() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,465,"MonthDay test = new MonthDay(7, 31, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,466,MonthDay result = test.plusMonths(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,467,"MonthDay expected = new MonthDay(9, 30, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,468,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,471,public void testPlusDays_int() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,472,"MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,473,MonthDay result = test.plusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,474,"MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,475,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,478,public void testPlusDays_same() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,479,"MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,480,MonthDay result = test.plusDays(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,481,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,485,public void testMinus_RP() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,486,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,487,"MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,488,"MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,489,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,491,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,492,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,495,public void testMinusMonths_int() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,496,"MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,497,MonthDay result = test.minusMonths(1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,498,"MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,499,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,502,public void testMinusMonths_int_same() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,503,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,504,MonthDay result = test.minusMonths(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,505,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,508,public void testMinusMonths_int_wrap() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,509,"MonthDay test = new MonthDay(6, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,510,MonthDay result = test.minusMonths(10);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,511,"MonthDay expected = new MonthDay(8, 5, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,512,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,515,public void testMinusMonths_int_adjust() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,516,"MonthDay test = new MonthDay(7, 31, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,517,MonthDay result = test.minusMonths(3);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,518,"MonthDay expected = new MonthDay(4, 30, ISO_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,519,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,522,public void testMinusDays_int() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,523,"MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,524,MonthDay result = test.minusDays(1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,525,"MonthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,526,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,529,public void testMinusDays_same() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,530,"MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,531,MonthDay result = test.minusDays(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,532,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,536,public void testToLocalDate() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,537,"MonthDay base = new MonthDay(6, 6, COPTIC_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,538,LocalDate test = base.toLocalDate(2009);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,539,"assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,540,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,541,base.toLocalDate(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,542,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,543,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,547,public void testToDateTime_RI() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,548,"MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,549,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,551,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,552,"check(base, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,553,DateTime expected = dt;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,554,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,555,expected = expected.dayOfMonth().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,556,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,559,public void testToDateTime_nullRI() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,560,"MonthDay base = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,561,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,562,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,564,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,565,"check(base, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,566,DateTime expected = dt;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,567,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,568,expected = expected.dayOfMonth().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,569,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,573,public void testWithers() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,574,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,575,"check(test.withMonthOfYear(5), 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,576,"check(test.withDayOfMonth(2), 10, 2);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,577,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,578,test.withMonthOfYear(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,579,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,580,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,581,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,582,test.withMonthOfYear(13);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,583,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,584,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,588,public void testProperty() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,589,"MonthDay test = new MonthDay(6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,590,"assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,591,"assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,592,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,593,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,594,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,595,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,596,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,597,test.property(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,598,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,599,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,603,public void testSerialization() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,604,"MonthDay test = new MonthDay(5, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,606,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,607,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,608,oos.writeObject(test);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,609,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,610,oos.close();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,612,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,613,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,614,MonthDay result = (MonthDay) ois.readObject();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,615,ois.close();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,617,"assertEquals(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,618,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,619,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,620,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,624,public void testToString() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,625,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,626,"assertEquals(""--05-06"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,630,public void testToString_String() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,631,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,632,"assertEquals(""05 \ufffd\ufffd"", test.toString(""MM HH""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,633,"assertEquals(""--05-06"", test.toString((String) null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,637,public void testToString_String_Locale() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,638,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,639,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,640,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,641,"assertEquals(""--05-06"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,642,"assertEquals(""\ufffd 6/5"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,643,"assertEquals(""--05-06"", test.toString(null, null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,647,public void testToString_DTFormatter() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,648,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,649,"assertEquals(""05 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""MM HH"")));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,650,"assertEquals(""--05-06"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,654,"private void check(MonthDay test, int month, int day) {"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,655,"assertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java,src/test/java/org/joda/time/TestMonthDay_Basics.java,656,"assertEquals(day, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,18,mport java.util.Calendar;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,19,mport java.util.Date;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,20,mport java.util.GregorianCalendar;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,22,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,23,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,25,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,26,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,27,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,28,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,31, This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Constuctors}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,33,ublic class TestMonthDay_Constructors extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,37,rivate static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,38,rivate static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,39,rivate static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,41,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,42,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,44,rivate long TEST_TIME1 =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,45,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,46, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,47, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,49,rivate long TEST_TIME2 =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,50,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,51, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,52, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,54,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,56,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,57,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,60,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,61,eturn new TestSuite(TestMonthDay_Constructors.class);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,64,ublic TestMonthDay_Constructors(String name) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,65,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,68,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,69,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,70,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,71,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,74,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,75,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,76,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,77,one = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,81,ublic void testParse_noFormatter() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,82,"ssertEquals(new MonthDay(6, 30), MonthDay.parse(""--06-30""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,83,"ssertEquals(new MonthDay(2, 29), MonthDay.parse(""--02-29""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,84,"ssertEquals(new MonthDay(6, 30), MonthDay.parse(""2010-06-30""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,85,"ssertEquals(new MonthDay(1, 2), MonthDay.parse(""2010-002""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,88,ublic void testParse_formatter() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,89,"ateTimeFormatter f = DateTimeFormat.forPattern(""yyyy--dd MM"").withChronology(ISOChronology.getInstance(PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,90,"ssertEquals(new MonthDay(6, 30), MonthDay.parse(""2010--30 06"", f));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,94,ublic void testFactory_FromCalendarFields() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,95,"regorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,96,"al.set(Calendar.MILLISECOND, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,97,"onthDay expected = new MonthDay(2, 3);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,98,"ssertEquals(expected, MonthDay.fromCalendarFields(cal));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,99,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,100,onthDay.fromCalendarFields(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,101,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,102, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,106,ublic void testFactory_FromDateFields() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,107,"regorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,108,"al.set(Calendar.MILLISECOND, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,109,"onthDay expected = new MonthDay(2, 3);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,110,"ssertEquals(expected, MonthDay.fromDateFields(cal.getTime()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,111,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,112,onthDay.fromDateFields(null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,113,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,114, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,119, Test constructor ()
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,121,ublic void testConstructor() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,122,onthDay test = new MonthDay();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,123,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,124,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,125,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,129, Test constructor (DateTimeZone)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,131,ublic void testConstructor_DateTimeZone() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,132,"ateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,133,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,134,/ 23:59 in London is 00:59 the following day in Paris
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,136,onthDay test = new MonthDay(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,137,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,138,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,139,"ssertEquals(30, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,141,est = new MonthDay(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,142,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,143,"ssertEquals(7, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,144,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,148, Test constructor (DateTimeZone=null)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,150,ublic void testConstructor_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,151,"ateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,152,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,153,/ 23:59 in London is 00:59 the following day in Paris
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,155,onthDay test = new MonthDay((DateTimeZone) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,156,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,157,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,158,"ssertEquals(30, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,162, Test constructor (Chronology)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,164,ublic void testConstructor_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,165,onthDay test = new MonthDay(GREGORIAN_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,166,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,167,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,168,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,172, Test constructor (Chronology=null)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,174,ublic void testConstructor_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,175,onthDay test = new MonthDay((Chronology) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,176,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,177,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,178,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,183, Test constructor (long)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,185,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,186,onthDay test = new MonthDay(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,187,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,188,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,189,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,193, Test constructor (long)
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,195,ublic void testConstructor_long2() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,196,onthDay test = new MonthDay(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,197,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,198,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,199,"ssertEquals(7, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,203," Test constructor (long, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,205,ublic void testConstructor_long1_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,206,"onthDay test = new MonthDay(TEST_TIME1, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,207,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,208,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,209,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,213," Test constructor (long, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,215,ublic void testConstructor_long2_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,216,"onthDay test = new MonthDay(TEST_TIME2, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,217,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,218,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,219,"ssertEquals(7, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,223," Test constructor (long, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,225,ublic void testConstructor_long_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,226,"onthDay test = new MonthDay(TEST_TIME1, null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,227,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,228,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,229,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,233,ublic void testConstructor_Object() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,234,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,235,onthDay test = new MonthDay(date);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,236,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,237,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,238,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,241,ublic void testConstructor_nullObject() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,242,onthDay test = new MonthDay((Object) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,243,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,244,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,245,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,248,ublic void testConstructor_ObjectString1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,249,"onthDay test = new MonthDay(""1972-12"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,250,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,251,"ssertEquals(12, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,252,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,255,ublic void testConstructor_ObjectString5() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,256,"onthDay test = new MonthDay(""10"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,257,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,258,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,259,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,262,ublic void testConstructor_ObjectStringEx1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,263,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,264,"ew MonthDay(""T10:20:30.040"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,265,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,266, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,267,/ expected
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,271,ublic void testConstructor_ObjectStringEx2() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,272,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,273,"ew MonthDay(""T10:20:30.040+14:00"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,274,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,275, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,276,/ expected
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,280,ublic void testConstructor_ObjectStringEx3() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,281,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,282,"ew MonthDay(""10:20:30.040"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,283,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,284, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,285,/ expected
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,289,ublic void testConstructor_ObjectStringEx4() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,290,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,291,"ew MonthDay(""10:20:30.040+14:00"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,292,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,293, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,294,/ expected
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,300," Test constructor (Object, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,302,ublic void testConstructor_Object_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,303,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,304,"onthDay test = new MonthDay(date, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,305,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,306,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,307,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,311," Test constructor (Object=null, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,313,ublic void testConstructor_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,314,"onthDay test = new MonthDay((Object) null, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,315,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,316,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,317,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,321," Test constructor (Object, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,323,ublic void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,324,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,325,"onthDay test = new MonthDay(date, null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,326,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,327,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,328,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,332," Test constructor (Object=null, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,334,ublic void testConstructor_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,335,"onthDay test = new MonthDay((Object) null, null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,336,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,337,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,338,"ssertEquals(9, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,343," Test constructor (int, int)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,345,ublic void testConstructor_int_int() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,346,"onthDay test = new MonthDay(6, 30);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,347,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,348,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,349,"ssertEquals(30, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,350,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,351,"ew MonthDay(Integer.MIN_VALUE, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,352,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,353, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,354,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,355,"ew MonthDay(Integer.MAX_VALUE, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,356,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,357, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,358,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,359,"ew MonthDay(1970, 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,360,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,361, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,362,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,363,"ew MonthDay(1970, 13);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,364,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,365, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,369," Test constructor (int, int, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,371,ublic void testConstructor_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,372,"onthDay test = new MonthDay(6, 30, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,373,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,374,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,375,"ssertEquals(30, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,376,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,377,"ew MonthDay(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,378,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,379, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,380,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,381,"ew MonthDay(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,382,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,383, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,384,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,385,"ew MonthDay(1970, 0, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,386,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,387, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,388,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,389,"ew MonthDay(1970, 13, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,390,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,391, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,395," Test constructor (int, int, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,397,ublic void testConstructor_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,398,"onthDay test = new MonthDay(6, 30, null);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,399,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,400,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,401,"ssertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,25,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,27,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,28,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,31,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Constuctors}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,33,public class TestMonthDay_Constructors extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,37,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,38,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,39,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,41,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,42,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,44,private long TEST_TIME1 =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,45,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,46,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,47,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,49,private long TEST_TIME2 =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,50,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,51,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,52,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,54,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,56,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,57,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,60,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,61,return new TestSuite(TestMonthDay_Constructors.class);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,64,public TestMonthDay_Constructors(String name) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,65,super(name);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,68,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,69,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,70,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,71,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,74,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,75,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,76,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,77,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,81,public void testParse_noFormatter() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,82,"assertEquals(new MonthDay(6, 30), MonthDay.parse(""--06-30""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,83,"assertEquals(new MonthDay(2, 29), MonthDay.parse(""--02-29""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,84,"assertEquals(new MonthDay(6, 30), MonthDay.parse(""2010-06-30""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,85,"assertEquals(new MonthDay(1, 2), MonthDay.parse(""2010-002""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,88,public void testParse_formatter() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,89,"DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy--dd MM"").withChronology(ISOChronology.getInstance(PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,90,"assertEquals(new MonthDay(6, 30), MonthDay.parse(""2010--30 06"", f));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,94,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,95,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,96,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,97,"MonthDay expected = new MonthDay(2, 3);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,98,"assertEquals(expected, MonthDay.fromCalendarFields(cal));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,99,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,100,MonthDay.fromCalendarFields(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,101,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,102,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,106,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,107,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,108,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,109,"MonthDay expected = new MonthDay(2, 3);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,110,"assertEquals(expected, MonthDay.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,111,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,112,MonthDay.fromDateFields(null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,113,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,114,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,119,* Test constructor ()
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,121,public void testConstructor() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,122,MonthDay test = new MonthDay();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,123,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,124,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,125,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,129,* Test constructor (DateTimeZone)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,131,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,132,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,133,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,134,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,136,MonthDay test = new MonthDay(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,137,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,138,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,139,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,141,test = new MonthDay(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,142,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,143,"assertEquals(7, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,144,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,148,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,150,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,151,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,152,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,153,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,155,MonthDay test = new MonthDay((DateTimeZone) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,156,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,157,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,158,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,162,* Test constructor (Chronology)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,164,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,165,MonthDay test = new MonthDay(GREGORIAN_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,166,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,167,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,168,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,172,* Test constructor (Chronology=null)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,174,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,175,MonthDay test = new MonthDay((Chronology) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,176,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,177,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,178,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,183,* Test constructor (long)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,185,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,186,MonthDay test = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,187,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,188,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,189,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,193,* Test constructor (long)
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,195,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,196,MonthDay test = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,197,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,198,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,199,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,203,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,205,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,206,"MonthDay test = new MonthDay(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,207,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,208,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,209,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,213,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,215,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,216,"MonthDay test = new MonthDay(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,217,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,218,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,219,"assertEquals(7, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,223,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,225,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,226,"MonthDay test = new MonthDay(TEST_TIME1, null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,227,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,228,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,229,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,233,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,234,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,235,MonthDay test = new MonthDay(date);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,236,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,237,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,238,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,241,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,242,MonthDay test = new MonthDay((Object) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,243,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,244,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,245,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,248,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,249,"MonthDay test = new MonthDay(""1972-12"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,250,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,251,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,252,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,255,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,256,"MonthDay test = new MonthDay(""10"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,257,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,258,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,259,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,262,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,263,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,264,"new MonthDay(""T10:20:30.040"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,265,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,266,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,267,// expected
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,271,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,272,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,273,"new MonthDay(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,274,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,275,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,276,// expected
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,280,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,281,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,282,"new MonthDay(""10:20:30.040"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,283,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,284,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,285,// expected
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,289,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,290,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,291,"new MonthDay(""10:20:30.040+14:00"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,292,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,293,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,294,// expected
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,300,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,302,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,303,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,304,"MonthDay test = new MonthDay(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,305,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,306,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,307,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,311,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,313,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,314,"MonthDay test = new MonthDay((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,315,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,316,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,317,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,321,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,323,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,324,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,325,"MonthDay test = new MonthDay(date, null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,326,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,327,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,328,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,332,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,334,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,335,"MonthDay test = new MonthDay((Object) null, null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,336,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,337,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,338,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,343,"* Test constructor (int, int)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,345,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,346,"MonthDay test = new MonthDay(6, 30);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,347,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,348,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,349,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,350,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,351,"new MonthDay(Integer.MIN_VALUE, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,352,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,353,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,354,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,355,"new MonthDay(Integer.MAX_VALUE, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,356,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,357,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,358,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,359,"new MonthDay(1970, 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,360,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,361,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,362,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,363,"new MonthDay(1970, 13);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,364,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,369,"* Test constructor (int, int, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,371,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,372,"MonthDay test = new MonthDay(6, 30, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,373,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,374,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,375,"assertEquals(30, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,376,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,377,"new MonthDay(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,378,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,379,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,380,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,381,"new MonthDay(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,382,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,383,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,384,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,385,"new MonthDay(1970, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,386,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,387,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,388,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,389,"new MonthDay(1970, 13, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,390,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,391,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,395,"* Test constructor (int, int, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,397,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,398,"MonthDay test = new MonthDay(6, 30, null);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,399,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,400,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java,src/test/java/org/joda/time/TestMonthDay_Constructors.java,401,"assertEquals(30, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,18,mport java.util.Locale;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,20,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,21,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,23,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,24,mport org.joda.time.chrono.LenientChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,25,mport org.joda.time.chrono.StrictChronology;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,28, This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Propeties}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,30,ublic class TestMonthDay_Properties extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,32,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,33,rivate static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,35,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,36,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,38,rivate long TEST_TIME1 =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,39,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,40, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,41, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,43,rivate long TEST_TIME2 =
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,44,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,45, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,46, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,48,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,50,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,51,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,54,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,55,eturn new TestSuite(TestMonthDay_Properties.class);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,58,ublic TestMonthDay_Properties(String name) {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,59,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,62,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,63,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,64,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,65,ateTimeZone.setDefault(DateTimeZone.UTC);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,68,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,69,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,70,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,71,one = null;
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,75,ublic void testPropertyGetMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,76,"onthDay test = new MonthDay(9, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,77,"ssertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,78,"ssertEquals(""monthOfYear"", test.monthOfYear().getName());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,79,"ssertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,80,"ssertSame(test, test.monthOfYear().getReadablePartial());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,81,"ssertSame(test, test.monthOfYear().getMonthDay());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,82,"ssertEquals(9, test.monthOfYear().get());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,83,"ssertEquals(""9"", test.monthOfYear().getAsString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,84,"ssertEquals(""September"", test.monthOfYear().getAsText());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,85,"ssertEquals(""septembre"", test.monthOfYear().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,86,"ssertEquals(""Sep"", test.monthOfYear().getAsShortText());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,87,"ssertEquals(""sept."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,88,"ssertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,89,"/ assertEquals(test.getChronology().days(), test.dayOfMonth().getRangeDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,90,"ssertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,91,"ssertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,94,ublic void testPropertyGetMaxMinValuesMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,95,"onthDay test = new MonthDay(10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,96,"ssertEquals(1, test.monthOfYear().getMinimumValue());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,97,"ssertEquals(1, test.monthOfYear().getMinimumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,98,"ssertEquals(12, test.monthOfYear().getMaximumValue());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,99,"ssertEquals(12, test.monthOfYear().getMaximumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,102,ublic void testPropertyAddMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,103,"onthDay test = new MonthDay(3, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,104,onthDay copy = test.monthOfYear().addToCopy(9);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,105,"heck(test, 3, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,106,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,108,opy = test.monthOfYear().addToCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,109,"heck(copy, 3, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,111,"heck(test, 3, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,113,opy = test.monthOfYear().addToCopy(-3);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,114,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,115,"heck(test, 3, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,118,ublic void testPropertyAddWrapFieldMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,119,"onthDay test = new MonthDay(5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,120,onthDay copy = test.monthOfYear().addWrapFieldToCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,121,"heck(test, 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,122,"heck(copy, 7, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,124,opy = test.monthOfYear().addWrapFieldToCopy(2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,125,"heck(copy, 7, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,127,opy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,128,"heck(copy, 11, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,130,opy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,131,"heck(copy, 6, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,134,ublic void testPropertySetMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,135,"onthDay test = new MonthDay(10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,136,onthDay copy = test.monthOfYear().setCopy(12);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,137,"heck(test, 10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,138,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,141,ublic void testPropertySetTextMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,142,"onthDay test = new MonthDay(10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,143,"onthDay copy = test.monthOfYear().setCopy(""12"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,144,"heck(test, 10, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,145,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,148,ublic void testPropertyCompareToMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,149,onthDay test1 = new MonthDay(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,150,onthDay test2 = new MonthDay(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,151,"ssertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,152,"ssertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,153,"ssertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,154,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,155,est1.monthOfYear().compareTo((ReadablePartial) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,156,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,157, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,159,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,160,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,161,"ssertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,162,"ssertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,163,"ssertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,164,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,165,est1.monthOfYear().compareTo((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,166,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,167, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,171,ublic void testPropertyGetDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,172,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,173,"ssertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,174,"ssertEquals(""dayOfMonth"", test.dayOfMonth().getName());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,175,"ssertEquals(""Property[dayOfMonth]"", test.dayOfMonth().toString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,176,"ssertSame(test, test.dayOfMonth().getReadablePartial());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,177,"ssertSame(test, test.dayOfMonth().getMonthDay());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,178,"ssertEquals(6, test.dayOfMonth().get());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,179,"ssertEquals(""6"", test.dayOfMonth().getAsString());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,180,"ssertEquals(""6"", test.dayOfMonth().getAsText());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,181,"ssertEquals(""6"", test.dayOfMonth().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,182,"ssertEquals(""6"", test.dayOfMonth().getAsShortText());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,183,"ssertEquals(""6"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,184,"ssertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,185,"ssertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,186,"ssertEquals(2, test.dayOfMonth().getMaximumTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,187,"ssertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,188,"est = new MonthDay(4, 7);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,189,"ssertEquals(""7"", test.dayOfMonth().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,190,"ssertEquals(""7"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,193,ublic void testPropertyGetMaxMinValuesDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,194,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,195,"ssertEquals(1, test.dayOfMonth().getMinimumValue());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,196,"ssertEquals(1, test.dayOfMonth().getMinimumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,197,"ssertEquals(30, test.dayOfMonth().getMaximumValue());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,198,"ssertEquals(31, test.dayOfMonth().getMaximumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,201,ublic void testPropertyAddDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,202,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,203,onthDay copy = test.dayOfMonth().addToCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,204,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,205,"heck(copy, 4, 12);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,207,opy = test.dayOfMonth().addToCopy(7);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,208,"heck(copy, 4, 13);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,210,opy = test.dayOfMonth().addToCopy(-5);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,211,"heck(copy, 4, 1);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,213,opy = test.dayOfMonth().addToCopy(-6);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,214,"heck(copy, 3, 31);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,217,ublic void testPropertyAddWrapFieldDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,218,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,219,onthDay copy = test.dayOfMonth().addWrapFieldToCopy(4);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,220,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,221,"heck(copy, 4, 10);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,223,opy = test.dayOfMonth().addWrapFieldToCopy(8);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,224,"heck(copy, 4, 14);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,226,opy = test.dayOfMonth().addWrapFieldToCopy(-8);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,227,"heck(copy, 4, 28);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,230,ublic void testPropertySetDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,231,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,232,onthDay copy = test.dayOfMonth().setCopy(12);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,233,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,234,"heck(copy, 4, 12);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,236,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,237,est.dayOfMonth().setCopy(33);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,238,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,239, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,240,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,241,est.dayOfMonth().setCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,242,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,243, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,246,ublic void testPropertySetTextDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,247,"onthDay test = new MonthDay(4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,248,"onthDay copy = test.dayOfMonth().setCopy(""12"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,249,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,250,"heck(copy, 4, 12);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,252,"opy = test.dayOfMonth().setCopy(""2"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,253,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,254,"heck(copy, 4, 2);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,256,"opy = test.dayOfMonth().setCopy(""4"");"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,257,"heck(test, 4, 6);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,258,"heck(copy, 4, 4);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,261,ublic void testPropertyCompareToDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,262,onthDay test1 = new MonthDay(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,263,onthDay test2 = new MonthDay(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,264,"ssertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,265,"ssertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,266,"ssertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,267,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,268,est1.dayOfMonth().compareTo((ReadablePartial) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,269,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,270, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,272,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,273,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,274,"ssertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,275,"ssertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,276,"ssertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,277,ry {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,278,est1.dayOfMonth().compareTo((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,279,ail();
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,280, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,284,ublic void testPropertyEquals() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,285,"onthDay test1 = new MonthDay(11, 11);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,286,"onthDay test2 = new MonthDay(11, 12);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,287,"onthDay test3 = new MonthDay(11, 11, CopticChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,288,"ssertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,289,"ssertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,290,"ssertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,291,"ssertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,293,"ssertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,294,"ssertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,295,"ssertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,296,"ssertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,298,"ssertEquals(false, test1.dayOfMonth().equals(null));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,299,"ssertEquals(false, test1.dayOfMonth().equals(""any""));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,301,/ chrono
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,302,"ssertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,305,ublic void testPropertyHashCode() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,306,"onthDay test1 = new MonthDay(5, 11);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,307,"onthDay test2 = new MonthDay(5, 12);"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,308,"ssertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,309,"ssertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,310,"ssertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,311,"ssertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,314,ublic void testPropertyEqualsHashCodeLenient() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,315,"onthDay test1 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,316,"onthDay test2 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,317,"ssertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,318,"ssertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,319,"ssertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,320,"ssertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,321,"ssertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,322,"ssertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,323,"ssertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,326,ublic void testPropertyEqualsHashCodeStrict() {
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,327,"onthDay test1 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,328,"onthDay test2 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,329,"ssertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,330,"ssertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,331,"ssertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,332,"ssertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,333,"ssertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,334,"ssertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,335,"ssertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,339,"rivate void check(MonthDay test, int monthOfYear, int dayOfMonth) {"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,340,"ssertEquals(monthOfYear, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,341,"ssertEquals(dayOfMonth, test.getDayOfMonth());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,23,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,28,* This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Propeties}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,30,public class TestMonthDay_Properties extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,32,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,33,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,35,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,36,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,38,private long TEST_TIME1 =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,39,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,40,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,41,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,43,private long TEST_TIME2 =
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,44,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,45,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,46,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,48,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,50,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,51,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,54,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,55,return new TestSuite(TestMonthDay_Properties.class);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,58,public TestMonthDay_Properties(String name) {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,59,super(name);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,62,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,63,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,64,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,65,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,68,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,69,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,70,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,71,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,75,public void testPropertyGetMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,76,"MonthDay test = new MonthDay(9, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,77,"assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,78,"assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,79,"assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,80,"assertSame(test, test.monthOfYear().getReadablePartial());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,81,"assertSame(test, test.monthOfYear().getMonthDay());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,82,"assertEquals(9, test.monthOfYear().get());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,83,"assertEquals(""9"", test.monthOfYear().getAsString());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,84,"assertEquals(""September"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,85,"assertEquals(""septembre"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,86,"assertEquals(""Sep"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,87,"assertEquals(""sept."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,88,"assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,89,"// assertEquals(test.getChronology().days(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,90,"assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,91,"assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,94,public void testPropertyGetMaxMinValuesMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,95,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,96,"assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,97,"assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,98,"assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,99,"assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,102,public void testPropertyAddMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,103,"MonthDay test = new MonthDay(3, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,104,MonthDay copy = test.monthOfYear().addToCopy(9);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,105,"check(test, 3, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,106,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,108,copy = test.monthOfYear().addToCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,109,"check(copy, 3, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,111,"check(test, 3, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,113,copy = test.monthOfYear().addToCopy(-3);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,114,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,115,"check(test, 3, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,118,public void testPropertyAddWrapFieldMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,119,"MonthDay test = new MonthDay(5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,120,MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,121,"check(test, 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,122,"check(copy, 7, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,124,copy = test.monthOfYear().addWrapFieldToCopy(2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,125,"check(copy, 7, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,127,copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,128,"check(copy, 11, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,130,copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,131,"check(copy, 6, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,134,public void testPropertySetMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,135,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,136,MonthDay copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,137,"check(test, 10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,138,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,141,public void testPropertySetTextMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,142,"MonthDay test = new MonthDay(10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,143,"MonthDay copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,144,"check(test, 10, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,145,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,148,public void testPropertyCompareToMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,149,MonthDay test1 = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,150,MonthDay test2 = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,151,"assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,152,"assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,153,"assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,154,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,155,test1.monthOfYear().compareTo((ReadablePartial) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,156,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,157,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,159,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,160,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,161,"assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,162,"assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,163,"assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,164,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,165,test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,166,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,167,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,171,public void testPropertyGetDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,172,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,173,"assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,174,"assertEquals(""dayOfMonth"", test.dayOfMonth().getName());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,175,"assertEquals(""Property[dayOfMonth]"", test.dayOfMonth().toString());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,176,"assertSame(test, test.dayOfMonth().getReadablePartial());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,177,"assertSame(test, test.dayOfMonth().getMonthDay());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,178,"assertEquals(6, test.dayOfMonth().get());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,179,"assertEquals(""6"", test.dayOfMonth().getAsString());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,180,"assertEquals(""6"", test.dayOfMonth().getAsText());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,181,"assertEquals(""6"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,182,"assertEquals(""6"", test.dayOfMonth().getAsShortText());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,183,"assertEquals(""6"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,184,"assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,185,"assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,186,"assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,187,"assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,188,"test = new MonthDay(4, 7);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,189,"assertEquals(""7"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,190,"assertEquals(""7"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,193,public void testPropertyGetMaxMinValuesDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,194,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,195,"assertEquals(1, test.dayOfMonth().getMinimumValue());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,196,"assertEquals(1, test.dayOfMonth().getMinimumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,197,"assertEquals(30, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,198,"assertEquals(31, test.dayOfMonth().getMaximumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,201,public void testPropertyAddDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,202,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,203,MonthDay copy = test.dayOfMonth().addToCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,204,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,205,"check(copy, 4, 12);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,207,copy = test.dayOfMonth().addToCopy(7);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,208,"check(copy, 4, 13);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,210,copy = test.dayOfMonth().addToCopy(-5);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,211,"check(copy, 4, 1);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,213,copy = test.dayOfMonth().addToCopy(-6);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,214,"check(copy, 3, 31);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,217,public void testPropertyAddWrapFieldDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,218,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,219,MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,220,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,221,"check(copy, 4, 10);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,223,copy = test.dayOfMonth().addWrapFieldToCopy(8);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,224,"check(copy, 4, 14);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,226,copy = test.dayOfMonth().addWrapFieldToCopy(-8);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,227,"check(copy, 4, 28);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,230,public void testPropertySetDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,231,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,232,MonthDay copy = test.dayOfMonth().setCopy(12);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,233,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,234,"check(copy, 4, 12);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,236,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,237,test.dayOfMonth().setCopy(33);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,238,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,239,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,240,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,241,test.dayOfMonth().setCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,242,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,243,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,246,public void testPropertySetTextDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,247,"MonthDay test = new MonthDay(4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,248,"MonthDay copy = test.dayOfMonth().setCopy(""12"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,249,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,250,"check(copy, 4, 12);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,252,"copy = test.dayOfMonth().setCopy(""2"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,253,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,254,"check(copy, 4, 2);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,256,"copy = test.dayOfMonth().setCopy(""4"");"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,257,"check(test, 4, 6);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,258,"check(copy, 4, 4);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,261,public void testPropertyCompareToDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,262,MonthDay test1 = new MonthDay(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,263,MonthDay test2 = new MonthDay(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,264,"assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,265,"assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,266,"assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,267,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,268,test1.dayOfMonth().compareTo((ReadablePartial) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,269,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,270,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,272,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,273,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,274,"assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,275,"assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,276,"assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,277,try {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,278,test1.dayOfMonth().compareTo((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,279,fail();
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,280,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,284,public void testPropertyEquals() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,285,"MonthDay test1 = new MonthDay(11, 11);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,286,"MonthDay test2 = new MonthDay(11, 12);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,287,"MonthDay test3 = new MonthDay(11, 11, CopticChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,288,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,289,"assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,290,"assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,291,"assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,293,"assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,294,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,295,"assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,296,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,298,"assertEquals(false, test1.dayOfMonth().equals(null));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,299,"assertEquals(false, test1.dayOfMonth().equals(""any""));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,301,// chrono
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,302,"assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,305,public void testPropertyHashCode() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,306,"MonthDay test1 = new MonthDay(5, 11);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,307,"MonthDay test2 = new MonthDay(5, 12);"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,308,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,309,"assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,310,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,311,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,314,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,315,"MonthDay test1 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,316,"MonthDay test2 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,317,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,318,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,319,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,320,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,321,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,322,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,323,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,326,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,327,"MonthDay test1 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,328,"MonthDay test2 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,329,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,330,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,331,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,332,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,333,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,334,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,335,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,339,"private void check(MonthDay test, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,340,"assertEquals(monthOfYear, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java,src/test/java/org/joda/time/TestMonthDay_Properties.java,341,"assertEquals(dayOfMonth, test.getDayOfMonth());"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,18,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,19,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,21,mport org.joda.convert.StringConvert;
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,22,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,25, Test string conversion.
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,27, @author Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,29,ublic class TestStringConvert extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,31,"rivate static final DateTimeZone ZONE = DateTimeZone.forID(""+02:00"");"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,33,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,34,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,37,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,38,eturn new TestSuite(TestStringConvert.class);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,41,ublic TestStringConvert(String name) {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,42,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,45,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,48,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,52,ublic void testDateMidnight() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,53,"ateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,54,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,55,"ssertEquals(""2010-06-30T00:00:00.000+02:00"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,56,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,59,ublic void testDateTime() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,60,"ateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,61,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,62,"ssertEquals(""2010-06-30T02:30:50.678+02:00"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,63,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,66,ublic void testMutableDateTime() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,67,"utableDateTime test = new MutableDateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,68,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,69,"ssertEquals(""2010-06-30T02:30:50.678+02:00"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,70,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(MutableDateTime.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,73,ublic void testLocalDateTime() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,74,"ocalDateTime test = new LocalDateTime(2010, 6, 30, 2, 30);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,75,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,76,"ssertEquals(""2010-06-30T02:30:00.000"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,77,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDateTime.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,80,ublic void testLocalDate() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,81,"ocalDate test = new LocalDate(2010, 6, 30);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,82,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,83,"ssertEquals(""2010-06-30"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,84,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDate.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,87,ublic void testLocalTime() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,88,"ocalTime test = new LocalTime(2, 30, 50, 678);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,89,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,90,"ssertEquals(""02:30:50.678"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,91,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(LocalTime.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,94,ublic void testYearMonth() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,95,"earMonth test = new YearMonth(2010, 6);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,96,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,97,"ssertEquals(""2010-06"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,98,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(YearMonth.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,101,ublic void testMonthDay() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,102,"onthDay test = new MonthDay(6, 30);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,103,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,104,"ssertEquals(""--06-30"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,105,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,108,ublic void testMonthDay_leapDay() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,109,"onthDay test = new MonthDay(2, 29);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,110,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,111,"ssertEquals(""--02-29"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,112,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,116,ublic void testTimeZone() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,117,"ateTimeZone test = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,118,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,119,"ssertEquals(""Europe/Paris"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,120,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(DateTimeZone.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,123,/    public void testInterval() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,124,"/        DateTime a = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,125,"/        DateTime b = new DateTime(2011, 9, 10, 4, 20, 40, 234, ISOChronology.getInstance(ZONE));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,126,"/        Interval test = new Interval(a, b);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,127,/        String str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,128,"/        assertEquals(""2010-06-30T02:30:50.678+02:00/2011-09-10T04:20:40.234+02:00"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,129,"/        assertEquals(test, StringConvert.INSTANCE.convertFromString(Interval.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,132,ublic void testDuration() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,133,uration test = new Duration(12345678L);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,134,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,135,"ssertEquals(""PT12345.678S"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,136,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Duration.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,139,ublic void testPeriod() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,140,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,141,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,142,"ssertEquals(""P1Y2M3W4DT5H6M7.008S"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,143,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,146,ublic void testMutablePeriod() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,147,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,148,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,149,"ssertEquals(""P1Y2M3W4DT5H6M7.008S"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,150,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(MutablePeriod.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,153,ublic void testYears() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,154,ears test = Years.years(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,155,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,156,"ssertEquals(""P5Y"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,157,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,160,ublic void testMonths() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,161,onths test = Months.months(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,162,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,163,"ssertEquals(""P5M"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,164,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Months.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,167,ublic void testWeeks() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,168,eeks test = Weeks.weeks(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,169,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,170,"ssertEquals(""P5W"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,171,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,174,ublic void testDays() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,175,ays test = Days.days(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,176,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,177,"ssertEquals(""P5D"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,178,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Days.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,181,ublic void testHours() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,182,ours test = Hours.hours(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,183,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,184,"ssertEquals(""PT5H"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,185,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,188,ublic void testMinutes() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,189,inutes test = Minutes.minutes(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,190,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,191,"ssertEquals(""PT5M"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,192,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Minutes.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,195,ublic void testSeconds() {
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,196,econds test = Seconds.seconds(5);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,197,tring str = StringConvert.INSTANCE.convertToString(test);
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,198,"ssertEquals(""PT5S"", str);"
False,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,199,"ssertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,21,import org.joda.convert.StringConvert;
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,22,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,25,* Test string conversion.
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,27,* @author Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,29,public class TestStringConvert extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,31,"private static final DateTimeZone ZONE = DateTimeZone.forID(""+02:00"");"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,33,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,34,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,37,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,38,return new TestSuite(TestStringConvert.class);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,41,public TestStringConvert(String name) {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,42,super(name);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,45,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,48,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,52,public void testDateMidnight() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,53,"DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,54,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,55,"assertEquals(""2010-06-30T00:00:00.000+02:00"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,56,"assertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,59,public void testDateTime() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,60,"DateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,61,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,62,"assertEquals(""2010-06-30T02:30:50.678+02:00"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,63,"assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,66,public void testMutableDateTime() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,67,"MutableDateTime test = new MutableDateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,68,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,69,"assertEquals(""2010-06-30T02:30:50.678+02:00"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,70,"assertEquals(test, StringConvert.INSTANCE.convertFromString(MutableDateTime.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,73,public void testLocalDateTime() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,74,"LocalDateTime test = new LocalDateTime(2010, 6, 30, 2, 30);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,75,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,76,"assertEquals(""2010-06-30T02:30:00.000"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,77,"assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDateTime.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,80,public void testLocalDate() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,81,"LocalDate test = new LocalDate(2010, 6, 30);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,82,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,83,"assertEquals(""2010-06-30"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,84,"assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDate.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,87,public void testLocalTime() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,88,"LocalTime test = new LocalTime(2, 30, 50, 678);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,89,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,90,"assertEquals(""02:30:50.678"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,91,"assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalTime.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,94,public void testYearMonth() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,95,"YearMonth test = new YearMonth(2010, 6);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,96,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,97,"assertEquals(""2010-06"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,98,"assertEquals(test, StringConvert.INSTANCE.convertFromString(YearMonth.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,101,public void testMonthDay() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,102,"MonthDay test = new MonthDay(6, 30);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,103,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,104,"assertEquals(""--06-30"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,105,"assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,108,public void testMonthDay_leapDay() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,109,"MonthDay test = new MonthDay(2, 29);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,110,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,111,"assertEquals(""--02-29"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,112,"assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,116,public void testTimeZone() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,117,"DateTimeZone test = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,118,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,119,"assertEquals(""Europe/Paris"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,120,"assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTimeZone.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,123,//    public void testInterval() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,124,"//        DateTime a = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,125,"//        DateTime b = new DateTime(2011, 9, 10, 4, 20, 40, 234, ISOChronology.getInstance(ZONE));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,126,"//        Interval test = new Interval(a, b);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,127,//        String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,128,"//        assertEquals(""2010-06-30T02:30:50.678+02:00/2011-09-10T04:20:40.234+02:00"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,129,"//        assertEquals(test, StringConvert.INSTANCE.convertFromString(Interval.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,132,public void testDuration() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,133,Duration test = new Duration(12345678L);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,134,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,135,"assertEquals(""PT12345.678S"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,136,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Duration.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,139,public void testPeriod() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,140,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,141,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,142,"assertEquals(""P1Y2M3W4DT5H6M7.008S"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,143,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,146,public void testMutablePeriod() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,147,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,148,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,149,"assertEquals(""P1Y2M3W4DT5H6M7.008S"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,150,"assertEquals(test, StringConvert.INSTANCE.convertFromString(MutablePeriod.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,153,public void testYears() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,154,Years test = Years.years(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,155,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,156,"assertEquals(""P5Y"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,157,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,160,public void testMonths() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,161,Months test = Months.months(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,162,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,163,"assertEquals(""P5M"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,164,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Months.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,167,public void testWeeks() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,168,Weeks test = Weeks.weeks(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,169,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,170,"assertEquals(""P5W"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,171,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,174,public void testDays() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,175,Days test = Days.days(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,176,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,177,"assertEquals(""P5D"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,178,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Days.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,181,public void testHours() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,182,Hours test = Hours.hours(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,183,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,184,"assertEquals(""PT5H"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,185,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,188,public void testMinutes() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,189,Minutes test = Minutes.minutes(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,190,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,191,"assertEquals(""PT5M"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,192,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Minutes.class, str));"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,195,public void testSeconds() {
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,196,Seconds test = Seconds.seconds(5);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,197,String str = StringConvert.INSTANCE.convertToString(test);
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,198,"assertEquals(""PT5S"", str);"
True,JodaTime/src/test/java/org/joda/time/TestStringConvert.java,src/test/java/org/joda/time/TestStringConvert.java,199,"assertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,2,  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,18,mport java.io.ByteArrayInputStream;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,19,mport java.io.ByteArrayOutputStream;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,20,mport java.io.ObjectInputStream;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,21,mport java.io.ObjectOutputStream;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,22,mport java.util.Arrays;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,23,mport java.util.Locale;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,25,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,26,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,28,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,29,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,30,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,31,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,32,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,33,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,36, This class is a Junit unit test for YearMonth.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,38, @author Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,40,ublic class TestYearMonth_Basics extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,42,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,43,"rivate static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,44,"rivate static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,45,rivate static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,46,rivate static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,47,rivate static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,48,rivate static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,49,/    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,50,/    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,51,/    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,52,rivate static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,53,/    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,54,/    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,55,rivate static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,56,rivate static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,58,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,59,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,61,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,63,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,64,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,67,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,68,eturn new TestSuite(TestYearMonth_Basics.class);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,71,ublic TestYearMonth_Basics(String name) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,72,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,75,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,76,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,77,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,78,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,81,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,82,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,83,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,84,one = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,88,ublic void testGet() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,89,earMonth test = new YearMonth();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,90,"ssertEquals(1970, test.get(DateTimeFieldType.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,91,"ssertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,92,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,93,est.get(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,94,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,95, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,96,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,97,est.get(DateTimeFieldType.dayOfMonth());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,98,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,99, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,102,ublic void testSize() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,103,earMonth test = new YearMonth();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,104,"ssertEquals(2, test.size());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,107,ublic void testGetFieldType() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,108,earMonth test = new YearMonth(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,109,"ssertSame(DateTimeFieldType.year(), test.getFieldType(0));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,110,"ssertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,111,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,112,est.getFieldType(-1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,113, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,114,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,115,est.getFieldType(2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,116, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,119,ublic void testGetFieldTypes() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,120,earMonth test = new YearMonth(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,121,ateTimeFieldType[] fields = test.getFieldTypes();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,122,"ssertEquals(2, fields.length);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,123,"ssertSame(DateTimeFieldType.year(), fields[0]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,124,"ssertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,125,"ssertNotSame(test.getFieldTypes(), test.getFieldTypes());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,128,ublic void testGetField() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,129,earMonth test = new YearMonth(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,130,"ssertSame(COPTIC_UTC.year(), test.getField(0));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,131,"ssertSame(COPTIC_UTC.monthOfYear(), test.getField(1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,132,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,133,est.getField(-1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,134, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,135,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,136,est.getField(2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,137, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,140,ublic void testGetFields() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,141,earMonth test = new YearMonth(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,142,ateTimeField[] fields = test.getFields();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,143,"ssertEquals(2, fields.length);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,144,"ssertSame(COPTIC_UTC.year(), fields[0]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,145,"ssertSame(COPTIC_UTC.monthOfYear(), fields[1]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,146,"ssertNotSame(test.getFields(), test.getFields());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,149,ublic void testGetValue() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,150,earMonth test = new YearMonth();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,151,"ssertEquals(1970, test.getValue(0));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,152,"ssertEquals(6, test.getValue(1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,153,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,154,est.getValue(-1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,155, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,156,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,157,est.getValue(2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,158, catch (IndexOutOfBoundsException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,161,ublic void testGetValues() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,162,earMonth test = new YearMonth();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,163,nt[] values = test.getValues();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,164,"ssertEquals(2, values.length);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,165,"ssertEquals(1970, values[0]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,166,"ssertEquals(6, values[1]);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,167,"ssertNotSame(test.getValues(), test.getValues());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,170,ublic void testIsSupported() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,171,earMonth test = new YearMonth(COPTIC_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,172,"ssertEquals(true, test.isSupported(DateTimeFieldType.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,173,"ssertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,174,"ssertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,175,"ssertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,178,ublic void testEqualsHashCode() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,179,"earMonth test1 = new YearMonth(1970, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,180,"earMonth test2 = new YearMonth(1970, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,181,"ssertEquals(true, test1.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,182,"ssertEquals(true, test2.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,183,"ssertEquals(true, test1.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,184,"ssertEquals(true, test2.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,185,"ssertEquals(true, test1.hashCode() == test2.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,186,"ssertEquals(true, test1.hashCode() == test1.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,187,"ssertEquals(true, test2.hashCode() == test2.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,189,"earMonth test3 = new YearMonth(1971, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,190,"ssertEquals(false, test1.equals(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,191,"ssertEquals(false, test2.equals(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,192,"ssertEquals(false, test3.equals(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,193,"ssertEquals(false, test3.equals(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,194,"ssertEquals(false, test1.hashCode() == test3.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,195,"ssertEquals(false, test2.hashCode() == test3.hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,197,"ssertEquals(false, test1.equals(""Hello""));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,198,"ssertEquals(true, test1.equals(new MockYM()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,199,"ssertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,202,lass MockYM extends MockPartial {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,203,ublic Chronology getChronology() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,204,eturn COPTIC_UTC;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,206,ublic DateTimeField[] getFields() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,207,eturn new DateTimeField[] {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,208,"OPTIC_UTC.year(),"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,209,"OPTIC_UTC.monthOfYear(),"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,212,ublic int[] getValues() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,213,"eturn new int[] {1970, 6};"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,218,ublic void testCompareTo() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,219,"earMonth test1 = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,220,"earMonth test1a = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,221,"ssertEquals(0, test1.compareTo(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,222,"ssertEquals(0, test1a.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,223,"ssertEquals(0, test1.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,224,"ssertEquals(0, test1a.compareTo(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,226,"earMonth test2 = new YearMonth(2005, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,227,"ssertEquals(-1, test1.compareTo(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,228,"ssertEquals(+1, test2.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,230,"earMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,231,"ssertEquals(-1, test1.compareTo(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,232,"ssertEquals(+1, test3.compareTo(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,233,"ssertEquals(0, test3.compareTo(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,235,ateTimeFieldType[] types = new DateTimeFieldType[] {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,236,"ateTimeFieldType.year(),"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,237,"ateTimeFieldType.monthOfYear(),"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,239,"nt[] values = new int[] {2005, 6};"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,240,"artial p = new Partial(types, values);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,241,"ssertEquals(0, test1.compareTo(p));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,242,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,243,est1.compareTo(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,244,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,245, catch (NullPointerException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,246,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,247,est1.compareTo(new LocalTime());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,248,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,249, catch (ClassCastException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,250,artial partial = new Partial()
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,251,"with(DateTimeFieldType.centuryOfEra(), 1)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,252,"with(DateTimeFieldType.halfdayOfDay(), 0)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,253,"with(DateTimeFieldType.dayOfMonth(), 9);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,254,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,255,"ew YearMonth(1970, 6).compareTo(partial);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,256,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,257, catch (ClassCastException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,261,ublic void testIsEqual_YM() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,262,"earMonth test1 = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,263,"earMonth test1a = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,264,"ssertEquals(true, test1.isEqual(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,265,"ssertEquals(true, test1a.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,266,"ssertEquals(true, test1.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,267,"ssertEquals(true, test1a.isEqual(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,269,"earMonth test2 = new YearMonth(2005, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,270,"ssertEquals(false, test1.isEqual(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,271,"ssertEquals(false, test2.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,273,"earMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,274,"ssertEquals(false, test1.isEqual(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,275,"ssertEquals(false, test3.isEqual(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,276,"ssertEquals(true, test3.isEqual(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,278,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,279,"ew YearMonth(2005, 7).isEqual(null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,280,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,281, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,285,ublic void testIsBefore_YM() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,286,"earMonth test1 = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,287,"earMonth test1a = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,288,"ssertEquals(false, test1.isBefore(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,289,"ssertEquals(false, test1a.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,290,"ssertEquals(false, test1.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,291,"ssertEquals(false, test1a.isBefore(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,293,"earMonth test2 = new YearMonth(2005, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,294,"ssertEquals(true, test1.isBefore(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,295,"ssertEquals(false, test2.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,297,"earMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,298,"ssertEquals(true, test1.isBefore(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,299,"ssertEquals(false, test3.isBefore(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,300,"ssertEquals(false, test3.isBefore(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,302,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,303,"ew YearMonth(2005, 7).isBefore(null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,304,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,305, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,309,ublic void testIsAfter_YM() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,310,"earMonth test1 = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,311,"earMonth test1a = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,312,"ssertEquals(false, test1.isAfter(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,313,"ssertEquals(false, test1a.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,314,"ssertEquals(false, test1.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,315,"ssertEquals(false, test1a.isAfter(test1a));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,317,"earMonth test2 = new YearMonth(2005, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,318,"ssertEquals(false, test1.isAfter(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,319,"ssertEquals(true, test2.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,321,"earMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,322,"ssertEquals(false, test1.isAfter(test3));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,323,"ssertEquals(true, test3.isAfter(test1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,324,"ssertEquals(false, test3.isAfter(test2));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,326,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,327,"ew YearMonth(2005, 7).isAfter(null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,328,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,329, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,333,ublic void testWithChronologyRetainFields_Chrono() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,334,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,335,earMonth test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,336,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,337,"ssertEquals(COPTIC_UTC, base.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,338,"heck(test, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,339,"ssertEquals(BUDDHIST_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,342,ublic void testWithChronologyRetainFields_sameChrono() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,343,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,344,earMonth test = base.withChronologyRetainFields(COPTIC_TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,345,"ssertSame(base, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,348,ublic void testWithChronologyRetainFields_nullChrono() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,349,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,350,earMonth test = base.withChronologyRetainFields(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,351,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,352,"ssertEquals(COPTIC_UTC, base.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,353,"heck(test, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,354,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,357,ublic void testWithChronologyRetainFields_invalidInNewChrono() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,358,"earMonth base = new YearMonth(2005, 13, COPTIC_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,359,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,360,ase.withChronologyRetainFields(ISO_UTC);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,361,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,362, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,363,/ expected
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,368,ublic void testWithField() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,369,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,370,"earMonth result = test.withField(DateTimeFieldType.year(), 2006);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,372,"ssertEquals(new YearMonth(2004, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,373,"ssertEquals(new YearMonth(2006, 6), result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,376,ublic void testWithField_nullField() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,377,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,378,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,379,"est.withField(null, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,380,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,381, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,384,ublic void testWithField_unknownField() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,385,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,386,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,387,"est.withField(DateTimeFieldType.hourOfDay(), 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,388,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,389, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,392,ublic void testWithField_same() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,393,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,394,"earMonth result = test.withField(DateTimeFieldType.year(), 2004);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,395,"ssertEquals(new YearMonth(2004, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,396,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,400,ublic void testWithFieldAdded() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,401,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,402,"earMonth result = test.withFieldAdded(DurationFieldType.years(), 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,404,"ssertEquals(new YearMonth(2004, 6), test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,405,"ssertEquals(new YearMonth(2010, 6), result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,408,ublic void testWithFieldAdded_nullField_zero() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,409,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,410,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,411,"est.withFieldAdded(null, 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,412,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,413, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,416,ublic void testWithFieldAdded_nullField_nonZero() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,417,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,418,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,419,"est.withFieldAdded(null, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,420,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,421, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,424,ublic void testWithFieldAdded_zero() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,425,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,426,"earMonth result = test.withFieldAdded(DurationFieldType.years(), 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,427,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,430,ublic void testWithFieldAdded_unknownField() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,431,"earMonth test = new YearMonth(2004, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,432,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,433,"est.withFieldAdded(DurationFieldType.hours(), 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,434,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,435, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,439,ublic void testPlus_RP() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,440,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,441,"earMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,442,"earMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,443,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,445,esult = test.plus((ReadablePeriod) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,446,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,449,ublic void testPlusYears_int() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,450,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,451,earMonth result = test.plusYears(1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,452,"earMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,453,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,455,esult = test.plusYears(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,456,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,459,ublic void testPlusMonths_int() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,460,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,461,earMonth result = test.plusMonths(1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,462,"earMonth expected = new YearMonth(2002, 6, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,463,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,465,esult = test.plusMonths(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,466,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,470,ublic void testMinus_RP() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,471,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,472,"earMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,473,"earMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,474,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,476,esult = test.minus((ReadablePeriod) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,477,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,480,ublic void testMinusYears_int() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,481,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,482,earMonth result = test.minusYears(1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,483,"earMonth expected = new YearMonth(2001, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,484,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,486,esult = test.minusYears(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,487,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,490,ublic void testMinusMonths_int() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,491,"earMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,492,earMonth result = test.minusMonths(1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,493,"earMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,494,"ssertEquals(expected, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,496,esult = test.minusMonths(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,497,"ssertSame(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,501,ublic void testToLocalDate() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,502,"earMonth base = new YearMonth(2005, 6, COPTIC_UTC);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,503,ocalDate test = base.toLocalDate(9);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,504,"ssertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,505,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,506,ase.toLocalDate(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,507,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,508, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,512,ublic void testToDateTime_RI() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,513,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,514,"ateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,516,ateTime test = base.toDateTime(dt);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,517,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,518,ateTime expected = dt;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,519,xpected = expected.year().setCopy(2005);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,520,xpected = expected.monthOfYear().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,521,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,524,ublic void testToDateTime_nullRI() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,525,"earMonth base = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,526,"ateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,527,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,529,ateTime test = base.toDateTime((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,530,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,531,ateTime expected = dt;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,532,xpected = expected.year().setCopy(2005);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,533,xpected = expected.monthOfYear().setCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,534,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,538,ublic void testToInterval() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,539,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,540,nterval test = base.toInterval();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,541,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,542,"ateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,543,"ateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,544,"nterval expected = new Interval(start, end);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,545,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,549,ublic void testToInterval_Zone() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,550,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,551,nterval test = base.toInterval(TOKYO);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,552,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,553,"ateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_TOKYO);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,554,"ateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_TOKYO);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,555,"nterval expected = new Interval(start, end);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,556,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,559,ublic void testToInterval_nullZone() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,560,"earMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,561,nterval test = base.toInterval(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,562,"heck(base, 2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,563,"ateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,564,"ateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,565,"nterval expected = new Interval(start, end);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,566,"ssertEquals(expected, test);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,570,ublic void testWithers() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,571,"earMonth test = new YearMonth(1970, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,572,"heck(test.withYear(2000), 2000, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,573,"heck(test.withMonthOfYear(2), 1970, 2);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,574,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,575,est.withMonthOfYear(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,576,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,577, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,578,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,579,est.withMonthOfYear(13);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,580,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,581, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,585,ublic void testProperty() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,586,"earMonth test = new YearMonth(2005, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,587,"ssertEquals(test.year(), test.property(DateTimeFieldType.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,588,"ssertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,589,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,590,est.property(DateTimeFieldType.millisOfDay());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,591,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,592, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,593,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,594,est.property(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,595,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,596, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,600,ublic void testSerialization() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,601,"earMonth test = new YearMonth(1972, 6, COPTIC_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,603,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,604,bjectOutputStream oos = new ObjectOutputStream(baos);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,605,os.writeObject(test);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,606,yte[] bytes = baos.toByteArray();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,607,os.close();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,609,yteArrayInputStream bais = new ByteArrayInputStream(bytes);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,610,bjectInputStream ois = new ObjectInputStream(bais);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,611,earMonth result = (YearMonth) ois.readObject();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,612,is.close();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,614,"ssertEquals(test, result);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,615,"ssertTrue(Arrays.equals(test.getValues(), result.getValues()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,616,"ssertTrue(Arrays.equals(test.getFields(), result.getFields()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,617,"ssertEquals(test.getChronology(), result.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,621,ublic void testToString() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,622,"earMonth test = new YearMonth(2002, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,623,"ssertEquals(""2002-06"", test.toString());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,627,ublic void testToString_String() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,628,"earMonth test = new YearMonth(2002, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,629,"ssertEquals(""2002 \ufffd\ufffd"", test.toString(""yyyy HH""));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,630,"ssertEquals(""2002-06"", test.toString((String) null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,634,ublic void testToString_String_Locale() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,635,"earMonth test = new YearMonth(2002, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,636,"ssertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,637,"ssertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,638,"ssertEquals(""2002-06"", test.toString(null, Locale.ENGLISH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,639,"ssertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,640,"ssertEquals(""2002-06"", test.toString(null, null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,644,ublic void testToString_DTFormatter() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,645,"earMonth test = new YearMonth(2002, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,646,"ssertEquals(""2002 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,647,"ssertEquals(""2002-06"", test.toString((DateTimeFormatter) null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,651,"rivate void check(YearMonth test, int year, int month) {"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,652,"ssertEquals(year, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,653,"ssertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,23,import java.util.Locale;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,25,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,26,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,28,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,30,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,31,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,32,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,33,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,36,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,38,* @author Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,40,public class TestYearMonth_Basics extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,42,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,43,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,44,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,45,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,46,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,47,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,48,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,49,//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,50,//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,51,//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,52,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,53,//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,54,//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,55,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,56,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,58,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,59,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,61,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,63,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,64,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,67,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,68,return new TestSuite(TestYearMonth_Basics.class);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,71,public TestYearMonth_Basics(String name) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,72,super(name);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,75,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,76,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,77,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,78,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,81,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,82,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,83,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,84,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,88,public void testGet() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,89,YearMonth test = new YearMonth();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,90,"assertEquals(1970, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,91,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,92,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,93,test.get(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,94,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,95,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,96,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,97,test.get(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,98,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,99,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,102,public void testSize() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,103,YearMonth test = new YearMonth();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,104,"assertEquals(2, test.size());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,107,public void testGetFieldType() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,108,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,109,"assertSame(DateTimeFieldType.year(), test.getFieldType(0));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,110,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,111,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,112,test.getFieldType(-1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,113,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,114,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,115,test.getFieldType(2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,116,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,119,public void testGetFieldTypes() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,120,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,121,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,122,"assertEquals(2, fields.length);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,123,"assertSame(DateTimeFieldType.year(), fields[0]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,124,"assertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,125,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,128,public void testGetField() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,129,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,130,"assertSame(COPTIC_UTC.year(), test.getField(0));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,131,"assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,132,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,133,test.getField(-1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,134,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,135,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,136,test.getField(2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,137,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,140,public void testGetFields() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,141,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,142,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,143,"assertEquals(2, fields.length);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,144,"assertSame(COPTIC_UTC.year(), fields[0]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,145,"assertSame(COPTIC_UTC.monthOfYear(), fields[1]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,146,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,149,public void testGetValue() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,150,YearMonth test = new YearMonth();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,151,"assertEquals(1970, test.getValue(0));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,152,"assertEquals(6, test.getValue(1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,153,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,154,test.getValue(-1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,155,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,156,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,157,test.getValue(2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,158,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,161,public void testGetValues() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,162,YearMonth test = new YearMonth();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,163,int[] values = test.getValues();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,164,"assertEquals(2, values.length);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,165,"assertEquals(1970, values[0]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,166,"assertEquals(6, values[1]);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,167,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,170,public void testIsSupported() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,171,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,172,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,173,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,174,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,175,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,178,public void testEqualsHashCode() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,179,"YearMonth test1 = new YearMonth(1970, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,180,"YearMonth test2 = new YearMonth(1970, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,181,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,182,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,183,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,184,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,185,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,186,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,187,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,189,"YearMonth test3 = new YearMonth(1971, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,190,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,191,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,192,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,193,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,194,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,195,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,197,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,198,"assertEquals(true, test1.equals(new MockYM()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,199,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,202,class MockYM extends MockPartial {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,203,public Chronology getChronology() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,204,return COPTIC_UTC;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,206,public DateTimeField[] getFields() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,207,return new DateTimeField[] {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,208,"COPTIC_UTC.year(),"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,209,"COPTIC_UTC.monthOfYear(),"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,212,public int[] getValues() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,213,"return new int[] {1970, 6};"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,218,public void testCompareTo() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,219,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,220,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,221,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,222,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,223,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,224,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,226,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,227,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,228,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,230,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,231,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,232,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,233,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,235,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,236,"DateTimeFieldType.year(),"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,237,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,239,"int[] values = new int[] {2005, 6};"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,240,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,241,"assertEquals(0, test1.compareTo(p));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,242,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,243,test1.compareTo(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,244,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,245,} catch (NullPointerException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,246,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,247,test1.compareTo(new LocalTime());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,248,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,249,} catch (ClassCastException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,250,Partial partial = new Partial()
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,251,".with(DateTimeFieldType.centuryOfEra(), 1)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,252,".with(DateTimeFieldType.halfdayOfDay(), 0)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,253,".with(DateTimeFieldType.dayOfMonth(), 9);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,254,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,255,"new YearMonth(1970, 6).compareTo(partial);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,256,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,257,} catch (ClassCastException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,261,public void testIsEqual_YM() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,262,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,263,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,264,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,265,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,266,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,267,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,269,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,270,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,271,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,273,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,274,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,275,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,276,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,278,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,279,"new YearMonth(2005, 7).isEqual(null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,280,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,281,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,285,public void testIsBefore_YM() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,286,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,287,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,288,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,289,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,290,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,291,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,293,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,294,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,295,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,297,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,298,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,299,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,300,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,302,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,303,"new YearMonth(2005, 7).isBefore(null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,304,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,305,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,309,public void testIsAfter_YM() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,310,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,311,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,312,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,313,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,314,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,315,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,317,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,318,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,319,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,321,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,322,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,323,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,324,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,326,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,327,"new YearMonth(2005, 7).isAfter(null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,328,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,329,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,333,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,334,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,335,YearMonth test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,336,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,337,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,338,"check(test, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,339,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,342,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,343,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,344,YearMonth test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,345,"assertSame(base, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,348,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,349,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,350,YearMonth test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,351,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,352,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,353,"check(test, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,354,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,357,public void testWithChronologyRetainFields_invalidInNewChrono() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,358,"YearMonth base = new YearMonth(2005, 13, COPTIC_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,359,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,360,base.withChronologyRetainFields(ISO_UTC);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,361,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,362,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,363,// expected
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,368,public void testWithField() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,369,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,370,"YearMonth result = test.withField(DateTimeFieldType.year(), 2006);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,372,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,373,"assertEquals(new YearMonth(2006, 6), result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,376,public void testWithField_nullField() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,377,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,378,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,379,"test.withField(null, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,380,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,381,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,384,public void testWithField_unknownField() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,385,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,386,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,387,"test.withField(DateTimeFieldType.hourOfDay(), 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,388,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,389,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,392,public void testWithField_same() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,393,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,394,"YearMonth result = test.withField(DateTimeFieldType.year(), 2004);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,395,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,396,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,400,public void testWithFieldAdded() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,401,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,402,"YearMonth result = test.withFieldAdded(DurationFieldType.years(), 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,404,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,405,"assertEquals(new YearMonth(2010, 6), result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,408,public void testWithFieldAdded_nullField_zero() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,409,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,410,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,411,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,412,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,413,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,416,public void testWithFieldAdded_nullField_nonZero() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,417,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,418,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,419,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,420,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,421,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,424,public void testWithFieldAdded_zero() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,425,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,426,"YearMonth result = test.withFieldAdded(DurationFieldType.years(), 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,427,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,430,public void testWithFieldAdded_unknownField() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,431,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,432,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,433,"test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,434,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,435,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,439,public void testPlus_RP() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,440,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,441,"YearMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,442,"YearMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,443,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,445,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,446,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,449,public void testPlusYears_int() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,450,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,451,YearMonth result = test.plusYears(1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,452,"YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,453,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,455,result = test.plusYears(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,456,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,459,public void testPlusMonths_int() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,460,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,461,YearMonth result = test.plusMonths(1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,462,"YearMonth expected = new YearMonth(2002, 6, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,463,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,465,result = test.plusMonths(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,466,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,470,public void testMinus_RP() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,471,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,472,"YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,473,"YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,474,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,476,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,477,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,480,public void testMinusYears_int() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,481,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,482,YearMonth result = test.minusYears(1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,483,"YearMonth expected = new YearMonth(2001, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,484,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,486,result = test.minusYears(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,487,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,490,public void testMinusMonths_int() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,491,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,492,YearMonth result = test.minusMonths(1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,493,"YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,494,"assertEquals(expected, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,496,result = test.minusMonths(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,497,"assertSame(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,501,public void testToLocalDate() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,502,"YearMonth base = new YearMonth(2005, 6, COPTIC_UTC);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,503,LocalDate test = base.toLocalDate(9);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,504,"assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,505,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,506,base.toLocalDate(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,507,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,508,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,512,public void testToDateTime_RI() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,513,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,514,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,516,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,517,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,518,DateTime expected = dt;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,519,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,520,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,521,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,524,public void testToDateTime_nullRI() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,525,"YearMonth base = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,526,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,527,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,529,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,530,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,531,DateTime expected = dt;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,532,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,533,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,534,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,538,public void testToInterval() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,539,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,540,Interval test = base.toInterval();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,541,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,542,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,543,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,544,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,545,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,549,public void testToInterval_Zone() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,550,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,551,Interval test = base.toInterval(TOKYO);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,552,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,553,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_TOKYO);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,554,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_TOKYO);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,555,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,556,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,559,public void testToInterval_nullZone() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,560,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,561,Interval test = base.toInterval(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,562,"check(base, 2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,563,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,564,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,565,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,566,"assertEquals(expected, test);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,570,public void testWithers() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,571,"YearMonth test = new YearMonth(1970, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,572,"check(test.withYear(2000), 2000, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,573,"check(test.withMonthOfYear(2), 1970, 2);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,574,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,575,test.withMonthOfYear(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,576,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,577,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,578,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,579,test.withMonthOfYear(13);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,580,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,581,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,585,public void testProperty() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,586,"YearMonth test = new YearMonth(2005, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,587,"assertEquals(test.year(), test.property(DateTimeFieldType.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,588,"assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,589,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,590,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,591,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,592,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,593,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,594,test.property(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,595,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,596,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,600,public void testSerialization() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,601,"YearMonth test = new YearMonth(1972, 6, COPTIC_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,603,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,604,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,605,oos.writeObject(test);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,606,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,607,oos.close();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,609,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,610,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,611,YearMonth result = (YearMonth) ois.readObject();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,612,ois.close();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,614,"assertEquals(test, result);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,615,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,616,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,617,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,621,public void testToString() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,622,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,623,"assertEquals(""2002-06"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,627,public void testToString_String() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,628,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,629,"assertEquals(""2002 \ufffd\ufffd"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,630,"assertEquals(""2002-06"", test.toString((String) null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,634,public void testToString_String_Locale() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,635,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,636,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,637,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,638,"assertEquals(""2002-06"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,639,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,640,"assertEquals(""2002-06"", test.toString(null, null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,644,public void testToString_DTFormatter() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,645,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,646,"assertEquals(""2002 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,647,"assertEquals(""2002-06"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,651,"private void check(YearMonth test, int year, int month) {"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,652,"assertEquals(year, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java,src/test/java/org/joda/time/TestYearMonth_Basics.java,653,"assertEquals(month, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,2,  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,18,mport java.util.Calendar;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,19,mport java.util.Date;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,20,mport java.util.GregorianCalendar;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,22,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,23,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,25,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,26,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,27,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,28,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,31, This class is a Junit unit test for YearMonth.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,33, @author Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,35,ublic class TestYearMonth_Constructors extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,39,rivate static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,40,rivate static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,41,rivate static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,43,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,44,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,46,rivate long TEST_TIME1 =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,47,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,48, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,49, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,51,rivate long TEST_TIME2 =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,52,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,53, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,54, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,56,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,58,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,59,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,62,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,63,eturn new TestSuite(TestYearMonth_Constructors.class);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,66,ublic TestYearMonth_Constructors(String name) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,67,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,70,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,71,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,72,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,73,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,76,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,77,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,78,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,79,one = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,83,ublic void testParse_noFormatter() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,84,"ssertEquals(new YearMonth(2010, 6), YearMonth.parse(""2010-06-30""));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,85,"ssertEquals(new YearMonth(2010, 1), YearMonth.parse(""2010-002""));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,88,ublic void testParse_formatter() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,89,"ateTimeFormatter f = DateTimeFormat.forPattern(""yyyy--MM"").withChronology(ISOChronology.getInstance(PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,90,"ssertEquals(new YearMonth(2010, 6), YearMonth.parse(""2010--06"", f));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,94,ublic void testFactory_FromCalendarFields() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,95,"regorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,96,"al.set(Calendar.MILLISECOND, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,97,"earMonth expected = new YearMonth(1970, 2);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,98,"ssertEquals(expected, YearMonth.fromCalendarFields(cal));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,99,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,100,earMonth.fromCalendarFields(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,101,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,102, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,106,ublic void testFactory_FromDateFields() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,107,"regorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,108,"al.set(Calendar.MILLISECOND, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,109,"earMonth expected = new YearMonth(1970, 2);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,110,"ssertEquals(expected, YearMonth.fromDateFields(cal.getTime()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,111,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,112,earMonth.fromDateFields(null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,113,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,114, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,119, Test constructor ()
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,121,ublic void testConstructor() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,122,earMonth test = new YearMonth();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,123,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,124,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,125,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,129, Test constructor (DateTimeZone)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,131,ublic void testConstructor_DateTimeZone() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,132,"ateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,133,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,134,/ 23:59 in London is 00:59 the following day in Paris
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,136,earMonth test = new YearMonth(LONDON);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,137,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,138,"ssertEquals(2005, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,139,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,141,est = new YearMonth(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,142,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,143,"ssertEquals(2005, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,144,"ssertEquals(7, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,148, Test constructor (DateTimeZone=null)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,150,ublic void testConstructor_nullDateTimeZone() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,151,"ateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,152,ateTimeUtils.setCurrentMillisFixed(dt.getMillis());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,153,/ 23:59 in London is 00:59 the following day in Paris
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,155,earMonth test = new YearMonth((DateTimeZone) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,156,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,157,"ssertEquals(2005, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,158,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,162, Test constructor (Chronology)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,164,ublic void testConstructor_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,165,earMonth test = new YearMonth(GREGORIAN_PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,166,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,167,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,168,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,172, Test constructor (Chronology=null)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,174,ublic void testConstructor_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,175,earMonth test = new YearMonth((Chronology) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,176,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,177,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,178,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,183, Test constructor (long)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,185,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,186,earMonth test = new YearMonth(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,187,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,188,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,189,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,193, Test constructor (long)
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,195,ublic void testConstructor_long2() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,196,earMonth test = new YearMonth(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,197,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,198,"ssertEquals(1971, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,199,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,203," Test constructor (long, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,205,ublic void testConstructor_long1_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,206,"earMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,207,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,208,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,209,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,213," Test constructor (long, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,215,ublic void testConstructor_long2_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,216,"earMonth test = new YearMonth(TEST_TIME2, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,217,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,218,"ssertEquals(1971, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,219,"ssertEquals(5, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,223," Test constructor (long, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,225,ublic void testConstructor_long_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,226,"earMonth test = new YearMonth(TEST_TIME1, null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,227,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,228,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,229,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,233,ublic void testConstructor_Object() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,234,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,235,earMonth test = new YearMonth(date);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,236,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,237,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,238,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,241,ublic void testConstructor_nullObject() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,242,earMonth test = new YearMonth((Object) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,243,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,244,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,245,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,248,ublic void testConstructor_ObjectString1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,249,"earMonth test = new YearMonth(""1972-12"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,250,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,251,"ssertEquals(1972, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,252,"ssertEquals(12, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,255,ublic void testConstructor_ObjectString5() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,256,"earMonth test = new YearMonth(""10"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,257,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,258,"ssertEquals(10, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,259,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,262,ublic void testConstructor_ObjectStringEx1() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,263,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,264,"ew YearMonth(""T10:20:30.040"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,265,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,266, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,267,/ expected
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,271,ublic void testConstructor_ObjectStringEx2() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,272,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,273,"ew YearMonth(""T10:20:30.040+14:00"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,274,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,275, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,276,/ expected
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,280,ublic void testConstructor_ObjectStringEx3() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,281,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,282,"ew YearMonth(""10:20:30.040"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,283,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,284, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,285,/ expected
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,289,ublic void testConstructor_ObjectStringEx4() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,290,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,291,"ew YearMonth(""10:20:30.040+14:00"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,292,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,293, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,294,/ expected
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,300," Test constructor (Object, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,302,ublic void testConstructor_Object_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,303,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,304,"earMonth test = new YearMonth(date, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,305,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,306,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,307,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,311," Test constructor (Object=null, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,313,ublic void testConstructor_nullObject_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,314,"earMonth test = new YearMonth((Object) null, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,315,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,316,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,317,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,321," Test constructor (Object, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,323,ublic void testConstructor_Object_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,324,ate date = new Date(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,325,"earMonth test = new YearMonth(date, null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,326,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,327,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,328,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,332," Test constructor (Object=null, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,334,ublic void testConstructor_nullObject_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,335,"earMonth test = new YearMonth((Object) null, null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,336,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,337,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,338,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,343," Test constructor (int, int)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,345,ublic void testConstructor_int_int() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,346,"earMonth test = new YearMonth(1970, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,347,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,348,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,349,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,350,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,351,"ew YearMonth(Integer.MIN_VALUE, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,352,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,353, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,354,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,355,"ew YearMonth(Integer.MAX_VALUE, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,356,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,357, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,358,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,359,"ew YearMonth(1970, 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,360,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,361, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,362,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,363,"ew YearMonth(1970, 13);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,364,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,365, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,369," Test constructor (int, int, Chronology)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,371,ublic void testConstructor_int_int_Chronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,372,"earMonth test = new YearMonth(1970, 6, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,373,"ssertEquals(GREGORIAN_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,374,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,375,"ssertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,376,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,377,"ew YearMonth(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,378,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,379, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,380,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,381,"ew YearMonth(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,382,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,383, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,384,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,385,"ew YearMonth(1970, 0, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,386,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,387, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,388,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,389,"ew YearMonth(1970, 13, GREGORIAN_PARIS);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,390,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,391, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,395," Test constructor (int, int, Chronology=null)"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,397,ublic void testConstructor_int_int_nullChronology() throws Throwable {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,398,"earMonth test = new YearMonth(1970, 6, null);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,399,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,400,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,401,"ssertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,25,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,27,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,28,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,31,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,33,* @author Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,35,public class TestYearMonth_Constructors extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,39,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,40,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,41,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,43,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,44,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,46,private long TEST_TIME1 =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,47,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,48,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,49,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,51,private long TEST_TIME2 =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,52,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,53,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,54,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,56,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,58,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,59,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,62,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,63,return new TestSuite(TestYearMonth_Constructors.class);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,66,public TestYearMonth_Constructors(String name) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,67,super(name);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,70,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,71,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,72,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,73,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,76,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,77,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,78,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,79,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,83,public void testParse_noFormatter() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,84,"assertEquals(new YearMonth(2010, 6), YearMonth.parse(""2010-06-30""));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,85,"assertEquals(new YearMonth(2010, 1), YearMonth.parse(""2010-002""));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,88,public void testParse_formatter() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,89,"DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy--MM"").withChronology(ISOChronology.getInstance(PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,90,"assertEquals(new YearMonth(2010, 6), YearMonth.parse(""2010--06"", f));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,94,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,95,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,96,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,97,"YearMonth expected = new YearMonth(1970, 2);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,98,"assertEquals(expected, YearMonth.fromCalendarFields(cal));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,99,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,100,YearMonth.fromCalendarFields(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,101,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,102,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,106,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,107,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,108,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,109,"YearMonth expected = new YearMonth(1970, 2);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,110,"assertEquals(expected, YearMonth.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,111,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,112,YearMonth.fromDateFields(null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,113,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,114,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,119,* Test constructor ()
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,121,public void testConstructor() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,122,YearMonth test = new YearMonth();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,123,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,124,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,125,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,129,* Test constructor (DateTimeZone)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,131,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,132,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,133,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,134,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,136,YearMonth test = new YearMonth(LONDON);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,137,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,138,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,139,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,141,test = new YearMonth(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,142,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,143,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,144,"assertEquals(7, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,148,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,150,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,151,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,152,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,153,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,155,YearMonth test = new YearMonth((DateTimeZone) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,156,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,157,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,158,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,162,* Test constructor (Chronology)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,164,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,165,YearMonth test = new YearMonth(GREGORIAN_PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,166,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,167,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,168,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,172,* Test constructor (Chronology=null)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,174,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,175,YearMonth test = new YearMonth((Chronology) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,176,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,177,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,178,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,183,* Test constructor (long)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,185,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,186,YearMonth test = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,187,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,188,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,189,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,193,* Test constructor (long)
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,195,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,196,YearMonth test = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,197,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,198,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,199,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,203,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,205,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,206,"YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,207,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,208,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,209,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,213,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,215,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,216,"YearMonth test = new YearMonth(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,217,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,218,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,219,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,223,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,225,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,226,"YearMonth test = new YearMonth(TEST_TIME1, null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,227,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,228,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,229,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,233,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,234,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,235,YearMonth test = new YearMonth(date);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,236,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,237,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,238,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,241,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,242,YearMonth test = new YearMonth((Object) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,243,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,244,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,245,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,248,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,249,"YearMonth test = new YearMonth(""1972-12"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,250,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,251,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,252,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,255,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,256,"YearMonth test = new YearMonth(""10"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,257,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,258,"assertEquals(10, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,259,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,262,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,263,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,264,"new YearMonth(""T10:20:30.040"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,265,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,266,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,267,// expected
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,271,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,272,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,273,"new YearMonth(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,274,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,275,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,276,// expected
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,280,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,281,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,282,"new YearMonth(""10:20:30.040"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,283,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,284,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,285,// expected
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,289,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,290,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,291,"new YearMonth(""10:20:30.040+14:00"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,292,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,293,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,294,// expected
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,300,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,302,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,303,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,304,"YearMonth test = new YearMonth(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,305,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,306,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,307,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,311,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,313,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,314,"YearMonth test = new YearMonth((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,315,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,316,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,317,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,321,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,323,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,324,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,325,"YearMonth test = new YearMonth(date, null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,326,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,327,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,328,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,332,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,334,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,335,"YearMonth test = new YearMonth((Object) null, null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,336,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,337,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,338,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,343,"* Test constructor (int, int)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,345,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,346,"YearMonth test = new YearMonth(1970, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,347,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,348,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,349,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,350,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,351,"new YearMonth(Integer.MIN_VALUE, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,352,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,353,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,354,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,355,"new YearMonth(Integer.MAX_VALUE, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,356,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,357,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,358,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,359,"new YearMonth(1970, 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,360,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,361,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,362,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,363,"new YearMonth(1970, 13);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,364,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,369,"* Test constructor (int, int, Chronology)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,371,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,372,"YearMonth test = new YearMonth(1970, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,373,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,374,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,375,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,376,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,377,"new YearMonth(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,378,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,379,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,380,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,381,"new YearMonth(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,382,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,383,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,384,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,385,"new YearMonth(1970, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,386,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,387,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,388,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,389,"new YearMonth(1970, 13, GREGORIAN_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,390,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,391,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,395,"* Test constructor (int, int, Chronology=null)"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,397,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,398,"YearMonth test = new YearMonth(1970, 6, null);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,399,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,400,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java,src/test/java/org/joda/time/TestYearMonth_Constructors.java,401,"assertEquals(6, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,2,  Copyright 2001-2010 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,16,ackage org.joda.time;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,18,mport java.util.Locale;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,20,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,21,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,23,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,24,mport org.joda.time.chrono.LenientChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,25,mport org.joda.time.chrono.StrictChronology;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,28, This class is a Junit unit test for YearMonth.
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,30, @author Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,32,ublic class TestYearMonth_Properties extends TestCase {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,34,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,35,rivate static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,37,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,38,31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,40,rivate long TEST_TIME1 =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,41,31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,42, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,43, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,45,rivate long TEST_TIME2 =
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,46,365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,47, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,48, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,50,rivate DateTimeZone zone = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,52,rivate Locale systemDefaultLocale = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,54,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,55,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,58,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,59,eturn new TestSuite(TestYearMonth_Properties.class);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,62,ublic TestYearMonth_Properties(String name) {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,63,uper(name);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,66,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,67,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,68,one = DateTimeZone.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,69,ateTimeZone.setDefault(DateTimeZone.UTC);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,70,ystemDefaultLocale = Locale.getDefault();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,71,ocale.setDefault(Locale.ENGLISH);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,74,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,75,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,76,ateTimeZone.setDefault(zone);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,77,one = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,78,ocale.setDefault(systemDefaultLocale);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,79,ystemDefaultLocale = null;
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,83,ublic void testPropertyGetYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,84,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,85,"ssertSame(test.getChronology().year(), test.year().getField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,86,"ssertEquals(""year"", test.year().getName());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,87,"ssertEquals(""Property[year]"", test.year().toString());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,88,"ssertSame(test, test.year().getReadablePartial());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,89,"ssertSame(test, test.year().getYearMonth());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,90,"ssertEquals(1972, test.year().get());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,91,"ssertEquals(""1972"", test.year().getAsString());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,92,"ssertEquals(""1972"", test.year().getAsText());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,93,"ssertEquals(""1972"", test.year().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,94,"ssertEquals(""1972"", test.year().getAsShortText());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,95,"ssertEquals(""1972"", test.year().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,96,"ssertEquals(test.getChronology().years(), test.year().getDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,97,"ssertEquals(null, test.year().getRangeDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,98,"ssertEquals(9, test.year().getMaximumTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,99,"ssertEquals(9, test.year().getMaximumShortTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,102,ublic void testPropertyGetMaxMinValuesYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,103,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,104,"ssertEquals(-292275054, test.year().getMinimumValue());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,105,"ssertEquals(-292275054, test.year().getMinimumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,106,"ssertEquals(292278993, test.year().getMaximumValue());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,107,"ssertEquals(292278993, test.year().getMaximumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,110,ublic void testPropertyAddYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,111,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,112,earMonth copy = test.year().addToCopy(9);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,113,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,114,"heck(copy, 1981, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,116,opy = test.year().addToCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,117,"heck(copy, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,119,opy = test.year().addToCopy(292277023 - 1972);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,120,"heck(copy, 292277023, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,122,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,123,est.year().addToCopy(292278993 - 1972 + 1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,124,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,125, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,126,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,128,opy = test.year().addToCopy(-1972);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,129,"heck(copy, 0, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,131,opy = test.year().addToCopy(-1973);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,132,"heck(copy, -1, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,134,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,135,est.year().addToCopy(-292275054 - 1972 - 1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,136,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,137, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,138,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,141,ublic void testPropertyAddWrapFieldYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,142,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,143,earMonth copy = test.year().addWrapFieldToCopy(9);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,144,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,145,"heck(copy, 1981, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,147,opy = test.year().addWrapFieldToCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,148,"heck(copy, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,150,opy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,151,"heck(copy, -292275054, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,153,opy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,154,"heck(copy, 292278993, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,157,ublic void testPropertySetYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,158,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,159,earMonth copy = test.year().setCopy(12);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,160,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,161,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,164,ublic void testPropertySetTextYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,165,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,166,"earMonth copy = test.year().setCopy(""12"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,167,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,168,"heck(copy, 12, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,171,ublic void testPropertyCompareToYear() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,172,earMonth test1 = new YearMonth(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,173,earMonth test2 = new YearMonth(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,174,"ssertEquals(true, test1.year().compareTo(test2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,175,"ssertEquals(true, test2.year().compareTo(test1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,176,"ssertEquals(true, test1.year().compareTo(test1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,177,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,178,est1.year().compareTo((ReadablePartial) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,179,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,180, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,182,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,183,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,184,"ssertEquals(true, test1.year().compareTo(dt2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,185,"ssertEquals(true, test2.year().compareTo(dt1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,186,"ssertEquals(true, test1.year().compareTo(dt1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,187,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,188,est1.year().compareTo((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,189,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,190, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,194,ublic void testPropertyGetMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,195,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,196,"ssertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,197,"ssertEquals(""monthOfYear"", test.monthOfYear().getName());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,198,"ssertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,199,"ssertSame(test, test.monthOfYear().getReadablePartial());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,200,"ssertSame(test, test.monthOfYear().getYearMonth());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,201,"ssertEquals(6, test.monthOfYear().get());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,202,"ssertEquals(""6"", test.monthOfYear().getAsString());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,203,"ssertEquals(""June"", test.monthOfYear().getAsText());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,204,"ssertEquals(""juin"", test.monthOfYear().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,205,"ssertEquals(""Jun"", test.monthOfYear().getAsShortText());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,206,"ssertEquals(""juin"", test.monthOfYear().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,207,"ssertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,208,"ssertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,209,"ssertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,210,"ssertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,211,"est = new YearMonth(1972, 7);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,212,"ssertEquals(""juillet"", test.monthOfYear().getAsText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,213,"ssertEquals(""juil."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,216,ublic void testPropertyGetMaxMinValuesMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,217,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,218,"ssertEquals(1, test.monthOfYear().getMinimumValue());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,219,"ssertEquals(1, test.monthOfYear().getMinimumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,220,"ssertEquals(12, test.monthOfYear().getMaximumValue());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,221,"ssertEquals(12, test.monthOfYear().getMaximumValueOverall());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,224,ublic void testPropertyAddMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,225,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,226,earMonth copy = test.monthOfYear().addToCopy(6);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,227,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,228,"heck(copy, 1972, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,230,opy = test.monthOfYear().addToCopy(7);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,231,"heck(copy, 1973, 1);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,233,opy = test.monthOfYear().addToCopy(-5);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,234,"heck(copy, 1972, 1);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,236,opy = test.monthOfYear().addToCopy(-6);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,237,"heck(copy, 1971, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,240,ublic void testPropertyAddWrapFieldMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,241,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,242,earMonth copy = test.monthOfYear().addWrapFieldToCopy(4);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,243,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,244,"heck(copy, 1972, 10);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,246,opy = test.monthOfYear().addWrapFieldToCopy(8);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,247,"heck(copy, 1972, 2);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,249,opy = test.monthOfYear().addWrapFieldToCopy(-8);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,250,"heck(copy, 1972, 10);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,253,ublic void testPropertySetMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,254,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,255,earMonth copy = test.monthOfYear().setCopy(12);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,256,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,257,"heck(copy, 1972, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,259,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,260,est.monthOfYear().setCopy(13);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,261,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,262, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,263,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,264,est.monthOfYear().setCopy(0);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,265,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,266, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,269,ublic void testPropertySetTextMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,270,"earMonth test = new YearMonth(1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,271,"earMonth copy = test.monthOfYear().setCopy(""12"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,272,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,273,"heck(copy, 1972, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,275,"opy = test.monthOfYear().setCopy(""December"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,276,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,277,"heck(copy, 1972, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,279,"opy = test.monthOfYear().setCopy(""Dec"");"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,280,"heck(test, 1972, 6);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,281,"heck(copy, 1972, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,284,ublic void testPropertyCompareToMonth() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,285,earMonth test1 = new YearMonth(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,286,earMonth test2 = new YearMonth(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,287,"ssertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,288,"ssertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,289,"ssertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,290,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,291,est1.monthOfYear().compareTo((ReadablePartial) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,292,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,293, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,295,ateTime dt1 = new DateTime(TEST_TIME1);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,296,ateTime dt2 = new DateTime(TEST_TIME2);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,297,"ssertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,298,"ssertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,299,"ssertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,300,ry {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,301,est1.monthOfYear().compareTo((ReadableInstant) null);
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,302,ail();
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,303, catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,307,ublic void testPropertyEquals() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,308,"earMonth test1 = new YearMonth(11, 11);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,309,"earMonth test2 = new YearMonth(11, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,310,"earMonth test3 = new YearMonth(11, 11, CopticChronology.getInstanceUTC());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,311,"ssertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,312,"ssertEquals(false, test1.monthOfYear().equals(test1.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,313,"ssertEquals(false, test1.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,314,"ssertEquals(false, test1.monthOfYear().equals(test2.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,316,"ssertEquals(false, test1.year().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,317,"ssertEquals(true, test1.year().equals(test1.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,318,"ssertEquals(false, test1.year().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,319,"ssertEquals(true, test1.year().equals(test2.year()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,321,"ssertEquals(false, test1.monthOfYear().equals(null));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,322,"ssertEquals(false, test1.monthOfYear().equals(""any""));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,324,/ chrono
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,325,"ssertEquals(false, test1.monthOfYear().equals(test3.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,328,ublic void testPropertyHashCode() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,329,"earMonth test1 = new YearMonth(2005, 11);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,330,"earMonth test2 = new YearMonth(2005, 12);"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,331,"ssertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,332,"ssertEquals(false, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,333,"ssertEquals(true, test1.year().hashCode() == test1.year().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,334,"ssertEquals(true, test1.year().hashCode() == test2.year().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,337,ublic void testPropertyEqualsHashCodeLenient() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,338,"earMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,339,"earMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,340,"ssertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,341,"ssertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,342,"ssertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,343,"ssertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,344,"ssertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,345,"ssertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,346,"ssertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,349,ublic void testPropertyEqualsHashCodeStrict() {
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,350,"earMonth test1 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,351,"earMonth test2 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,352,"ssertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,353,"ssertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,354,"ssertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,355,"ssertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,356,"ssertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,357,"ssertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,358,"ssertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,362,"rivate void check(YearMonth test, int year, int month) {"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,363,"ssertEquals(year, test.getYear());"
False,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,364,"ssertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,2,*  Copyright 2001-2010 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,23,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,28,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,30,* @author Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,32,public class TestYearMonth_Properties extends TestCase {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,35,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,37,private long TEST_TIME_NOW =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,38,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,40,private long TEST_TIME1 =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,41,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,42,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,43,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,45,private long TEST_TIME2 =
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,46,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,47,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,48,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,50,private DateTimeZone zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,52,private Locale systemDefaultLocale = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,54,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,55,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,58,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,59,return new TestSuite(TestYearMonth_Properties.class);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,62,public TestYearMonth_Properties(String name) {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,63,super(name);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,66,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,67,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,68,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,69,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,70,systemDefaultLocale = Locale.getDefault();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,71,Locale.setDefault(Locale.ENGLISH);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,74,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,75,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,76,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,77,zone = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,78,Locale.setDefault(systemDefaultLocale);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,79,systemDefaultLocale = null;
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,83,public void testPropertyGetYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,84,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,85,"assertSame(test.getChronology().year(), test.year().getField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,86,"assertEquals(""year"", test.year().getName());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,87,"assertEquals(""Property[year]"", test.year().toString());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,88,"assertSame(test, test.year().getReadablePartial());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,89,"assertSame(test, test.year().getYearMonth());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,90,"assertEquals(1972, test.year().get());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,91,"assertEquals(""1972"", test.year().getAsString());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,92,"assertEquals(""1972"", test.year().getAsText());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,93,"assertEquals(""1972"", test.year().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,94,"assertEquals(""1972"", test.year().getAsShortText());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,95,"assertEquals(""1972"", test.year().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,96,"assertEquals(test.getChronology().years(), test.year().getDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,97,"assertEquals(null, test.year().getRangeDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,98,"assertEquals(9, test.year().getMaximumTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,99,"assertEquals(9, test.year().getMaximumShortTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,102,public void testPropertyGetMaxMinValuesYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,103,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,104,"assertEquals(-292275054, test.year().getMinimumValue());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,105,"assertEquals(-292275054, test.year().getMinimumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,106,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,107,"assertEquals(292278993, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,110,public void testPropertyAddYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,111,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,112,YearMonth copy = test.year().addToCopy(9);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,113,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,114,"check(copy, 1981, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,116,copy = test.year().addToCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,117,"check(copy, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,119,copy = test.year().addToCopy(292277023 - 1972);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,120,"check(copy, 292277023, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,122,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,123,test.year().addToCopy(292278993 - 1972 + 1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,124,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,125,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,126,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,128,copy = test.year().addToCopy(-1972);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,129,"check(copy, 0, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,131,copy = test.year().addToCopy(-1973);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,132,"check(copy, -1, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,134,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,135,test.year().addToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,136,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,137,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,138,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,141,public void testPropertyAddWrapFieldYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,142,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,143,YearMonth copy = test.year().addWrapFieldToCopy(9);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,144,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,145,"check(copy, 1981, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,147,copy = test.year().addWrapFieldToCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,148,"check(copy, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,150,copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,151,"check(copy, -292275054, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,153,copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,154,"check(copy, 292278993, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,157,public void testPropertySetYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,158,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,159,YearMonth copy = test.year().setCopy(12);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,160,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,161,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,164,public void testPropertySetTextYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,165,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,166,"YearMonth copy = test.year().setCopy(""12"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,167,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,168,"check(copy, 12, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,171,public void testPropertyCompareToYear() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,172,YearMonth test1 = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,173,YearMonth test2 = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,174,"assertEquals(true, test1.year().compareTo(test2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,175,"assertEquals(true, test2.year().compareTo(test1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,176,"assertEquals(true, test1.year().compareTo(test1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,177,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,178,test1.year().compareTo((ReadablePartial) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,179,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,180,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,182,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,183,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,184,"assertEquals(true, test1.year().compareTo(dt2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,185,"assertEquals(true, test2.year().compareTo(dt1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,186,"assertEquals(true, test1.year().compareTo(dt1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,187,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,188,test1.year().compareTo((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,189,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,190,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,194,public void testPropertyGetMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,195,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,196,"assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,197,"assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,198,"assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,199,"assertSame(test, test.monthOfYear().getReadablePartial());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,200,"assertSame(test, test.monthOfYear().getYearMonth());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,201,"assertEquals(6, test.monthOfYear().get());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,202,"assertEquals(""6"", test.monthOfYear().getAsString());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,203,"assertEquals(""June"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,204,"assertEquals(""juin"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,205,"assertEquals(""Jun"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,206,"assertEquals(""juin"", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,207,"assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,208,"assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,209,"assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,210,"assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,211,"test = new YearMonth(1972, 7);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,212,"assertEquals(""juillet"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,213,"assertEquals(""juil."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,216,public void testPropertyGetMaxMinValuesMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,217,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,218,"assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,219,"assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,220,"assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,221,"assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,224,public void testPropertyAddMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,225,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,226,YearMonth copy = test.monthOfYear().addToCopy(6);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,227,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,228,"check(copy, 1972, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,230,copy = test.monthOfYear().addToCopy(7);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,231,"check(copy, 1973, 1);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,233,copy = test.monthOfYear().addToCopy(-5);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,234,"check(copy, 1972, 1);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,236,copy = test.monthOfYear().addToCopy(-6);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,237,"check(copy, 1971, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,240,public void testPropertyAddWrapFieldMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,241,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,242,YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,243,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,244,"check(copy, 1972, 10);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,246,copy = test.monthOfYear().addWrapFieldToCopy(8);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,247,"check(copy, 1972, 2);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,249,copy = test.monthOfYear().addWrapFieldToCopy(-8);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,250,"check(copy, 1972, 10);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,253,public void testPropertySetMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,254,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,255,YearMonth copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,256,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,257,"check(copy, 1972, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,259,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,260,test.monthOfYear().setCopy(13);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,261,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,262,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,263,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,264,test.monthOfYear().setCopy(0);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,265,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,266,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,269,public void testPropertySetTextMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,270,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,271,"YearMonth copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,272,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,273,"check(copy, 1972, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,275,"copy = test.monthOfYear().setCopy(""December"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,276,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,277,"check(copy, 1972, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,279,"copy = test.monthOfYear().setCopy(""Dec"");"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,280,"check(test, 1972, 6);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,281,"check(copy, 1972, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,284,public void testPropertyCompareToMonth() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,285,YearMonth test1 = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,286,YearMonth test2 = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,287,"assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,288,"assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,289,"assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,290,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,291,test1.monthOfYear().compareTo((ReadablePartial) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,292,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,293,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,295,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,296,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,297,"assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,298,"assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,299,"assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,300,try {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,301,test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,302,fail();
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,303,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,307,public void testPropertyEquals() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,308,"YearMonth test1 = new YearMonth(11, 11);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,309,"YearMonth test2 = new YearMonth(11, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,310,"YearMonth test3 = new YearMonth(11, 11, CopticChronology.getInstanceUTC());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,311,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,312,"assertEquals(false, test1.monthOfYear().equals(test1.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,313,"assertEquals(false, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,314,"assertEquals(false, test1.monthOfYear().equals(test2.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,316,"assertEquals(false, test1.year().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,317,"assertEquals(true, test1.year().equals(test1.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,318,"assertEquals(false, test1.year().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,319,"assertEquals(true, test1.year().equals(test2.year()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,321,"assertEquals(false, test1.monthOfYear().equals(null));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,322,"assertEquals(false, test1.monthOfYear().equals(""any""));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,324,// chrono
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,325,"assertEquals(false, test1.monthOfYear().equals(test3.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,328,public void testPropertyHashCode() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,329,"YearMonth test1 = new YearMonth(2005, 11);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,330,"YearMonth test2 = new YearMonth(2005, 12);"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,331,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,332,"assertEquals(false, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,333,"assertEquals(true, test1.year().hashCode() == test1.year().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,334,"assertEquals(true, test1.year().hashCode() == test2.year().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,337,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,338,"YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,339,"YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,340,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,341,"assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,342,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,343,"assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,344,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,345,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,346,"assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,349,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,350,"YearMonth test1 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,351,"YearMonth test2 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,352,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,353,"assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,354,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,355,"assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,356,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,357,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,358,"assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,362,"private void check(YearMonth test, int year, int month) {"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,363,"assertEquals(year, test.getYear());"
True,JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java,src/test/java/org/joda/time/TestYearMonth_Properties.java,364,"assertEquals(month, test.getMonthOfYear());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,2,  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,16,ackage org.joda.time.chrono;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,18,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,19,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,21,mport org.joda.time.Chronology;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,22,mport org.joda.time.DateTime;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,23,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,24,mport org.joda.time.MockZone;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,28, @author Brian S O'Neill
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,29, @author Blair Martin
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,31,ublic class TestLenientChronology extends TestCase {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,32,ublic static void main(String[] args) {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,33,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,36,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,37,eturn new TestSuite(TestLenientChronology.class);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,40,ublic TestLenientChronology(String name) {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,41,uper(name);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,44,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,47,rotected void tearDown() throws Exception {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,51,ublic void test_setYear() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,52,hronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,53,"ateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,54,"ssertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,55,t = dt.withYear(2008);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,56,"ssertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,60,ublic void test_setMonthOfYear() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,61,hronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,62,"ateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,63,"ssertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,64,t = dt.withMonthOfYear(13);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,65,"ssertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,66,t = dt.withMonthOfYear(0);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,67,"ssertEquals(""2007-12-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,71,ublic void test_setDayOfMonth() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,72,hronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,73,"ateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,74,"ssertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,75,t = dt.withDayOfMonth(32);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,76,"ssertEquals(""2007-02-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,77,t = dt.withDayOfMonth(0);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,78,"ssertEquals(""2007-01-31T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,82,ublic void test_setHourOfDay() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,83,hronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,84,"ateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,85,"ssertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,86,t = dt.withHourOfDay(24);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,87,"ssertEquals(""2007-01-02T00:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,88,t = dt.withHourOfDay(-1);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,89,"ssertEquals(""2007-01-01T23:00:00.000Z"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,93,/------------------------ Bug ------------------------------------------
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,95,ublic void testNearDstTransition() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,96,/ This is just a regression test. Test case provided by Blair Martin.
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,98,nt hour = 23;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,99,ateTime dt;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,101,"t = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,102,"SOChronology.getInstance(DateTimeZone.forID(""America/Los_Angeles"")));"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,103,"ssertEquals(hour, dt.getHourOfDay()); // OK - no LenientChronology"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,105,"t = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,106,enientChronology.getInstance
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,107,ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8))));
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,108,"ssertEquals(hour, dt.getHourOfDay()); // OK - no TZ ID"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,110,"t = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,111,enientChronology.getInstance
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,112,"ISOChronology.getInstance(DateTimeZone.forID(""America/Los_Angeles""))));"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,114,"ssertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,118,/------------------------ Bug [1755161] --------------------------------
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,120,** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,121,rivate static long CUTOVER_TURK = 1175403600000L;
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,122,rivate static int OFFSET_TURK = -18000000;  // -05:00
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,123,"rivate static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,126,ublic void test_MockTurkIsCorrect() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,127,"ateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,128,"ssertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,129,"ateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,130,"ssertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,131,"ateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,132,"ssertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,135,ublic void test_lenientChrononolgy_Chicago() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,136,"ateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,137,hronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,138,"ateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,139,"ssertEquals(""2007-03-11T03:30:00.000-05:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,142,ublic void test_lenientChrononolgy_Turk() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,143,hronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,144,"ateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,145,"ssertEquals(""2007-04-01T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,148,ublic void test_strictChrononolgy_Chicago() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,149,"ateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,150,hronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,151,ry {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,152,"ew DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,153,ail();
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,154, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,155,/ expected
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,159,ublic void test_isoChrononolgy_Chicago() {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,160,"ateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,161,hronology lenient = ISOChronology.getInstance(zone);
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,162,ry {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,163,"ew DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,164,ail();
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,165, catch (IllegalArgumentException ex) {
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,166,/ expected
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,21,import org.joda.time.Chronology;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,22,import org.joda.time.DateTime;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,23,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,24,import org.joda.time.MockZone;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,28,* @author Brian S O'Neill
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,29,* @author Blair Martin
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,31,public class TestLenientChronology extends TestCase {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,32,public static void main(String[] args) {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,33,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,36,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,37,return new TestSuite(TestLenientChronology.class);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,40,public TestLenientChronology(String name) {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,41,super(name);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,44,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,47,protected void tearDown() throws Exception {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,51,public void test_setYear() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,52,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,53,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,54,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,55,dt = dt.withYear(2008);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,56,"assertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,60,public void test_setMonthOfYear() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,61,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,62,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,63,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,64,dt = dt.withMonthOfYear(13);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,65,"assertEquals(""2008-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,66,dt = dt.withMonthOfYear(0);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,67,"assertEquals(""2007-12-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,71,public void test_setDayOfMonth() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,72,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,73,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,74,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,75,dt = dt.withDayOfMonth(32);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,76,"assertEquals(""2007-02-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,77,dt = dt.withDayOfMonth(0);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,78,"assertEquals(""2007-01-31T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,82,public void test_setHourOfDay() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,83,Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,84,"DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,85,"assertEquals(""2007-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,86,dt = dt.withHourOfDay(24);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,87,"assertEquals(""2007-01-02T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,88,dt = dt.withHourOfDay(-1);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,89,"assertEquals(""2007-01-01T23:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,93,//------------------------ Bug ------------------------------------------
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,95,public void testNearDstTransition() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,96,// This is just a regression test. Test case provided by Blair Martin.
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,98,int hour = 23;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,99,DateTime dt;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,101,"dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,102,"ISOChronology.getInstance(DateTimeZone.forID(""America/Los_Angeles"")));"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,103,"assertEquals(hour, dt.getHourOfDay()); // OK - no LenientChronology"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,105,"dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,106,LenientChronology.getInstance
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,107,(ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8))));
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,108,"assertEquals(hour, dt.getHourOfDay()); // OK - no TZ ID"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,110,"dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,111,LenientChronology.getInstance
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,112,"(ISOChronology.getInstance(DateTimeZone.forID(""America/Los_Angeles""))));"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,114,"assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,118,//------------------------ Bug [1755161] --------------------------------
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,120,/** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,121,private static long CUTOVER_TURK = 1175403600000L;
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,122,private static int OFFSET_TURK = -18000000;  // -05:00
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,123,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,126,public void test_MockTurkIsCorrect() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,127,"DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,128,"assertEquals(""2007-03-31T23:59:59.999-05:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,129,"DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,130,"assertEquals(""2007-04-01T01:00:00.000-04:00"", at.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,131,"DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,132,"assertEquals(""2007-04-01T01:00:00.001-04:00"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,135,public void test_lenientChrononolgy_Chicago() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,136,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,137,Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,138,"DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,139,"assertEquals(""2007-03-11T03:30:00.000-05:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,142,public void test_lenientChrononolgy_Turk() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,143,Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,144,"DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,145,"assertEquals(""2007-04-01T01:30:00.000-04:00"", dt.toString());"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,148,public void test_strictChrononolgy_Chicago() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,149,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,150,Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,151,try {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,152,"new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,153,fail();
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,154,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,155,// expected
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,159,public void test_isoChrononolgy_Chicago() {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,160,"DateTimeZone zone = DateTimeZone.forID(""America/Chicago"");"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,161,Chronology lenient = ISOChronology.getInstance(zone);
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,162,try {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,163,"new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,164,fail();
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,165,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,src/test/java/org/joda/time/chrono/TestLenientChronology.java,166,// expected
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,2,  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,6,  You may obtain a copy of the License at
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,14,  limitations under the License.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,16,ackage org.joda.time.field;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,18,mport java.util.Locale;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,20,mport junit.framework.TestCase;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,21,mport junit.framework.TestSuite;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,23,mport org.joda.time.DateTimeField;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,24,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,25,mport org.joda.time.DurationFieldType;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,26,mport org.joda.time.LocalTime;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,27,mport org.joda.time.ReadablePartial;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,30, This class is a JUnit test to test only the UnsupportedDateTimeField class.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,31, This set of test cases exercises everything described in the Javadoc for this
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,32, class.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,34, @author Jeremy R. Rickard
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,36,ublic class TestUnsupportedDateTimeField extends TestCase {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,38,rivate DurationFieldType weeks;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,39,rivate DurationFieldType months;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,40,rivate DateTimeFieldType dateTimeFieldTypeOne;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,41,rivate ReadablePartial localTime;
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,43,ublic static TestSuite suite() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,44,eturn new TestSuite(TestUnsupportedDateTimeField.class);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,47,rotected void setUp() throws Exception {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,48,eeks = DurationFieldType.weeks();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,49,onths = DurationFieldType.months();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,50,ateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,51,ocalTime = new LocalTime();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,55, Passing null values into UnsupportedDateTimeField.getInstance() should
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,56, throw an IllegalArguementsException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,58,ublic void testNullValuesToGetInstanceThrowsException() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,60,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,61,"nsupportedDateTimeField.getInstance(null, null);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,62,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,63, catch (IllegalArgumentException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,64,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,70, This test exercises the logic in UnsupportedDateTimeField.getInstance. If
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,71, getInstance() is invoked twice with: - the same DateTimeFieldType -
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,72, different duration fields
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,74, Then the field returned in the first invocation should not be equal to
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,75," the field returned by the second invocation. In otherwords, the generated"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,76, instance should be the same for a unique pairing of
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,77, DateTimeFieldType/DurationField
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,79,ublic void testDifferentDurationReturnDifferentObjects() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,82, The fields returned by getInstance should be the same when the
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,83, duration is the same for both method calls.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,85,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,86,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,87,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,88,ateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,89,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,90,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,91,"ssertSame(fieldOne, fieldTwo);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,94, The fields returned by getInstance should NOT be the same when the
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,95, duration is the same for both method calls.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,97,ateTimeField fieldThree = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,98,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,99,getInstance(months));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,100,"ssertNotSame(fieldOne, fieldThree);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,104, The getName() method should return the same value as the getName() method
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,105, of the DateTimeFieldType that was used to create the instance.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,108,ublic void testPublicGetNameMethod() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,109,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,110,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,111,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,113,"ssertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,117," As this is an unsupported date/time field, some normal methods will"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,118," always return false, as they are not supported. Verify that each method"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,119, correctly returns null.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,121,ublic void testAlwaysFalseReturnTypes() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,122,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,123,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,124,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,125,ssertFalse(fieldOne.isLenient());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,126,ssertFalse(fieldOne.isSupported());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,130," According to the JavaDocs, there are two methods that should always"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,131, return null. * getRangeDurationField() * getLeapDurationField()
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,133, Ensure that these are in fact null.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,136,ublic void testMethodsThatShouldAlwaysReturnNull() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,137,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,138,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,139,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,141,ssertNull(fieldOne.getLeapDurationField());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,142,ssertNull(fieldOne.getRangeDurationField());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,146," As this is an unsupported date/time field, many normal methods are"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,147, unsupported and throw an UnsupportedOperationException. Verify that each
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,148," method correctly throws this exception. * add(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,149," int fieldIndex, int[] values, int valueToAdd) * addWrapField(long"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,150," instant, int value) * addWrapField(ReadablePartial instant, int"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,151," fieldIndex, int[] values, int valueToAdd) *"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,152," addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values, int"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,153," valueToAdd) * get(long instant) * getAsShortText(int fieldValue, Locale"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,154," locale) * getAsShortText(long instant) * getAsShortText(long instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,155," Locale locale) * getAsShortText(ReadablePartial partial, int fieldValue,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,156," Locale locale) * getAsShortText(ReadablePartial partial, Locale locale) *"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,157," getAsText(int fieldValue, Locale locale) * getAsText(long instant) *"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,158," getAsText(long instant, Locale locale) * getAsText(ReadablePartial"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,159," partial, int fieldValue, Locale locale) * getAsText(ReadablePartial"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,160," partial, Locale locale) * getLeapAmount(long instant) *"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,161, getMaximumShortTextLength(Locale locale) * getMaximumTextLength(Locale
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,162, locale) * getMaximumValue() * getMaximumValue(long instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,163, getMaximumValue(ReadablePartial instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,164," getMaximumValue(ReadablePartial instant, int[] values) *"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,165, getMinimumValue() * getMinimumValue(long instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,166, getMinimumValue(ReadablePartial instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,167," getMinimumValue(ReadablePartial instant, int[] values) * isLeap(long"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,168, instant) * remainder(long instant) * roundCeiling(long instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,169, roundFloor(long instant) * roundHalfCeiling(long instant) *
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,170, roundHalfEven(long instant) * roundHalfFloor(long instant) * set(long
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,171," instant, int value) * set(long instant, String text) * set(long instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,172," String text, Locale locale) * set(ReadablePartial instant, int"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,173," fieldIndex, int[] values, int newValue) * set(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,174," int fieldIndex, int[] values, String text, Locale locale)"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,176,ublic void testUnsupportedMethods() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,177,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,178,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,179,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,181,"/ add(ReadablePartial instant, int fieldIndex, int[] values, int"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,182,/ valueToAdd)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,183,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,184,"ieldOne.add(localTime, 0, new int[] { 0, 100 }, 100);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,185,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,186, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,187,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,189,"/ addWrapField(long instant, int value)"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,190,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,191,"ieldOne.addWrapField(100000L, 250);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,192,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,193, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,194,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,196,"/ addWrapField(ReadablePartial instant, int fieldIndex, int[] values,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,197,/ int valueToAdd)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,198,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,199,"ieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,200,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,201, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,202,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,204,"/ addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,205,/ int valueToAdd)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,206,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,207,"ieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,208,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,209, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,210,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,212,/ UnsupportedDateTimeField.get(long instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,213,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,214,ieldOne.get(1000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,215,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,216, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,217,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,220,"/ UnsupportedDateTimeField.getAsShortText(int fieldValue,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,221,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,222,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,223,"ieldOne.getAsShortText(0, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,224,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,225, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,226,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,229,/ UnsupportedDateTimeField.getAsShortText(long instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,230,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,231,ieldOne.getAsShortText(100000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,232,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,233, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,234,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,237,"/ UnsupportedDateTimeField.getAsShortText(long instant, Locale locale)"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,238,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,239,"ieldOne.getAsShortText(100000L, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,240,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,241, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,242,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,245,"/ UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,246,"/ int fieldValue,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,247,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,248,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,249,"ieldOne.getAsShortText(localTime, 0, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,250,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,251, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,252,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,255,"/ UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,256,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,257,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,258,"ieldOne.getAsShortText(localTime, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,259,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,260, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,261,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,264,"/ UnsupportedDateTimeField.getAsText(int fieldValue,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,265,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,266,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,267,"ieldOne.getAsText(0, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,268,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,269, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,270,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,273,/ UnsupportedDateTimeField.getAsText(long instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,274,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,275,ieldOne.getAsText(1000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,276,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,277, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,278,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,281,"/ UnsupportedDateTimeField.getAsText(long instant, Locale locale)"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,282,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,283,"ieldOne.getAsText(1000L, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,284,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,285, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,286,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,289,"/ UnsupportedDateTimeField.getAsText(ReadablePartial partial,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,290,"/ int fieldValue,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,291,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,292,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,293,"ieldOne.getAsText(localTime, 0, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,294,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,295, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,296,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,299,"/ UnsupportedDateTimeField.getAsText(ReadablePartial partial,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,300,/ Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,301,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,302,"ieldOne.getAsText(localTime, Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,303,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,304, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,305,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,308,/ UnsupportedDateTimeField.getLeapAmount(long instant) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,309,/ and should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,310,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,311,ieldOne.getLeapAmount(System.currentTimeMillis());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,312,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,313, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,314,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,317,/ UnsupportedDateTimeField.getMaximumShortTextLength(Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,318,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,319,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,320,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,321,ieldOne.getMaximumShortTextLength(Locale.getDefault());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,322,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,323, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,324,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,327,/ UnsupportedDateTimeField.getMaximumTextLength(Locale locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,328,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,329,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,330,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,331,ieldOne.getMaximumTextLength(Locale.getDefault());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,332,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,333, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,334,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,337,/ UnsupportedDateTimeField.getMaximumValue() is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,338,/ and should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,339,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,340,ieldOne.getMaximumValue();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,341,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,342, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,343,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,346,/ UnsupportedDateTimeField.getMaximumValue(long instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,347,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,348,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,349,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,350,ieldOne.getMaximumValue(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,351,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,352, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,353,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,356,/ UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,357,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,358,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,359,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,360,ieldOne.getMaximumValue(localTime);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,361,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,362, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,363,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,366,"/ UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,367,/ int[] values)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,368,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,369,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,370,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,371,"ieldOne.getMaximumValue(localTime, new int[] { 0 });"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,372,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,373, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,374,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,377,/ UnsupportedDateTimeField.getMinumumValue() is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,378,/ and should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,379,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,380,ieldOne.getMinimumValue();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,381,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,382, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,383,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,386,/ UnsupportedDateTimeField.getMinumumValue(long instant) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,387,/ and should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,388,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,389,ieldOne.getMinimumValue(10000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,390,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,391, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,392,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,395,/ UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,396,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,397,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,398,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,399,ieldOne.getMinimumValue(localTime);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,400,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,401, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,402,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,405,"/ UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,406,/ int[] values) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,407,/ and should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,408,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,409,"ieldOne.getMinimumValue(localTime, new int[] { 0 });"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,410,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,411, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,412,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,415,/ UnsupportedDateTimeField.isLeap(long instant) is unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,416,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,417,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,418,ieldOne.isLeap(System.currentTimeMillis());
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,419,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,420, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,421,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,424,/ UnsupportedDateTimeField.remainder(long instant) is unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,425,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,426,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,427,ieldOne.remainder(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,428,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,429, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,430,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,433,/ UnsupportedDateTimeField.roundCeiling(long instant) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,434,/ and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,435,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,436,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,437,ieldOne.roundCeiling(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,438,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,439, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,440,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,443,/ UnsupportedDateTimeField.roundFloor(long instant) is unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,444,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,445,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,446,ieldOne.roundFloor(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,447,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,448, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,449,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,452,/ UnsupportedDateTimeField.roundHalfCeiling(long instant) is
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,453,/ unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,454,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,455,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,456,ieldOne.roundHalfCeiling(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,457,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,458, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,459,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,462,/ UnsupportedDateTimeField.roundHalfEven(long instant) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,463,/ and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,464,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,465,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,466,ieldOne.roundHalfEven(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,467,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,468, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,469,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,472,/ UnsupportedDateTimeField.roundHalfFloor(long instant) is unsupported
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,473,/ and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,474,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,475,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,476,ieldOne.roundHalfFloor(1000000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,477,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,478, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,479,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,482,"/ UnsupportedDateTimeField.set(long instant, int value) is unsupported"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,483,/ and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,484,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,485,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,486,"ieldOne.set(1000000L, 1000);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,487,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,488, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,489,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,492,"/ UnsupportedDateTimeField.set(long instant, String test) is"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,493,/ unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,494,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,495,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,496,"ieldOne.set(1000000L, ""Unsupported Operation"");"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,497,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,498, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,499,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,502,"/ UnsupportedDateTimeField.set(long instant, String text, Locale"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,503,/ locale)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,504,/ is unsupported and should always thrown an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,505,/ UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,506,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,507,ieldOne
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,508,"set(1000000L, ""Unsupported Operation"", Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,509,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,510, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,511,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,514,"/ UnsupportedDateTimeField.set(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,515,"/ int fieldIndex,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,516,"/ int[] values,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,517,/ int newValue) is unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,518,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,519,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,520,"ieldOne.set(localTime, 0, new int[] { 0 }, 10000);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,521,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,522, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,523,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,526,"/ UnsupportedDateTimeField.set(ReadablePartial instant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,527,"/ int fieldIndex,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,528,"/ int[] values,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,529,"/ String text,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,530,/ Locale locale) is unsupported and
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,531,/ should always thrown an UnsupportedOperationException
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,532,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,533,"ieldOne.set(localTime, 0, new int[] { 0 },"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,534,"Unsupported Operation"", Locale.getDefault());"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,535,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,536, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,537,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,542," As this is an unsupported date/time field, many normal methods are"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,543, unsupported. Some delegate and can possibly throw an
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,544, UnsupportedOperationException or have a valid return. Verify that each
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,545, method correctly throws this exception when appropriate and delegates
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,546, correctly based on the Duration used to get the instance.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,548,ublic void testDelegatedMethods() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,549,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,550,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,551,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,552,reciseDurationField hoursDuration = new PreciseDurationField(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,553,"urationFieldType.hours(), 10L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,554,ateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,555,"ateTimeFieldTypeOne, hoursDuration);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,557,"/ UnsupportedDateTimeField.add(long instant, int value) should"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,558,/ throw an UnsupportedOperationException when the duration does
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,559,"/ not support the operation, otherwise it delegates to the duration."
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,560,/ First
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,561,"/ try it with an UnsupportedDurationField, then a PreciseDurationField."
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,562,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,563,"ieldOne.add(System.currentTimeMillis(), 100);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,564,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,565, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,566,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,568,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,569,ong currentTime = System.currentTimeMillis();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,570,"ong firstComputation = hoursDuration.add(currentTime, 100);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,571,"ong secondComputation = fieldTwo.add(currentTime,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,572,00);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,573,"ssertEquals(firstComputation,secondComputation);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,574, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,575,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,578,"/ UnsupportedDateTimeField.add(long instant, long value) should"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,579,/ throw an UnsupportedOperationException when the duration does
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,580,"/ not support the operation, otherwise it delegates to the duration."
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,581,/ First
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,582,"/ try it with an UnsupportedDurationField, then a PreciseDurationField."
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,583,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,584,"ieldOne.add(System.currentTimeMillis(), 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,585,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,586, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,587,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,590,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,591,ong currentTime = System.currentTimeMillis();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,592,"ong firstComputation = hoursDuration.add(currentTime, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,593,"ong secondComputation = fieldTwo.add(currentTime,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,594,000L);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,595,ssertTrue(firstComputation == secondComputation);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,596,"ssertEquals(firstComputation,secondComputation);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,597, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,598,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,601,"/ UnsupportedDateTimeField.getDifference(long minuendInstant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,602,/ long subtrahendInstant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,603,/ should throw an UnsupportedOperationException when the duration does
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,604,"/ not support the operation, otherwise return the result from the"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,605,/ delegated call.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,606,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,607,"ieldOne.getDifference(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,608,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,609, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,610,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,613,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,614,"nt firstDifference = hoursDuration.getDifference(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,615,"nt secondDifference = fieldTwo.getDifference(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,616,"ssertEquals(firstDifference,secondDifference);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,617, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,618,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,621,"/ UnsupportedDateTimeField.getDifferenceAsLong(long minuendInstant,"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,622,/ long subtrahendInstant)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,623,/ should throw an UnsupportedOperationException when the duration does
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,624,"/ not support the operation, otherwise return the result from the"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,625,/ delegated call.
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,626,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,627,"ieldOne.getDifferenceAsLong(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,628,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,629, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,630,ssertTrue(true);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,633,ry {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,634,"ong firstDifference = hoursDuration.getDifference(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,635,"ong secondDifference = fieldTwo.getDifference(100000L, 1000L);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,636,"ssertEquals(firstDifference,secondDifference);"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,637, catch (UnsupportedOperationException e) {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,638,ssertTrue(false);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,643, The toString method should return a suitable debug message (not null).
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,644, Ensure that the toString method returns a string with length greater than
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,645, 0 (and not null)
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,648,ublic void testToString() {
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,649,ateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,650,"ateTimeFieldTypeOne, UnsupportedDurationField"
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,651,getInstance(weeks));
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,653,tring debugMessage = fieldOne.toString();
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,654,ssertNotNull(debugMessage);
False,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,655,ssertTrue(debugMessage.length() > 0);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,14,*  limitations under the License.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,16,package org.joda.time.field;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,18,import java.util.Locale;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,23,import org.joda.time.DateTimeField;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,24,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,25,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,26,import org.joda.time.LocalTime;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,27,import org.joda.time.ReadablePartial;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,30,* This class is a JUnit test to test only the UnsupportedDateTimeField class.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,31,* This set of test cases exercises everything described in the Javadoc for this
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,32,* class.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,34,* @author Jeremy R. Rickard
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,36,public class TestUnsupportedDateTimeField extends TestCase {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,38,private DurationFieldType weeks;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,39,private DurationFieldType months;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,40,private DateTimeFieldType dateTimeFieldTypeOne;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,41,private ReadablePartial localTime;
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,43,public static TestSuite suite() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,44,return new TestSuite(TestUnsupportedDateTimeField.class);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,47,protected void setUp() throws Exception {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,48,weeks = DurationFieldType.weeks();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,49,months = DurationFieldType.months();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,50,dateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,51,localTime = new LocalTime();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,55,* Passing null values into UnsupportedDateTimeField.getInstance() should
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,56,* throw an IllegalArguementsException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,58,public void testNullValuesToGetInstanceThrowsException() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,60,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,61,"UnsupportedDateTimeField.getInstance(null, null);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,62,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,63,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,64,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,70,* This test exercises the logic in UnsupportedDateTimeField.getInstance. If
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,71,* getInstance() is invoked twice with: - the same DateTimeFieldType -
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,72,* different duration fields
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,74,* Then the field returned in the first invocation should not be equal to
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,75,"* the field returned by the second invocation. In otherwords, the generated"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,76,* instance should be the same for a unique pairing of
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,77,* DateTimeFieldType/DurationField
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,79,public void testDifferentDurationReturnDifferentObjects() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,82,* The fields returned by getInstance should be the same when the
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,83,* duration is the same for both method calls.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,85,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,86,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,87,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,88,DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,89,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,90,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,91,"assertSame(fieldOne, fieldTwo);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,94,* The fields returned by getInstance should NOT be the same when the
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,95,* duration is the same for both method calls.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,97,DateTimeField fieldThree = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,98,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,99,.getInstance(months));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,100,"assertNotSame(fieldOne, fieldThree);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,104,* The getName() method should return the same value as the getName() method
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,105,* of the DateTimeFieldType that was used to create the instance.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,108,public void testPublicGetNameMethod() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,109,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,110,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,111,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,113,"assertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,117,"* As this is an unsupported date/time field, some normal methods will"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,118,"* always return false, as they are not supported. Verify that each method"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,119,* correctly returns null.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,121,public void testAlwaysFalseReturnTypes() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,122,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,123,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,124,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,125,assertFalse(fieldOne.isLenient());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,126,assertFalse(fieldOne.isSupported());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,130,"* According to the JavaDocs, there are two methods that should always"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,131,* return null. * getRangeDurationField() * getLeapDurationField()
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,133,* Ensure that these are in fact null.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,136,public void testMethodsThatShouldAlwaysReturnNull() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,137,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,138,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,139,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,141,assertNull(fieldOne.getLeapDurationField());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,142,assertNull(fieldOne.getRangeDurationField());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,146,"* As this is an unsupported date/time field, many normal methods are"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,147,* unsupported and throw an UnsupportedOperationException. Verify that each
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,148,"* method correctly throws this exception. * add(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,149,"* int fieldIndex, int[] values, int valueToAdd) * addWrapField(long"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,150,"* instant, int value) * addWrapField(ReadablePartial instant, int"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,151,"* fieldIndex, int[] values, int valueToAdd) *"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,152,"* addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values, int"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,153,"* valueToAdd) * get(long instant) * getAsShortText(int fieldValue, Locale"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,154,"* locale) * getAsShortText(long instant) * getAsShortText(long instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,155,"* Locale locale) * getAsShortText(ReadablePartial partial, int fieldValue,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,156,"* Locale locale) * getAsShortText(ReadablePartial partial, Locale locale) *"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,157,"* getAsText(int fieldValue, Locale locale) * getAsText(long instant) *"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,158,"* getAsText(long instant, Locale locale) * getAsText(ReadablePartial"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,159,"* partial, int fieldValue, Locale locale) * getAsText(ReadablePartial"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,160,"* partial, Locale locale) * getLeapAmount(long instant) *"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,161,* getMaximumShortTextLength(Locale locale) * getMaximumTextLength(Locale
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,162,* locale) * getMaximumValue() * getMaximumValue(long instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,163,* getMaximumValue(ReadablePartial instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,164,"* getMaximumValue(ReadablePartial instant, int[] values) *"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,165,* getMinimumValue() * getMinimumValue(long instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,166,* getMinimumValue(ReadablePartial instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,167,"* getMinimumValue(ReadablePartial instant, int[] values) * isLeap(long"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,168,* instant) * remainder(long instant) * roundCeiling(long instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,169,* roundFloor(long instant) * roundHalfCeiling(long instant) *
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,170,* roundHalfEven(long instant) * roundHalfFloor(long instant) * set(long
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,171,"* instant, int value) * set(long instant, String text) * set(long instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,172,"* String text, Locale locale) * set(ReadablePartial instant, int"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,173,"* fieldIndex, int[] values, int newValue) * set(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,174,"* int fieldIndex, int[] values, String text, Locale locale)"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,176,public void testUnsupportedMethods() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,177,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,178,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,179,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,181,"// add(ReadablePartial instant, int fieldIndex, int[] values, int"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,182,// valueToAdd)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,183,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,184,"fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,185,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,186,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,187,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,189,"// addWrapField(long instant, int value)"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,190,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,191,"fieldOne.addWrapField(100000L, 250);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,192,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,193,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,194,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,196,"// addWrapField(ReadablePartial instant, int fieldIndex, int[] values,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,197,// int valueToAdd)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,198,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,199,"fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,200,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,201,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,202,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,204,"// addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,205,// int valueToAdd)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,206,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,207,"fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,208,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,209,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,210,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,212,// UnsupportedDateTimeField.get(long instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,213,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,214,fieldOne.get(1000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,215,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,216,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,217,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,220,"// UnsupportedDateTimeField.getAsShortText(int fieldValue,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,221,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,222,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,223,"fieldOne.getAsShortText(0, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,224,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,225,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,226,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,229,// UnsupportedDateTimeField.getAsShortText(long instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,230,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,231,fieldOne.getAsShortText(100000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,232,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,233,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,234,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,237,"// UnsupportedDateTimeField.getAsShortText(long instant, Locale locale)"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,238,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,239,"fieldOne.getAsShortText(100000L, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,240,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,241,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,242,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,245,"// UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,246,"// int fieldValue,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,247,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,248,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,249,"fieldOne.getAsShortText(localTime, 0, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,250,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,251,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,252,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,255,"// UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,256,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,257,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,258,"fieldOne.getAsShortText(localTime, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,259,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,260,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,261,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,264,"// UnsupportedDateTimeField.getAsText(int fieldValue,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,265,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,266,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,267,"fieldOne.getAsText(0, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,268,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,269,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,270,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,273,// UnsupportedDateTimeField.getAsText(long instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,274,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,275,fieldOne.getAsText(1000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,276,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,277,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,278,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,281,"// UnsupportedDateTimeField.getAsText(long instant, Locale locale)"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,282,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,283,"fieldOne.getAsText(1000L, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,284,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,285,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,286,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,289,"// UnsupportedDateTimeField.getAsText(ReadablePartial partial,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,290,"// int fieldValue,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,291,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,292,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,293,"fieldOne.getAsText(localTime, 0, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,294,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,295,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,296,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,299,"// UnsupportedDateTimeField.getAsText(ReadablePartial partial,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,300,// Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,301,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,302,"fieldOne.getAsText(localTime, Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,303,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,304,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,305,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,308,// UnsupportedDateTimeField.getLeapAmount(long instant) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,309,// and should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,310,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,311,fieldOne.getLeapAmount(System.currentTimeMillis());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,312,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,313,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,314,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,317,// UnsupportedDateTimeField.getMaximumShortTextLength(Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,318,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,319,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,320,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,321,fieldOne.getMaximumShortTextLength(Locale.getDefault());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,322,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,323,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,324,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,327,// UnsupportedDateTimeField.getMaximumTextLength(Locale locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,328,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,329,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,330,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,331,fieldOne.getMaximumTextLength(Locale.getDefault());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,332,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,333,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,334,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,337,// UnsupportedDateTimeField.getMaximumValue() is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,338,// and should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,339,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,340,fieldOne.getMaximumValue();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,341,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,342,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,343,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,346,// UnsupportedDateTimeField.getMaximumValue(long instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,347,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,348,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,349,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,350,fieldOne.getMaximumValue(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,351,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,352,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,353,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,356,// UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,357,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,358,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,359,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,360,fieldOne.getMaximumValue(localTime);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,361,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,362,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,363,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,366,"// UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,367,// int[] values)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,368,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,369,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,370,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,371,"fieldOne.getMaximumValue(localTime, new int[] { 0 });"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,372,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,373,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,374,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,377,// UnsupportedDateTimeField.getMinumumValue() is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,378,// and should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,379,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,380,fieldOne.getMinimumValue();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,381,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,382,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,383,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,386,// UnsupportedDateTimeField.getMinumumValue(long instant) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,387,// and should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,388,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,389,fieldOne.getMinimumValue(10000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,390,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,391,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,392,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,395,// UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,396,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,397,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,398,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,399,fieldOne.getMinimumValue(localTime);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,400,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,401,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,402,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,405,"// UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,406,// int[] values) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,407,// and should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,408,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,409,"fieldOne.getMinimumValue(localTime, new int[] { 0 });"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,410,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,411,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,412,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,415,// UnsupportedDateTimeField.isLeap(long instant) is unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,416,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,417,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,418,fieldOne.isLeap(System.currentTimeMillis());
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,419,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,420,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,421,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,424,// UnsupportedDateTimeField.remainder(long instant) is unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,425,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,426,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,427,fieldOne.remainder(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,428,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,429,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,430,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,433,// UnsupportedDateTimeField.roundCeiling(long instant) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,434,// and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,435,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,436,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,437,fieldOne.roundCeiling(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,438,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,439,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,440,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,443,// UnsupportedDateTimeField.roundFloor(long instant) is unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,444,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,445,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,446,fieldOne.roundFloor(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,447,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,448,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,449,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,452,// UnsupportedDateTimeField.roundHalfCeiling(long instant) is
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,453,// unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,454,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,455,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,456,fieldOne.roundHalfCeiling(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,457,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,458,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,459,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,462,// UnsupportedDateTimeField.roundHalfEven(long instant) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,463,// and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,464,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,465,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,466,fieldOne.roundHalfEven(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,467,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,468,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,469,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,472,// UnsupportedDateTimeField.roundHalfFloor(long instant) is unsupported
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,473,// and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,474,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,475,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,476,fieldOne.roundHalfFloor(1000000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,477,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,478,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,479,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,482,"// UnsupportedDateTimeField.set(long instant, int value) is unsupported"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,483,// and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,484,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,485,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,486,"fieldOne.set(1000000L, 1000);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,487,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,488,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,489,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,492,"// UnsupportedDateTimeField.set(long instant, String test) is"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,493,// unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,494,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,495,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,496,"fieldOne.set(1000000L, ""Unsupported Operation"");"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,497,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,498,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,499,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,502,"// UnsupportedDateTimeField.set(long instant, String text, Locale"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,503,// locale)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,504,// is unsupported and should always thrown an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,505,// UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,506,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,507,fieldOne
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,508,".set(1000000L, ""Unsupported Operation"", Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,509,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,510,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,511,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,514,"// UnsupportedDateTimeField.set(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,515,"// int fieldIndex,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,516,"// int[] values,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,517,// int newValue) is unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,518,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,519,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,520,"fieldOne.set(localTime, 0, new int[] { 0 }, 10000);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,521,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,522,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,523,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,526,"// UnsupportedDateTimeField.set(ReadablePartial instant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,527,"// int fieldIndex,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,528,"// int[] values,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,529,"// String text,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,530,// Locale locale) is unsupported and
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,531,// should always thrown an UnsupportedOperationException
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,532,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,533,"fieldOne.set(localTime, 0, new int[] { 0 },"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,534,"""Unsupported Operation"", Locale.getDefault());"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,535,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,536,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,537,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,542,"* As this is an unsupported date/time field, many normal methods are"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,543,* unsupported. Some delegate and can possibly throw an
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,544,* UnsupportedOperationException or have a valid return. Verify that each
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,545,* method correctly throws this exception when appropriate and delegates
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,546,* correctly based on the Duration used to get the instance.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,548,public void testDelegatedMethods() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,549,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,550,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,551,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,552,PreciseDurationField hoursDuration = new PreciseDurationField(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,553,"DurationFieldType.hours(), 10L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,554,DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,555,"dateTimeFieldTypeOne, hoursDuration);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,557,"// UnsupportedDateTimeField.add(long instant, int value) should"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,558,// throw an UnsupportedOperationException when the duration does
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,559,"// not support the operation, otherwise it delegates to the duration."
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,560,// First
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,561,"// try it with an UnsupportedDurationField, then a PreciseDurationField."
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,562,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,563,"fieldOne.add(System.currentTimeMillis(), 100);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,564,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,565,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,566,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,568,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,569,long currentTime = System.currentTimeMillis();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,570,"long firstComputation = hoursDuration.add(currentTime, 100);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,571,"long secondComputation = fieldTwo.add(currentTime,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,572,100);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,573,"assertEquals(firstComputation,secondComputation);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,574,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,575,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,578,"// UnsupportedDateTimeField.add(long instant, long value) should"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,579,// throw an UnsupportedOperationException when the duration does
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,580,"// not support the operation, otherwise it delegates to the duration."
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,581,// First
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,582,"// try it with an UnsupportedDurationField, then a PreciseDurationField."
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,583,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,584,"fieldOne.add(System.currentTimeMillis(), 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,585,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,586,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,587,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,590,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,591,long currentTime = System.currentTimeMillis();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,592,"long firstComputation = hoursDuration.add(currentTime, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,593,"long secondComputation = fieldTwo.add(currentTime,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,594,1000L);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,595,assertTrue(firstComputation == secondComputation);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,596,"assertEquals(firstComputation,secondComputation);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,597,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,598,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,601,"// UnsupportedDateTimeField.getDifference(long minuendInstant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,602,// long subtrahendInstant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,603,// should throw an UnsupportedOperationException when the duration does
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,604,"// not support the operation, otherwise return the result from the"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,605,// delegated call.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,606,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,607,"fieldOne.getDifference(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,608,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,609,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,610,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,613,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,614,"int firstDifference = hoursDuration.getDifference(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,615,"int secondDifference = fieldTwo.getDifference(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,616,"assertEquals(firstDifference,secondDifference);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,617,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,618,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,621,"// UnsupportedDateTimeField.getDifferenceAsLong(long minuendInstant,"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,622,// long subtrahendInstant)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,623,// should throw an UnsupportedOperationException when the duration does
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,624,"// not support the operation, otherwise return the result from the"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,625,// delegated call.
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,626,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,627,"fieldOne.getDifferenceAsLong(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,628,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,629,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,630,assertTrue(true);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,633,try {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,634,"long firstDifference = hoursDuration.getDifference(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,635,"long secondDifference = fieldTwo.getDifference(100000L, 1000L);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,636,"assertEquals(firstDifference,secondDifference);"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,637,} catch (UnsupportedOperationException e) {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,638,assertTrue(false);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,643,* The toString method should return a suitable debug message (not null).
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,644,* Ensure that the toString method returns a string with length greater than
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,645,* 0 (and not null)
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,648,public void testToString() {
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,649,DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,650,"dateTimeFieldTypeOne, UnsupportedDurationField"
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,651,.getInstance(weeks));
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,653,String debugMessage = fieldOne.toString();
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,654,assertNotNull(debugMessage);
True,JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java,655,assertTrue(debugMessage.length() > 0);

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,255,* Creates a new Duration instance with the same total milliseconds but
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,256,* different DurationType.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,258,"* @param type  the duration type to use, null means AllType"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,259,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,260,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,262,public Duration withDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,263,if (type == null) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,264,type = DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,266,if (type.equals(getDurationType())) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,267,return this;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,269,"return new Duration(getTotalMillis(), type);"

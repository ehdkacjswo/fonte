is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,707,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,707,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,711,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,712,chrono = chrono.withZone(bucket.getZone());
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,715,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,716,instant.setZone(iZone);
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,803,f (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,808,if (bucket.getOffset() != null) {  // treat withOffsetParsed() as being true
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,812,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,813,chrono = chrono.withZone(bucket.getZone());
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,842,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,849,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,853,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,854,chrono = chrono.withZone(bucket.getZone());
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,847,"eturn new DateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,856,"DateTime dt = new DateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,857,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,858,dt = dt.withZone(iZone);
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,860,return dt;
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,881,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,894,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,898,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,899,chrono = chrono.withZone(bucket.getZone());
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,901,"MutableDateTime dt = new MutableDateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,902,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,903,dt.setZone(iZone);
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,886,"eturn new MutableDateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,905,return dt;
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,996, This field cannot currently be parsed.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,996,"* From version 2.0, this field can be parsed."
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1001,"eturn append0(new TimeZoneName(TimeZoneName.ID), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1001,"return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2405,tatic final int ID = 2;
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2439,ase ID:
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2440,eturn displayZone.getID();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2452,static enum TimeZoneId
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2453,"implements DateTimePrinter, DateTimeParser {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2455,INSTANCE;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2456,static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2457,static final int MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2458,static {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2459,int max = 0;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2460,for (String id : ALL_IDS) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2461,"max = Math.max(max, id.length());"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2463,MAX_LENGTH = max;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2466,public int estimatePrintedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2467,return MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2470,public void printTo(
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2471,"StringBuffer buf, long instant, Chronology chrono,"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2472,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2473,"buf.append(displayZone != null ? displayZone.getID() : """");"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2476,public void printTo(
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2477,"Writer out, long instant, Chronology chrono,"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2478,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2479,"out.write(displayZone != null ? displayZone.getID() : """");"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2482,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2483,// no zone info
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2486,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,// no zone info
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2490,public int estimateParsedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2491,return MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2494,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2495,String str = text.substring(position);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2496,for (String id : ALL_IDS) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2497,if (str.startsWith(id)) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2498,bucket.setZone(DateTimeZone.forID(id));
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2499,return position + id.length();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2502,return ~position;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,63,rivate int iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,63,private Integer iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,121,iZone = chrono.getZone();
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,123,etZone(chrono.getZone());
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,148," Returns the time zone used by computeMillis, or null if an offset is"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,149, used instead.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,148,* Returns the time zone used by computeMillis.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,156," Set a time zone to be used when computeMillis is called, which"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,157, overrides any set time zone offset.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,155,* Set a time zone to be used when computeMillis is called.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,159," @param zone the date time zone to operate in, or null if UTC"
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,157,"* @param zone the date time zone to operate in, not null"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,163,Zone = zone == DateTimeZone.UTC ? null : zone;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,164,Offset = 0;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,161,iZone = zone;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,169," Returns the time zone offset in milliseconds used by computeMillis,"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,170, unless getZone doesn't return null.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,166,* Returns the time zone offset in milliseconds used by computeMillis.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,172,ublic int getOffset() {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,168,public Integer getOffset() {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,177," Set a time zone offset to be used when computeMillis is called, which"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,178, overrides the time zone.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,173,* Set a time zone offset to be used when computeMillis is called.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,180,ublic void setOffset(int offset) {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,175,public void setOffset(Integer offset) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,183,Zone = null;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,367,f (iZone == null) {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,361,if (iOffset != null) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,369, else {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,363,} else if (iZone != null) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,419,inal int iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,413,final Integer iOffset;
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,23,import org.joda.time.DateTimeZone;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,24,import org.joda.time.LocalDateTime;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,212,public void test_appendTimeZoneId() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,213,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,214,bld.appendTimeZoneId();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,215,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,217,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,218,"assertEquals(""Asia/Tokyo"", f.print(new DateTime(2007, 3, 4, 0, 0, 0, zone)));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,219,"assertEquals(zone, f.parseDateTime(""Asia/Tokyo"").getZone());"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,220,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,221,"f.parseDateTime(""Nonsense"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,222,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,223,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,227,public void test_printParseZoneTokyo() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,228,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,229,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,230,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,232,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,233,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,234,"assertEquals(""2007-03-04 12:30 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,235,"assertEquals(dt, f.parseDateTime(""2007-03-04 12:30 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,238,public void test_printParseZoneParis() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,239,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,240,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,241,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,243,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,244,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,245,"assertEquals(""2007-03-04 12:30 Europe/Paris"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,246,"assertEquals(dt, f.parseDateTime(""2007-03-04 12:30 Europe/Paris""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,247,"assertEquals(dt, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 Europe/Paris""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,250,public void test_printParseOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,251,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,252,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,253,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,255,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,256,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,257,"assertEquals(""2007-03-04 12:30 +09:00"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,258,"assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,259,"assertEquals(dt, f.withZone(zone).parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,260,"assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,263,public void test_printParseOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,264,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,265,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,266,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,268,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,269,"DateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,270,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,271,"assertEquals(""2007-03-04 12:30 +09:00 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,272,"assertEquals(dt, f.withZone(zone).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,273,"assertEquals(dt.withZone(paris), f.withZone(paris).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,274,"assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,277,public void test_parseWrongOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,278,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,279,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,280,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,282,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,283,"DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,284,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,285,"assertEquals(expected.withZone(zone), f.withZone(zone).parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,286,// parses offset time returning offset zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,287,"assertEquals(expected, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,288,// parses offset time then converts to default zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,289,"assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,292,public void test_parseWrongOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,293,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,294,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,295,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,297,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,298,"DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,299,// parses offset time then adjusts to parsed zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,300,"assertEquals(expected.withZone(zone), f.parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,301,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,302,"assertEquals(expected.withZone(zone), f.withZone(zone).parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,303,// parses offset time returning offset zone (ignores zone)
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,304,"assertEquals(expected, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,308,public void test_localPrintParseZoneTokyo() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,309,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,310,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,311,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,313,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,314,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,315,"assertEquals(""2007-03-04 12:30 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,317,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,318,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,321,public void test_localPrintParseOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,322,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,323,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,324,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,326,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,327,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,328,"assertEquals(""2007-03-04 12:30 +09:00"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,330,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,331,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,332,"assertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,333,"assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,336,public void test_localPrintParseOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,337,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,338,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,339,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,341,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,342,"DateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,343,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, zone);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,344,"assertEquals(""2007-03-04 12:30 +09:00 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,346,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,347,"assertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,348,"assertEquals(expected, f.withZone(paris).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,351,public void test_localParseWrongOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,352,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,353,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,354,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,356,"DateTimeZone zone = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,357,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,358,// parses offset time then adjusts to parsed zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,359,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,360,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,361,"assertEquals(expected, f.withZone(zone).parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,362,// parses offset time returning offset zone (ignores zone)
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,363,"assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"

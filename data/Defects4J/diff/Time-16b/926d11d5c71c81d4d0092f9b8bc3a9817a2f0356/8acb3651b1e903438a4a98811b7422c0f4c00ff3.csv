is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,75,suite.addTest(TestDateTime_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,76,suite.addTest(TestDateTime_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,77,suite.addTest(TestDateTime_Properties.suite());
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,77,uite.addTest(TestParseISO.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,80,suite.addTest(TestInstant_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,81,suite.addTest(TestInstant_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,82,//        suite.addTest(TestParseISO.suite());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,60,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,61,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,62,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,63,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,64,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,66,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,67,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,69,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,70,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,73,* This class is a Junit unit test for DateTime.
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,75,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,77,public class TestDateTime_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,79,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,80,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,82,// 1970-06-09
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,83,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,84,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,86,// 1970-04-05
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,87,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,88,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,89,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,90,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,92,// 1971-05-06
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,93,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,94,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,95,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,96,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,98,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,99,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,101,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,102,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,105,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,106,return new TestSuite(TestDateTime_Basics.class);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,109,public TestDateTime_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,110,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,113,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,114,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,115,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,116,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,117,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,118,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,121,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,122,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,123,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,124,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,125,zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,129,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,130,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,131,"assertEquals(1, test.get(ISOChronology.getInstance().era()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,132,"assertEquals(19, test.get(ISOChronology.getInstance().centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,133,"assertEquals(70, test.get(ISOChronology.getInstance().yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,134,"assertEquals(1970, test.get(ISOChronology.getInstance().yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,135,"assertEquals(1970, test.get(ISOChronology.getInstance().year()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,136,"assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,137,"assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,138,"assertEquals(1970, test.get(ISOChronology.getInstance().weekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,139,"assertEquals(24, test.get(ISOChronology.getInstance().weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,140,"assertEquals(2, test.get(ISOChronology.getInstance().dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,141,"assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,142,"assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,143,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,144,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,145,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,146,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,147,"assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,148,"assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,149,"assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,150,"assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,151,"assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,152,"assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,153,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,154,test.get(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,155,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,156,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,159,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,160,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,162,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,163,"assertEquals(LONDON, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,164,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,166,"assertEquals(1, test.getEra());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,167,"assertEquals(19, test.getCenturyOfEra());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,168,"assertEquals(70, test.getYearOfCentury());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,169,"assertEquals(1970, test.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,170,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,171,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,172,"assertEquals(9, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,173,"assertEquals(1970, test.getWeekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,174,"assertEquals(24, test.getWeekOfWeekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,175,"assertEquals(2, test.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,176,"assertEquals(160, test.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,177,"assertEquals(1, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,178,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,179,"assertEquals(60, test.getMinuteOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,180,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,181,"assertEquals(60 * 60, test.getSecondOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,182,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,183,"assertEquals(60 * 60 * 1000, test.getMillisOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,186,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,187,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,188,DateTime test2 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,189,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,190,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,191,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,192,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,193,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,194,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,195,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,197,DateTime test3 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,198,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,199,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,200,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,201,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,202,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,203,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,205,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,206,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,207,"assertEquals(false, test1.equals(new DateTime(TEST_TIME1, GregorianChronology.getInstance())));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,210,class MockInstant extends AbstractInstant {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,211,public String toString() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,212,return null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,214,public long getMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,215,return TEST_TIME1;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,217,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,218,return ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,222,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,223,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,224,DateTime test1a = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,225,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,226,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,227,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,228,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,230,DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,231,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,232,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,234,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,235,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,236,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,237,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,239,"assertEquals(+1, test2.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,240,"assertEquals(0, test1.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,242,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,243,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,244,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,245,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,246,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,247,test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,248,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,249,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,252,public void testIsEqual() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,253,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,254,DateTime test1a = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,255,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,256,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,257,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,258,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,260,DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,261,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,262,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,264,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,265,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,266,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,267,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,269,"assertEquals(false, test2.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,270,"assertEquals(true, test1.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,271,"assertEquals(false, test1.isEqual(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,274,public void testIsBefore() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,275,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,276,DateTime test1a = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,277,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,278,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,279,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,280,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,282,DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,283,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,284,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,286,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,287,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,288,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,289,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,291,"assertEquals(false, test2.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,292,"assertEquals(false, test1.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,293,"assertEquals(false, test1.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,296,public void testIsAfter() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,297,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,298,DateTime test1a = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,299,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,300,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,301,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,302,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,304,DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,305,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,306,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,308,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,309,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,310,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,311,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,313,"assertEquals(true, test2.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,314,"assertEquals(false, test1.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,315,"assertEquals(false, test1.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,319,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,320,DateTime test = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,322,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,323,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,324,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,325,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,326,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,328,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,329,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,330,DateTime result = (DateTime) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,331,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,333,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,337,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,338,DateTime test = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,339,"assertEquals(""1970-06-09T01:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,341,"test = new DateTime(TEST_TIME_NOW, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,342,"assertEquals(""1970-06-09T02:00:00.000+02:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,345,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,346,DateTime test = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,347,"assertEquals(""1970 01"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,348,"assertEquals(""1970-06-09T01:00:00.000+01:00"", test.toString(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,351,public void testToString_String_String() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,352,DateTime test = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,353,"assertEquals(""Tue 9/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,354,"assertEquals(""mar. 9/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,355,"assertEquals(""1970-06-09T01:00:00.000+01:00"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,356,"assertEquals(""Tue 9/6"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,357,"assertEquals(""1970-06-09T01:00:00.000+01:00"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,361,public void testToInstant() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,362,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,363,Instant result = test.toInstant();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,364,"assertEquals(TEST_TIME1, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,367,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,368,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,369,DateTime result = test.toDateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,370,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,373,public void testToDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,374,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,375,DateTime result = test.toDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,376,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,378,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,379,result = test.toDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,380,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,381,"assertEquals(PARIS, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,383,"test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,384,result = test.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,385,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,386,"assertEquals(LONDON, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,388,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,389,result = test.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,390,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,393,public void testToDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,394,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,395,DateTime result = test.toDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,396,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,398,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,399,result = test.toDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,400,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,401,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,403,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,404,result = test.toDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,405,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,406,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,408,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,409,result = test.toDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,410,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,413,public void testToTrustedISODateTime() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,414,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,415,DateTime result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,416,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,417,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,418,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,420,test = new MockUntrustedDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,421,result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,422,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,423,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,424,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,425,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,427,"test = new DateTime(TEST_TIME1, new MockUntrustedZone(""Europe/Paris""));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,428,result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,429,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,430,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,431,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,432,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,435,static class MockUntrustedDateTime extends DateTime {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,436,MockUntrustedDateTime(long millis) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,437,super(millis);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,441,static class MockUntrustedZone extends DateTimeZone {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,442,MockUntrustedZone(String id) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,443,super(id);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,445,public String getNameKey(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,446,return null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,448,public int getOffset(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,449,return 60 * 60 * 1000;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,451,public int getStandardOffset(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,452,return 60 * 60 * 1000;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,454,public boolean isFixed() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,455,return true;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,457,public long nextTransition(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,458,return 0;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,460,public long previousTransition(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,461,return 0;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,463,public boolean equals(Object object) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,464,return false;
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,468,public void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,469,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,470,MutableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,471,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,472,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,475,public void testToMutableDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,476,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,477,MutableDateTime result = test.toMutableDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,478,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,479,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,481,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,482,result = test.toMutableDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,483,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,484,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,486,"test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,487,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,488,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,489,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,491,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,492,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,493,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,494,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,497,public void testToMutableDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,498,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,499,MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,500,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,501,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,503,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,504,result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,505,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,506,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,508,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,509,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,510,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,511,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,513,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,514,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,515,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,516,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,519,public void testToDate() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,520,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,521,Date result = test.toDate();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,522,"assertEquals(test.getMillis(), result.getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,525,public void testToCalendar_Locale() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,526,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,527,Calendar result = test.toCalendar(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,528,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,529,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,531,"test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,532,result = test.toCalendar(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,533,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,534,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,536,"test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,537,result = test.toCalendar(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,538,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,539,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,542,public void testToGregorianCalendar() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,543,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,544,GregorianCalendar result = test.toGregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,545,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,546,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,548,"test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,549,result = test.toGregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,550,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,551,"assertEquals(TimeZone.getTimeZone(""Europe/Paris""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,555,public void testWithMillis_long() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,556,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,557,DateTime result = test.withMillis(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,558,"assertEquals(TEST_TIME2, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,559,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,561,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,562,result = test.withMillis(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,563,"assertEquals(TEST_TIME2, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,564,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,566,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,567,result = test.withMillis(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,568,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,571,public void testWithChronology_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,572,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,573,DateTime result = test.withChronology(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,574,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,575,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,577,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,578,result = test.withChronology(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,579,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,580,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,582,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,583,result = test.withChronology(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,584,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,585,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,587,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,588,result = test.withChronology(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,589,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,592,public void testWithZone_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,593,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,594,DateTime result = test.withZone(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,595,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,596,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,598,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,599,result = test.withZone(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,600,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,601,"assertEquals(GregorianChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,603,test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,604,result = test.withZone(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,605,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,608,public void testWithZoneRetainFields_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,609,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,610,DateTime result = test.withZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,611,"assertEquals(test.getMillis() - 60 * 60 * 1000, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,612,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,614,"test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,615,result = test.withZoneRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,616,"assertEquals(test.getMillis() - 60 * 60 * 1000, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,617,"assertEquals(GregorianChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,620,public void testImmutable() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,621,MockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,622,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,623,test.testSetMillis();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,624,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,626,test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,627,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,628,test.testSetMillisObject();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,629,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,631,test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,632,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,633,test.testSetChronology();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,634,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,636,test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,637,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,638,test.testSetZone();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,639,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,641,test = new MockChangeDateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,642,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,643,test.testSetZoneRetainFields();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,644,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,647,static class MockChangeDateTime extends DateTime {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,648,MockChangeDateTime(long instant) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,649,super(instant);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,651,public void testSetMillis() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,652,setMillis(0L);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,654,public void testSetMillisObject() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,655,setMillis(new Date(0L));
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,657,public void testSetChronology() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,658,setChronology(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,660,public void testSetZone() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,661,setZone(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,663,public void testSetZoneRetainFields() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,664,setZoneRetainFields(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,62,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,64,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,65,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,68,* This class is a Junit unit test for DateTime.
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,70,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,72,public class TestDateTime_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,74,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,75,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,77,// 1970-06-09
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,78,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,79,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,81,// 1970-04-05
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,82,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,83,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,84,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,85,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,87,// 1971-05-06
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,88,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,89,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,90,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,91,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,93,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,94,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,96,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,97,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,100,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,101,return new TestSuite(TestDateTime_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,104,public TestDateTime_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,105,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,108,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,109,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,110,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,111,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,112,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,113,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,116,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,117,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,118,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,119,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,120,zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,125,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,127,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,128,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,129,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,130,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,134,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,136,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,137,DateTime test = new DateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,138,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,139,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,143,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,145,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,146,DateTime test = new DateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,147,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,148,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,152,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,154,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,155,DateTime test = new DateTime(GregorianChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,156,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,157,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,161,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,163,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,164,DateTime test = new DateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,165,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,166,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,171,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,173,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,174,DateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,175,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,176,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,180,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,182,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,183,DateTime test = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,184,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,185,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,189,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,191,public void testConstructor_long1_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,192,"DateTime test = new DateTime(TEST_TIME1, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,193,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,194,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,198,"* Test constructor (long, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,200,public void testConstructor_long2_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,201,"DateTime test = new DateTime(TEST_TIME2, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,202,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,203,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,207,"* Test constructor (long, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,209,public void testConstructor_long_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,210,"DateTime test = new DateTime(TEST_TIME1, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,211,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,212,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,216,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,218,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,219,"DateTime test = new DateTime(TEST_TIME1, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,220,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,221,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,225,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,227,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,228,"DateTime test = new DateTime(TEST_TIME2, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,229,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,230,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,234,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,236,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,237,"DateTime test = new DateTime(TEST_TIME1, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,238,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,239,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,244,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,246,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,247,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,248,DateTime test = new DateTime(date);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,249,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,250,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,254,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,256,public void testConstructor_invalidObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,257,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,258,new DateTime(new Object());
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,259,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,260,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,264,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,266,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,267,DateTime test = new DateTime((Object) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,268,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,269,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,273,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,275,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,276,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,277,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,278,DateTime test = new DateTime(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,279,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,280,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,281,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,282,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,287,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,289,public void testConstructor_Object_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,290,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,291,"DateTime test = new DateTime(date, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,292,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,293,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,297,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,299,public void testConstructor_invalidObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,300,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,301,"new DateTime(new Object(), PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,302,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,303,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,307,"* Test constructor (Object=null, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,309,public void testConstructor_nullObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,310,"DateTime test = new DateTime((Object) null, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,311,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,312,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,316,"* Test constructor (Object, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,318,public void testConstructor_Object_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,319,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,320,"DateTime test = new DateTime(date, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,321,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,322,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,326,"* Test constructor (Object=null, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,328,public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,329,"DateTime test = new DateTime((Object) null, (DateTimeZone) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,330,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,331,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,335,"* Test constructor (Object, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,337,public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,338,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,339,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,340,"DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,341,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,342,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,343,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,344,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,349,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,351,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,352,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,353,"DateTime test = new DateTime(date, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,354,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,355,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,359,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,361,public void testConstructor_invalidObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,362,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,363,"new DateTime(new Object(), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,364,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,369,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,371,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,372,"DateTime test = new DateTime((Object) null, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,373,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,374,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,378,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,380,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,381,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,382,"DateTime test = new DateTime(date, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,383,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,384,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,388,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,390,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,391,"DateTime test = new DateTime((Object) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,392,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,393,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,397,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,399,public void testConstructor_badconverterObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,400,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,401,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,402,"DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,403,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,404,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,405,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,406,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,412,"* Test constructor (int, int, int)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,414,public void testConstructor_int_int_int_int_int_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,415,"DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,416,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,417,"assertEquals(LONDON, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,418,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,419,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,420,"new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,421,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,422,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,423,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,424,"new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,425,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,426,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,427,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,428,"new DateTime(1970, 0, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,429,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,430,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,431,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,432,"new DateTime(1970, 13, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,433,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,434,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,435,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,436,"new DateTime(1970, 6, 0, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,437,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,438,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,439,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,440,"new DateTime(1970, 6, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,441,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,442,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,443,"new DateTime(1970, 7, 31, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,444,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,445,"new DateTime(1970, 7, 32, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,446,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,447,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,451,"* Test constructor (int, int, int, DateTimeZone)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,453,public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,454,"DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, PARIS);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,455,"assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,456,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,457,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,458,"new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,459,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,460,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,461,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,462,"new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,463,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,464,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,465,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,466,"new DateTime(1970, 0, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,467,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,468,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,469,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,470,"new DateTime(1970, 13, 9, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,471,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,472,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,473,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,474,"new DateTime(1970, 6, 0, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,475,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,476,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,477,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,478,"new DateTime(1970, 6, 31, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,479,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,480,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,481,"new DateTime(1970, 7, 31, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,482,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,483,"new DateTime(1970, 7, 32, 0, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,484,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,485,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,489,"* Test constructor (int, int, int, DateTimeZone=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,491,public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,492,"DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,493,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,494,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,498,"* Test constructor (int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,500,public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,501,"DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,502,"assertEquals(GregorianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,503,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,504,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,505,"new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,506,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,507,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,508,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,509,"new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,510,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,511,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,512,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,513,"new DateTime(1970, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,514,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,515,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,516,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,517,"new DateTime(1970, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,518,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,519,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,520,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,521,"new DateTime(1970, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,522,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,523,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,524,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,525,"new DateTime(1970, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,526,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,527,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,528,"new DateTime(1970, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,529,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,530,"new DateTime(1970, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,531,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,532,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,536,"* Test constructor (int, int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,538,public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,539,"DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,540,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,541,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,58,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,59,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,62,* This class is a Junit unit test for DateTime.
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,64,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,66,public class TestDateTime_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,68,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,69,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,71,// 1970-06-09
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,72,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,73,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,75,// 1970-04-05
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,76,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,77,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,78,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,79,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,81,// 1971-05-06
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,82,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,83,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,84,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,85,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,87,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,88,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,90,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,91,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,94,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,95,return new TestSuite(TestDateTime_Properties.class);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,98,public TestDateTime_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,99,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,102,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,103,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,104,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,105,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,107,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,110,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,111,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,112,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,113,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,114,zone = null;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,118,public void testPropertyGetYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,119,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,120,"assertSame(test.getChronology().year(), test.year().getField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,121,"assertEquals(""year"", test.year().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,122,"assertEquals(""Property[year]"", test.year().toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,123,"assertSame(test, test.year().getInstant());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,124,"assertSame(test, test.year().getDateTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,125,"assertEquals(1972, test.year().get());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,126,"assertEquals(""1972"", test.year().getAsText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,127,"assertEquals(""1972"", test.year().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,128,"assertEquals(""1972"", test.year().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,129,"assertEquals(""1972"", test.year().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,130,"assertEquals(test.getChronology().years(), test.year().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,131,"assertEquals(null, test.year().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,132,"assertEquals(9, test.year().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,133,"assertEquals(9, test.year().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,136,public void testPropertyGetMaxMinValuesYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,137,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,138,"assertEquals(-292275054, test.year().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,139,"assertEquals(-292275054, test.year().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,140,"assertEquals(292277023, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,141,"assertEquals(292277023, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,144,public void testPropertyAddYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,145,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,146,DateTime copy = test.year().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,147,"assertEquals(""1972-06-09T00:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,148,"assertEquals(""1981-06-09T00:00:00.000+01:00"", copy.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,150,copy = test.year().addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,151,"assertEquals(""1972-06-09T00:00:00.000+01:00"", copy.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,153,copy = test.year().addToCopy(292277023 - 1972);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,154,"assertEquals(292277023, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,156,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,157,test.year().addToCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,158,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,159,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,161,copy = test.year().addToCopy(-1972);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,162,"assertEquals(0, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,164,copy = test.year().addToCopy(-1973);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,165,"assertEquals(-1, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,167,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,168,test.year().addToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,169,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,170,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,173,public void testPropertyAddInFieldYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,174,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,175,DateTime copy = test.year().addWrappedToCopy(9);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,176,"assertEquals(""1972-06-09T00:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,177,"assertEquals(""1981-06-09T00:00:00.000+01:00"", copy.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,179,copy = test.year().addWrappedToCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,180,"assertEquals(1972, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,182,copy = test.year().addWrappedToCopy(292277023 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,183,"assertEquals(-292275054, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,185,copy = test.year().addWrappedToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,186,"assertEquals(292277023, copy.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,189,public void testPropertySetYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,190,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,191,DateTime copy = test.year().setCopy(1960);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,192,"assertEquals(""1972-06-09T00:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,193,"assertEquals(""1960-06-09T00:00:00.000+01:00"", copy.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,196,public void testPropertySetTextYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,197,"DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,198,"DateTime copy = test.year().setCopy(""1960"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,199,"assertEquals(""1972-06-09T00:00:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,200,"assertEquals(""1960-06-09T00:00:00.000+01:00"", copy.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,203,public void testPropertyCompareToYear() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,204,DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,205,DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,206,"assertEquals(true, test1.year().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,207,"assertEquals(true, test2.year().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,208,"assertEquals(true, test1.year().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,209,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,210,test1.year().compareTo(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,211,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,212,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,216,//    public void testPropertyGetMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,217,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,218,"//        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,219,"//        assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,220,"//        assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,221,"//        assertSame(test, test.monthOfYear().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,222,"//        assertSame(test, test.monthOfYear().getDateTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,223,"//        assertEquals(6, test.monthOfYear().get());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,224,"//        assertEquals(""June"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,225,"//        assertEquals(""juin"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,226,"//        assertEquals(""Jun"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,227,"//        assertEquals(""juin"", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,228,"//        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,229,"//        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,230,"//        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,231,"//        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,232,"//        test = new DateTime(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,233,"//        assertEquals(""juillet"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,234,"//        assertEquals(""juil."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,237,//    public void testPropertyGetMaxMinValuesMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,238,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,239,"//        assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,240,"//        assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,241,"//        assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,242,"//        assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,245,//    public void testPropertyAddMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,246,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,247,//        DateTime copy = test.monthOfYear().addCopy(6);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,248,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,249,"//        check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,251,//        copy = test.monthOfYear().addCopy(7);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,252,"//        check(copy, 1973, 1, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,254,//        copy = test.monthOfYear().addCopy(-5);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,255,"//        check(copy, 1972, 1, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,257,//        copy = test.monthOfYear().addCopy(-6);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,258,"//        check(copy, 1971, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,260,"//        test = new DateTime(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,261,//        copy = test.monthOfYear().addCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,262,"//        check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,264,//        copy = test.monthOfYear().addCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,265,"//        check(copy, 1972, 3, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,267,//        copy = test.monthOfYear().addCopy(3);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,268,"//        check(copy, 1972, 4, 30);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,270,"//        test = new DateTime(1971, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,271,//        copy = test.monthOfYear().addCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,272,"//        check(copy, 1971, 2, 28);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,275,//    public void testPropertyAddInFieldMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,276,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,277,//        DateTime copy = test.monthOfYear().addWrappedToCopy(4);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,278,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,279,"//        check(copy, 1972, 10, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,281,//        copy = test.monthOfYear().addWrappedToCopy(8);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,282,"//        check(copy, 1972, 2, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,284,//        copy = test.monthOfYear().addWrappedToCopy(-8);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,285,"//        check(copy, 1972, 10, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,287,"//        test = new DateTime(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,288,//        copy = test.monthOfYear().addWrappedToCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,289,"//        check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,291,//        copy = test.monthOfYear().addWrappedToCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,292,"//        check(copy, 1972, 3, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,294,//        copy = test.monthOfYear().addWrappedToCopy(3);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,295,"//        check(copy, 1972, 4, 30);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,297,"//        test = new DateTime(1971, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,298,//        copy = test.monthOfYear().addWrappedToCopy(1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,299,"//        check(copy, 1971, 2, 28);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,302,//    public void testPropertySetMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,303,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,304,//        DateTime copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,305,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,306,"//        check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,308,"//        test = new DateTime(1972, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,309,//        copy = test.monthOfYear().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,310,"//        check(copy, 1972, 2, 29);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,312,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,313,//            test.monthOfYear().setCopy(13);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,314,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,315,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,316,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,317,//            test.monthOfYear().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,318,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,319,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,322,//    public void testPropertySetTextMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,323,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,324,"//        DateTime copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,325,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,326,"//        check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,328,"//        copy = test.monthOfYear().setCopy(""December"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,329,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,330,"//        check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,332,"//        copy = test.monthOfYear().setCopy(""Dec"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,333,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,334,"//        check(copy, 1972, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,337,//    public void testPropertyCompareToMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,338,//        DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,339,//        DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,340,"//        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,341,"//        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,342,"//        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,343,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,344,//            test1.monthOfYear().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,345,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,346,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,348,//        DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,349,//        DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,350,"//        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,351,"//        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,352,"//        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,353,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,354,//            test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,355,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,356,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,360,//    public void testPropertyGetDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,361,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,362,"//        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,363,"//        assertEquals(""dayOfMonth"", test.dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,364,"//        assertEquals(""Property[dayOfMonth]"", test.dayOfMonth().toString());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,365,"//        assertSame(test, test.dayOfMonth().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,366,"//        assertSame(test, test.dayOfMonth().getDateTime());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,367,"//        assertEquals(9, test.dayOfMonth().get());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,368,"//        assertEquals(""9"", test.dayOfMonth().getAsText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,369,"//        assertEquals(""9"", test.dayOfMonth().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,370,"//        assertEquals(""9"", test.dayOfMonth().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,371,"//        assertEquals(""9"", test.dayOfMonth().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,372,"//        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,373,"//        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,374,"//        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,375,"//        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,378,//    public void testPropertyGetMaxMinValuesDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,379,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,380,"//        assertEquals(1, test.dayOfMonth().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,381,"//        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,382,"//        assertEquals(30, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,383,"//        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,384,"//        test = new DateTime(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,385,"//        assertEquals(31, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,386,"//        test = new DateTime(1972, 2, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,387,"//        assertEquals(29, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,388,"//        test = new DateTime(1971, 2, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,389,"//        assertEquals(28, test.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,392,//    public void testPropertyAddDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,393,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,394,//        DateTime copy = test.dayOfMonth().addCopy(9);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,395,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,396,"//        check(copy, 1972, 6, 18);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,398,//        copy = test.dayOfMonth().addCopy(21);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,399,"//        check(copy, 1972, 6, 30);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,401,//        copy = test.dayOfMonth().addCopy(22);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,402,"//        check(copy, 1972, 7, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,404,//        copy = test.dayOfMonth().addCopy(22 + 30);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,405,"//        check(copy, 1972, 7, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,407,//        copy = test.dayOfMonth().addCopy(22 + 31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,408,"//        check(copy, 1972, 8, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,410,//        copy = test.dayOfMonth().addCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,411,"//        check(copy, 1972, 12, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,413,//        copy = test.dayOfMonth().addCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,414,"//        check(copy, 1973, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,416,//        copy = test.dayOfMonth().addCopy(-8);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,417,"//        check(copy, 1972, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,419,//        copy = test.dayOfMonth().addCopy(-9);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,420,"//        check(copy, 1972, 5, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,422,//        copy = test.dayOfMonth().addCopy(-8 - 31 - 30 - 31 - 29 - 31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,423,"//        check(copy, 1972, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,425,//        copy = test.dayOfMonth().addCopy(-9 - 31 - 30 - 31 - 29 - 31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,426,"//        check(copy, 1971, 12, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,429,//    public void testPropertyAddInFieldDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,430,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,431,//        DateTime copy = test.dayOfMonth().addWrappedToCopy(21);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,432,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,433,"//        check(copy, 1972, 6, 30);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,435,//        copy = test.dayOfMonth().addWrappedToCopy(22);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,436,"//        check(copy, 1972, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,438,//        copy = test.dayOfMonth().addWrappedToCopy(-12);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,439,"//        check(copy, 1972, 6, 27);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,441,"//        test = new DateTime(1972, 7, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,442,//        copy = test.dayOfMonth().addWrappedToCopy(21);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,443,"//        check(copy, 1972, 7, 30);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,445,//        copy = test.dayOfMonth().addWrappedToCopy(22);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,446,"//        check(copy, 1972, 7, 31);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,448,//        copy = test.dayOfMonth().addWrappedToCopy(23);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,449,"//        check(copy, 1972, 7, 1);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,451,//        copy = test.dayOfMonth().addWrappedToCopy(-12);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,452,"//        check(copy, 1972, 7, 28);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,455,//    public void testPropertySetDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,456,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,457,//        DateTime copy = test.dayOfMonth().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,458,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,459,"//        check(copy, 1972, 6, 12);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,461,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,462,//            test.dayOfMonth().setCopy(31);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,463,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,464,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,465,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,466,//            test.dayOfMonth().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,467,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,468,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,471,//    public void testPropertySetTextDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,472,"//        DateTime test = new DateTime(1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,473,"//        DateTime copy = test.dayOfMonth().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,474,"//        check(test, 1972, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,475,"//        check(copy, 1972, 6, 12);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,478,//    public void testPropertyCompareToDay() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,479,//        DateTime test1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,480,//        DateTime test2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,481,"//        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,482,"//        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,483,"//        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,484,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,485,//            test1.dayOfMonth().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,486,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,487,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,489,//        DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,490,//        DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,491,"//        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,492,"//        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,493,"//        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,494,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,495,//            test1.dayOfMonth().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,496,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,497,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,501,"//    private void check(DateTime test, int hour, int min, int sec) {"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,502,"//        assertEquals(hour, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,503,"//        assertEquals(min, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,504,"//        assertEquals(sec, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,60,import java.lang.reflect.Modifier;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,61,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,62,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,63,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,64,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,65,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,67,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,68,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,70,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,71,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,74,* This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,76,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,78,public class TestInstant_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,80,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,81,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,83,// 1970-06-09
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,84,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,85,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,87,// 1970-04-05
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,88,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,89,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,90,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,91,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,93,// 1971-05-06
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,94,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,95,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,96,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,97,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,99,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,100,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,102,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,103,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,106,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,107,return new TestSuite(TestInstant_Basics.class);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,110,public TestInstant_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,111,super(name);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,114,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,115,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,116,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,117,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,118,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,119,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,122,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,123,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,124,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,125,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,126,zone = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,130,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,131,Instant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,132,"assertEquals(1, test.get(ISOChronology.getInstance().era()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,133,"assertEquals(19, test.get(ISOChronology.getInstance().centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,134,"assertEquals(70, test.get(ISOChronology.getInstance().yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,135,"assertEquals(1970, test.get(ISOChronology.getInstance().yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,136,"assertEquals(1970, test.get(ISOChronology.getInstance().year()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,137,"assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,138,"assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,139,"assertEquals(1970, test.get(ISOChronology.getInstance().weekyear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,140,"assertEquals(24, test.get(ISOChronology.getInstance().weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,141,"assertEquals(2, test.get(ISOChronology.getInstance().dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,142,"assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,143,"assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,144,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,145,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,146,"assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,147,"assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,148,"assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,149,"assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,150,"assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,151,"assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,152,"assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,153,"assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,154,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,155,test.get(null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,156,fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,157,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,160,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,161,Instant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,163,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,164,"assertEquals(null, test.getZone());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,165,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,168,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,169,Instant test1 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,170,Instant test2 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,171,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,172,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,173,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,174,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,175,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,176,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,177,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,179,Instant test3 = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,180,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,181,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,182,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,183,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,184,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,185,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,187,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,188,"assertEquals(true, test1.equals(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,189,"assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,192,class MockInstant extends AbstractInstant {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,193,public String toString() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,194,return null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,196,public long getMillis() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,197,return TEST_TIME1;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,199,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,200,return null;
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,204,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,205,Instant test1 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,206,Instant test1a = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,207,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,208,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,209,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,210,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,212,Instant test2 = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,213,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,214,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,216,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,217,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,218,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,219,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,221,"assertEquals(+1, test2.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,222,"assertEquals(0, test1.compareTo(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,224,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,225,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,226,fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,227,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,228,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,229,test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,230,fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,231,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,234,public void testIsEqual() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,235,Instant test1 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,236,Instant test1a = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,237,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,238,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,239,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,240,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,242,Instant test2 = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,243,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,244,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,246,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,247,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,248,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,249,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,251,"assertEquals(false, test2.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,252,"assertEquals(true, test1.isEqual(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,253,"assertEquals(false, test1.isEqual(null));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,256,public void testIsBefore() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,257,Instant test1 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,258,Instant test1a = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,259,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,260,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,261,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,262,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,264,Instant test2 = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,265,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,266,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,268,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,269,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,270,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,271,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,273,"assertEquals(false, test2.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,274,"assertEquals(false, test1.isBefore(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,275,"assertEquals(false, test1.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,278,public void testIsAfter() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,279,Instant test1 = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,280,Instant test1a = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,281,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,282,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,283,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,284,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,286,Instant test2 = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,287,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,288,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,290,"DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,291,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,292,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,293,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,295,"assertEquals(true, test2.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,296,"assertEquals(false, test1.isAfter(new MockInstant()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,297,"assertEquals(false, test1.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,301,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,302,Instant test = new Instant(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,304,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,305,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,306,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,307,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,308,oos.close();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,310,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,311,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,312,Instant result = (Instant) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,313,ois.close();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,315,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,319,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,320,Instant test = new Instant(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,321,"assertEquals(""1970-06-09T00:00:00.000Z"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,325,public void testToInstant() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,326,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,327,Instant result = test.toInstant();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,328,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,331,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,332,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,333,DateTime result = test.toDateTime();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,334,"assertEquals(TEST_TIME1, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,337,public void testToDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,338,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,339,DateTime result = test.toDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,340,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,341,"assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,343,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,344,result = test.toDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,345,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,346,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,348,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,349,result = test.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,350,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,351,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,354,public void testToDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,355,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,356,DateTime result = test.toDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,357,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,358,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,360,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,361,result = test.toDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,362,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,363,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,365,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,366,result = test.toDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,367,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,370,public void testToTrustedISODateTime() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,371,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,372,DateTime result = test.toTrustedISODateTime();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,373,"assertSame(DateTime.class, result.getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,374,"assertSame(ISOChronology.class, result.getChronology().getClass());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,375,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,376,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,379,public void testToMutableDateTime() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,380,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,381,MutableDateTime result = test.toMutableDateTime();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,382,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,383,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,386,public void testToMutableDateTime_DateTimeZone() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,387,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,388,MutableDateTime result = test.toMutableDateTime(LONDON);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,389,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,390,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,392,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,393,result = test.toMutableDateTime(PARIS);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,394,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,395,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,397,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,398,result = test.toMutableDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,399,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,400,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,403,public void testToMutableDateTime_Chronology() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,404,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,405,MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,406,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,407,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,409,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,410,result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,411,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,412,"assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,414,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,415,result = test.toMutableDateTime((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,416,"assertEquals(test.getMillis(), result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,417,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,420,public void testToDate() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,421,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,422,Date result = test.toDate();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,423,"assertEquals(test.getMillis(), result.getTime());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,426,public void testToCalendar_Locale() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,427,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,428,Calendar result = test.toCalendar(null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,429,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,430,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,432,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,433,result = test.toCalendar(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,434,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,435,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,438,public void testToGregorianCalendar() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,439,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,440,GregorianCalendar result = test.toGregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,441,"assertEquals(test.getMillis(), result.getTime().getTime());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,442,"assertEquals(TimeZone.getTimeZone(""Europe/London""), result.getTimeZone());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,446,public void testWithMillis_long() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,447,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,448,Instant result = test.withMillis(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,449,"assertEquals(TEST_TIME2, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,450,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,452,test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,453,result = test.withMillis(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,454,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,457,public void testImmutable() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,458,assertTrue(Modifier.isFinal(Instant.class.getModifiers()));
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,56,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,57,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,62,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,63,import org.joda.time.convert.MockZeroNullIntegerConverter;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,66,* This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,68,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,70,public class TestInstant_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,72,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,73,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,75,// 1970-06-09
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,76,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,77,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,79,// 1970-04-05
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,80,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,81,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,82,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,83,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,85,// 1971-05-06
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,86,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,87,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,88,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,89,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,91,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,92,private Locale locale = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,94,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,95,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,98,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,99,return new TestSuite(TestInstant_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,102,public TestInstant_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,103,super(name);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,106,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,107,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,108,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,109,locale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,110,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,111,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,114,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,115,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,116,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,117,Locale.setDefault(locale);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,118,zone = null;
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,123,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,125,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,126,Instant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,127,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,128,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,133,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,135,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,136,Instant test = new Instant(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,137,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,138,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,142,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,144,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,145,Instant test = new Instant(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,146,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,147,"assertEquals(TEST_TIME2, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,152,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,154,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,155,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,156,Instant test = new Instant(date);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,157,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,158,"assertEquals(TEST_TIME1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,162,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,164,public void testConstructor_invalidObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,165,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,166,new Instant(new Object());
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,167,fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,168,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,172,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,174,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,175,Instant test = new Instant((Object) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,176,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,177,"assertEquals(TEST_TIME_NOW, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,181,* Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,183,public void testConstructor_badconverterObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,184,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,185,ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,186,Instant test = new Instant(new Integer(0));
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,187,"assertEquals(null, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,188,"assertEquals(0L, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,189,} finally {
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,190,ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);

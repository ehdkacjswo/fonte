is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,300,"b.append("", "");"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,302,"b.append(""mdfw="");"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,303,b.append(getMinimumDaysInFirstWeek());
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,301,if (getMinimumDaysInFirstWeek() != 4) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,302,"sb.append("",mdfw="");"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,303,sb.append(getMinimumDaysInFirstWeek());
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,212,ields.yearOfEra = fields.year;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,213,field = fields.yearOfEra;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,214,"fields.yearOfEra = new OffsetDateTimeField(fields.year, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,63,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,138, The default GregorianJulian cutover point
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,139,* The default GregorianJulian cutover point.
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,204,"ublic static GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,205,eadableInstant gregorianCutover)
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,205,public static GJChronology getInstance(
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,206,"DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,207,ReadableInstant gregorianCutover) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,218,"ublic static synchronized GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,219,"eadableInstant gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,220,nt minDaysInFirstWeek)
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,222,f (zone == null) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,223,one = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,220,public static synchronized GJChronology getInstance(
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,221,"DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,222,"ReadableInstant gregorianCutover,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,223,int minDaysInFirstWeek) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,225,zone = DateTimeUtils.getZone(zone);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,276,"ublic static synchronized GJChronology getInstance(DateTimeZone zone,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,277,"ong gregorianCutover,"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,278,nt minDaysInFirstWeek)
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,277,public static GJChronology getInstance(
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,278,"DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,279,"long gregorianCutover,"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,280,int minDaysInFirstWeek) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,293,ong iCutoverMillis;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,294,ong iGapDuration;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,296,private long iCutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,297,private long iGapDuration;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,420,ublic final int getMinimumDaysInFirstWeek() {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,424,* Gets the minimum days needed for a week to be the first week in a year.
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,426,* @return the minimum days
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,428,public int getMinimumDaysInFirstWeek() {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,433,"b.append(""GJCutoverChronology"");"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,441,"sb.append(""GJChronology"");"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,436,"b.append("", "");"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,438,"b.append(""cutover="");"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,439,SODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,440,ateTimePrinter printer;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,441,f (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,442,rinter = format.date();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,443, else {
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,444,rinter = format.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,445,if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,446,"sb.append("",cutover="");"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,447,ISODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,448,DateTimePrinter printer;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,449,if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,450,printer = format.date();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,451,} else {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,452,printer = format.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,454,"printer.printTo(sb, iCutoverMillis);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,457,if (getMinimumDaysInFirstWeek() != 4) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,458,"sb.append("",mdfw="");"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,459,sb.append(getMinimumDaysInFirstWeek());
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,446,"rinter.printTo(sb, iCutoverMillis);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,448,"b.append("", mdfw="");"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,449,b.append(getMinimumDaysInFirstWeek());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,76,suite.addTest(TestBuddhistChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,77,suite.addTest(TestCopticChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,78,suite.addTest(TestGJChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,79,suite.addTest(TestGregorianChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,80,suite.addTest(TestJulianChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,62,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,63,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,67,* This class is a Junit unit test for BuddhistChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,71,public class TestBuddhistChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,75,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,81,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,82,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,83,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,85,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,86,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,87,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,89,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,90,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,93,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,94,return new TestSuite(TestBuddhistChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,97,public TestBuddhistChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,98,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,102,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,103,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,104,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,105,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,107,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,108,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,111,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,112,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,113,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,114,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,115,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,116,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,117,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,118,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,122,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,123,"assertEquals(DateTimeZone.UTC, BuddhistChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,124,"assertSame(BuddhistChronology.class, BuddhistChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,127,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,128,"assertEquals(LONDON, BuddhistChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,129,"assertSame(BuddhistChronology.class, BuddhistChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,132,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,133,"assertEquals(TOKYO, BuddhistChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,134,"assertEquals(PARIS, BuddhistChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,135,"assertEquals(LONDON, BuddhistChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,136,"assertSame(BuddhistChronology.class, BuddhistChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,140,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,141,"assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,142,"assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,143,"assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,144,"assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,145,"assertSame(BuddhistChronology.getInstance(), BuddhistChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,148,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,149,"assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,150,"assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,151,"assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,152,"assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,155,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,156,"assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,157,"assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,158,"assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,159,"assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,160,"assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,161,"assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,164,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,165,"assertEquals(""BuddhistChronology[Europe/London]"", BuddhistChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,166,"assertEquals(""BuddhistChronology[Asia/Tokyo]"", BuddhistChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,167,"assertEquals(""BuddhistChronology[Europe/London]"", BuddhistChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,168,"assertEquals(""BuddhistChronology[UTC]"", BuddhistChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,172,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,173,"assertEquals(""eras"", BuddhistChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,174,"assertEquals(""centuries"", BuddhistChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,175,"assertEquals(""years"", BuddhistChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,176,"assertEquals(""weekyears"", BuddhistChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,177,"assertEquals(""months"", BuddhistChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,178,"assertEquals(""weeks"", BuddhistChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,179,"assertEquals(""days"", BuddhistChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,180,"assertEquals(""hours"", BuddhistChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,181,"assertEquals(""minutes"", BuddhistChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,182,"assertEquals(""seconds"", BuddhistChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,183,"assertEquals(""millis"", BuddhistChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,185,"assertEquals(false, BuddhistChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,186,"assertEquals(true, BuddhistChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,187,"assertEquals(true, BuddhistChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,188,"assertEquals(true, BuddhistChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,189,"assertEquals(true, BuddhistChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,190,"assertEquals(true, BuddhistChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,191,"assertEquals(true, BuddhistChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,192,"assertEquals(true, BuddhistChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,193,"assertEquals(true, BuddhistChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,194,"assertEquals(true, BuddhistChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,195,"assertEquals(true, BuddhistChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,197,"assertEquals(false, BuddhistChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,198,"assertEquals(false, BuddhistChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,199,"assertEquals(false, BuddhistChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,200,"assertEquals(false, BuddhistChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,201,"assertEquals(false, BuddhistChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,202,"assertEquals(false, BuddhistChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,203,"assertEquals(true, BuddhistChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,204,"assertEquals(true, BuddhistChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,205,"assertEquals(true, BuddhistChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,206,"assertEquals(true, BuddhistChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,208,"assertEquals(false, BuddhistChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,209,"assertEquals(false, BuddhistChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,210,"assertEquals(false, BuddhistChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,211,"assertEquals(false, BuddhistChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,212,"assertEquals(true, BuddhistChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,213,"assertEquals(true, BuddhistChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,214,"assertEquals(true, BuddhistChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,215,"assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,216,"assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,217,"assertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,220,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,221,"assertEquals(""era"", BuddhistChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,222,"assertEquals(""centuryOfEra"", BuddhistChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,223,"assertEquals(""yearOfCentury"", BuddhistChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,224,"assertEquals(""yearOfEra"", BuddhistChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,225,"assertEquals(""year"", BuddhistChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,226,"assertEquals(""monthOfYear"", BuddhistChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,227,"assertEquals(""weekyear"", BuddhistChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,228,"assertEquals(""weekOfWeekyear"", BuddhistChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,229,"assertEquals(""dayOfYear"", BuddhistChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,230,"assertEquals(""dayOfMonth"", BuddhistChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,231,"assertEquals(""dayOfWeek"", BuddhistChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,233,"assertEquals(true, BuddhistChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,234,"assertEquals(true, BuddhistChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,235,"assertEquals(true, BuddhistChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,236,"assertEquals(true, BuddhistChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,237,"assertEquals(true, BuddhistChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,238,"assertEquals(true, BuddhistChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,239,"assertEquals(true, BuddhistChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,240,"assertEquals(true, BuddhistChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,241,"assertEquals(true, BuddhistChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,242,"assertEquals(true, BuddhistChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,243,"assertEquals(true, BuddhistChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,246,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,247,"assertEquals(""halfdayOfDay"", BuddhistChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,248,"assertEquals(""clockhourOfHalfday"", BuddhistChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,249,"assertEquals(""hourOfHalfday"", BuddhistChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,250,"assertEquals(""clockhourOfDay"", BuddhistChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,251,"assertEquals(""hourOfDay"", BuddhistChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,252,"assertEquals(""minuteOfDay"", BuddhistChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,253,"assertEquals(""minuteOfHour"", BuddhistChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,254,"assertEquals(""secondOfDay"", BuddhistChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,255,"assertEquals(""secondOfMinute"", BuddhistChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,256,"assertEquals(""millisOfDay"", BuddhistChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,257,"assertEquals(""millisOfSecond"", BuddhistChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,259,"assertEquals(true, BuddhistChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,260,"assertEquals(true, BuddhistChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,261,"assertEquals(true, BuddhistChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,262,"assertEquals(true, BuddhistChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,263,"assertEquals(true, BuddhistChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,264,"assertEquals(true, BuddhistChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,265,"assertEquals(true, BuddhistChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,266,"assertEquals(true, BuddhistChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,267,"assertEquals(true, BuddhistChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,268,"assertEquals(true, BuddhistChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,269,"assertEquals(true, BuddhistChronology.getInstance().millisOfSecond().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,62,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,63,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,67,* This class is a Junit unit test for CopticChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,71,public class TestCopticChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,75,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,81,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,82,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,83,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,85,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,86,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,87,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,89,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,90,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,93,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,94,return new TestSuite(TestCopticChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,97,public TestCopticChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,98,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,102,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,103,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,104,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,105,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,107,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,108,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,111,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,112,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,113,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,114,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,115,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,116,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,117,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,118,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,122,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,123,"assertEquals(DateTimeZone.UTC, CopticChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,124,"assertSame(CopticChronology.class, CopticChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,127,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,128,"assertEquals(LONDON, CopticChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,129,"assertSame(CopticChronology.class, CopticChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,132,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,133,"assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,134,"assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,135,"assertEquals(LONDON, CopticChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,136,"assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,140,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,141,"assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,142,"assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,143,"assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,144,"assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,145,"assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,148,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,149,"assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,150,"assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,151,"assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,152,"assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,155,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,156,"assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,157,"assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,158,"assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,159,"assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,160,"assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,161,"assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,164,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,165,"assertEquals(""CopticChronology[Europe/London]"", CopticChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,166,"assertEquals(""CopticChronology[Asia/Tokyo]"", CopticChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,167,"assertEquals(""CopticChronology[Europe/London]"", CopticChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,168,"assertEquals(""CopticChronology[UTC]"", CopticChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,172,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,173,"assertEquals(""eras"", CopticChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,174,"assertEquals(""centuries"", CopticChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,175,"assertEquals(""years"", CopticChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,176,"assertEquals(""weekyears"", CopticChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,177,"assertEquals(""months"", CopticChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,178,"assertEquals(""weeks"", CopticChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,179,"assertEquals(""days"", CopticChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,180,"assertEquals(""hours"", CopticChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,181,"assertEquals(""minutes"", CopticChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,182,"assertEquals(""seconds"", CopticChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,183,"assertEquals(""millis"", CopticChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,185,"assertEquals(false, CopticChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,186,"assertEquals(true, CopticChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,187,"assertEquals(true, CopticChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,188,"assertEquals(true, CopticChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,189,"assertEquals(true, CopticChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,190,"assertEquals(true, CopticChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,191,"assertEquals(true, CopticChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,192,"assertEquals(true, CopticChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,193,"assertEquals(true, CopticChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,194,"assertEquals(true, CopticChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,195,"assertEquals(true, CopticChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,197,"assertEquals(false, CopticChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,198,"assertEquals(false, CopticChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,199,"assertEquals(false, CopticChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,200,"assertEquals(false, CopticChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,201,"assertEquals(false, CopticChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,202,"assertEquals(false, CopticChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,203,"assertEquals(true, CopticChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,204,"assertEquals(true, CopticChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,205,"assertEquals(true, CopticChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,206,"assertEquals(true, CopticChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,208,"assertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,209,"assertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,210,"assertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,211,"assertEquals(true, CopticChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,212,"assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,213,"assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,214,"assertEquals(true, CopticChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,215,"assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,216,"assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,217,"assertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,220,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,221,"assertEquals(""era"", CopticChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,222,"assertEquals(""centuryOfEra"", CopticChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,223,"assertEquals(""yearOfCentury"", CopticChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,224,"assertEquals(""yearOfEra"", CopticChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,225,"assertEquals(""year"", CopticChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,226,"assertEquals(""monthOfYear"", CopticChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,227,"assertEquals(""weekyear"", CopticChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,228,"assertEquals(""weekOfWeekyear"", CopticChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,229,"assertEquals(""dayOfYear"", CopticChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,230,"assertEquals(""dayOfMonth"", CopticChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,231,"assertEquals(""dayOfWeek"", CopticChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,233,"assertEquals(true, CopticChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,234,"assertEquals(true, CopticChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,235,"assertEquals(true, CopticChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,236,"assertEquals(true, CopticChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,237,"assertEquals(true, CopticChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,238,"assertEquals(true, CopticChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,239,"assertEquals(true, CopticChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,240,"assertEquals(true, CopticChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,241,"assertEquals(true, CopticChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,242,"assertEquals(true, CopticChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,243,"assertEquals(true, CopticChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,246,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,247,"assertEquals(""halfdayOfDay"", CopticChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,248,"assertEquals(""clockhourOfHalfday"", CopticChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,249,"assertEquals(""hourOfHalfday"", CopticChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,250,"assertEquals(""clockhourOfDay"", CopticChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,251,"assertEquals(""hourOfDay"", CopticChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,252,"assertEquals(""minuteOfDay"", CopticChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,253,"assertEquals(""minuteOfHour"", CopticChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,254,"assertEquals(""secondOfDay"", CopticChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,255,"assertEquals(""secondOfMinute"", CopticChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,256,"assertEquals(""millisOfDay"", CopticChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,257,"assertEquals(""millisOfSecond"", CopticChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,259,"assertEquals(true, CopticChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,260,"assertEquals(true, CopticChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,261,"assertEquals(true, CopticChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,262,"assertEquals(true, CopticChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,263,"assertEquals(true, CopticChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,264,"assertEquals(true, CopticChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,265,"assertEquals(true, CopticChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,266,"assertEquals(true, CopticChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,267,"assertEquals(true, CopticChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,268,"assertEquals(true, CopticChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,269,"assertEquals(true, CopticChronology.getInstance().millisOfSecond().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,62,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,63,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,64,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,65,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,66,import org.joda.time.Instant;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,69,* This class is a Junit unit test for GJChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,71,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,73,public class TestGJChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,75,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,76,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,77,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,79,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,80,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,81,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,82,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,83,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,84,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,85,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,87,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,88,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,89,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,91,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,92,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,95,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,96,return new TestSuite(TestGJChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,99,public TestGJChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,100,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,103,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,104,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,105,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,106,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,107,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,108,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,109,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,110,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,113,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,114,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,115,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,116,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,117,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,118,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,119,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,120,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,124,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,125,"assertEquals(DateTimeZone.UTC, GJChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,126,"assertSame(GJChronology.class, GJChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,129,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,130,"assertEquals(LONDON, GJChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,131,"assertSame(GJChronology.class, GJChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,134,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,135,"assertEquals(TOKYO, GJChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,136,"assertEquals(PARIS, GJChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,137,"assertEquals(LONDON, GJChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,138,"assertSame(GJChronology.class, GJChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,141,public void testFactory_Zone_long_int() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,142,"GJChronology chrono = GJChronology.getInstance(TOKYO, 0L, 2);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,143,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,144,"assertEquals(new Instant(0L), chrono.getGregorianCutover());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,145,"assertEquals(2, chrono.getMinimumDaysInFirstWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,146,"assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, 0L, 2).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,148,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,149,"GJChronology.getInstance(TOKYO, 0L, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,150,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,151,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,152,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,153,"GJChronology.getInstance(TOKYO, 0L, 8);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,154,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,155,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,158,public void testFactory_Zone_RI() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,159,"GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,160,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,161,"assertEquals(new Instant(0L), chrono.getGregorianCutover());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,162,"assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,164,"DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,165,"chrono = GJChronology.getInstance(TOKYO, null);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,166,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,167,"assertEquals(cutover.toInstant(), chrono.getGregorianCutover());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,170,public void testFactory_Zone_RI_int() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,171,"GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L), 2);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,172,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,173,"assertEquals(new Instant(0L), chrono.getGregorianCutover());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,174,"assertEquals(2, chrono.getMinimumDaysInFirstWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,175,"assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L), 2).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,177,"DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,178,"chrono = GJChronology.getInstance(TOKYO, null, 2);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,179,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,180,"assertEquals(cutover.toInstant(), chrono.getGregorianCutover());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,181,"assertEquals(2, chrono.getMinimumDaysInFirstWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,183,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,184,"GJChronology.getInstance(TOKYO, new Instant(0L), 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,185,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,186,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,187,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,188,"GJChronology.getInstance(TOKYO, new Instant(0L), 8);"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,189,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,190,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,194,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,195,"assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,196,"assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,197,"assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,198,"assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,199,"assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,202,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,203,"assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,204,"assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,205,"assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,206,"assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,209,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,210,"assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,211,"assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,212,"assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,213,"assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,214,"assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,215,"assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,218,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,219,"assertEquals(""GJChronology[Europe/London]"", GJChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,220,"assertEquals(""GJChronology[Asia/Tokyo]"", GJChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,221,"assertEquals(""GJChronology[Europe/London]"", GJChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,222,"assertEquals(""GJChronology[UTC]"", GJChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,223,"assertEquals(""GJChronology[UTC,cutover=1970-01-01]"", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,224,"assertEquals(""GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]"", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,228,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,229,"assertEquals(""eras"", GJChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,230,"assertEquals(""centuries"", GJChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,231,"assertEquals(""years"", GJChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,232,"assertEquals(""weekyears"", GJChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,233,"assertEquals(""months"", GJChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,234,"assertEquals(""weeks"", GJChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,235,"assertEquals(""days"", GJChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,236,"assertEquals(""hours"", GJChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,237,"assertEquals(""minutes"", GJChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,238,"assertEquals(""seconds"", GJChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,239,"assertEquals(""millis"", GJChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,241,"assertEquals(false, GJChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,242,"assertEquals(true, GJChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,243,"assertEquals(true, GJChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,244,"assertEquals(true, GJChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,245,"assertEquals(true, GJChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,246,"assertEquals(true, GJChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,247,"assertEquals(true, GJChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,248,"assertEquals(true, GJChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,249,"assertEquals(true, GJChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,250,"assertEquals(true, GJChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,251,"assertEquals(true, GJChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,253,"assertEquals(false, GJChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,254,"assertEquals(false, GJChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,255,"assertEquals(false, GJChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,256,"assertEquals(false, GJChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,257,"assertEquals(false, GJChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,258,"assertEquals(false, GJChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,259,"assertEquals(true, GJChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,260,"assertEquals(true, GJChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,261,"assertEquals(true, GJChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,262,"assertEquals(true, GJChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,264,"assertEquals(false, GJChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,265,"assertEquals(false, GJChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,266,"assertEquals(false, GJChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,267,"assertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,268,"assertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,269,"assertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,270,"assertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,271,"assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,272,"assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,273,"assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,276,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,277,"assertEquals(""era"", GJChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,278,"assertEquals(""centuryOfEra"", GJChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,279,"assertEquals(""yearOfCentury"", GJChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,280,"assertEquals(""yearOfEra"", GJChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,281,"assertEquals(""year"", GJChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,282,"assertEquals(""monthOfYear"", GJChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,283,"assertEquals(""weekyear"", GJChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,284,"assertEquals(""weekOfWeekyear"", GJChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,285,"assertEquals(""dayOfYear"", GJChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,286,"assertEquals(""dayOfMonth"", GJChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,287,"assertEquals(""dayOfWeek"", GJChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,289,"assertEquals(true, GJChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,290,"assertEquals(true, GJChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,291,"assertEquals(true, GJChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,292,"assertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,293,"assertEquals(true, GJChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,294,"assertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,295,"assertEquals(true, GJChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,296,"assertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,297,"assertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,298,"assertEquals(true, GJChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,299,"assertEquals(true, GJChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,302,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,303,"assertEquals(""halfdayOfDay"", GJChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,304,"assertEquals(""clockhourOfHalfday"", GJChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,305,"assertEquals(""hourOfHalfday"", GJChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,306,"assertEquals(""clockhourOfDay"", GJChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,307,"assertEquals(""hourOfDay"", GJChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,308,"assertEquals(""minuteOfDay"", GJChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,309,"assertEquals(""minuteOfHour"", GJChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,310,"assertEquals(""secondOfDay"", GJChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,311,"assertEquals(""secondOfMinute"", GJChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,312,"assertEquals(""millisOfDay"", GJChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,313,"assertEquals(""millisOfSecond"", GJChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,315,"assertEquals(true, GJChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,316,"assertEquals(true, GJChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,317,"assertEquals(true, GJChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,318,"assertEquals(true, GJChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,319,"assertEquals(true, GJChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,320,"assertEquals(true, GJChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,321,"assertEquals(true, GJChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,322,"assertEquals(true, GJChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,323,"assertEquals(true, GJChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,324,"assertEquals(true, GJChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,325,"assertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,62,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,63,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,67,* This class is a Junit unit test for GregorianChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,71,public class TestGregorianChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,75,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,81,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,82,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,83,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,85,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,86,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,87,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,89,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,90,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,93,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,94,return new TestSuite(TestGregorianChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,97,public TestGregorianChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,98,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,102,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,103,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,104,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,105,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,107,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,108,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,111,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,112,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,113,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,114,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,115,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,116,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,117,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,118,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,122,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,123,"assertEquals(DateTimeZone.UTC, GregorianChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,124,"assertSame(GregorianChronology.class, GregorianChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,127,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,128,"assertEquals(LONDON, GregorianChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,129,"assertSame(GregorianChronology.class, GregorianChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,132,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,133,"assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,134,"assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,135,"assertEquals(LONDON, GregorianChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,136,"assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,139,public void testFactory_Zone_int() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,140,"GregorianChronology chrono = GregorianChronology.getInstance(TOKYO, 2);"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,141,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,142,"assertEquals(2, chrono.getMinimumDaysInFirstWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,144,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,145,"GregorianChronology.getInstance(TOKYO, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,146,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,147,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,148,try {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,149,"GregorianChronology.getInstance(TOKYO, 8);"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,150,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,151,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,155,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,156,"assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,157,"assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,158,"assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,159,"assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,160,"assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,163,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,164,"assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,165,"assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,166,"assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,167,"assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,170,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,171,"assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,172,"assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,173,"assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,174,"assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,175,"assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,176,"assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,179,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,180,"assertEquals(""GregorianChronology[Europe/London]"", GregorianChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,181,"assertEquals(""GregorianChronology[Asia/Tokyo]"", GregorianChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,182,"assertEquals(""GregorianChronology[Europe/London]"", GregorianChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,183,"assertEquals(""GregorianChronology[UTC]"", GregorianChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,184,"assertEquals(""GregorianChronology[UTC,mdfw=2]"", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,188,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,189,"assertEquals(""eras"", GregorianChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,190,"assertEquals(""centuries"", GregorianChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,191,"assertEquals(""years"", GregorianChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,192,"assertEquals(""weekyears"", GregorianChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,193,"assertEquals(""months"", GregorianChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,194,"assertEquals(""weeks"", GregorianChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,195,"assertEquals(""days"", GregorianChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,196,"assertEquals(""hours"", GregorianChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,197,"assertEquals(""minutes"", GregorianChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,198,"assertEquals(""seconds"", GregorianChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,199,"assertEquals(""millis"", GregorianChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,201,"assertEquals(false, GregorianChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,202,"assertEquals(true, GregorianChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,203,"assertEquals(true, GregorianChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,204,"assertEquals(true, GregorianChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,205,"assertEquals(true, GregorianChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,206,"assertEquals(true, GregorianChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,207,"assertEquals(true, GregorianChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,208,"assertEquals(true, GregorianChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,209,"assertEquals(true, GregorianChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,210,"assertEquals(true, GregorianChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,211,"assertEquals(true, GregorianChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,213,"assertEquals(false, GregorianChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,214,"assertEquals(false, GregorianChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,215,"assertEquals(false, GregorianChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,216,"assertEquals(false, GregorianChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,217,"assertEquals(false, GregorianChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,218,"assertEquals(false, GregorianChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,219,"assertEquals(true, GregorianChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,220,"assertEquals(true, GregorianChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,221,"assertEquals(true, GregorianChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,222,"assertEquals(true, GregorianChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,224,"assertEquals(false, GregorianChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,225,"assertEquals(false, GregorianChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,226,"assertEquals(false, GregorianChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,227,"assertEquals(false, GregorianChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,228,"assertEquals(true, GregorianChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,229,"assertEquals(true, GregorianChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,230,"assertEquals(true, GregorianChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,231,"assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,232,"assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,233,"assertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,236,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,237,"assertEquals(""era"", GregorianChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,238,"assertEquals(""centuryOfEra"", GregorianChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,239,"assertEquals(""yearOfCentury"", GregorianChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,240,"assertEquals(""yearOfEra"", GregorianChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,241,"assertEquals(""year"", GregorianChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,242,"assertEquals(""monthOfYear"", GregorianChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,243,"assertEquals(""weekyear"", GregorianChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,244,"assertEquals(""weekOfWeekyear"", GregorianChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,245,"assertEquals(""dayOfYear"", GregorianChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,246,"assertEquals(""dayOfMonth"", GregorianChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,247,"assertEquals(""dayOfWeek"", GregorianChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,249,"assertEquals(true, GregorianChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,250,"assertEquals(true, GregorianChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,251,"assertEquals(true, GregorianChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,252,"assertEquals(true, GregorianChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,253,"assertEquals(true, GregorianChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,254,"assertEquals(true, GregorianChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,255,"assertEquals(true, GregorianChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,256,"assertEquals(true, GregorianChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,257,"assertEquals(true, GregorianChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,258,"assertEquals(true, GregorianChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,259,"assertEquals(true, GregorianChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,262,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,263,"assertEquals(""halfdayOfDay"", GregorianChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,264,"assertEquals(""clockhourOfHalfday"", GregorianChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,265,"assertEquals(""hourOfHalfday"", GregorianChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,266,"assertEquals(""clockhourOfDay"", GregorianChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,267,"assertEquals(""hourOfDay"", GregorianChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,268,"assertEquals(""minuteOfDay"", GregorianChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,269,"assertEquals(""minuteOfHour"", GregorianChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,270,"assertEquals(""secondOfDay"", GregorianChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,271,"assertEquals(""secondOfMinute"", GregorianChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,272,"assertEquals(""millisOfDay"", GregorianChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,273,"assertEquals(""millisOfSecond"", GregorianChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,275,"assertEquals(true, GregorianChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,276,"assertEquals(true, GregorianChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,277,"assertEquals(true, GregorianChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,278,"assertEquals(true, GregorianChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,279,"assertEquals(true, GregorianChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,280,"assertEquals(true, GregorianChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,281,"assertEquals(true, GregorianChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,282,"assertEquals(true, GregorianChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,283,"assertEquals(true, GregorianChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,284,"assertEquals(true, GregorianChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,285,"assertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,67, This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,67,* This class is a Junit unit test for ISOChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,124,"assertSame(ISOChronology.class, ISOChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,129,"assertSame(ISOChronology.class, ISOChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,136,"assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,10,* are met:
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,62,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,63,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,64,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,67,* This class is a Junit unit test for JulianChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,69,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,71,public class TestJulianChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,73,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,74,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,75,"private static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,77,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,78,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,79,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,80,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,81,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,82,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,83,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,85,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,86,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,87,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,89,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,90,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,93,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,94,return new TestSuite(TestJulianChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,97,public TestJulianChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,98,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,102,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,103,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,104,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,105,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,106,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,107,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,108,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,111,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,112,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,113,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,114,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,115,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,116,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,117,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,118,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,122,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,123,"assertEquals(DateTimeZone.UTC, JulianChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,124,"assertSame(JulianChronology.class, JulianChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,127,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,128,"assertEquals(LONDON, JulianChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,129,"assertSame(JulianChronology.class, JulianChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,132,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,133,"assertEquals(TOKYO, JulianChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,134,"assertEquals(PARIS, JulianChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,135,"assertEquals(LONDON, JulianChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,136,"assertSame(JulianChronology.class, JulianChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,139,public void testFactory_Zone_int() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,140,"JulianChronology chrono = JulianChronology.getInstance(TOKYO, 2);"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,141,"assertEquals(TOKYO, chrono.getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,142,"assertEquals(2, chrono.getMinimumDaysInFirstWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,144,try {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,145,"JulianChronology.getInstance(TOKYO, 0);"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,146,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,147,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,148,try {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,149,"JulianChronology.getInstance(TOKYO, 8);"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,150,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,151,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,155,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,156,"assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,157,"assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,158,"assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,159,"assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,160,"assertSame(JulianChronology.getInstance(), JulianChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,163,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,164,"assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,165,"assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,166,"assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,167,"assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,170,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,171,"assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,172,"assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,173,"assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,174,"assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,175,"assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,176,"assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,179,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,180,"assertEquals(""JulianChronology[Europe/London]"", JulianChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,181,"assertEquals(""JulianChronology[Asia/Tokyo]"", JulianChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,182,"assertEquals(""JulianChronology[Europe/London]"", JulianChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,183,"assertEquals(""JulianChronology[UTC]"", JulianChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,184,"assertEquals(""JulianChronology[UTC,mdfw=2]"", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,188,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,189,"assertEquals(""eras"", JulianChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,190,"assertEquals(""centuries"", JulianChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,191,"assertEquals(""years"", JulianChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,192,"assertEquals(""weekyears"", JulianChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,193,"assertEquals(""months"", JulianChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,194,"assertEquals(""weeks"", JulianChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,195,"assertEquals(""days"", JulianChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,196,"assertEquals(""hours"", JulianChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,197,"assertEquals(""minutes"", JulianChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,198,"assertEquals(""seconds"", JulianChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,199,"assertEquals(""millis"", JulianChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,201,"assertEquals(false, JulianChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,202,"assertEquals(true, JulianChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,203,"assertEquals(true, JulianChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,204,"assertEquals(true, JulianChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,205,"assertEquals(true, JulianChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,206,"assertEquals(true, JulianChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,207,"assertEquals(true, JulianChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,208,"assertEquals(true, JulianChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,209,"assertEquals(true, JulianChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,210,"assertEquals(true, JulianChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,211,"assertEquals(true, JulianChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,213,"assertEquals(false, JulianChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,214,"assertEquals(false, JulianChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,215,"assertEquals(false, JulianChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,216,"assertEquals(false, JulianChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,217,"assertEquals(false, JulianChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,218,"assertEquals(false, JulianChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,219,"assertEquals(true, JulianChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,220,"assertEquals(true, JulianChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,221,"assertEquals(true, JulianChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,222,"assertEquals(true, JulianChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,224,"assertEquals(false, JulianChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,225,"assertEquals(false, JulianChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,226,"assertEquals(false, JulianChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,227,"assertEquals(false, JulianChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,228,"assertEquals(true, JulianChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,229,"assertEquals(true, JulianChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,230,"assertEquals(true, JulianChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,231,"assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,232,"assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,233,"assertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,236,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,237,"assertEquals(""era"", JulianChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,238,"assertEquals(""centuryOfEra"", JulianChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,239,"assertEquals(""yearOfCentury"", JulianChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,240,"assertEquals(""yearOfEra"", JulianChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,241,"assertEquals(""year"", JulianChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,242,"assertEquals(""monthOfYear"", JulianChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,243,"assertEquals(""weekyear"", JulianChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,244,"assertEquals(""weekOfWeekyear"", JulianChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,245,"assertEquals(""dayOfYear"", JulianChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,246,"assertEquals(""dayOfMonth"", JulianChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,247,"assertEquals(""dayOfWeek"", JulianChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,249,"assertEquals(true, JulianChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,250,"assertEquals(true, JulianChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,251,"assertEquals(true, JulianChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,252,"assertEquals(true, JulianChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,253,"assertEquals(true, JulianChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,254,"assertEquals(true, JulianChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,255,"assertEquals(true, JulianChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,256,"assertEquals(true, JulianChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,257,"assertEquals(true, JulianChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,258,"assertEquals(true, JulianChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,259,"assertEquals(true, JulianChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,262,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,263,"assertEquals(""halfdayOfDay"", JulianChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,264,"assertEquals(""clockhourOfHalfday"", JulianChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,265,"assertEquals(""hourOfHalfday"", JulianChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,266,"assertEquals(""clockhourOfDay"", JulianChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,267,"assertEquals(""hourOfDay"", JulianChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,268,"assertEquals(""minuteOfDay"", JulianChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,269,"assertEquals(""minuteOfHour"", JulianChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,270,"assertEquals(""secondOfDay"", JulianChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,271,"assertEquals(""secondOfMinute"", JulianChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,272,"assertEquals(""millisOfDay"", JulianChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,273,"assertEquals(""millisOfSecond"", JulianChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,275,"assertEquals(true, JulianChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,276,"assertEquals(true, JulianChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,277,"assertEquals(true, JulianChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,278,"assertEquals(true, JulianChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,279,"assertEquals(true, JulianChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,280,"assertEquals(true, JulianChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,281,"assertEquals(true, JulianChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,282,"assertEquals(true, JulianChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,283,"assertEquals(true, JulianChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,284,"assertEquals(true, JulianChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,285,"assertEquals(true, JulianChronology.getInstance().millisOfSecond().isSupported());"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,349, Gets the milliseconds of the datetime instant from the Java epoch
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,350, of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,352, @param base ignored
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,353, @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,355,ublic final long getMillis(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,356,eturn iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,360, Gets the milliseconds of the datetime instant from the Java epoch
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,361, of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,363, @param base ignored
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,364, @param zone ignored
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,365, @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,367,"ublic final long getMillis(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,368,eturn iMillis;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,127," @return an Instant using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,127,* @return an Instant using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,137," Get this object as an Instant, using the given base instant to supply"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,138, missing field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,140, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,141, @return a new Instant
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,143,ublic final Instant toInstant(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,144,"eturn new Instant(getMillis(base, null));"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,150," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,139,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,163," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,152,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,179," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,168,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,192," Convert this object into a DateTime, using the given base instant to"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,193, supply missing field values and time zone.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,195, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,196, @return a new DateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,198,ublic final DateTime toDateTime(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,199,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,200,eturn new DateTime(this);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,202,ateTimeZone zone = base.getZone();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,203,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,204,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,206,"eturn new DateTime(getMillis(base), getChronology().withZone(zone));"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,210," Convert this object into a DateTime, using the given base instant to"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,211, supply missing field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,213, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,214," @param zone  time zone to apply, or default if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,215, @return a new DateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,217,"ublic final DateTime toDateTime(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,218,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,219,"eturn new DateTime(this, zone);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,221,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,222,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,224,"eturn new DateTime(getMillis(base, zone), getChronology().withZone(zone));"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,228," Convert this object into a DateTime, using the given base instant to"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,229, supply missing field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,231, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,232," @param chronology  chronology to apply, or ISOChronology if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,233, @return a new DateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,235,"ublic final DateTime toDateTime(ReadableInstant base, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,236,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,237,"eturn new DateTime(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,239,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,240,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,242,"eturn new DateTime(getMillis(base, chronology.getZone()), chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,255," @return a trusted ISO DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,190,* @return a trusted ISO DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,283," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,218,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,293," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,228,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,306," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,241,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,316," Convert this object into a MutableDateTime, using the given base instant"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,317, to supply missing field values and time zone.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,319, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,320, @return a new MutableDateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,322,ublic final MutableDateTime toMutableDateTime(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,323,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,324,eturn new MutableDateTime(this);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,326,ateTimeZone zone = base.getZone();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,327,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,328,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,330,"eturn new MutableDateTime(getMillis(base), getChronology().withZone(zone));"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,334," Convert this object into a MutableDateTime, using the given base instant"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,335, to supply missing field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,337, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,338," @param zone  time zone to apply, or default if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,339, @return a new MutableDateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,341,"ublic final MutableDateTime toMutableDateTime(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,342,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,343,"eturn new MutableDateTime(this, zone);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,345,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,346,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,348,"eturn new MutableDateTime(getMillis(base, zone), getChronology().withZone(zone));"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,352," Convert this object into a MutableDateTime, using the given base instant"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,353, to supply missing field values.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,355, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,356," @param chronology  chronology to apply, or ISOChronology if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,357, @return a new MutableDateTime
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,359,"ublic final MutableDateTime toMutableDateTime(ReadableInstant base, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,360,f (base == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,361,"eturn new MutableDateTime(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,363,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,364,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,366,"eturn new MutableDateTime(getMillis(base, chronology.getZone()), chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,370, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,372," @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,374,ublic final DateOnly toDateOnly() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,375,f (this instanceof DateOnly) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,376,eturn (DateOnly) this;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,378,eturn new DateOnly(this);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,382, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,384," @param chronology chronology to apply, or ISOChronology if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,385," @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,387,ublic final DateOnly toDateOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,388,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,389,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,391,f (this instanceof DateOnly) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,392,ateOnly d = (DateOnly) this;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,393,f (d.getChronology() == chronology.withUTC()) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,394,eturn d;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,397,"eturn new DateOnly(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,401, Get this object as a TimeOnly.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,403," @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,405,ublic final TimeOnly toTimeOnly() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,406,f (this instanceof TimeOnly) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,407,eturn (TimeOnly) this;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,409,eturn new TimeOnly(this);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,413, Get this object as a TimeOnly.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,415," @param chronology chronology to apply, or ISOChronology if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,416," @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,418,ublic final TimeOnly toTimeOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,419,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,420,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,422,f (this instanceof TimeOnly) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,423,imeOnly t = (TimeOnly) this;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,424,f (t.getChronology() == chronology.withUTC()) {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,425,eturn t;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,428,"eturn new TimeOnly(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,544,"/ If instants are partial, then they can use each other to fill in"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,545,/ missing fields.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,546,ong otherMillis = otherInstant.getMillis(this);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,547,ong thisMillis = getMillis(otherInstant);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,363,long otherMillis = otherInstant.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,364,long thisMillis = getMillis();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,571,"/ If instants are partial, then they can use each other to fill in"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,572,/ missing fields.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,573,eturn (getMillis(readableInstant) > readableInstant.getMillis(this));
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,388,return (getMillis() > readableInstant.getMillis());
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,587,"/ If instants are partial, then they can use each other to fill in"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,588,/ missing fields.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,589,eturn (getMillis(readableInstant) < readableInstant.getMillis(this));
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,402,return (getMillis() < readableInstant.getMillis());
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,603,"/ If instants are partial, then they can use each other to fill in"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,604,/ missing fields.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,605,eturn (getMillis(readableInstant) == readableInstant.getMillis(this));
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,416,return (getMillis() == readableInstant.getMillis());
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,10, are met:
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,57,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,59,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,60,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,61,mport org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,62,mport org.joda.time.format.DateTimeFormat;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,65, AbstractPartialInstant provides the common behaviour for partial instant
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,66, classes.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,67, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,68, This class should generally not be used directly by API users. The
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,69, {@link PartialInstant} interface should be used when different
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,70, kinds of partial instants are to be referenced.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,71, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,72, AbstractPartialInstant subclasses may be mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,74, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,76,ublic abstract class AbstractPartialInstant extends AbstractInstant
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,77,"mplements PartialInstant, Serializable {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,79,tatic final long serialVersionUID = -8202208243769478085L;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,82, Converts the given instant to local time.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,84, @param instant instant to convert
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,85, @param original original chronology
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,86, @param chronoUTC chronology with no time zone
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,88,"rivate static long toLocalTime(long instant, Chronology original, Chronology chronoUTC) {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,89,f (original != chronoUTC) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,90,ateTimeZone zone = original.getZone();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,91,f (zone != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,92,nstant += zone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,95,eturn instant;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,99," Returns a chronology that is UTC, defaulting to ISO if given chronology"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,100, is null.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,102,rivate static Chronology selectChronologyUTC(final Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,103,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,104,eturn ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,105, else {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,106,hronology utc = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,107,f (utc != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,108,eturn utc;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,110,ateTimeZone zone = chronology.getZone();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,111,f (zone == null || zone == DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,112,eturn chronology;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,114,"hrow new IllegalArgumentException(""Chronology does not support UTC: "" + chronology);"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,118,rivate Chronology iChronology;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,120,** The millis from 1970-01-01T00:00:00Z */
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,121,rivate long iMillis;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,123,/ Constructors
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,126, Constructs with the current instant in the default time zone.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,128,rotected AbstractPartialInstant() {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,129,his(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,133, Constructs with the current instant in the given time zone.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,135," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,137,rotected AbstractPartialInstant(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,138,his(ISOChronology.getInstance(zone));
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,142, Constructs with the current instant in the time zone of the given
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,143, chronology.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,145," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,147,rotected AbstractPartialInstant(final Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,148,Chronology = selectChronologyUTC(chronology);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,149,Millis = resetUnsupportedFields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,150,"toLocalTime(DateTimeUtils.currentTimeMillis(), chronology, iChronology));"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,154, Constructs with milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,156, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,158,rotected AbstractPartialInstant(long instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,159,Chronology = ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,160,Millis = resetUnsupportedFields(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,164, Constructs with milliseconds from 1970-01-01T00:00:00Z. If the time zone
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,165," of the given chronology is not null or UTC, then the instant is"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,166, converted to local time.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,168, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,169," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,171,"rotected AbstractPartialInstant(long instant, final Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,172,Chronology = selectChronologyUTC(chronology);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,173,Millis = resetUnsupportedFields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,174,"toLocalTime(instant, chronology, iChronology));"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,178, Constructs an instance from an Object that represents a date.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,179, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,180, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,181," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,183," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,184, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,186,rotected AbstractPartialInstant(Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,187,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,188,hronology original = converter.getChronology(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,189,Chronology = selectChronologyUTC(original);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,190,Millis = resetUnsupportedFields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,191,"toLocalTime(converter.getInstantMillis(instant), original, iChronology));"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,195," Constructs an instance from an Object that represents a date, using the"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,196, specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,197, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,198, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,199," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,201," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,202," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,203, @throws IllegalArgumentException if the date or chronology is null
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,205,"rotected AbstractPartialInstant(Object instant, final Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,206,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,207,"hronology original = converter.getChronology(instant, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,208,Chronology = selectChronologyUTC(original);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,209,Millis = resetUnsupportedFields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,210,"toLocalTime(converter.getInstantMillis(instant, chronology), original, iChronology));"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,214," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,215," 1970-01-01T00:00:00Z, with unsupported field values reset."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,217, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,219,ublic final long getMillis() {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,220,eturn iMillis;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,224," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,225," 1970-01-01T00:00:00Z, with unsupported field values and time zone filled"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,226, in by the given base instant.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,228, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,229, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,231,ublic final long getMillis(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,232,f (base == null || isMatchingType(base)) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,233,eturn getMillis();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,235,"eturn getMillis(base, base.getZone());"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,239," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,240," 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,241, given base instant.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,243, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,244," @param zone override the base time zone, null implies override with no"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,245, time zone
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,246, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,248,"ublic final long getMillis(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,249,f (base == null || isMatchingType(base)) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,250,eturn getMillis();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,253,ong millis = getMillis();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,254,ong baseMillis = base.getMillis();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,256,ateTimeZone baseZone = base.getZone();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,257,f (baseZone != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,258,/ Strip zone from base such that sum can be performed.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,259,aseMillis += baseZone.getOffset(baseMillis);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,262,illis += resetSupportedFields(baseMillis);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,264,f (zone != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,265,/ Apply new zone.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,266,illis -= zone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,269,eturn millis;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,273," Gets the chronology of the instant, null if not applicable. The time"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,274, zone of the chronology is either null or UTC.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,275, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,276, The {@link Chronology} provides conversion from the millisecond
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,277, value to meaningful fields in a particular calendar system.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,279, @return the Chronology
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,281,ublic final Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,282,eturn iChronology;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,286," Returns the lower limiting field, where the lower limit field itself is"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,287," supported. In other words, for the range described by the lower and"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,288," upper limits, the lower limit is inclusive."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,290, @return lower limit or null if none
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,292,ublic abstract DateTimeField getLowerLimit();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,295," Returns the upper limiting field, where the upper limit field itself is"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,296," not supported. In other words, for the range described by the lower and"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,297," upper limits, the upper limit is exclusive."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,299, @return upper limit or null if none
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,301,ublic abstract DateTimeField getUpperLimit();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,304," Returns the given instant, except with lower and upper limits"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,305, applied. Field values are reset below the lower limit and at or above
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,306, the upper limit.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,308, @param instant milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,310,ublic final long resetUnsupportedFields(long instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,311,ateTimeField field;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,312,f ((field = getLowerLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,313,nstant = field.roundFloor(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,315,f ((field = getUpperLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,316,nstant = field.remainder(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,318,eturn instant;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,322," Returns the given instant, except with lower and upper limits"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,323, applied. Field values are reset below the upper limit and at or above
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,324, the lower limit.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,326, @param instant milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,328,ublic final long resetSupportedFields(final long instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,329,ong newInstant = 0;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,330,ateTimeField field;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,331,f ((field = getUpperLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,332,ewInstant = field.roundFloor(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,334,f ((field = getLowerLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,335,ewInstant += field.remainder(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,337,eturn newInstant;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,342, Compares this object with the specified object for equality based
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,343," on the millisecond instant, the Chronology, and the limiting fields."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,344, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,345, To compare two instants for absolute time (ie. UTC milliseconds ignoring
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,346," the chronology), use {@link #isEqual(ReadableInstant)} or"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,347, {@link #compareTo(Object)}.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,349, @param readableInstant  a readable instant to check against
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,350," @return true if millisecond and chronology are equal, false if"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,351,  not or the instant is null or of an incorrect type
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,353,ublic boolean equals(Object readableInstant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,354,f (this == readableInstant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,355,eturn true;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,357,eturn super.equals(readableInstant) && isMatchingType(readableInstant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,360,"rivate static boolean equals(Object a, Object b) {"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,361,eturn (a == b) || (a != null && a.equals(b));
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,365, Returns true if the given instant is a PartialInstant that supports the
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,366, same exact set of fields.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,368, @param instant  the instant to compare to
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,369, @return true if instant is same type as this
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,371,rivate boolean isMatchingType(Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,372,f (instant instanceof PartialInstant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,373,artialInstant partial = (PartialInstant)instant;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,374,"eturn equals(getLowerLimit(), partial.getLowerLimit())"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,375,"& equals(getUpperLimit(), partial.getUpperLimit());"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,377,eturn false;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,381, Gets a hash code for the instant that is compatable with the
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,382, equals method.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,384, @return a suitable hash code
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,386,ublic int hashCode() {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,387,nt result = super.hashCode();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,388,ateTimeField field;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,389,f ((field = getLowerLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,390,esult = 31 * result + field.hashCode();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,392,f ((field = getUpperLimit()) != null) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,393,esult = 31 * result + field.hashCode();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,395,eturn result;
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,400," Get the value as a String in a recognisable ISO8601 format, only"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,401, displaying supported fields.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,402, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,403, The string output is in ISO8601 format to enable the String
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,404, constructor to correctly parse it.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,406, @return the value as an ISO8601 string
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,408,ublic abstract String toString();
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,411," Set the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,412, 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,413, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,414, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,415, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,416, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,418, @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,419, instant to
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,420, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,422,rotected void setMillis(long instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,423,Millis = resetUnsupportedFields(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,427, Set the value from an Object representing an instant.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,428, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,429, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,430," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,432, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,433, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,435,rotected void setMillis(Object instant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,436,"/ Don't set iMillis directly, as it may provide a backdoor to"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,437,/ immutable subclasses.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,438,f (instant instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,439,etMillis(((ReadableInstant) instant).getMillis());
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,440, else {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,441,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,442,etMillis(converter.getInstantMillis(instant));
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,447, Set the chronology of the instant.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,448, <p>
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,449, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,450, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,451, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,453," @param chronology  the chronology to use, null means ISOChronology/UTC"
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,454, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,456,rotected void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,457,Chronology = selectChronologyUTC(chronology);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,10, are met:
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,58,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,59,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,60,mport org.joda.time.property.DateOnlyFieldProperty;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,63, DateOnly is the basic implementation of a date only class supporting
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,64, chronologies. It holds the date as milliseconds from the Java epoch of
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,65, 1970-01-01. The time component and time zone is fixed at T00:00:00Z.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,66, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,67, This class uses a Chronology internally. The Chronology determines how the
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,68, millisecond instant value is converted into the date time fields.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,69, The default Chronology is <code>ISOChronology</code> which is the agreed
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,70, international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,72, <p>Each individual field can be queried in two ways:
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,73, <ul>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,74, <li><code>getYear()</code>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,75, <li><code>year().get()</code>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,76, </ul>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,77, The second technique also provides access to other useful methods on the
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,78, field:
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,79, <ul>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,80, <li>numeric value
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,81, <li>text value
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,82, <li>short text value
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,83, <li>maximum value
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,84, <li>minimum value
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,85, </ul>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,86, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,87," DateOnly is thread-safe and immutable, provided that the Chronology is as well."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,88, All standard Chronology classes supplied are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,90, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,91, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,92, @since 1.0
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,93, @see MutableDateOnly
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,94, @see TimeOnly
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,95, @see DateTime
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,97,ublic class DateOnly extends AbstractPartialInstant implements Serializable {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,99,** Serialization lock */
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,100,rivate static final long serialVersionUID = -5796551185494585279L;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,102,/ Constructors
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,105, Constructs a DateOnly to the current date in the default time zone.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,107,ublic DateOnly() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,108,uper();
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,112, Constructs a DateOnly to the current date in the given time zone.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,114," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,116,ublic DateOnly(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,117,uper(zone);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,121, Constructs a DateOnly to the current date in the time zone of the given
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,122, chronology.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,124," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,126,ublic DateOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,127,uper(chronology);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,131, Constructs a DateOnly set to the milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,133, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,135,ublic DateOnly(long instant) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,136,uper(instant);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,140, Constructs a DateOnly set to the milliseconds from
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,141, 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,142," null or UTC, then the instant is converted to local time."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,144, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,145," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,147,"ublic DateOnly(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,148,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,152, Constructs an instance from an Object that represents a date.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,153, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,154, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,155, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,156," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,158," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,159, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,161,ublic DateOnly(Object instant) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,162,uper(instant);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,166," Constructs an instance from an Object that represents a date, using the"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,167, specified chronology.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,168, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,169, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,170, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,171," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,173," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,174," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,175, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,177,"ublic DateOnly(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,178,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,182, Constructs an instance from date field values using
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,183, <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,185, @param year  the year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,186, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,187, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,189,ublic DateOnly(
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,190,"inal int year,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,191,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,192,inal int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,194,uper(ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,195,"getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,196,SOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,200, Constructs an instance from date field values
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,201, using the specified chronology.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,202, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,203," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,204, is used.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,206, @param year  the year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,207, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,208, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,209," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,211,ublic DateOnly(
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,212,"inal int year,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,213,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,214,"inal int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,215,hronology chronology) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,217,uper((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,218,"getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,219,hronology);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,224, Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,225, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,226, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,227," Only the millis will change, the chronology is kept."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,228, Time fields will be removed from the specified millis.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,229, The returned object will be either be a new instance or <code>this</code>.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,231," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,234,ublic final DateOnly withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,235,ewMillis = resetUnsupportedFields(newMillis);
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,236,"eturn (newMillis == getMillis() ? this : new DateOnly(newMillis, getChronology()));"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,240, Gets a copy of this instant with a different chronology.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,241, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,242, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,243," Only the chronology will change, the millis are kept."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,244, The chronology will be converted to a UTC zone.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,245, The returned object will be either be a new instance or <code>this</code>.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,247, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,248, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,250,ublic final DateOnly withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,251,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC() : newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,252,"eturn (newChronology == getChronology() ? this : new DateOnly(getMillis(), newChronology));"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,257," Returns the lower limiting field, dayOfYear."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,259, @return dayOfYear field
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,261,ublic final DateTimeField getLowerLimit() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,262,eturn getChronology().dayOfYear();
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,266," Returns the upper limiting field, null."
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,268, @return null
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,270,ublic final DateTimeField getUpperLimit() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,271,eturn null;
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,274,/ Date field access
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,277, Get the era field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,279, @return the era
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,281,ublic final int getEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,282,eturn getChronology().era().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,286, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,288, @return the year of era
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,290,ublic final int getCenturyOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,291,eturn getChronology().centuryOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,295, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,297, @return the year of era
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,299,ublic final int getYearOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,300,eturn getChronology().yearOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,304, Get the year of century field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,306, @return the year of century
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,308,ublic final int getYearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,309,eturn getChronology().yearOfCentury().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,313, Get the year field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,315, @return the year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,317,ublic final int getYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,318,eturn getChronology().year().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,322, Get the weekyear field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,324, @return the year of a week based year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,326,ublic final int getWeekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,327,eturn getChronology().weekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,331, Get the month of year field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,333, @return the month of year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,335,ublic final int getMonthOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,336,eturn getChronology().monthOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,340, Get the week of weekyear field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,342, @return the week of a week based year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,344,ublic final int getWeekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,345,eturn getChronology().weekOfWeekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,349, Get the day of year field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,351, @return the day of year
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,353,ublic final int getDayOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,354,eturn getChronology().dayOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,358, Get the day of month field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,359, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,360, The values for the day of month are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,362, @return the day of month
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,364,ublic final int getDayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,365,eturn getChronology().dayOfMonth().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,369, Get the day of week field value.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,370, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,371, The values for the day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,373, @return the day of week
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,375,ublic final int getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,376,eturn getChronology().dayOfWeek().get(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,380,/ Properties
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,383, Get the day of week property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,384, <p>
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,385, The values for day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,387, @return the day of week property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,389,ublic final DateOnlyFieldProperty dayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,390,"eturn new DateOnlyFieldProperty(this, getChronology().dayOfWeek());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,394, Get the day of month property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,396, @return the day of month property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,398,ublic final DateOnlyFieldProperty dayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,399,"eturn new DateOnlyFieldProperty(this, getChronology().dayOfMonth());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,403, Get the day of year property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,405, @return the day of year property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,407,ublic final DateOnlyFieldProperty dayOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,408,"eturn new DateOnlyFieldProperty(this, getChronology().dayOfYear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,412, Get the week of a week based year property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,414, @return the week of a week based year property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,416,ublic final DateOnlyFieldProperty weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,417,"eturn new DateOnlyFieldProperty(this, getChronology().weekOfWeekyear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,421, Get the year of a week based year property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,423, @return the year of a week based year property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,425,ublic final DateOnlyFieldProperty weekyear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,426,"eturn new DateOnlyFieldProperty(this, getChronology().weekyear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,430, Get the month of year property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,432, @return the month of year property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,434,ublic final DateOnlyFieldProperty monthOfYear() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,435,"eturn new DateOnlyFieldProperty(this, getChronology().monthOfYear());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,439, Get the year property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,441, @return the year property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,443,ublic final DateOnlyFieldProperty year() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,444,"eturn new DateOnlyFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,448, Get the year of era property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,450, @return the year of era property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,452,ublic final DateOnlyFieldProperty yearOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,453,"eturn new DateOnlyFieldProperty(this, getChronology().yearOfEra());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,457, Get the year of century property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,459, @return the year of era property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,461,ublic final DateOnlyFieldProperty yearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,462,"eturn new DateOnlyFieldProperty(this, getChronology().yearOfCentury());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,466, Get the century of era property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,468, @return the year of era property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,470,ublic final DateOnlyFieldProperty centuryOfEra() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,471,"eturn new DateOnlyFieldProperty(this, getChronology().centuryOfEra());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,475, Get the era property.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,477, @return the era property
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,479,ublic final DateOnlyFieldProperty era() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,480,"eturn new DateOnlyFieldProperty(this, getChronology().era());"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,483,/ Output
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,486, Output the date in ISO8601 date only format (yyyy-MM-dd).
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,488, @return ISO8601 date formatted string
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,490,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,491,eturn ISODateTimeFormat.getInstance(getChronology()).date().print(getMillis());
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,495," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,496, immutable.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,498,rotected final void setMillis(long millis) {
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,502," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,503, immutable.
False,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,505,rotected final void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,96, @see DateOnly
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,97, @see TimeOnly
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,373, This method changes alters the time zone and the millisecond instant to keep
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,371,* This method alters the time zone and the millisecond instant to keep
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,70, <li>PartialInstant
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,190,eadableInstant lhsInstant = (ReadableInstant) lhsObj;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,192,f (rhsObj instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,193,eadableInstant rhsInstant = (ReadableInstant) rhsObj;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,"/ If instants are partial, then they can use each other to"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,196,/ fill in missing fields.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,197,hsMillis = lhsInstant.getMillis(rhsInstant);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,198,hsMillis = rhsInstant.getMillis(lhsInstant);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,199, else {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,200,hsMillis = lhsInstant.getMillis();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,201,hsMillis = getMillisFromObject(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,189,lhsMillis = ((ReadableInstant) lhsObj).getMillis();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,206,f (rhsObj instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,207,hsMillis = ((ReadableInstant) rhsObj).getMillis();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,208, else {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,209,hsMillis = getMillisFromObject(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,194,if (rhsObj instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,rhsMillis = ((ReadableInstant) rhsObj).getMillis();
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,196,} else {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,197,rhsMillis = getMillisFromObject(rhsObj);
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,79,rivate static final long serialVersionUID = 3299096530934209741L;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,79,private static final long serialVersionUID = 3299096530934209741L;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,155, Gets the milliseconds of the instant.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,157, @param base ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,158, @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,ublic long getMillis(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,161,eturn iMillis;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,165, Gets the milliseconds of the instant.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,167, @param base ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,168, @param zone ignored
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,169, @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,171,"ublic long getMillis(ReadableInstant base, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172,eturn iMillis;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,10, are met:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,58,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,59,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,60,mport org.joda.time.convert.DurationConverter;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,61,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,62,mport org.joda.time.property.ReadWritableInstantFieldProperty;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,65, MutableDateOnly is the basic implementation of a modifiable date only class.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,66, It holds the date as milliseconds from the Java epoch of 1970-01-01. The
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,67, time component and time zone is fixed at T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,68, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,69, This class uses a Chronology internally. The Chronology determines how the
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,70, millisecond instant value is converted into the date time fields.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,71, The default Chronology is <code>ISOChronology</code> which is the agreed
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,72, international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,74, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,75, Each individual field can be accessed in two ways:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,76, <ul>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,77, <li><code>getYear()</code>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,78, <li><code>year().get()</code>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,79, </ul>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,80, The second technique also provides access to other useful methods on the
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,81, field:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,82, <ul>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,83, <li>get numeric value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,84, <li>set numeric value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,85, <li>add to numeric value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,86, <li>add to numeric value wrapping with the field
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,87, <li>get text vlaue
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,88, <li>get short text value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,89, <li>set text value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,90, <li>field maximum value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,91, <li>field minimum value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,92, </ul>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,94, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,95," MutableDateOnly is mutable and not thread-safe, unless concurrent threads"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,96, are not invoking mutator methods.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,98, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,99, @since 1.0
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,100, @see DateOnly
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,102,ublic class MutableDateOnly extends AbstractPartialInstant
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,103,"mplements ReadWritableInstant, Cloneable, Serializable {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,105,tatic final long serialVersionUID = 7781405642158513308L;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,107,/ Constructors
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,110, Constructs a MutableDateOnly to the current date in the default time zone.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,112,ublic MutableDateOnly() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,113,uper();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,117, Constructs a MutableDateOnly to the current date in the given time zone.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,119," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,121,ublic MutableDateOnly(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,122,uper(zone);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,126, Constructs a MutableDateOnly to the current date in the time zone of the given
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,127, chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,129," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,131,ublic MutableDateOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,132,uper(chronology);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,136, Constructs a MutableDateOnly set to the milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,138, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,140,ublic MutableDateOnly(long instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,141,uper(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,145, Constructs a MutableDateOnly set to the milliseconds from
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,146, 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,147," null or UTC, then the instant is converted to local time."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,149, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,150," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,152,"ublic MutableDateOnly(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,153,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,157, Constructs an instance from an Object that represents a date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,158, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,159, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,160," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,162," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,163, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,165,ublic MutableDateOnly(Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,166,uper(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,170," Constructs an instance from an Object that represents a date, using the"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,171, specified chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,172, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,173, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,174," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,176," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,177," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,178, @throws IllegalArgumentException if the date or chronology is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,180,"ublic MutableDateOnly(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,181,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,185, Constructs an instance from date field values using
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,186, <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,188, @param year  the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,189, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,190, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,192,ublic MutableDateOnly(
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,193,"inal int year,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,194,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,195,inal int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,197,uper(ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,198,"getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,199,SOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,203, Constructs an instance from date field values
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,204, using the specified chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,205, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,206," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,207, is used.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,209, @param year  the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,210, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,211, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,212," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,214,ublic MutableDateOnly(
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,215,"inal int year,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,216,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,217,"inal int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,218,hronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,220,uper((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,221,"getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,222,hronology);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,226," Returns the lower limiting field, dayOfYear."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,228, @return dayOfYear field
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,230,ublic final DateTimeField getLowerLimit() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,231,eturn getChronology().dayOfYear();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,235," Returns the upper limiting field, null."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,237, @return null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,239,ublic final DateTimeField getUpperLimit() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,240,eturn null;
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,244," Set the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,245, 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,247, @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,248, instant to
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,249, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,251,ublic void setMillis(long instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,252,uper.setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,256, Set the value from an Object representing an instant.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,257, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,258, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,259," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,261, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,262, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,264,ublic void setMillis(Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,265,uper.setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,269, Set the chronology of the instant.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,271," @param chronology  the chronology to use, null means ISOChronology/UTC"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,272, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,274,ublic void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,275,uper.setChronology(chronology);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,279," Since time zones are ignored, this method does nothing."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,281, @param zone  ignored
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,283,ublic void setZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,287," Since time zones are ignored, this method does nothing."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,289, @param zone  ignored
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,291,ublic void setZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,294,/ Add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,297, Add an amount of time to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,299, @param duration  the millis to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,301,ublic void add(final long duration) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,302,etMillis(getMillis() + duration);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,306, Add an amount of time to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,308, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,310,ublic void add(final ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,311,"uration.addInto(this, 1);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,315, Add an amount of time to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,317, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,318," @param scalar  direction and amount to add, which may be negative"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,320,"ublic void add(final ReadableDuration duration, final int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,321,"uration.addInto(this, scalar);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,325, Add an amount of time to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,326, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,327, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,328," include ReadableDuration, and Long."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,330, @param duration  an object representing a duration
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,332,ublic void add(final Object duration) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,333,f (duration instanceof ReadableDuration) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,334,"dd((ReadableDuration) duration, 1);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,335, else {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,336,urationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,337,dd(converter.getDurationMillis(duration));
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,341,/ Field based
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,344, Set a value in the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,345, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,346, For example:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,347, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,348, MutableDateOnly date = new MutableDateOnly();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,349," date.set(GJChronology.getInstance().year(), 2002);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,350, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,352, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,353, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,354, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,356,"ublic void set(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,357,"etMillis(field.set(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,361, Add a value to the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,362, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,363, For example:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,364, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,365, MutableDateOnly date = new MutableDateOnly();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,366," date.add(GJChronology.getInstance().year(), 2);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,367, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,369, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,370, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,371, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,373,"ublic void add(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,374,"etMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,378," Add a value to the specified field, wrapping within that field."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,379, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,380, For example:
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,381, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,382, MutableDateOnly date = new MutableDateOnly();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,383," date.addWrapped(GJChronology.getInstance().monthOfYear(), 6);"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,384, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,386, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,387, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,388, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,390,"ublic void addWrapped(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,391,"etMillis(field.addWrapped(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,394,/ Date methods
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,397, Set the year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,399, @param year  the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,400, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,402,ublic void setYear(final int year) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,403,"etMillis(getChronology().year().set(getMillis(), year));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,407, Add a number of years to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,409, @param years  the years to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,410, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,412,ublic void addYears(final int years) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,413,"etMillis(getChronology().years().add(getMillis(), years));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,418, Set the weekyear to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,420, @param weekyear  the weekyear
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,421, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,423,ublic void setWeekyear(final int weekyear) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,424,"etMillis(getChronology().weekyear().set(getMillis(), weekyear));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,428, Add a number of weekyears to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,430, @param weekyears  the weekyears to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,431, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,433,ublic void addWeekyears(final int weekyears) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,434,"etMillis(getChronology().weekyears().add(getMillis(), weekyears));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,439, Set the month of the year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,441, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,442, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,444,ublic void setMonthOfYear(final int monthOfYear) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,445,"etMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,449, Add a number of months to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,451, @param months  the months to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,452, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,454,ublic void addMonths(final int months) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,455,"etMillis(getChronology().months().add(getMillis(), months));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,460, Set the week of weekyear to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,462, @param weekOfWeekyear the week of the weekyear
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,463, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,465,ublic void setWeekOfWeekyear(final int weekOfWeekyear) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,466,"etMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,470, Add a number of weeks to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,472, @param weeks  the weeks to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,473, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,475,ublic void addWeeks(final int weeks) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,476,"etMillis(getChronology().weeks().add(getMillis(), weeks));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,481, Set the day of year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,483, @param dayOfYear the day of the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,484, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,486,ublic void setDayOfYear(final int dayOfYear) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,487,"etMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,491, Set the day of the month to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,493, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,494, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,496,ublic void setDayOfMonth(final int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,497,"etMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,501, Set the day of week to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,503, @param dayOfWeek  the day of the week
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,504, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,506,ublic void setDayOfWeek(final int dayOfWeek) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,507,"etMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,511, Add a number of days to the date.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,513, @param days  the days to add
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,514, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,516,ublic void addDays(final int days) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,517,"etMillis(getChronology().days().add(getMillis(), days));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,520,/ Date field access
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,523, Get the era field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,525, @return the era
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,527,ublic final int getEra() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,528,eturn getChronology().era().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,532, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,534, @return the year of era
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,536,ublic final int getCenturyOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,537,eturn getChronology().centuryOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,541, Get the year of era field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,543, @return the year of era
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,545,ublic final int getYearOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,546,eturn getChronology().yearOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,550, Get the year of century field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,552, @return the year of century
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,554,ublic final int getYearOfCentury() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,555,eturn getChronology().yearOfCentury().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,559, Get the year field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,561, @return the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,563,ublic final int getYear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,564,eturn getChronology().year().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,568, Get the weekyear field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,570, @return the year of a week based year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,572,ublic final int getWeekyear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,573,eturn getChronology().weekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,577, Get the month of year field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,579, @return the month of year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,581,ublic final int getMonthOfYear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,582,eturn getChronology().monthOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,586, Get the week of weekyear field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,588, @return the week of a week based year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,590,ublic final int getWeekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,591,eturn getChronology().weekOfWeekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,595, Get the day of year field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,597, @return the day of year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,599,ublic final int getDayOfYear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,600,eturn getChronology().dayOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,604, Get the day of month field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,605, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,606, The values for the day of month are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,608, @return the day of month
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,610,ublic final int getDayOfMonth() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,611,eturn getChronology().dayOfMonth().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,615, Get the day of week field value.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,616, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,617, The values for the day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,619, @return the day of week
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,621,ublic final int getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,622,eturn getChronology().dayOfWeek().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,625,/ Setters
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,628, Set the date from milliseconds.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,630," @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,631, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,633,ublic void setDate(final long instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,634,etMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,638, Set the date from an object representing an instant.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,639, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,640, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,641," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,643," @param instant  an object representing an instant, time part ignored"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,644, @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,646,ublic void setDate(final Object instant) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,647,etMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,651, Set the date from fields.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,653, @param year  the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,654, @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,655, @param dayOfMonth  the day of the month
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,656, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,658,ublic void setDate(
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,659,"inal int year,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,660,"inal int monthOfYear,"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,661,inal int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,662,"etMillis(getChronology().getDateOnlyMillis(year, monthOfYear, dayOfMonth));"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,665,/ Properties
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,668, Get the day of week property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,669, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,670, The values for day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,672, @return the day of week property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,674,ublic final ReadWritableInstantFieldProperty dayOfWeek() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,675,"eturn new ReadWritableInstantFieldProperty(this, getChronology().dayOfWeek());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,679, Get the day of month property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,681, @return the day of month property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,683,ublic final ReadWritableInstantFieldProperty dayOfMonth() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,684,"eturn new ReadWritableInstantFieldProperty(this, getChronology().dayOfMonth());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,688, Get the day of year property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,690, @return the day of year property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,692,ublic final ReadWritableInstantFieldProperty dayOfYear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,693,"eturn new ReadWritableInstantFieldProperty(this, getChronology().dayOfYear());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,697, Get the week of a week based year property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,699, @return the week of a week based year property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,701,ublic final ReadWritableInstantFieldProperty weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,702,"eturn new ReadWritableInstantFieldProperty(this, getChronology().weekOfWeekyear());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,706, Get the year of a week based year property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,708, @return the year of a week based year property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,710,ublic final ReadWritableInstantFieldProperty weekyear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,711,"eturn new ReadWritableInstantFieldProperty(this, getChronology().weekyear());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,715, Get the month of year property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,717, @return the month of year property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,719,ublic final ReadWritableInstantFieldProperty monthOfYear() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,720,"eturn new ReadWritableInstantFieldProperty(this, getChronology().monthOfYear());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,724, Get the year property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,726, @return the year property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,728,ublic final ReadWritableInstantFieldProperty year() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,729,"eturn new ReadWritableInstantFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,733, Get the year of era property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,735, @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,737,ublic final ReadWritableInstantFieldProperty yearOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,738,"eturn new ReadWritableInstantFieldProperty(this, getChronology().yearOfEra());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,742, Get the year of century property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,744, @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,746,ublic final ReadWritableInstantFieldProperty yearOfCentury() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,747,"eturn new ReadWritableInstantFieldProperty(this, getChronology().yearOfCentury());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,751, Get the century of era property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,753, @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,755,ublic final ReadWritableInstantFieldProperty centuryOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,756,"eturn new ReadWritableInstantFieldProperty(this, getChronology().centuryOfEra());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,760, Get the era property.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,762, @return the era property
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,764,ublic final ReadWritableInstantFieldProperty era() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,765,"eturn new ReadWritableInstantFieldProperty(this, getChronology().era());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,768,/ Misc
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,771, Clone this object without having to cast the returned object.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,773, @return a clone of the this object.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,775,ublic MutableDateOnly copy() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,776,eturn (MutableDateOnly)clone();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,780, Clone this object.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,782, @return a clone of this object.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,784,ublic Object clone() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,785,ry {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,786,eturn super.clone();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,787, catch (CloneNotSupportedException ex) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,788,"hrow new InternalError(""Clone error"");"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,792,/ Output
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,795, Output the date in ISO8601 date only format (yyyy-MM-dd).
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,797, @return ISO8601 date formatted string
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,799,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,800,eturn ISODateTimeFormat.getInstance(getChronology()).date().print(getMillis());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,108,private DateTimeField iRoundingField;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,109,private int iRoundingMode;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,317,public DateTimeField getRoundingField() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,318,return iRoundingField;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,321,public int getRoundingMode() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,322,return iRoundingMode;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,325,public void setRoundingField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,326,iRoundingField = field;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,327,if (field != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,328,if (iRoundingMode == ROUND_NONE) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,329,iRoundingMode = ROUND_FLOOR;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,331,setMillis(getMillis());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,335,"public void setRoundingField(DateTimeField field, int mode) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,336,if (mode < ROUND_NONE || mode > ROUND_HALF_EVEN) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,337,"throw new IllegalArgumentException(""Illegal rounding mode: "" + mode);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,339,iRoundingField = field;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,340,iRoundingMode = mode;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,341,if (field != null && mode != ROUND_NONE) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,342,setMillis(getMillis());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,356,switch (iRoundingMode) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,357,case ROUND_NONE:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,358,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,359,case ROUND_FLOOR:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,360,instant = iRoundingField.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,361,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,362,case ROUND_CEILING:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,363,instant = iRoundingField.roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,364,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,365,case ROUND_HALF_FLOOR:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,366,instant = iRoundingField.roundHalfFloor(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,367,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,368,case ROUND_HALF_CEILING:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,369,instant = iRoundingField.roundHalfCeiling(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,370,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,371,case ROUND_HALF_EVEN:
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,372,instant = iRoundingField.roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,373,break;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1118,// Basics
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1121,* Compares this object with the specified object for equality based on the
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1122,"* millisecond instant, the Chronology, and known rounding behavior."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1123,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1124,* All ReadableInstant instances are accepted.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1125,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1126,* See {@link #isEqual(ReadableInstant)} for an equals method that
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1127,* ignores the Chronology and rounding behavior.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1129,* @param readableInstant  a readable instant to check against
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1130,"* @return true if millisecond, Chronology, and known rounding behavior are"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1131,"* equal, false if not or the instant is null or of an incorrect type"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1133,public boolean equals(Object readableInstant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1134,if (this == readableInstant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1135,return true;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1137,if (super.equals(readableInstant)) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1138,if (readableInstant instanceof ReadWritableInstant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1139,ReadWritableInstant other = (ReadWritableInstant) readableInstant;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1140,if (getRoundingMode() == other.getRoundingMode()) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1141,DateTimeField field = getRoundingField();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1142,if (field == other.getRoundingField() ||
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1143,field != null && field.equals(other.getRoundingField())) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1145,return true;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1148,} else {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1149,return true;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1152,return false;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,10, are met:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,58,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,59,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,60,mport org.joda.time.convert.DurationConverter;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,61,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,62,mport org.joda.time.property.ReadWritableInstantFieldProperty;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,65, MutableTimeOnly is the basic implementation of a modifiable time only class.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,66, It holds the time as milliseconds from T00:00:00. The date component and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,67, time zone is fixed at 1970-01-01TZ.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,68, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,69, This class uses a Chronology internally. The Chronology determines how the
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,70, millisecond instant value is converted into the date time fields.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,71, The default Chronology is <code>ISOChronology</code> which is the agreed
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,72, international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,74, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,75, Each individual field can be accessed in two ways:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,76, <ul>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,77, <li><code>getHourOfDay()</code>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,78, <li><code>hourOfDay().get()</code>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,79, </ul>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,80, The second technique also provides access to other useful methods on the
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,81, field:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,82, <ul>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,83, <li>get numeric value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,84, <li>set numeric value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,85, <li>add to numeric value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,86, <li>add to numeric value wrapping with the field
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,87, <li>get text vlaue
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,88, <li>get short text value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,89, <li>set text value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,90, <li>field maximum value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,91, <li>field minimum value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,92, </ul>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,94, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,95," MutableTimeOnly is mutable and not thread-safe, unless concurrent threads"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,96, are not invoking mutator methods.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,98, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,99, @since 1.0
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,100, @see TimeOnly
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,102,ublic class MutableTimeOnly extends AbstractPartialInstant
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,103,"mplements ReadWritableInstant, Cloneable, Serializable {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,105,tatic final long serialVersionUID = -1438532408790831231L;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,107,/ Constructors
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,110, Constructs a MutableTimeOnly to the current time in the default time zone.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,112,ublic MutableTimeOnly() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,113,uper();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,117, Constructs a MutableTimeOnly to the current time in the given time zone.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,119," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,121,ublic MutableTimeOnly(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,122,uper(zone);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,126, Constructs a MutableTimeOnly to the current time in the time zone of the given
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,127, chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,129," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,131,ublic MutableTimeOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,132,uper(chronology);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,136, Constructs a MutableTimeOnly set to the milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,138, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,140,ublic MutableTimeOnly(long instant) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,141,uper(instant);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,145, Constructs a MutableTimeOnly set to the milliseconds from
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,146, 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,147," null or UTC, then the instant is converted to local time."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,149, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,150," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,152,"ublic MutableTimeOnly(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,153,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,157, Constructs an instance from an Object that represents a time.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,158, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,159, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,160," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,162," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,163, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,165,ublic MutableTimeOnly(Object instant) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,166,uper(instant);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,170," Constructs an instance from an Object that represents a time, using the"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,171, specified chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,172, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,173, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,174," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,176," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,177," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,178, @throws IllegalArgumentException if the date or chronology is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,180,"ublic MutableTimeOnly(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,181,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,185, Constructs an instance from time field values using
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,186, <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,188, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,189, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,190, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,191, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,193,ublic MutableTimeOnly(
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,194,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,195,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,196,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,197,inal int millisOfSecond) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,199,uper(ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,200,"getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,201,SOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,205, Constructs an instance from time field values
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,206, using the specified chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,207, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,208," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,209, is used.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,211, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,212, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,213, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,214, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,215," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,217,ublic MutableTimeOnly(
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,218,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,219,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,220,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,221,"inal int millisOfSecond,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,222,hronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,224,uper((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,225,"getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,226,hronology);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,230," Returns the lower limiting field, null."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,232, @return null.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,234,ublic final DateTimeField getLowerLimit() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,235,eturn null;
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,239," Returns the upper limiting field, dayOfYear."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,241, @return dayOfYear field
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,243,ublic final DateTimeField getUpperLimit() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,244,eturn getChronology().dayOfYear();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,248," Set the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,249, 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,251, @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,252, instant to
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,253, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,255,ublic void setMillis(long instant) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,256,uper.setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,260, Set the value from an Object representing an instant.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,261, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,262, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,263," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,265, @param instant  an object representing an instant
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,266, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,268,ublic void setMillis(Object instant) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,269,uper.setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,273, Set the chronology of the instant.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,275," @param chronology  the chronology to use, null means ISOChronology/UTC"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,276, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,278,ublic void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,279,uper.setChronology(chronology);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,283," Since time zones are ignored, this method does nothing."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,285, @param zone  ignored
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,287,ublic void setZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,291," Since time zones are ignored, this method does nothing."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,293, @param zone  ignored
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,295,ublic void setZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,298,/ Add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,301, Add an amount of time to the time.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,303, @param duration  the millis to add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,305,ublic void add(final long duration) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,306,etMillis(getMillis() + duration);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,310, Add an amount of time to the time.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,312, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,314,ublic void add(final ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,315,"uration.addInto(this, 1);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,319, Add an amount of time to the time.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,321, @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,322," @param scalar  direction and amount to add, which may be negative"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,324,"ublic void add(final ReadableDuration duration, final int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,325,"uration.addInto(this, scalar);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,329, Add an amount of time to the time.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,330, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,331, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,332," include ReadableDuration, and Long."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,334, @param duration  an object representing a duration
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,336,ublic void add(final Object duration) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,337,f (duration instanceof ReadableDuration) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,338,"dd((ReadableDuration) duration, 1);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,339, else {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,340,urationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,341,dd(converter.getDurationMillis(duration));
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,345,/ Field based
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,348, Set a value in the specified field.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,349, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,350, For example:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,351, <pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,352, MutableTimeOnly time = new MutableTimeOnly();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,353," time.set(GJChronology.getInstance().hourOfDay(), 12);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,354, </pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,356, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,357, @param value the value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,358, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,360,"ublic void set(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,361,"etMillis(field.set(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,365, Add a value to the specified field.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,366, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,367, For example:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,368, <pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,369, MutableTimeOnly time = new MutableTimeOnly();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,370," time.add(GJChronology.getInstance().hourOfDay(), 2);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,371, </pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,373, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,374, @param value the value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,375, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,377,"ublic void add(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,378,"etMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,382," Add a value to the specified field, wrapping within that field."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,383, This could be used to set a field using a different Chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,384, For example:
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,385, <pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,386, MutableTimeOnly time = new MutableTimeOnly();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,387," time.addWrapped(GJChronology.getInstance().minuteOfHour(), 30);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,388, </pre>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,390, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,391, @param value the value
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,392, @throws NullPointerException if the field is null
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,394,"ublic void addWrapped(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,395,"etMillis(field.addWrapped(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,398,/ Time methods
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,401, Set the hour of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,403, @param hourOfDay  the hour of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,404, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,406,ublic void setHourOfDay(final int hourOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,407,"etMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,411, Set the hour of day (offset to 1-24) to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,413, @param clockhourOfDay  the clockhour of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,414, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,416,ublic void setClockhourOfDay(final int clockhourOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,417,"etMillis(getChronology().clockhourOfDay().set(getMillis(), clockhourOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,421, Set the hour of am/pm (0-11) to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,423, @param hourOfHalfday  the hour of halfday
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,424, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,426,ublic void setHourOfHalfday(final int hourOfHalfday) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,427,"etMillis(getChronology().hourOfHalfday().set(getMillis(), hourOfHalfday));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,431, Set the hour of am/pm (offset to 1-12) to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,433, @param clockhourOfHalfday  the clockhour of halfday
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,434, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,436,ublic void setClockhourOfHalfday(final int clockhourOfHalfday) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,437,"etMillis(getChronology().clockhourOfHalfday().set(getMillis(), clockhourOfHalfday));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,441, Set the AM(0) PM(1) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,443, @param halfdayOfDay  the halfday of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,444, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,446,ublic void setHalfdayOfDay(final int halfdayOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,447,"etMillis(getChronology().halfdayOfDay().set(getMillis(), halfdayOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,451, Add a number of hours to the date.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,453, @param hours  the hours to add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,454, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,456,ublic void addHours(final int hours) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,457,"etMillis(getChronology().hours().add(getMillis(), hours));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,462, Set the minute of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,464, @param minuteOfDay  the minute of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,465, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,467,ublic void setMinuteOfDay(final int minuteOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,468,"etMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,472, Set the minute of the hour to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,474, @param minuteOfHour  the minute of hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,475, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,477,ublic void setMinuteOfHour(final int minuteOfHour) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,478,"etMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,482, Add a number of minutes to the date.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,484, @param minutes  the minutes to add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,485, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,487,ublic void addMinutes(final int minutes) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,488,"etMillis(getChronology().minutes().add(getMillis(), minutes));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,493, Set the second of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,495, @param secondOfDay  the second of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,496, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,498,ublic void setSecondOfDay(final int secondOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,499,"etMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,503, Set the second of the minute to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,505, @param secondOfMinute  the second of minute
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,506, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,508,ublic void setSecondOfMinute(final int secondOfMinute) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,509,"etMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,513, Add a number of seconds to the date.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,515, @param seconds  the seconds to add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,516, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,518,ublic void addSeconds(final int seconds) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,519,"etMillis(getChronology().seconds().add(getMillis(), seconds));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,524, Set the millis of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,526, @param millisOfDay  the millis of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,527, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,529,ublic void setMillisOfDay(final int millisOfDay) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,530,"etMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,534, Set the millis of the second to the specified value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,536, @param millisOfSecond  the millis of second
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,537, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,539,ublic void setMillisOfSecond(final int millisOfSecond) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,540,"etMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,544, Add a number of milliseconds to the date. The implementation of this
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,545, method differs from the {@link #add(long)} method in that a
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,546, DateTimeField performs the addition.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,548, @param millis  the milliseconds to add
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,549, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,551,ublic void addMillis(final int millis) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,552,"etMillis(getChronology().millis().add(getMillis(), millis));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,555,/ Time field access
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,558, Get the hour of day (0-23) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,560, @return the hour of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,562,ublic final int getHourOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,563,eturn getChronology().hourOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,567, Get the hour of day (offset to 1-24) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,569, @return the clockhour of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,571,ublic final int getClockhourOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,572,eturn getChronology().clockhourOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,576, Get the hour of am/pm (0-11) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,578, @return the hour of halfday
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,580,ublic final int getHourOfHalfday() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,581,eturn getChronology().hourOfHalfday().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,585, Get the hour of am/pm (offset to 1-12) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,587, @return the clockhour of halfday
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,589,ublic final int getClockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,590,eturn getChronology().clockhourOfHalfday().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,594, Get the AM(0) PM(1) field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,596, @return the halfday of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,598,ublic final int getHalfdayOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,599,eturn getChronology().halfdayOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,603, Get the minute of day field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,605, @return the minute of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,607,ublic final int getMinuteOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,608,eturn getChronology().minuteOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,612, Get the minute of hour field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,614, @return the minute of hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,616,ublic final int getMinuteOfHour() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,617,eturn getChronology().minuteOfHour().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,621, Get the second of day field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,623, @return the second of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,625,ublic final int getSecondOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,626,eturn getChronology().secondOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,630, Get the second of minute field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,632, @return the second of minute
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,634,ublic final int getSecondOfMinute() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,635,eturn getChronology().secondOfMinute().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,639, Get the millis of day field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,641, @return the millis of day
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,643,ublic final int getMillisOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,644,eturn getChronology().millisOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,648, Get the millis of second field value.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,650, @return the millis of second
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,652,ublic final int getMillisOfSecond() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,653,eturn getChronology().millisOfSecond().get(getMillis());
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,656,/ Setters
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,659, Set the time from milliseconds.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,661," @param millis milliseconds from T00:00:00Z, date part ignored"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,662, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,664,ublic void setTime(final long millis) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,665,etMillis(millis);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,669, Set the date from an object representing an instant.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,670, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,671, The recognised object types are defined in {@link ConverterManager} and
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,672," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,674," @param instant  an object representing an instant, date part ignored"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,675, @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,677,ublic void setTime(final Object instant) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,678,etMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,682, Set the time from fields.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,684, @param hour  the hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,685, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,686, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,687, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,688, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,690,ublic void setTime(
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,691,"inal int hour,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,692,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,693,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,694,inal int millisOfSecond) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,695,"etMillis(getChronology().getTimeOnlyMillis(hour, minuteOfHour, secondOfMinute, millisOfSecond));"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,698,/ Properties
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,701, Get the hour of day (0-23) field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,703, @return the hour of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,705,ublic final ReadWritableInstantFieldProperty hourOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,706,"eturn new ReadWritableInstantFieldProperty(this, getChronology().hourOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,710, Get the hour of day (offset to 1-24) field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,712, @return the clockhour of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,714,ublic final ReadWritableInstantFieldProperty clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,715,"eturn new ReadWritableInstantFieldProperty(this, getChronology().clockhourOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,719, Get the hour of am/pm (0-11) field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,721, @return the hour of halfday property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,723,ublic final ReadWritableInstantFieldProperty hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,724,"eturn new ReadWritableInstantFieldProperty(this, getChronology().hourOfHalfday());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,728, Get the hour of am/pm (offset to 1-12) field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,730, @return the clockhour of halfday property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,732,ublic final ReadWritableInstantFieldProperty clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,733,"eturn new ReadWritableInstantFieldProperty(this, getChronology().clockhourOfHalfday());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,737, Get the AM(0) PM(1) field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,739, @return the halfday of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,741,ublic final ReadWritableInstantFieldProperty halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,742,"eturn new ReadWritableInstantFieldProperty(this, getChronology().halfdayOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,746, Get the minute of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,748, @return the minute of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,750,ublic final ReadWritableInstantFieldProperty minuteOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,751,"eturn new ReadWritableInstantFieldProperty(this, getChronology().minuteOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,755, Get the minute of hour field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,757, @return the minute of hour property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,759,ublic final ReadWritableInstantFieldProperty minuteOfHour() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,760,"eturn new ReadWritableInstantFieldProperty(this, getChronology().minuteOfHour());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,764, Get the second of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,766, @return the second of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,768,ublic final ReadWritableInstantFieldProperty secondOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,769,"eturn new ReadWritableInstantFieldProperty(this, getChronology().secondOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,773, Get the second of minute field property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,775, @return the second of minute property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,777,ublic final ReadWritableInstantFieldProperty secondOfMinute() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,778,"eturn new ReadWritableInstantFieldProperty(this, getChronology().secondOfMinute());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,782, Get the millis of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,784, @return the millis of day property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,786,ublic final ReadWritableInstantFieldProperty millisOfDay() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,787,"eturn new ReadWritableInstantFieldProperty(this, getChronology().millisOfDay());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,791, Get the millis of second property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,793, @return the millis of second property
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,795,ublic final ReadWritableInstantFieldProperty millisOfSecond() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,796,"eturn new ReadWritableInstantFieldProperty(this, getChronology().millisOfSecond());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,799,/ Misc
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,802, Clone this object without having to cast the returned object.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,804, @return a clone of the this object.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,806,ublic MutableTimeOnly copy() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,807,eturn (MutableTimeOnly)clone();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,811, Clone this object.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,813, @return a clone of this object.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,815,ublic Object clone() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,816,ry {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,817,eturn super.clone();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,818, catch (CloneNotSupportedException ex) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,819,"hrow new InternalError(""Clone error"");"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,823,/ Output
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,826, Output the time in ISO8601 date only format (hh:mm:ss.SSS).
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,828, @return ISO8601 date formatted string
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,830,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,831,eturn ISODateTimeFormat.getInstance(getChronology())
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,832,hourMinuteSecondFraction().print(getMillis());
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,10, are met:
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,57, Defines an instant that does not support every datetime field.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,58," A PartialInstant supports a range of fields, specified by lower and"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,59, upper bounding fields.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,61, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,63,ublic interface PartialInstant extends ReadableInstant {
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,66," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,67," 1970-01-01T00:00:00Z, with unsupported field values reset."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,69, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,71,ong getMillis();
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,74," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,75," 1970-01-01T00:00:00Z, with unsupported field values and time zone filled"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,76, in by the given base instant.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,78, @param base  source of missing fields
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,79, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,81,ong getMillis(ReadableInstant base);
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,84," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,85," 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,86, given base instant.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,88, @param base  source of missing fields
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,89," @param zone  override the base time zone, null implies override with no"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,90, time zone
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,91, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,93,"ong getMillis(ReadableInstant base, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,96," Gets the chronology of the instant, null if not applicable. The time"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,97, zone of the chronology is either null or UTC.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,98, <p>
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,99, The {@link Chronology} provides conversion from the millisecond
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,100, value to meaningful fields in a particular calendar system.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,102, @return the Chronology
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,104,hronology getChronology();
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,107," Returns the lower limiting field, where the lower limit field itself is"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,108," supported. In other words, for the range described by the lower and"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,109," upper limits, the lower limit is inclusive."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,111, @return lower limit or null if none
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,113,ateTimeField getLowerLimit();
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,116," Returns the upper limiting field, where the upper limit field itself is"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,117," not supported. In other words, for the range described by the lower and"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,118," upper limits, the upper limit is exclusive."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,120, @return upper limit or null if none
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,122,ateTimeField getUpperLimit();
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,125," Returns the given instant, except with lower and upper limits"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,126, applied. Field values are reset below the lower limit and at or above
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,127, the upper limit.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,129, @param instant milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,130, @return the adjusted millisecond instant
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,132,ong resetUnsupportedFields(long instant);
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,135," Returns the given instant, except with lower and upper limits"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,136, applied. Field values are reset below the upper limit and at or above
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,137, the lower limit.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,139, @param instant milliseconds from 1970-01-01T00:00:00
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,140, @return the adjusted millisecond instant
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,142,ong resetSupportedFields(long instant);
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,145, Compares this object with the specified object for equality based
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,146," on the millisecond instant, the Chronology, and the limiting fields."
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,147, <p>
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,148, To compare two instants for absolute time (ie. UTC milliseconds ignoring
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,149," the chronology), use {@link #isEqual(ReadableInstant)} or"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,150, {@link #compareTo(Object)}.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,152, @param readableInstant  a readable instant to check against
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,153," @return true if millisecond and chronology are equal, false if"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,154,  not or the instant is null or of an incorrect type
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,156,oolean equals(Object readableInstant);
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,159, Gets a hash code for the instant that is compatable with the
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,160, equals method.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,162, @return a suitable hash code
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,164,nt hashCode();
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,168," Get the value as a String in a recognisable ISO8601 format, only"
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,169, displaying supported fields.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,170, <p>
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,171, The string output is in ISO8601 format to enable the String
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,172, constructor to correctly parse it.
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,174, @return the value as an ISO8601 string
False,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,176,tring toString();
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,68,/** Rounding is disabled */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,69,public static final int ROUND_NONE = 0;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,70,/** Rounding mode as described by {@link DateTimeField#roundFloor} */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,71,public static final int ROUND_FLOOR = 1;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,72,/** Rounding mode as described by {@link DateTimeField#roundCeiling} */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,73,public static final int ROUND_CEILING = 2;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,74,/** Rounding mode as described by {@link DateTimeField#roundHalfFloor} */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,75,public static final int ROUND_HALF_FLOOR = 3;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,76,/** Rounding mode as described by {@link DateTimeField#roundHalfCeiling} */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,77,public static final int ROUND_HALF_CEILING = 4;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,78,/** Rounding mode as described by {@link DateTimeField#roundHalfEven} */
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,79,public static final int ROUND_HALF_EVEN = 5;
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,82,"* Returns the field used for rounding, which is ignored if rounding mode"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,83,* is ROUND_NONE or field is null.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,85,DateTimeField getRoundingField();
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,88,"* Returns the rounding mode for this instant, or ROUND_NONE if rounding"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,89,* is not enabled.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,91,int getRoundingMode();
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,94,"* Sets the field to use for rounding, or null to disable rounding. If the"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,95,"* rounding field is non-null, and the rounding mode was ROUND_NONE, it is"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,96,* switched to ROUND_FLOOR. The instant is then rounded using the new field
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,97,* and mode.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,99,* @param field rounding field or null to disable
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,101,void setRoundingField(DateTimeField field);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,104,"* Sets the field to use for rounding, or null to disable rounding. The"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,105,* instant is then rounded using the new field and mode.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,107,* @param field rounding field or null to disable
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,108,* @param mode rounding mode or ROUND_NONE to disable
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,109,* @throws IllegalArgumentException if mode is unknown
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,111,"void setRoundingField(DateTimeField field, int mode);"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,210," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,210,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,221," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,221,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,233," @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,233,* @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,241," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,241,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,249," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,249,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,258," @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,258,* @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,264, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,266," @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,268,ateOnly toDateOnly();
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,271, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,273, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,274," @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,275, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,277,ateOnly toDateOnly(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,280, Get this object as a TimeOnly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,282," @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,284,imeOnly toTimeOnly();
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,287, Get this object as a TimeOnly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,289, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,290," @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,291, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,293,imeOnly toTimeOnly(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,81," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,82," 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,83, given base instant.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,84, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,85, This method is useful for ReadableInstants that only partially describe
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,86," the instant. The base supplies missing information, including time"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,87, zone. Instants that are complete simply return the same value as for
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,88," getMillis(), ignoring the given base."
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,90, @param base optional source of missing fields
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,91, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,93,ong getMillis(ReadableInstant base);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,96," Get the value as the number of milliseconds since the epoch,"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,97," 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98, given base instant.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,99, <p>
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100, This method is useful for ReadableInstants that only partially describe
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,101," the instant. The base supplies missing information, excluding time"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102, zone. Instants that are complete simply return the same value as for
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,103," getMillis(), ignoring the given base."
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,105, @param base source of missing fields
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,106," @param zone override the base time zone, null implies override with no"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,107, time zone
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,108, @return the value as milliseconds
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,110,"ong getMillis(ReadableInstant base, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,10, are met:
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,54,ackage org.joda.time;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,58,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,59,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,60,mport org.joda.time.property.TimeOnlyFieldProperty;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,63, TimeOnly is the basic implementation of a time only class supporting
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,64, chronologies. It holds the time as milliseconds from T00:00:00. The date
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,65, component and time zone is fixed at 1970-01-01TZ.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,66, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,67, This class uses a Chronology internally. The Chronology determines how the
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,68, millisecond instant value is converted into the date time fields.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,69, The default Chronology is <code>ISOChronology</code> which is the agreed
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,70, international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,72, <p>Each individual field can be queried in two ways:
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,73, <ul>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,74, <li><code>getHourOfDay()</code>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,75, <li><code>hourOfDay().get()</code>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,76, </ul>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,77, The second technique also provides access to other useful methods on the
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,78, field:
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,79, <ul>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,80, <li>numeric value
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,81, <li>text value
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,82, <li>short text value
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,83, <li>maximum value
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,84, <li>minimum value
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,85, </ul>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,86, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,87," TimeOnly is thread-safe and immutable, provided that the Chronology is as"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,88, well. All standard Chronology classes supplied are thread-safe and
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,89, immutable.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,91, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,92, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,93, @since 1.0
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,94, @see MutableTimeOnly
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,95, @see DateOnly
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,96, @see DateTime
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,98,ublic class TimeOnly extends AbstractPartialInstant implements Serializable {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,100,** Serialization lock */
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,101,rivate static final long serialVersionUID = -8414446947366046476L;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,103,/ Constructors
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,106, Constructs a TimeOnly to the current time in the default time zone.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,108,ublic TimeOnly() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,109,uper();
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,113, Constructs a TimeOnly to the current time in the given time zone.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,115," @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,117,ublic TimeOnly(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,118,uper(zone);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,122, Constructs a TimeOnly to the current time in the time zone of the given
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,123, chronology.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,125," @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,127,ublic TimeOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,128,uper(chronology);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,132, Constructs a TimeOnly set to the milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,134, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,136,ublic TimeOnly(long instant) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,137,uper(instant);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,141, Constructs a TimeOnly set to the milliseconds from
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,142, 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,143," null or UTC, then the instant is converted to local time."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,145, @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,146," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,148,"ublic TimeOnly(long instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,149,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,153, Constructs an instance from an Object that represents a time.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,154, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,155, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,156, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,157," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,159," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,160, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,162,ublic TimeOnly(Object instant) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,163,uper(instant);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,167," Constructs an instance from an Object that represents a time, using the"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,168, specified chronology.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,169, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,170, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,171, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,172," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,174," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,175," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,176, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,178,"ublic TimeOnly(Object instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,179,"uper(instant, chronology);"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,183, Constructs an instance from time field values using
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,184, <code>ISOChronology</code>.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,186, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,187, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,188, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,189, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,191,ublic TimeOnly(
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,192,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,193,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,194,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,195,inal int millisOfSecond) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,197,uper(ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,198,"getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,199,SOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,203, Constructs an instance from time field values
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,204, using the specified chronology.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,205, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,206," If the chronology is null, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,207, is used.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,209, @param hourOfDay  the hour of the day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,210, @param minuteOfHour  the minute of the hour
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,211, @param secondOfMinute  the second of the minute
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,212, @param millisOfSecond  the millisecond of the second
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,213," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,215,ublic TimeOnly(
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,216,"inal int hourOfDay,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,217,"inal int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,218,"inal int secondOfMinute,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,219,"inal int millisOfSecond,"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,220,hronology chronology) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,222,uper((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,223,"getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,224,hronology);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,228, Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,229, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,230, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,231," Only the millis will change, the chronology is kept."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,232, Date fields will be removed from the millis.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,233, The returned object will be either be a new instance or <code>this</code>.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,235," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,238,ublic final TimeOnly withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,239,ewMillis = resetUnsupportedFields(newMillis);
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,240,"eturn (newMillis == getMillis() ? this : new TimeOnly(newMillis, getChronology()));"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,244, Gets a copy of this instant with a different chronology.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,245, <p>
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,246, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,247," Only the chronology will change, the millis are kept."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,248, The chronology will be converted to a UTC zone.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,249, The returned object will be either be a new instance or <code>this</code>.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,251, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,252, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,254,ublic final TimeOnly withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,255,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC() : newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,256,"eturn (newChronology == getChronology() ? this : new TimeOnly(getMillis(), newChronology));"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,260," Returns the lower limiting field, null."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,262, @return null.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,264,ublic final DateTimeField getLowerLimit() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,265,eturn null;
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,269," Returns the upper limiting field, dayOfYear."
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,271, @return dayOfYear field
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,273,ublic final DateTimeField getUpperLimit() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,274,eturn getChronology().dayOfYear();
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,277,/ Time field access
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,280, Get the hour of day (0-23) field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,282, @return the hour of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,284,ublic final int getHourOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,285,eturn getChronology().hourOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,289, Get the hour of day (offset to 1-24) field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,291, @return the clockhour of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,293,ublic final int getClockhourOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,294,eturn getChronology().clockhourOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,298, Get the hour of am/pm (0-11) field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,300, @return the hour of halfday
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,302,ublic final int getHourOfHalfday() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,303,eturn getChronology().hourOfHalfday().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,307, Get the hour of am/pm (offset to 1-12) field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,309, @return the clockhour of halfday
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,311,ublic final int getClockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,312,eturn getChronology().clockhourOfHalfday().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,316, Get the AM(0) PM(1) field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,318, @return the halfday of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,320,ublic final int getHalfdayOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,321,eturn getChronology().halfdayOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,325, Get the minute of day field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,327, @return the minute of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,329,ublic final int getMinuteOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,330,eturn getChronology().minuteOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,334, Get the minute of hour field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,336, @return the minute of hour
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,338,ublic final int getMinuteOfHour() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,339,eturn getChronology().minuteOfHour().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,343, Get the second of day field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,345, @return the second of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,347,ublic final int getSecondOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,348,eturn getChronology().secondOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,352, Get the second of minute field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,354, @return the second of minute
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,356,ublic final int getSecondOfMinute() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,357,eturn getChronology().secondOfMinute().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,361, Get the millis of day field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,363, @return the millis of day
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,365,ublic final int getMillisOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,366,eturn getChronology().millisOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,370, Get the millis of second field value.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,372, @return the millis of second
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,374,ublic final int getMillisOfSecond() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,375,eturn getChronology().millisOfSecond().get(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,378,/ Properties
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,381, Get the hour of day (0-23) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,383, @return the hour of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,385,ublic final TimeOnlyFieldProperty hourOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,386,"eturn new TimeOnlyFieldProperty(this, getChronology().hourOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,390, Get the hour of day (offset to 1-24) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,392, @return the clockhour of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,394,ublic final TimeOnlyFieldProperty clockhourOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,395,"eturn new TimeOnlyFieldProperty(this, getChronology().clockhourOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,399, Get the hour of am/pm (0-11) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,401, @return the hour of halfday property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,403,ublic final TimeOnlyFieldProperty hourOfHalfday() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,404,"eturn new TimeOnlyFieldProperty(this, getChronology().hourOfHalfday());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,408, Get the hour of am/pm (offset to 1-12) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,410, @return the clockhour of halfday property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,412,ublic final TimeOnlyFieldProperty clockhourOfHalfday() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,413,"eturn new TimeOnlyFieldProperty(this, getChronology().clockhourOfHalfday());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,417, Get the AM(0) PM(1) field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,419, @return the halfday of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,421,ublic final TimeOnlyFieldProperty halfdayOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,422,"eturn new TimeOnlyFieldProperty(this, getChronology().halfdayOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,426, Get the minute of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,428, @return the minute of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,430,ublic final TimeOnlyFieldProperty minuteOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,431,"eturn new TimeOnlyFieldProperty(this, getChronology().minuteOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,435, Get the minute of hour field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,437, @return the minute of hour property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,439,ublic final TimeOnlyFieldProperty minuteOfHour() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,440,"eturn new TimeOnlyFieldProperty(this, getChronology().minuteOfHour());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,444, Get the second of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,446, @return the second of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,448,ublic final TimeOnlyFieldProperty secondOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,449,"eturn new TimeOnlyFieldProperty(this, getChronology().secondOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,453, Get the second of minute field property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,455, @return the second of minute property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,457,ublic final TimeOnlyFieldProperty secondOfMinute() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,458,"eturn new TimeOnlyFieldProperty(this, getChronology().secondOfMinute());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,462, Get the millis of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,464, @return the millis of day property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,466,ublic final TimeOnlyFieldProperty millisOfDay() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,467,"eturn new TimeOnlyFieldProperty(this, getChronology().millisOfDay());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,471, Get the millis of second property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,473, @return the millis of second property
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,475,ublic final TimeOnlyFieldProperty millisOfSecond() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,476,"eturn new TimeOnlyFieldProperty(this, getChronology().millisOfSecond());"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,479,/ Output
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,482, Output the time in ISO8601 date only format (hh:mm:ss.SSS).
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,484, @return ISO8601 date formatted string
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,486,ublic final String toString() {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,487,eturn ISODateTimeFormat.getInstance(getChronology())
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,488,hourMinuteSecondFraction().print(getMillis());
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,492," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,493, immutable.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,495,rotected final void setMillis(long millis) {
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,499," Overridden to do nothing, ensuring this class and all subclasses are"
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,500, immutable.
False,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,502,rotected final void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,73, <li>PartialInstant
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,123,"artialInstantConverter.INSTANCE,"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,10, are met:
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,54,ackage org.joda.time.convert;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,56,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,57,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,58,mport org.joda.time.PartialInstant;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,59,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,62, PartialInstantConverter extracts milliseconds and chronology from a
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,63," PartialInstant. Since supplying a time zone requires special attention, the"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,64, regular ReadableInstantConverter is not quite right.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,66, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,67, @since 1.0
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,69,lass PartialInstantConverter extends ReadableInstantConverter {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,71, Singleton instance.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,73,tatic final PartialInstantConverter INSTANCE = new PartialInstantConverter();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,76, Restricted constructor.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,78,rotected PartialInstantConverter() {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,79,uper();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,83, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,85," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,86, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,88,ublic long getInstantMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,89,"eturn getInstantMillis(object, (DateTimeZone) null);"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,93, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,95," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,96," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,97, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,99,"ublic long getInstantMillis(Object object, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,100,f (zone == null) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,101,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,103,ong millis = ((PartialInstant) object).getMillis();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,104,eturn millis - zone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,108, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,110," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,111," @param chrono  the chronology to use, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,112, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,114,"ublic long getInstantMillis(Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,115,ong millis = ((PartialInstant) object).getMillis();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,116,ateTimeZone zone;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,117,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,118,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,119, else {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,120,one = chrono.getZone();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,122,f (zone != null) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,123,illis -= zone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,125,eturn millis;
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,130," Gets the chronology, which is taken from the PartialDateTime.  If the"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,131," chronology on the datetime is null, the ISOChronology in the default"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,132," time zone is used. Otherwise, the chronology is returned in the default"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,133, time zone.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,135," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,136," @return the chronology, never null"
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,138,ublic Chronology getChronology(Object object) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,139,hronology chrono = ((PartialInstant) object).getChronology();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,140,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,141,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,143,eturn chrono.withZone(DateTimeZone.getDefault());
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,148, Returns PartialDateTime.class.
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,150, @return PartialDateTime.class
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,152,ublic Class getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,153,eturn PartialInstant.class;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,10, are met:
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,54,ackage org.joda.time.property;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,56,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,58,mport org.joda.time.DateOnly;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,59,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,60,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,63, DateOnlyFieldProperty binds a DateOnly to a DateTimeField allowing powerful
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,64, date functionality to be easily accessed.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,65, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,66," The simplest use of this class is as an alternative get method, here used to"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,67, get the year '1972' (as an int) and the month 'December' (as a String).
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,68, <pre>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,69," DateOnly date = new DateOnly(1972, 12, 3);"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,70, int year = date.year().get();
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,71, String monthStr = date.month().getAsText();
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,72, </pre>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,73, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,74, Methods are also provided that allow date modification. These return new instances
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,75, of DateOnly - they do not modify the original. The example below yields two
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,76, independent immutable date objects 20 years apart.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,77, <pre>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,78," DateOnly date = new DateOnly(1972, 12, 3);"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,79, DateOnly date20 = date.year().addToCopy(20);
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,80, </pre>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,81, Serious modification of dates (ie. more than just changing one or two fields)
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,82, should use the {@link org.joda.time.MutableDateOnly MutableDateOnly} class.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,83, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,84," DateOnlyFieldPropery itself is thread-safe and immutable, as well as the"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,85, DateOnly being operated on.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,87, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,89,ublic class DateOnlyFieldProperty extends AbstractReadableInstantFieldProperty {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,91,tatic final long serialVersionUID = -7764886769525930067L;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,93,** The instant this property is working against */
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,94,rivate final DateOnly iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,95,** The field this property is working against */
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,96,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,99, Constructor.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,101, @param instant  the instant to set
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,102, @param field  the field to use
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,104,"ublic DateOnlyFieldProperty(DateOnly instant, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,105,uper();
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,106,Instant = instant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,107,Field = field;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,112, Gets the field being used.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,114, @return the field
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,116,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,117,eturn iField;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,121, Gets the instant being used.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,123, @return the instant
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,125,ublic ReadableInstant getInstant() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,126,eturn iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,130, Gets the date being used.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,132, @return the date
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,134,ublic DateOnly getDateOnly() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,135,eturn iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,140, Adds to this field in a copy of this DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,141, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,142, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,143, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,144," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,145, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,147, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,148, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,149, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,151,ublic DateOnly addToCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,152,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,153,"eturn instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,157, Adds to this field in a copy of this DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,158, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,159, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,160, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,161," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,162, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,164, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,165, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,166, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,168,ublic DateOnly addToCopy(long value) {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,169,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,170,"eturn instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,174," Adds to this field, possibly wrapped, in a copy of this DateOnly."
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,175, A wrapped operation only changes this field.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,176, Thus 31st January addWrapped one day goes to the 1st January.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,177, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,178, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,179, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,180," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,181, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,183, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,184, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,185, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,187,ublic DateOnly addWrappedToCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,188,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,189,"eturn instant.withMillis(iField.addWrapped(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,194, Sets this field in a copy of the DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,195, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,196, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,197, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,198," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,199, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,201, @param value  the value to set the field in the copy to
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,202, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,203, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,205,ublic DateOnly setCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,206,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,207,"eturn instant.withMillis(iField.set(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,211, Sets this field in a copy of the DateOnly to a parsed text value.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,212, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,213, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,214, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,215," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,216, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,218, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,219, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,220, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,221, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,223,"ublic DateOnly setCopy(String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,224,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,225,"eturn instant.withMillis(iField.set(instant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,229, Sets this field in a copy of the DateOnly to a parsed text value.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,230, <p>
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,231, The DateOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,232, This operation is faster than converting a DateOnly to a MutableDateOnly
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,233," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,234, it is generally quicker to make the conversion to MutableDateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,236, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,237, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,238, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,240,ublic final DateOnly setCopy(String text) {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,241,"eturn setCopy(text, null);"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,246, Rounds to the lowest whole unit of this field on a copy of this DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,248, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,250,ublic DateOnly roundFloorCopy() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,251,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,252,eturn instant.withMillis(iField.roundFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,256, Rounds to the highest whole unit of this field on a copy of this DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,258, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,260,ublic DateOnly roundCeilingCopy() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,261,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,262,eturn instant.withMillis(iField.roundCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,266," Rounds to the nearest whole unit of this field on a copy of this DateOnly,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,267, favoring the floor if halfway.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,269, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,271,ublic DateOnly roundHalfFloorCopy() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,272,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,273,eturn instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,277," Rounds to the nearest whole unit of this field on a copy of this DateOnly,"
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,278, favoring the ceiling if halfway.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,280, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,282,ublic DateOnly roundHalfCeilingCopy() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,283,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,284,eturn instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,288, Rounds to the nearest whole unit of this field on a copy of this DateOnly.
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,289," If halfway, the ceiling is favored over the floor only if it makes this field's value even."
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,291, @return a copy of the DateOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,293,ublic DateOnly roundHalfEvenCopy() {
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,294,ateOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java,295,eturn instant.withMillis(iField.roundHalfEven(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,10, are met:
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,54,ackage org.joda.time.property;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,56,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,58,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,59,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,60,mport org.joda.time.TimeOnly;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,63, TimeOnlyFieldProperty binds a TimeOnly to a DateTimeField allowing powerful
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,64, time functionality to be easily accessed.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,65, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,66," The simplest use of this class is as an alternative get method, here used to"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,67, get the clockhour '8' (as an int) and the AM/PM string.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,68, <pre>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,69," TimeOnly time = new TimeOnly(20, 30, 0);"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,70, int clockhour = time.clockhourOfHalfday().get();
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,71, String amPmStr = time.halfdayOfDay().getAsText();
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,72, </pre>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,73, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,74, Methods are also provided that allow time modification. These return new instances
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,75, of TimeOnly - they do not modify the original. The example below yields two
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,76, independent immutable time objects 20 minutes apart.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,77, <pre>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,78," TimeOnly time = new TimeOnly(20, 30, 0);"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,79, TimeOnly time20 = time.minuteOfHour().addToCopy(20);
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,80, </pre>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,81, Serious modification of times (ie. more than just changing one or two fields)
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,82, should use the {@link org.joda.time.MutableTimeOnly MutableTimeOnly} class.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,83, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,84," TimeOnlyFieldPropery itself is thread-safe and immutable, as well as the"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,85, TimeOnly being operated on.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,87, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,89,ublic class TimeOnlyFieldProperty extends AbstractReadableInstantFieldProperty {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,91,tatic final long serialVersionUID = 8826542069120527929L;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,93,** The instant this property is working against */
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,94,rivate final TimeOnly iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,95,** The field this property is working against */
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,96,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,99, Constructor.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,101, @param instant  the instant to set
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,102, @param field  the field to use
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,104,"ublic TimeOnlyFieldProperty(TimeOnly instant, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,105,uper();
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,106,Instant = instant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,107,Field = field;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,112, Gets the field being used.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,114, @return the field
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,116,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,117,eturn iField;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,121, Gets the instant being used.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,123, @return the instant
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,125,ublic ReadableInstant getInstant() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,126,eturn iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,130, Gets the time being used.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,132, @return the time
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,134,ublic TimeOnly getTimeOnly() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,135,eturn iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,140, Adds to this field in a copy of this TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,141, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,142, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,143, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,144," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,145, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,147, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,148, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,149, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,151,ublic TimeOnly addToCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,152,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,153,"eturn instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,157, Adds to this field in a copy of this TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,158, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,159, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,160, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,161," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,162, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,164, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,165, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,166, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,168,ublic TimeOnly addToCopy(long value) {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,169,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,170,"eturn instant.withMillis(iField.add(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,174," Adds to this field, possibly wrapped, in a copy of this TimeOnly."
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,175, A wrapped operation only changes this field.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,176, Thus 12:59:00 addWrapped one minute goes to 12:00:00.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,177, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,178, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,179, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,180," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,181, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,183, @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,184, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,185, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,187,ublic TimeOnly addWrappedToCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,188,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,189,"eturn instant.withMillis(iField.addWrapped(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,194, Sets this field in a copy of the TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,195, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,196, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,197, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,198," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,199, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,201, @param value  the value to set the field in the copy to
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,202, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,203, @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,205,ublic TimeOnly setCopy(int value) {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,206,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,207,"eturn instant.withMillis(iField.set(instant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,211, Sets this field in a copy of the TimeOnly to a parsed text value.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,212, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,213, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,214, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,215," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,216, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,218, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,219, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,220, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,221, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,223,"ublic TimeOnly setCopy(String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,224,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,225,"eturn instant.withMillis(iField.set(instant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,229, Sets this field in a copy of the TimeOnly to a parsed text value.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,230, <p>
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,231, The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,232, This operation is faster than converting a TimeOnly to a MutableTimeOnly
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,233," and back again when setting one field. When setting multiple fields,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,234, it is generally quicker to make the conversion to MutableTimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,236, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,237, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,238, @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,240,ublic final TimeOnly setCopy(String text) {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,241,"eturn setCopy(text, null);"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,246, Rounds to the lowest whole unit of this field on a copy of this TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,248, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,250,ublic TimeOnly roundFloorCopy() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,251,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,252,eturn instant.withMillis(iField.roundFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,256, Rounds to the highest whole unit of this field on a copy of this TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,258, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,260,ublic TimeOnly roundCeilingCopy() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,261,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,262,eturn instant.withMillis(iField.roundCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,266," Rounds to the nearest whole unit of this field on a copy of this TimeOnly,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,267, favoring the floor if halfway.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,269, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,271,ublic TimeOnly roundHalfFloorCopy() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,272,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,273,eturn instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,277," Rounds to the nearest whole unit of this field on a copy of this TimeOnly,"
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,278, favoring the ceiling if halfway.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,280, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,282,ublic TimeOnly roundHalfCeilingCopy() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,283,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,284,eturn instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,288, Rounds to the nearest whole unit of this field on a copy of this TimeOnly.
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,289," If halfway, the ceiling is favored over the floor only if it makes this field's value even."
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,291, @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,293,ublic TimeOnly roundHalfEvenCopy() {
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,294,imeOnly instant = iInstant;
False,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java,295,eturn instant.withMillis(iField.roundHalfEven(instant.getMillis()));

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1292,* Returns a new instance with each element in this period multiplied
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1293,* by the specified scalar.
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1295,"* @param scalar  the scalar to multiply by, not null"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1296,"* @return a {@code Period} based on this period with the amounts multiplied by the scalar, never null"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1297,* @throws ArithmeticException if the capacity of any field is exceeded
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1299,public Period multipliedBy(int scalar) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1300,if (this == ZERO || scalar == 1) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1301,return this;
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1303,int[] values = getValues();  // cloned
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1304,for (int i = 0; i < values.length; i++) {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1305,"values[i] = FieldUtils.safeMultiply(values[i], scalar);"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1307,"return new Period(values, getPeriodType());"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1311,* Returns a new instance with each amount in this period negated.
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1313,"* @return a {@code Period} based on this period with the amounts negated, never null"
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1314,* @throws ArithmeticException if any field has the minimum value
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1316,public Period negated() {
True,src/main/java/org/joda/time/Period.java,src/main/java/org/joda/time/Period.java,1317,return multipliedBy(-1);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,939,public void testMultipliedBy() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,940,"Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,942,Period test = base.multipliedBy(1);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,943,"assertSame(base, test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,945,test = base.multipliedBy(0);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,946,"assertEquals(Period.ZERO, test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,948,test = base.multipliedBy(2);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,949,"assertEquals(2, test.getYears());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,950,"assertEquals(4, test.getMonths());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,951,"assertEquals(6, test.getWeeks());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,952,"assertEquals(8, test.getDays());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,953,"assertEquals(10, test.getHours());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,954,"assertEquals(12, test.getMinutes());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,955,"assertEquals(14, test.getSeconds());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,956,"assertEquals(16, test.getMillis());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,958,test = base.multipliedBy(3);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,959,"assertEquals(3, test.getYears());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,960,"assertEquals(6, test.getMonths());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,961,"assertEquals(9, test.getWeeks());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,962,"assertEquals(12, test.getDays());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,963,"assertEquals(15, test.getHours());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,964,"assertEquals(18, test.getMinutes());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,965,"assertEquals(21, test.getSeconds());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,966,"assertEquals(24, test.getMillis());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,968,test = base.multipliedBy(-4);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,969,"assertEquals(-4, test.getYears());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,970,"assertEquals(-8, test.getMonths());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,971,"assertEquals(-12, test.getWeeks());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,972,"assertEquals(-16, test.getDays());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,973,"assertEquals(-20, test.getHours());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,974,"assertEquals(-24, test.getMinutes());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,975,"assertEquals(-28, test.getSeconds());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,976,"assertEquals(-32, test.getMillis());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,978,try {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,979,Period.days(Integer.MAX_VALUE).multipliedBy(2);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,980,fail();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,981,} catch (ArithmeticException ex) {}
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,983,try {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,984,Period.days(Integer.MIN_VALUE).multipliedBy(2);
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,985,fail();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,986,} catch (ArithmeticException ex) {}
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,990,public void testNegated() {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,991,"Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,993,Period test = Period.ZERO.negated();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,994,"assertEquals(Period.ZERO, test);"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,996,test = base.negated();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,997,"assertEquals(-1, test.getYears());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,998,"assertEquals(-2, test.getMonths());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,999,"assertEquals(-3, test.getWeeks());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1000,"assertEquals(-4, test.getDays());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1001,"assertEquals(-5, test.getHours());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1002,"assertEquals(-6, test.getMinutes());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1003,"assertEquals(-7, test.getSeconds());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1004,"assertEquals(-8, test.getMillis());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1006,test = Period.days(Integer.MAX_VALUE).negated();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1007,"assertEquals(-Integer.MAX_VALUE, test.getDays());"
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1009,try {
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1010,Period.days(Integer.MIN_VALUE).negated();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1011,fail();
True,src/test/java/org/joda/time/TestPeriod_Basics.java,src/test/java/org/joda/time/TestPeriod_Basics.java,1012,} catch (ArithmeticException ex) {}

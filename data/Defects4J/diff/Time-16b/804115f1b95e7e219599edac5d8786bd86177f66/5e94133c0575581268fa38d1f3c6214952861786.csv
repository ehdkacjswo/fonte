is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,60,import java.lang.reflect.Modifier;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,65,mport org.joda.test.time.*;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,66,mport org.joda.time.Chronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,67,mport org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,68,mport org.joda.time.DateTimeComparator;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,69,mport org.joda.time.DateTimeZone;
False,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,70,mport org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,70,import org.joda.test.time.BulkTest;
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,80,private static final Chronology ISO = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,223,public void testClass() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,224,"assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,225,"assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,226,"assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,227,"assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,231,public void testStaticGetInstance() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,232,DateTimeComparator c = DateTimeComparator.getInstance();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,233,"assertEquals(null, c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,234,"assertEquals(null, c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,235,"assertEquals(""DateTimeComparator[]"", c.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,237,public void testStaticGetDateOnlyInstance() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,238,DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(ISO);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,239,"assertEquals(ISO.dayOfYear(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,240,"assertEquals(null, c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,241,"assertEquals(""DateTimeComparator[dayOfYear-]"", c.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,243,c = DateTimeComparator.getDateOnlyInstance(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,244,"assertEquals(ISO.dayOfYear(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,245,"assertEquals(null, c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,247,public void testStaticGetTimeOnlyInstance() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,248,DateTimeComparator c = DateTimeComparator.getTimeOnlyInstance(ISO);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,249,"assertEquals(null, c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,250,"assertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,251,"assertEquals(""DateTimeComparator[-dayOfYear]"", c.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,253,c = DateTimeComparator.getTimeOnlyInstance(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,254,"assertEquals(null, c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,255,"assertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,257,public void testStaticGetInstanceLower() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,258,DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,259,"assertEquals(ISO.hourOfDay(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,260,"assertEquals(null, c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,261,"assertEquals(""DateTimeComparator[hourOfDay-]"", c.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,263,c = DateTimeComparator.getInstance(null);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,264,"assertSame(DateTimeComparator.getInstance(), c);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,266,public void testStaticGetInstanceLowerUpper() {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,267,"DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,268,"assertEquals(ISO.hourOfDay(), c.getLowerLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,269,"assertEquals(ISO.dayOfYear(), c.getUpperLimit());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,270,"assertEquals(""DateTimeComparator[hourOfDay-dayOfYear]"", c.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,272,"c = DateTimeComparator.getInstance(null, null);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,273,"assertSame(DateTimeComparator.getInstance(), c);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,275,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,276,"DateTimeComparator.getInstance(ISO.dayOfYear(), ISO.hourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,277,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,278,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,282,public void testSerialization1() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,283,DateTimeField f = ISO.dayOfYear();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,284,f.toString();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,285,"DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,287,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,288,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,289,oos.writeObject(c);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,290,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,291,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,293,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,294,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,295,DateTimeComparator result = (DateTimeComparator) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,296,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,298,"assertEquals(c, result);"
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,302,public void testSerialization2() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,303,DateTimeComparator c = DateTimeComparator.getInstance();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,305,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,306,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,307,oos.writeObject(c);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,308,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,309,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,311,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,312,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,313,DateTimeComparator result = (DateTimeComparator) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,314,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/time/TestDateTimeComparator.java,316,"assertSame(c, result);"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,164,"ssertEquals(true, Modifier.isFinal(cls.getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,164,"assertEquals(false, Modifier.isFinal(cls.getModifiers()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,167,"ssertEquals(true, Modifier.isPrivate(cls.getDeclaredConstructors()[0].getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,167,"assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,169,DateTimeUtils utils = new DateTimeUtils() {};
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,722,public void testSerialization1() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,723,"DateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,725,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,726,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,727,oos.writeObject(zone);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,728,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,729,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,731,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,732,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,733,DateTimeZone result = (DateTimeZone) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,734,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,736,"assertSame(zone, result);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,740,public void testSerialization2() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,741,"DateTimeZone zone = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,743,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,744,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,745,oos.writeObject(zone);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,746,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,747,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,749,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,750,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,751,DateTimeZone result = (DateTimeZone) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,752,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,754,"assertSame(zone, result);"

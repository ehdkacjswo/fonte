is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,2,* Copyright 2004-2005 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,17,package org.apache.commons.lang.mutable;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,22,* A mutable <code>boolean</code> wrapper.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,24,* @see Boolean
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,25,* @since 2.2
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,26,* @author Apache Software Foundation
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,27,* @version $Id$
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,29,"public class MutableBoolean implements Mutable, Serializable, Comparable {"
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,31,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,32,private static final long serialVersionUID = -4830728138360036487L;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,34,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,35,private boolean value;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,38,* Constructs a new MutableBoolean with the default value of false.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,40,public MutableBoolean() {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,41,super();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,45,* Constructs a new MutableBoolean with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,47,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,48,*            a value.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,50,public MutableBoolean(boolean value) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,51,super();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,52,this.value = value;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,56,* Constructs a new MutableBoolean with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,58,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,59,*            a value.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,60,* @throws NullPointerException
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,61,*             if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,63,public MutableBoolean(Boolean value) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,64,super();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,65,this.value = value.booleanValue();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,70,* Returns the value of this MutableBoolean as a boolean.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,72,* @return the boolean value represented by this object.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,74,public boolean booleanValue() {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,75,return value;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,79,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,81,* @param obj
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,82,*            the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,83,* @return zero if this object represents the same boolean value as the argument; a positive value if this object
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,84,*         represents true and the argument represents false; and a negative value if this object represents false
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,85,*         and the argument represents true
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,86,* @throws ClassCastException
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,87,*             if the argument is not a MutableInt
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,89,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,90,MutableBoolean other = (MutableBoolean) obj;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,91,boolean anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,92,return value == anotherVal ? 0 : (value ? 1 : -1);
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,97,* Compares this object to the specified object. The result is <code>true</code> if and only if the argument is
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,98,* not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,99,* <code>boolean</code> value as this object.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,101,* @param obj
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,102,*            the object to compare with.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,103,* @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,105,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,106,if (obj instanceof MutableBoolean) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,107,return value == ((MutableBoolean) obj).booleanValue();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,109,return false;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,114,* Gets the value as a Boolean instance.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,116,* @return the value as a Boolean
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,118,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,119,return new Boolean(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,123,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,125,* @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,126,*         <code>1237</code> if this object represents <code>false</code>.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,128,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,129,return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,133,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,135,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,136,*            the value to set
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,138,public void setValue(boolean value) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,139,this.value = value;
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,143,* Sets the value from any Boolean instance.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,145,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,146,*            the value to set
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,147,* @throws NullPointerException
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,148,*             if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,149,* @throws ClassCastException
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,150,*             if the type is not a {@link Boolean}
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,152,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,153,setValue(((Boolean) value).booleanValue());
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,157,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,159,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,161,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,src/java/org/apache/commons/lang/mutable/MutableBoolean.java,162,return String.valueOf(value);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,2,* Copyright 2002-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,17,package org.apache.commons.lang.mutable;
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,22,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,25,* JUnit tests.
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,27,* @since 2.2
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,28,* @see MutableBoolean
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,29,* @author Apache Software Foundation
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,30,* @version $Id$
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,32,public class MutableBooleanTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,34,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,35,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,38,public static Test suite() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,39,return new TestSuite(MutableBooleanTest.class);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,42,public MutableBooleanTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,43,super(testName);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,46,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,47,final MutableBoolean mutBool = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,49,"assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,50,"assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,51,mutBool.setValue(true);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,52,"assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,53,"assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,55,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,56,mutBool.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,57,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,58,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,60,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,61,mutBool.compareTo(Boolean.FALSE);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,62,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,63,} catch (ClassCastException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,65,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,66,"mutBool.compareTo(""false"");"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,67,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,68,} catch (ClassCastException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,73,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,74,"assertEquals(false, new MutableBoolean().booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,76,"assertEquals(true, new MutableBoolean(true).booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,77,"assertEquals(false, new MutableBoolean(false).booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,79,"assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,80,"assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,82,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,83,new MutableBoolean(null);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,84,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,85,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,89,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,90,final MutableBoolean mutBoolA = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,91,final MutableBoolean mutBoolB = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,92,final MutableBoolean mutBoolC = new MutableBoolean(true);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,94,"assertEquals(true, mutBoolA.equals(mutBoolA));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,95,"assertEquals(true, mutBoolA.equals(mutBoolB));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,96,"assertEquals(true, mutBoolB.equals(mutBoolA));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,97,"assertEquals(true, mutBoolB.equals(mutBoolB));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,98,"assertEquals(false, mutBoolA.equals(mutBoolC));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,99,"assertEquals(false, mutBoolB.equals(mutBoolC));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,100,"assertEquals(true, mutBoolC.equals(mutBoolC));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,101,"assertEquals(false, mutBoolA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,102,"assertEquals(false, mutBoolA.equals(Boolean.FALSE));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,103,"assertEquals(false, mutBoolA.equals(""false""));"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,106,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,107,final MutableBoolean mutBool = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,108,"assertEquals(false, new MutableBoolean().booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,110,mutBool.setValue(Boolean.TRUE);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,111,"assertEquals(true, mutBool.booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,113,mutBool.setValue(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,114,"assertEquals(false, mutBool.booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,116,mutBool.setValue(true);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,117,"assertEquals(true, mutBool.booleanValue());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,119,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,120,mutBool.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,121,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,122,} catch (NullPointerException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,124,try {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,125,"mutBool.setValue(""false"");"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,126,fail();
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,127,} catch (ClassCastException ex) {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,131,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,132,final MutableBoolean mutBoolA = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,133,final MutableBoolean mutBoolB = new MutableBoolean(false);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,134,final MutableBoolean mutBoolC = new MutableBoolean(true);
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,136,"assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,137,"assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,138,"assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,139,"assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,140,"assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,143,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,144,"assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java,145,"assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,37,suite.addTest(MutableBooleanTest.suite());
False,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,47,rivate MutableTestSuite() {}
True,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,49,private MutableTestSuite() {

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,23,import java.util.Collection;
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,195, @param excludeFields  fields to exclude
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,196,* @param excludeFields  Collection of String fields to exclude
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,197,"* @return a negative integer, zero, or a positive integer as <code>lhs</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,198,"*  is less than, equal to, or greater than <code>rhs</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,199,* @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,200,*  (but not both) is <code>null</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,201,* @throws ClassCastException  if <code>rhs</code> is not assignment-compatible
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,202,*  with <code>lhs</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,204,"public static int reflectionCompare(Object lhs, Object rhs, Collection /*String*/ excludeFields) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,205,"return reflectionCompare(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,209,* <p>Compares two <code>Object</code>s via reflection.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,211,"* <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,212,* is used to bypass normal access control checks. This will fail under a
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,213,* security manager unless the appropriate permissions are set.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,215,* <ul>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,216,* <li>Static fields will not be compared</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,217,"* <li>If <code>compareTransients</code> is <code>true</code>,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,218,"*     compares transient members.  Otherwise ignores them, as they"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,219,*     are likely derived fields.</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,220,* <li>Superclass fields will be compared</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,221,* </ul>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,223,"* <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,224,* they are considered equal.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,226,* @param lhs  left-hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,227,* @param rhs  right-hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,228,* @param excludeFields  array of fields to exclude
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,23,import java.util.Collection;
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,129,* <p>This method uses reflection to determine if the two <code>Object</code>s
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,130,* are equal.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,132,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,133,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,134,"* a security manager, if the permissions are not set up correctly. It is also"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,135,* not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,137,"* <p>Transient members will be not be tested, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,138,"* fields, and not part of the value of the Object.</p>"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,140,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,142,* @param lhs  <code>this</code> object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,143,* @param rhs  the other object
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,144,* @param excludeFields  Collection of String field names to exclude from testing
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,145,* @return <code>true</code> if the two Objects have tested equals.
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,147,"public static boolean reflectionEquals(Object lhs, Object rhs, Collection /*String*/ excludeFields) {"
True,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,src/java/org/apache/commons/lang/builder/EqualsBuilder.java,148,"return reflectionEquals(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,23,import java.util.Collection;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,158,* <p>This method uses reflection to build a valid hash code.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,160,* <p>This constructor uses two hard coded choices for the constants
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,161,* needed to build a hash code.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,163,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,164,* fields. This means that it will throw a security exception if run under
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,165,"* a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,166,* also not as efficient as testing explicitly.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,168,"* <p>Transient members will be not be used, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,169,"* fields, and not part of the value of the <code>Object</code>.</p>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,171,* <p>Static fields will not be tested. Superclass fields will be included.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,173,* @param object  the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,174,* @param excludeFields  Collection of String field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,175,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,176,* @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,178,"public static int reflectionHashCode(Object object, Collection /*String*/ excludeFields) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,179,"return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,408,"ublic static String toStringExclude(Object object, Collection excludeFieldNames) {"
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,408,"public static String toStringExclude(Object object, Collection /*String*/ excludeFieldNames) {"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,421,rivate static String[] toNoNullStringArray(Collection collection) {
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,421,static String[] toNoNullStringArray(Collection collection) {
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,437,rivate static String[] toNoNullStringArray(Object[] array) {
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,437,static String[] toNoNullStringArray(Object[] array) {

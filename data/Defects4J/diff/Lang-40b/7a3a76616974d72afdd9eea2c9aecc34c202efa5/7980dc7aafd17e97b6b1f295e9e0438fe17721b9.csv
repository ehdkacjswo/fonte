is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,17,ackage org.apache.commons.lang;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,20, <p>Represents a range of {@link Number} objects.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,22, <p>This class uses <code>double</code> comparisons. This means that it
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,23," is unsuitable for dealing with large <code>Long</code>, <code>BigDecimal</code>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,24, or <code>BigInteger</code> numbers.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,26," @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,27, @author Stephen Colebourne
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,28, @since 1.0
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,29, @version $Revision$ $Date$
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,31, @deprecated Use one of the Range classes in org.apache.commons.lang.math.
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,32,             Class will be removed in Commons Lang 3.0.
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,35,ublic final class NumberRange {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,37,* The minimum number in this range. */
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,38,rivate final Number min;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,40,* The maximum number in this range. */
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,41,rivate final Number max;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,45, <p>Constructs a new <code>NumberRange</code> using
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,46, <code>number</code> as both the minimum and maximum in
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,47, this range.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,49, @param num the number to use for this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,50, @throws NullPointerException if the number is <code>null</code>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,52,ublic NumberRange(Number num) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,53,f (num == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,54,"hrow new NullPointerException(""The number must not be null"");"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,57,his.min = num;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,58,his.max = num;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,62, <p>Constructs a new <code>NumberRange</code> with the specified
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,63, minimum and maximum numbers.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,65," <p><em>If the maximum is less than the minimum, the range will be constructed"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,66," from the minimum value to the minimum value, not what you would expect!.</em></p>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,68, @param min the minimum number in this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,69, @param max the maximum number in this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,70, @throws NullPointerException if either the minimum or maximum number is
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,71,  <code>null</code>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,73,"ublic NumberRange(Number min, Number max) {"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,74,f (min == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,75,"hrow new NullPointerException(""The minimum value must not be null"");"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,76, else if (max == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,77,"hrow new NullPointerException(""The maximum value must not be null"");"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,80,f (max.doubleValue() < min.doubleValue()) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,81,his.min = this.max = min;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,82, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,83,his.min = min;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,84,his.max = max;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,89, <p>Returns the minimum number in this range.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,91, @return the minimum number in this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,93,ublic Number getMinimum() {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,94,eturn min;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,98, <p>Returns the maximum number in this range.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,100, @return the maximum number in this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,102,ublic Number getMaximum() {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,103,eturn max;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,107, <p>Tests whether the specified <code>number</code> occurs within
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,108, this range using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,110, @param number the number to test
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,111, @return <code>true</code> if the specified number occurs within this
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,112,"  range; otherwise, <code>false</code>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,114,ublic boolean includesNumber(Number number) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,115,f (number == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,116,eturn false;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,117, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,118,eturn !(min.doubleValue() > number.doubleValue()) &&
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,119,(max.doubleValue() < number.doubleValue());
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,124, <p>Tests whether the specified range occurs entirely within this
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,125, range using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,127, @param range the range to test
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,128, @return <code>true</code> if the specified range occurs entirely within
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,129,"  this range; otherwise, <code>false</code>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,131,ublic boolean includesRange(NumberRange range) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,132,f (range == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,133,eturn false;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,134, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,135,eturn includesNumber(range.min) && includesNumber(range.max);
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,140, <p>Tests whether the specified range overlaps with this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,141, using <code>double</code> comparison.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,143, @param range the range to test
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,144, @return <code>true</code> if the specified range overlaps with this
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,145,"  range; otherwise, <code>false</code>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,147,ublic boolean overlaps(NumberRange range) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,148,f (range == null) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,149,eturn false;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,150, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,151,eturn range.includesNumber(min) || range.includesNumber(max) ||
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,152,ncludesRange(range);
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,157, <p>Indicates whether some other <code>Object</code> is
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,158, &quot;equal&quot; to this one.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,160, @param obj the reference object with which to compare
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,161, @return <code>true</code> if this object is the same as the obj
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,162,  argument; <code>false</code> otherwise
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,164,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,165,f (obj == this) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,166,eturn true;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,167, else if (!(obj instanceof NumberRange)) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,168,eturn false;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,169, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,170,umberRange range = (NumberRange)obj;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,171,eturn min.equals(range.min) && max.equals(range.max);
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,176, <p>Returns a hash code value for this object.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,178, @return a hash code value for this object
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,180,ublic int hashCode() {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,181,nt result = 17;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,182,esult = 37 * result + min.hashCode();
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,183,esult = 37 * result + max.hashCode();
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,184,eturn result;
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,188, <p>Returns the string representation of this range.</p>
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,190, <p>This string is the string representation of the minimum and
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,191," maximum numbers in the range, separated by a hyphen. If a number"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,192," is negative, then it is enclosed in parentheses.</p>"
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,194, @return the string representation of this range
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,196,ublic String toString() {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,197,tringBuffer sb = new StringBuffer();
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,199,f (min.doubleValue() < 0) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,200,b.append('(')
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,201,append(min)
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,202,append(')');
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,203, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,204,b.append(min);
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,207,b.append('-');
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,209,f (max.doubleValue() < 0) {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,210,b.append('(')
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,211,append(max)
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,212,append(')');
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,213, else {
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,214,b.append(max);
False,src/java/org/apache/commons/lang/NumberRange.java,src/java/org/apache/commons/lang/NumberRange.java,217,eturn sb.toString();
False,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,73,uite.addTest(NumberRangeTest.suite());
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,15, limitations under the License.
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,17,ackage org.apache.commons.lang;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,19,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,21,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,24, Test cases for the {@link NumberRange} class.
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,26," @author <a href=""mailto:chrise@esha.com"">Christopher Elkins</a>"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,27," @author <a href=""mailto:ridesmet@users.sourceforge.net"">Ringo De Smet</a>"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,28, @author Tim O'Brien
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,29, @version $Revision$ $Date$
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,32,ublic final class NumberRangeTest extends TestCase {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,35,rivate NumberRange tenToTwenty;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,36,rivate NumberRange fifteenToTwentyFive;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,37,rivate NumberRange fiveToNine;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,38,rivate Number five;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,39,rivate Number nine;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,40,rivate Number ten;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,41,rivate Number fifteen;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,42,rivate Number twenty;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,43,rivate Number twentyFive;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,45,ublic NumberRangeTest(String name) {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,46,uper(name);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,49,ublic void setUp() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,50,ive       = new Integer(5);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,51,ine      = new Double(9.0);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,52,en        = new Integer(10);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,53,ifteen    = new Integer(15);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,54,wenty     = new Integer(20);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,55,wentyFive = new Integer(25);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,57,"enToTwenty = new NumberRange(ten, twenty);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,58,"ifteenToTwentyFive = new NumberRange( fifteen, twentyFive);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,59,"iveToNine = new NumberRange( five, nine );"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,63,ublic static Test suite() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,64,estSuite suite = new TestSuite(NumberRangeTest.class);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,65,"uite.setName(""NumberRange Tests"");"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,66,eturn suite;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,69,ublic void testMaxMin() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,70,oolean expected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,71,oolean result = tenToTwenty.getMaximum().equals(twenty);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,72,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,74,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,75,esult = tenToTwenty.getMinimum().equals(ten);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,76,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,79,ublic void testEquals() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,80,oolean expected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,81,"oolean result = tenToTwenty.equals(new NumberRange(five, ten));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,82,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,84,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,85,"esult = tenToTwenty.equals(new NumberRange(ten, twenty));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,86,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,88,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,89,"esult = tenToTwenty.equals(new NumberRange(ten, fifteen));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,90,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,92,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,93,"esult = tenToTwenty.equals(new NumberRange(fifteen, twenty));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,94,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,97,ublic void testEqualsWithOtherObject() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,98,"ssertEquals( ""A NumberRange should not equals a String object"", false, fiveToNine.equals(""TEST""));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,101,ublic void testEqualsWithSameReference() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,102,"ssertEquals( ""A NumberRange should equal itself"", true, fiveToNine.equals(fiveToNine));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,105,ublic void testEqualsNull() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,106,"ssertEquals( ""A NumberRange should not equal null"", false, fiveToNine.equals(null));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,109,ublic void testHashCode() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,110,"umberRange nr = new NumberRange( new Integer(5), new Double(9.0));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,111,"ssertEquals( ""The hashCode of 5-9 should equals the hashcode of another NumberRange of the same min/max"","
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,112,"iveToNine.hashCode(), nr.hashCode());"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,113,"ssertTrue( ""The hashCode of 10-20 should not equal the hashCode of 5-9"","
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,114,iveToNine.hashCode() != tenToTwenty.hashCode());
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,117,ublic void testIncludesNumber() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,118,oolean expected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,119,oolean result = tenToTwenty.includesNumber(five);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,120,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,122,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,123,esult = tenToTwenty.includesNumber(ten);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,124,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,126,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,127,esult = tenToTwenty.includesNumber(fifteen);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,128,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,130,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,131,esult = tenToTwenty.includesNumber(twenty);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,132,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,134,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,135,esult = tenToTwenty.includesNumber(twentyFive);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,136,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,139,ublic void testIncludesNumberNull() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,140,oolean result = tenToTwenty.includesNumber(null);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,141,"ssertEquals(""Includes number should return false for null values"", false, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,144,ublic void testIncludesRange() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,145,oolean expected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,146,"oolean result = tenToTwenty.includesRange(new NumberRange(five, ten));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,147,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,149,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,150,"esult = tenToTwenty.includesRange(new NumberRange(five, fifteen));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,151,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,153,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,154,"esult = tenToTwenty.includesRange(new NumberRange(ten, fifteen));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,155,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,157,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,158,"esult = tenToTwenty.includesRange(new NumberRange(ten, twenty));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,159,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,161,xpected = true;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,162,"esult = tenToTwenty.includesRange(new NumberRange(fifteen, twenty));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,163,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,165,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,166,esult =
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,167,"enToTwenty.includesRange(new NumberRange(fifteen, twentyFive));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,168,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,170,xpected = false;
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,171,esult =
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,172,"enToTwenty.includesRange(new NumberRange(twenty, twentyFive));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,173,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,176,ublic void testIncludesRangeNull() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,177,oolean result = tenToTwenty.includesRange(null);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,178,"ssertEquals(""Includes range should return false for null values"", false, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,181,ublic void testConstructor() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,182,umberRange nr = new NumberRange( new Double(2.0));
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,183,"ssertEquals(""Unexpected min on NumberRange"", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,184,"ssertEquals(""Unexpected max on NumberRange"", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,187,ublic void testConstructorNullParameters() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,188,ry {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,189,umberRange nr = new NumberRange(null);
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,190,"ail(""NumberRange(null) did not throw an exception."");"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,191, catch (Exception e) {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,192,"ssertTrue(    ""NumberRange(null)"", e instanceof NullPointerException);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,195,ry {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,196,"umberRange nr = new NumberRange(five, null);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,197,"ail(""NumberRange(five, null) did not throw an exception."");"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,198, catch (Exception e) {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,199,"ssertTrue(""NumberRange(five, null)"", e instanceof NullPointerException);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,202,ry {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,203,"umberRange nr = new NumberRange(null, five);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,204,"ail(""NumberRange(null, five) did not throw an exception."");"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,205, catch (Exception e) {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,206,"ssertTrue(""NumberRange(null, five)"", e instanceof NullPointerException);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,210,ublic void testConstructorWithMaxLessThanMin() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,211,"umberRange nr = new NumberRange( new Double(2.0), new Double(1.0));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,212,"ssertEquals(""Unexpected min on NumberRange"", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,213,"ssertEquals(""Unexpected max on NumberRange"", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,216,ublic void testOverlap() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,217,"ssertEquals( ""5-9 should not overlap 10-20"", false, fiveToNine.overlaps( tenToTwenty ));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,218,"ssertEquals( ""10-20 should overlap 15-25"", true, tenToTwenty.overlaps( fifteenToTwentyFive ));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,221,ublic void testOverlapNull() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,222,"ssertEquals( ""5-9 should not overlap null"", false, fiveToNine.overlaps( null ));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,225,ublic void testToString() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,226,"tring expected = ""10-20"";"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,227,tring result = tenToTwenty.toString();
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,228,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,231,ublic void testToStringWithNegatives() {
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,232,"tring expected = ""(-20)-(-10)"";"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,233,"umberRange nr = new NumberRange( new Integer(-20), new Integer(-10));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,234,tring result = nr.toString();
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,235,"ssertEquals(expected, result);"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,237,"xpected = ""(-20)-10"";"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,238,"r = new NumberRange( new Integer(-20), new Integer(10));"
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,239,esult = nr.toString();
False,src/test/org/apache/commons/lang/NumberRangeTest.java,src/test/org/apache/commons/lang/NumberRangeTest.java,240,"ssertEquals(expected, result);"

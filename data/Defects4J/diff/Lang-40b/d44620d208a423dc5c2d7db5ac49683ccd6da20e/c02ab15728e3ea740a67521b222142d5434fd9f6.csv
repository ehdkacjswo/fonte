is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,19,import java.util.Collections;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,23,mport org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,110,** The text to work on */
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,109,/** The text to work on. */
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,112,"** The input text, null if char[] input */"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,113,rivate String text;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,244,"his.text = """";"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,245,his.chars = new char[0];
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,241,this.chars = null;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,256,ext = input;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,334,his.text = null;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,420,okenize();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,414,checkTokenized();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,454,okenize();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,448,checkTokenized();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,464,okenize();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,458,checkTokenized();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,495,ext = input;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,497,hars = input.toCharArray();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,490,this.chars = input.toCharArray();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,499,hars = null;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,492,this.chars = null;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,517,ext = null;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,518,hars = input;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,510,this.chars = input;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,530,okenize();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,522,checkTokenized();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,561,okenize();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,553,checkTokenized();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,616, Performs the tokenization if it hasn't already been done.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,608,"* Checks if tokenization has been done, and if not then do it."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,618,rivate void tokenize() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,610,private void checkTokenized() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,620,okens = readTokens();
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,612,if (chars == null) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,613,// still call tokenize as subclass may do some work
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,614,"List split = tokenize(null, 0, 0);"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,615,tokens = (String[]) split.toArray(new String[split.size()]);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,616,} else {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,617,"List split = tokenize(chars, 0, chars.length);"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,618,tokens = (String[]) split.toArray(new String[split.size()]);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,625, Read all the tokens.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,624,* Internal method to performs the tokenization.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,625,* <p>
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,626,* Most users of this class do not need to call this method. This method
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,627,* will be called automatically by other (public) methods when required.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,628,* <p>
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,629,* This method exists to allow subclasses to add code before or after the
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,630,"* tokenization. For example, a subclass could alter the character array,"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,631,"* offset or count to be parsed, or call the tokenizer multiple times on"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,632,* multiple strings. It is also be possible to filter the results.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,633,* <p>
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,634,* <code>StrTokenizer</code> will always pass a zero offset and a count
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,635,"* equal to the length of the array to this method, however a subclass"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,636,"* may pass other values, or even an entirely different array."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,627, @return array containing the tokens.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,638,"* @param chars  the character array being tokenized, may be null"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,639,"* @param offset  the start position within the character array, must be valid"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,640,"* @param count  the number of characters to tokenize, must be valid"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,641,"* @return the modifiable list of String tokens, unmodifiable if null array or zero count"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,629,rivate String[] readTokens() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,630,f (chars == null) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,631,eturn ArrayUtils.EMPTY_STRING_ARRAY;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,633,nt len = chars.length;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,634,f (len == 0) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,635,eturn ArrayUtils.EMPTY_STRING_ARRAY;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,643,"protected List tokenize(char[] chars, int offset, int count) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,644,if (chars == null || count == 0) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,645,return Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,639,nt start = 0;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,649,int pos = offset;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,642,hile (start >= 0 && start < len) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,652,while (pos >= 0 && pos < count) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,644,"tart = readNextToken(chars, start, len, buf, tokens);"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,654,"pos = readNextToken(chars, pos, count, buf, tokens);"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,647,f (start >= len) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,657,if (pos >= count) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,651,eturn (String[]) tokens.toArray(new String[tokens.size()]);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,661,return tokens;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1061,f (text == null) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1062,ext = new String(chars);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1064,eturn text;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1071,return new String(chars);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,20,import java.util.Collections;
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,534,"ssertSame(input, tok.getContent());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,535,"assertEquals(input, tok.getContent());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,809,public void testTokenizeSubclassInputChange() {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,810,"StrTokenizer tkn = new StrTokenizer(""a b c d e"") {"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,811,"protected List tokenize(char[] chars, int offset, int count) {"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,812,"return super.tokenize(""w x y z"".toCharArray(), 2, 5);"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,815,"assertEquals(""x"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,816,"assertEquals(""y"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,820,public void testTokenizeSubclassOutputChange() {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,821,"StrTokenizer tkn = new StrTokenizer(""a b c"") {"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,822,"protected List tokenize(char[] chars, int offset, int count) {"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,823,"List list = super.tokenize(chars, offset, count);"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,824,Collections.reverse(list);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,825,return list;
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,828,"assertEquals(""c"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,829,"assertEquals(""b"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,830,"assertEquals(""a"", tkn.next());"

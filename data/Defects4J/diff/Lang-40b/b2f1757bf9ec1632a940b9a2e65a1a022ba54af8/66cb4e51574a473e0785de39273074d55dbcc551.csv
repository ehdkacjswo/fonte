is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,19,import java.text.ChoiceFormat;
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,20,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,24,"* Stock ""choice"" MetaFormat."
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,26,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,27,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,28,* @since 2.4
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,29,* @version $Id$
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,31,public class ChoiceMetaFormat extends MetaFormatSupport {
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,32,private static final long serialVersionUID = 3802197832963795129L;
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,35,* Singleton-usable instance.
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,37,public static final ChoiceMetaFormat INSTANCE = new ChoiceMetaFormat();
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,40,* Create a new ChoiceMetaFormat.
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,42,public ChoiceMetaFormat() {
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,43,super();
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,47,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,49,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,50,*      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,52,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,53,FieldPosition pos) {
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,54,if (obj instanceof ChoiceFormat) {
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,55,return toAppendTo.append(((ChoiceFormat) obj).toPattern());
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,57,throw new IllegalArgumentException(String.valueOf(obj));
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,61,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,63,"* @see java.text.Format#parseObject(java.lang.String,"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,64,*      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,66,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,67,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,68,"seekFormatElementEnd(source, pos);"
True,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,69,"return new ChoiceFormat(source.substring(start, pos.getIndex()));"
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,19,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,20,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,23,"* Stock ""date"" MetaFormat."
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,25,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,26,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,27,* @since 2.4
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,28,* @version $Id$
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,30,public class DateMetaFormat extends DateMetaFormatSupport {
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,31,private static final long serialVersionUID = -4732179430347600208L;
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,34,* Create a new DateMetaFormat.
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,36,public DateMetaFormat() {
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,37,super();
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,41,* Create a new DateMetaFormat.
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,43,* @param locale
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,45,public DateMetaFormat(Locale locale) {
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,46,super(locale);
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,50,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,52,* @see org.apache.commons.lang.text.AbstractDateMetaFormat#createSubformatInstance(int)
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,54,protected DateFormat createSubformatInstance(int style) {
True,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,55,"return DateFormat.getDateInstance(style, getLocale());"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,19,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,20,import java.text.DateFormatSymbols;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,21,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,22,import java.text.Format;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,23,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,24,import java.text.SimpleDateFormat;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,25,import java.util.HashMap;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,26,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,27,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,28,import java.util.Map;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,31,* date/time metaFormat support.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,32,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,33,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,34,* @since 2.4
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,35,* @version $Id$
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,37,public abstract class DateMetaFormatSupport extends MetaFormatSupport {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,38,"/** ""Default"" subformat name */"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,39,"protected static final String DEFAULT = """";"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,41,"/** ""Short"" subformat name */"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,42,"protected static final String SHORT = ""short"";"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,44,"/** ""Medium"" subformat name */"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,45,"protected static final String MEDIUM = ""medium"";"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,47,"/** ""Long"" subformat name */"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,48,"protected static final String LONG = ""long"";"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,50,"/** ""Full"" subformat name */"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,51,"protected static final String FULL = ""full"";"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,53,private Locale locale;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,54,private boolean handlePatterns = true;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,56,private transient boolean initialized;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,57,private transient Map styleMap;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,58,private transient Map inverseStyleMap;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,59,private transient Map subformats;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,60,private transient Map reverseSubformats;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,61,private transient DateFormatSymbols dateFormatSymbols;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,64,* Create a new AbstractDateMetaFormat.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,66,public DateMetaFormatSupport() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,67,this(Locale.getDefault());
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,71,* Create a new AbstractDateMetaFormat.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,73,* @param locale
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,75,public DateMetaFormatSupport(Locale locale) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,76,super();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,77,this.locale = locale;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,81,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,83,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,84,*      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,86,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,87,FieldPosition pos) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,88,String subformat = getSubformatName(obj);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,89,if (subformat != null) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,90,return toAppendTo.append(subformat);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,92,if (isHandlePatterns() && obj instanceof SimpleDateFormat) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,93,SimpleDateFormat sdf = (SimpleDateFormat) obj;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,94,if (sdf.getDateFormatSymbols().equals(dateFormatSymbols)) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,95,return toAppendTo.append(sdf.toPattern());
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,98,throw new IllegalArgumentException(String.valueOf(obj));
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,101,private String getSubformatName(Object subformat) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,102,initialize();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,103,if (reverseSubformats.containsKey(subformat)) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,104,return (String) inverseStyleMap.get(reverseSubformats
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,105,.get(subformat));
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,107,return null;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,111,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,113,"* @see java.text.Format#parseObject(java.lang.String,"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,114,*      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,116,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,117,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,118,"seekFormatElementEnd(source, pos);"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,119,if (pos.getErrorIndex() >= 0) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,120,return null;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,122,"String subformat = source.substring(start, pos.getIndex()).trim();"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,123,Object result = getSubformat(subformat);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,124,if (result != null) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,125,return result;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,127,if (isHandlePatterns()) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,128,"return new SimpleDateFormat(subformat, getLocale());"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,130,pos.setErrorIndex(start);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,131,return null;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,134,private Format getSubformat(String subformat) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,135,initialize();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,136,if (!styleMap.containsKey(subformat)) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,137,return null;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,139,initialize();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,140,return (Format) subformats.get(styleMap.get(subformat));
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,144,* Get the locale in use by this {@link DateMetaFormatSupport}.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,146,* @return Locale
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,148,public Locale getLocale() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,149,return locale;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,152,private synchronized void initialize() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,153,if (!initialized) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,154,styleMap = createStyleMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,155,inverseStyleMap = createInverseStyleMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,156,subformats = new HashMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,157,reverseSubformats = new HashMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,158,for (Iterator iter = styleMap.values().iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,159,Integer style = (Integer) iter.next();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,160,if (subformats.containsKey(style)) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,161,continue;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,163,Format sf = createSubformatInstance(style.intValue());
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,164,"subformats.put(style, sf);"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,165,if (inverseStyleMap.containsKey(style)) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,166,"reverseSubformats.put(sf, style);"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,169,dateFormatSymbols = new DateFormatSymbols(getLocale());
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,171,initialized = true;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,175,* Create a subformat for the given <code>DateFormat</code> style
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,176,* constant.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,178,* @param style
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,179,* @return a DateFormat instance.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,181,protected abstract DateFormat createSubformatInstance(int style);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,184,* Get whether this metaformat can parse date/time pattern formats in
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,185,* addition to named formats.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,187,* @return boolean.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,189,public boolean isHandlePatterns() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,190,return handlePatterns;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,194,* Set whether this metaformat can parse date/time pattern formats in
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,195,* addition to named formats.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,197,* @param handlePatterns
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,198,*            the boolean handlePatterns to set.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,199,* @return <code>this</code> for fluent usage.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,201,public DateMetaFormatSupport setHandlePatterns(boolean handlePatterns) {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,202,this.handlePatterns = handlePatterns;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,203,return this;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,207,* Create the style map.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,209,* @return Map
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,211,protected Map createStyleMap() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,212,HashMap result = new HashMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,213,"result.put(SHORT, new Integer(DateFormat.SHORT));"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,214,"result.put(MEDIUM, new Integer(DateFormat.MEDIUM));"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,215,"result.put(LONG, new Integer(DateFormat.LONG));"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,216,"result.put(FULL, new Integer(DateFormat.FULL));"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,217,"result.put(DEFAULT, new Integer(DateFormat.DEFAULT));"
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,218,return result;
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,222,* Create the inverse style map.
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,224,* @return Map
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,226,protected Map createInverseStyleMap() {
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,227,Map invertMe = createStyleMap();
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,228,invertMe.remove(DEFAULT);
True,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,229,return invert(invertMe);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,19,import java.text.Format;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,20,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,22,import java.util.HashMap;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,24,import java.util.List;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,25,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,26,import java.util.Map;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,28,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,29,import org.apache.commons.lang.Validate;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,32,* Factory methods to produce metaformat instances that behave like
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,33,* java.text.MessageFormat.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,35,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,36,* @since 2.4
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,37,* @version $Id$
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,39,/* package-private */ class DefaultMetaFormatFactory {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,41,/** Number key */
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,42,"public static final String NUMBER_KEY = ""number"";"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,44,/** Date key */
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,45,"public static final String DATE_KEY = ""date"";"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,47,/** Time key */
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,48,"public static final String TIME_KEY = ""time"";"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,50,/** Choice key */
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,51,"public static final String CHOICE_KEY = ""choice"";"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,53,private static final String[] NO_SUBFORMAT_KEYS = new String[] {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,54,"NUMBER_KEY, DATE_KEY, TIME_KEY };"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,56,"private static final String[] NO_PATTERN_KEYS = new String[] { NUMBER_KEY,"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,57,"DATE_KEY, TIME_KEY, CHOICE_KEY };"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,59,"private static final String[] PATTERN_KEYS = new String[] { DATE_KEY,"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,60,TIME_KEY };
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,62,private static class OrderedNameKeyedMetaFormat extends NameKeyedMetaFormat {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,63,private static final long serialVersionUID = -7688772075239431055L;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,65,private List keys;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,67,"private OrderedNameKeyedMetaFormat(String[] names, Format[] formats) {"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,68,"super(createMap(names, formats));"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,69,this.keys = Arrays.asList(names);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,72,"private static Map createMap(String[] names, Format[] formats) {"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,73,"Validate.isTrue(ArrayUtils.isSameLength(names, formats));"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,74,HashMap result = new HashMap(names.length);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,75,for (int i = 0; i < names.length; i++) {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,76,"result.put(names[i], formats[i]);"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,78,return result;
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,81,protected Iterator iterateKeys() {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,82,return keys.iterator();
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,87,* Get a default metaformat for the specified Locale.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,89,* @param locale
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,90,*            the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,91,* @return Format
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,93,public static Format getFormat(final Locale locale) {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,94,Format nmf = new NumberMetaFormat(locale);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,95,Format dmf = new DateMetaFormat(locale).setHandlePatterns(false);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,96,Format tmf = new TimeMetaFormat(locale).setHandlePatterns(false);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,98,return new MultiFormat(new Format[] {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,99,"new OrderedNameKeyedMetaFormat(NO_SUBFORMAT_KEYS, new Format[] {"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,100,"getDefaultFormat(nmf), getDefaultFormat(dmf),"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,101,"getDefaultFormat(tmf) }),"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,102,"new OrderedNameKeyedMetaFormat(NO_PATTERN_KEYS, new Format[] {"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,103,"nmf, dmf, tmf, ChoiceMetaFormat.INSTANCE }),"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,104,"new OrderedNameKeyedMetaFormat(PATTERN_KEYS,"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,105,"new Format[] { new DateMetaFormat(locale),"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,106,new TimeMetaFormat(locale) }) });
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,109,private static Format getDefaultFormat(Format metaformat) {
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,110,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,111,"Object o = metaformat.parseObject("""", pos);"
True,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,112,return pos.getErrorIndex() < 0 ? (Format) o : null;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,19,import java.text.Format;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,20,import java.text.MessageFormat;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,22,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,23,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,25,import org.apache.commons.lang.Validate;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,28,* Extends <code>MessageFormat</code> to allow pluggable/additional formatting
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,29,"* options for embedded format elements; requires a ""meta-format"", i.e. a"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,30,* <code>Format</code> capable of parsing and formatting other
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,31,* <code>Format</code>s.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,33,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,34,* @since 2.4
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,35,* @version $Id$
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,37,public class ExtendedMessageFormat extends MessageFormat {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,38,private static final long serialVersionUID = -2362048321261811743L;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,41,* Get a default meta-format for the default Locale. This will produce
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,42,* behavior identical to a <code>java.lang.MessageFormat</code> using the
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,43,* default locale.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,45,* @return Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,47,public static Format createDefaultMetaFormat() {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,48,return createDefaultMetaFormat(Locale.getDefault());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,52,* Get a default meta-format for the specified Locale. This will produce
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,53,* behavior identical to a <code>java.lang.MessageFormat</code> using
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,54,* <code>locale</code>.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,56,* @param locale
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,57,*            the Locale for the resulting Format instance.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,58,* @return Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,60,public static Format createDefaultMetaFormat(Locale locale) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,61,return DefaultMetaFormatFactory.getFormat(locale);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,64,private static class Parser {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,65,"private static final String ESCAPED_QUOTE = ""''"";"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,66,"private static final char START_FMT = ',';"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,67,private static final char END_FE = '}';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,68,private static final char START_FE = '{';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,69,private static final char QUOTE = '\'';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,71,private String stripFormats(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,72,StringBuffer sb = new StringBuffer(pattern.length());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,73,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,74,while (pos.getIndex() < pattern.length()) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,75,switch (pattern.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,76,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,77,"appendQuotedString(pattern, pos, sb, true);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,78,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,79,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,80,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,81,"readArgumentIndex(pattern, next(pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,82,"sb.append(pattern, start, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,83,if (pattern.charAt(pos.getIndex()) == START_FMT) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,84,"eatFormat(pattern, next(pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,86,if (pattern.charAt(pos.getIndex()) != END_FE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,87,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,88,"""Unreadable format element at position """
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,89,+ start);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,91,// fall through
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,92,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,93,sb.append(pattern.charAt(pos.getIndex()));
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,94,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,97,return sb.toString();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,100,"private String insertFormats(String pattern, Format[] formats,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,101,Format metaFormat) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,102,if (formats == null || formats.length == 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,103,return pattern;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,105,StringBuffer sb = new StringBuffer(pattern.length() * 2);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,106,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,107,int fe = -1;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,108,while (pos.getIndex() < pattern.length()) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,109,char c = pattern.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,110,switch (c) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,111,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,112,"appendQuotedString(pattern, pos, sb, false);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,113,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,114,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,115,fe++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,116,sb.append(START_FE).append(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,117,"readArgumentIndex(pattern, next(pos)));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,118,if (formats[fe] != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,119,sb.append(START_FMT).append(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,120,metaFormat.format(formats[fe]));
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,122,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,123,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,124,sb.append(pattern.charAt(pos.getIndex()));
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,125,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,128,return sb.toString();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,131,"private Format[] parseFormats(String pattern, Format metaFormat) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,132,ArrayList result = new ArrayList();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,133,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,134,while (pos.getIndex() < pattern.length()) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,135,switch (pattern.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,136,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,137,"getQuotedString(pattern, next(pos), true);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,138,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,139,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,140,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,141,"readArgumentIndex(pattern, next(pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,142,if (pattern.charAt(pos.getIndex()) == START_FMT) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,143,"seekNonWs(pattern, next(pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,144,"result.add(metaFormat.parseObject(pattern, pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,146,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,147,if (pattern.charAt(pos.getIndex()) != END_FE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,148,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,149,"""Unreadable format element at position """
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,150,+ start);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,152,// fall through
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,153,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,154,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,157,return (Format[]) result.toArray(new Format[result.size()]);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,160,"private void seekNonWs(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,161,int len = 0;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,162,char[] buffer = pattern.toCharArray();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,163,do {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,164,"len = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,165,pos.setIndex(pos.getIndex() + len);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,166,} while (len > 0 && pos.getIndex() < pattern.length());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,169,private ParsePosition next(ParsePosition pos) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,170,pos.setIndex(pos.getIndex() + 1);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,171,return pos;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,174,"private String readArgumentIndex(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,175,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,176,for (; pos.getIndex() < pattern.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,177,char c = pattern.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,178,if (c == START_FMT || c == END_FE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,179,"return pattern.substring(start, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,181,if (!Character.isDigit(c)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,182,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,183,"""Invalid format argument index at position """
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,184,+ start);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,187,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,188,"""Unterminated format element at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,191,"private StringBuffer appendQuotedString(String pattern,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,192,"ParsePosition pos, StringBuffer appendTo, boolean escapingOn) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,193,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,194,if (escapingOn && pattern.charAt(start) == QUOTE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,195,return appendTo == null ? null : appendTo.append(QUOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,197,int lastHold = start;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,198,for (int i = pos.getIndex(); i < pattern.length(); i++) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,199,if (escapingOn
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,200,&& pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,201,"appendTo.append(pattern, lastHold, pos.getIndex()).append("
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,202,QUOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,203,pos.setIndex(i + ESCAPED_QUOTE.length());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,204,lastHold = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,205,continue;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,207,switch (pattern.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,208,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,209,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,210,"return appendTo == null ? null : appendTo.append(pattern,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,211,"lastHold, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,212,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,213,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,216,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,217,"""Unterminated quoted string at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,220,"private void getQuotedString(String pattern, ParsePosition pos,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,221,boolean escapingOn) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,222,"appendQuotedString(pattern, pos, null, escapingOn);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,225,"private void eatFormat(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,226,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,227,int depth = 1;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,228,for (; pos.getIndex() < pattern.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,229,switch (pattern.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,230,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,231,depth++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,232,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,233,case END_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,234,depth--;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,235,if (depth == 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,236,return;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,238,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,239,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,240,"getQuotedString(pattern, pos, false);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,241,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,244,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,245,"""Unterminated format element at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,249,private static final Parser PARSER = new Parser();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,251,private Format metaFormat;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,252,private String strippedPattern;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,255,* Create a new ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,257,* @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,258,* @param metaFormat
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,259,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,260,*             if <code>metaFormat</code> is <code>null</code> or in
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261,*             case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,263,"public ExtendedMessageFormat(String pattern, Format metaFormat) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,265,* We have to do some acrobatics here: the call to the super constructor
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,266,"* will invoke applyPattern(), but we don't want to apply the pattern"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,267,* until we've installed our custom metaformat. So we check for that in
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,268,"* our (final) applyPattern implementation, and re-call at the end of"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,269,* this constructor.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,271,super(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,272,setMetaFormat(metaFormat);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,273,applyPattern(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,277,* Apply the specified pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,279,* @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,280,*            pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,282,public final void applyPattern(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,283,if (metaFormat == null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,284,return;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,286,applyPatternPre(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,287,strippedPattern = PARSER.stripFormats(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,288,super.applyPattern(strippedPattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,289,"setFormats(PARSER.parseFormats(pattern, metaFormat));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,290,applyPatternPost(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,294,* Pre-execution hook that allows subclasses to customize the behavior of
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,295,* the final applyPattern implementation.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,297,* @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,299,protected void applyPatternPre(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,300,// noop
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,304,* Post-execution hook that allows subclasses to customize the behavior of
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,305,* the final applyPattern implementation.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,307,* @param pattern
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,309,protected void applyPatternPost(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,310,// noop
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,314,* Render the pattern from the current state of the
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,315,* <code>ExtendedMessageFormat</code>.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,317,* @return pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,319,public String toPattern() {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,320,"return PARSER.insertFormats(strippedPattern, getFormats(), metaFormat);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,324,* Get the meta-format currently configured.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,326,* @return Format.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,328,public synchronized Format getMetaFormat() {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,329,return metaFormat;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,333,* Set the meta-format. Has no effect until a subsequent call to
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,334,* {@link #applyPattern(String)}.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,336,* @param metaFormat
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,337,*            the Format metaFormat to set.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,339,public synchronized void setMetaFormat(Format metaFormat) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,340,"Validate.notNull(metaFormat, ""metaFormat is null"");"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,341,this.metaFormat = metaFormat;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,20,import java.text.Format;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,22,import java.util.HashMap;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,24,import java.util.Map;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,27,* metaFormat support.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,29,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,30,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,31,* @since 2.4
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,32,* @version $Id$
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,34,public abstract class MetaFormatSupport extends Format {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,36,private static final char END_FE = '}';
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,37,private static final char START_FE = '{';
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,38,private static final char QUOTE = '\'';
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,41,* Invert the specified Map.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,43,* @param map
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,44,*            the Map to invert.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,45,* @return a new Map instance.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,46,* @throws NullPointerException
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,47,*             if <code>map</code> is <code>null</code>.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,49,protected Map invert(Map map) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,50,Map result = new HashMap(map.size());
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,51,for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,52,Map.Entry entry = (Map.Entry) iter.next();
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,53,"result.put(entry.getValue(), entry.getKey());"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,55,return result;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,59,* Find the end of the subformat.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,61,* @param source
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,62,* @param pos
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,64,"protected void seekFormatElementEnd(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,65,int depth = 1;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,66,boolean quote = false;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,67,for (; pos.getIndex() < source.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,68,switch (source.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,69,case QUOTE:
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,70,quote ^= true;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,71,break;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,72,case START_FE:
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,73,depth += quote ? 0 : 1;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,74,break;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,75,case END_FE:
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,76,depth -= quote ? 0 : 1;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,77,if (depth == 0) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,78,return;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,80,break;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,86,* Advance the parse index by 1.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,88,* @param pos
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,89,*            the ParsePosition to advance.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,90,* @return <code>pos</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,92,protected ParsePosition next(ParsePosition pos) {
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,93,pos.setIndex(pos.getIndex() + 1);
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,94,return pos;
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,97,// provide default javadoc >;)
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,99,* Parse an object from the specified String and ParsePosition. If an error
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,100,"* occurs <code>pos.getErrorIndex()</code> will contain a value >= zero,"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,101,* indicating the index at which the parse error occurred.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,103,* @param source
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,104,*            String to parse
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,105,* @param pos
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,106,*            ParsePosition marking index into <code>source</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,107,* @return Object parsed
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,109,"public abstract Object parseObject(String source, ParsePosition pos);"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,112,"* Format the specified object, appending to the given StringBuffer, and"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,113,* optionally respecting the specified FieldPosition.
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,115,* @param obj
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,116,*            the object to format
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,117,* @param toAppendTo
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,118,*            the StringBuffer to which the formatted object should be
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,119,*            appended
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,120,* @param pos
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,121,*            FieldPosition associated with <code>obj</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,122,* @return <code>toAppendTo</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,123,* @throws NullPointerException
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,124,*             if <code>toAppendTo</code> or <code>pos</code> is
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,125,*             <code>null</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,126,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,127,*             if unable to format <code>obj</code>
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,129,"public abstract StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,130,FieldPosition pos);
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,20,import java.text.Format;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,22,import java.util.HashMap;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,24,import java.util.Map;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,26,import org.apache.commons.lang.ObjectUtils;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,29,* Basic metaFormat that requires enough configuration information to
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,30,* parse/format other Formats for use by ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,32,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,33,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,34,* @since 2.4
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,35,* @version $Id$
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,37,public class NameKeyedMetaFormat extends MetaFormatSupport {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,38,private static final long serialVersionUID = 5963121202601122213L;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,40,private static final char TRIGGER_END = '}';
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,41,"private static final char TRIGGER_SUBFORMAT = ',';"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,44,* Provides a builder with a fluent interface. Example:
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,45,* <p>
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,46,* <code>
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,47,* <pre>
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,48,"* NameKeyedMetaFormat nkmf = new NameKeyedMetaFormat.Builder().put(&quot;foo&quot;,"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,49,"*         new FooFormat()).put(&quot;bar&quot;, new BarFormat())"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,50,"*         .put(&quot;baz&quot;, new BazFormat()).toNameKeyedMetaFormat();"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,51,* </pre></code>
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,52,* </p>
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,54,public static class Builder {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,55,private HashMap keyedFormats = new HashMap();
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,58,* Add the specified format with the specified string key.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,60,* @param key
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,61,* @param format
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,62,* @return
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,64,"public Builder put(String key, Format format) {"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,65,"keyedFormats.put(key, format);"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,66,return this;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,70,* Render the {@link NameKeyedMetaFormat} instance from this Builder.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,72,* @return NameKeyedMetaFormat
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,74,public NameKeyedMetaFormat toNameKeyedMetaFormat() {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,75,return new NameKeyedMetaFormat(keyedFormats);
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,79,"private Map/* <String, Format> */keyedFormats = new HashMap();"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,82,* Create a new NameKeyedMetaFormat.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,84,public NameKeyedMetaFormat(Map keyedFormats) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,85,this.keyedFormats = keyedFormats;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,89,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,91,"* @see org.apache.commons.lang.text.MetaFormatSupport#format(java.lang.Object,"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,92,"*      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,94,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,95,FieldPosition pos) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,96,int start = toAppendTo.length();
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,97,// first try to match a sans-subformat format:
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,98,for (Iterator iter = iterateKeys(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,99,Object key = iter.next();
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,100,"if (ObjectUtils.equals(keyedFormats.get(key), obj)) {"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,101,return toAppendTo.append(key);
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,104,// now try again with subformats:
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,105,for (Iterator iter = iterateKeys(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,106,Object key = iter.next();
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,107,try {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,108,"((Format) keyedFormats.get(key)).format(obj, toAppendTo, pos);"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,109,if (toAppendTo.length() > start) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,110,"toAppendTo.insert(start, ',');"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,112,"return toAppendTo.insert(start, key);"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,113,} catch (Exception e) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,114,continue;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,117,"throw new IllegalArgumentException(""Cannot format "" + obj);"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,121,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,123,"* @see org.apache.commons.lang.text.MetaFormatSupport#parseObject(java.lang.String,"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,124,*      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,126,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,127,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,128,boolean subformat = false;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,129,for (; pos.getIndex() < source.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,130,char c = source.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,131,if (c == TRIGGER_SUBFORMAT) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,132,subformat = true;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,133,break;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,135,if (c == TRIGGER_END) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,136,break;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,139,"String key = source.substring(start, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,140,Format format = (Format) keyedFormats.get(key);
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,141,if (format == null) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,142,format = (Format) keyedFormats.get(key.trim());
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,143,if (format == null) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,144,pos.setErrorIndex(start);
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,145,return null;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,148,if (subformat) {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,149,"return format.parseObject(source, next(pos));"
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,151,return format;
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,155,* Extension point to alter the iteration order of the delegate format keys.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,157,* @return Iterator.
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,159,protected Iterator iterateKeys() {
True,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,160,return keyedFormats.keySet().iterator();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,19,import java.text.DecimalFormat;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,20,import java.text.DecimalFormatSymbols;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,21,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,22,import java.text.NumberFormat;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,23,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,24,import java.util.HashMap;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,25,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,26,import java.util.Map;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,29,"* Stock ""number"" MetaFormat."
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,31,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,32,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,33,* @since 2.4
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,34,* @version $Id$
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,36,public class NumberMetaFormat extends MetaFormatSupport {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,37,private static final long serialVersionUID = -5876397363537288952L;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,38,"private static final String DEFAULT = """";"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,39,"private static final String INTEGER = ""integer"";"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,40,"private static final String CURRENCY = ""currency"";"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,41,"private static final String PERCENT = ""percent"";"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,43,private Locale locale;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,45,private transient Map subformats;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,46,private transient Map reverseSubformats;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,47,private transient DecimalFormatSymbols decimalFormatSymbols;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,50,* Create a new NumberMetaFormat.
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,52,public NumberMetaFormat() {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,53,this(Locale.getDefault());
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,57,* Create a new NumberMetaFormat.
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,59,* @param locale
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,61,public NumberMetaFormat(Locale locale) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,62,super();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,63,this.locale = locale;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,67,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,69,"* @see org.apache.commons.lang.text.AbstractMetaFormat#format(java.lang.Object,"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,70,"*      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,72,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,73,FieldPosition pos) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,74,initialize();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,75,String subformat = (String) reverseSubformats.get(obj);
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,76,if (subformat != null) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,77,return toAppendTo.append(subformat);
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,79,if (obj instanceof DecimalFormat) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,80,DecimalFormat df = (DecimalFormat) obj;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,81,if (df.getDecimalFormatSymbols().equals(decimalFormatSymbols)) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,82,return toAppendTo.append(df.toPattern());
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,85,throw new IllegalArgumentException();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,89,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,91,"* @see java.text.Format#parseObject(java.lang.String,"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,92,*      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,94,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,95,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,96,"seekFormatElementEnd(source, pos);"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,97,if (pos.getErrorIndex() >= 0) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,98,return null;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,100,"String subformat = source.substring(start, pos.getIndex()).trim();"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,101,initialize();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,102,Object result = subformats.get(subformat);
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,103,if (result != null) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,104,return result;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,106,"return new DecimalFormat(subformat, decimalFormatSymbols);"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,110,* Get the locale in use by this <code>NumberMetaFormat</code>.
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,112,* @return Locale
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,114,public Locale getLocale() {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,115,return locale;
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,118,private synchronized void initialize() {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,119,if (subformats == null) {
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,120,subformats = new HashMap();
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,121,"subformats.put(DEFAULT, NumberFormat.getInstance(getLocale()));"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,122,"subformats.put(INTEGER, NumberFormat"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,123,.getIntegerInstance(getLocale()));
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,124,"subformats.put(CURRENCY, NumberFormat"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,125,.getCurrencyInstance(getLocale()));
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,126,"subformats.put(PERCENT, NumberFormat"
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,127,.getPercentInstance(getLocale()));
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,129,reverseSubformats = invert(subformats);
True,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,130,decimalFormatSymbols = new DecimalFormatSymbols(getLocale());
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,19,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,20,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,21,import java.util.Map;
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,24,"* Stock ""time"" MetaFormat."
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,26,* @see {@link ExtendedMessageFormat}
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,27,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,28,* @since 2.4
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,29,* @version $Id$
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,31,public class TimeMetaFormat extends DateMetaFormatSupport {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,32,private static final long serialVersionUID = -4959095416302142342L;
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,35,* Create a new TimeMetaFormat.
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,37,public TimeMetaFormat() {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,38,super();
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,42,* Create a new NumberMetaFormat.
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,44,* @param locale
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,46,public TimeMetaFormat(Locale locale) {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,47,super(locale);
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,51,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,53,* @see org.apache.commons.lang.text.AbstractDateMetaFormat#createSubformatInstance(int)
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,55,protected DateFormat createSubformatInstance(int style) {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,56,"return DateFormat.getTimeInstance(style, getLocale());"
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,60,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,62,* @see org.apache.commons.lang.text.AbstractDateMetaFormat#createReverseStyleMap()
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,64,protected Map createInverseStyleMap() {
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,65,Map invertMe = createStyleMap();
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,66,invertMe.remove(DEFAULT);
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,67,invertMe.remove(FULL);
True,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,68,return invert(invertMe);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,19,import java.text.DateFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,20,import java.text.MessageFormat;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,21,import java.util.Calendar;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,22,import java.util.GregorianCalendar;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,27,* Abstract testcase to verify behavior of default-configuration
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,28,* ExtendedMessageFormat vs. MessageFormat.
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,30,* @author Matt Benson
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,31,* @since 2.4
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,32,* @version $Id$
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,34,public abstract class AbstractMessageFormatTest extends TestCase {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,35,"protected static final Object[] NUMBERS = { new Double(0.1),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,36,"new Double(1.1), new Double(2.1) };"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,38,protected static final Object[] DATES = {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,39,"new GregorianCalendar(1970, Calendar.JANUARY, 01, 0, 15, 20)"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,40,".getTime(),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,41,"new GregorianCalendar(1970, Calendar.FEBRUARY, 02, 12, 30, 35)"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,42,".getTime(),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,43,"new GregorianCalendar(1970, Calendar.MARCH, 03, 18, 45, 50)"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,44,.getTime() };
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,47,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,49,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,51,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,52,super.setUp();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,55,protected abstract MessageFormat createMessageFormat(String pattern);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,57,"protected void doAssertions(String expected, String pattern, Object[] args) {"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,58,"doAssertions(expected, pattern, args, pattern);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,61,"protected void doAssertions(String expected, String pattern, Object[] args,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,62,String toPattern) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,63,MessageFormat f = createMessageFormat(pattern);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,64,"assertEquals(expected, f.format(args));"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,65,"assertEquals(toPattern, f.toPattern());"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,68,public void testPlain() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,69,StringBuffer pattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,70,for (int i = 0; i < NUMBERS.length; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,71,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,72,"pattern.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,74,"pattern.append(""Object "").append(i).append("": "").append(NUMBERS[i]);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,76,String p = pattern.toString();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,77,"doAssertions(p, p, NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,80,public void testSimple() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,81,"doAssertions(""Object 0: 0.1; Object 1: 1.1; Object 2: 2.1"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,82,"""Object 0: {0}; Object 1: {1}; Object 2: {2}"", NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,85,public void testNumber() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,86,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,87,"""Number 0: 0.1; Number 1: 1.1; Number 2: 2.1"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,88,"""Number 0: {0,number}; Number 1: {1,number}; Number 2: {2,number}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,89,NUMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,92,public void testNumberLooseFormatting() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,93,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,94,"""Number 0: 0.1; Number 1: 1.1; Number 2: 2.1"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,95,"""Number 0: {0, number }; Number 1: {1, number }; Number 2: {2, number }"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,96,"NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,97,"""Number 0: {0,number}; Number 1: {1,number}; Number 2: {2,number}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,100,public void testInteger() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,101,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,102,"""Number 0: 0; Number 1: 1; Number 2: 2"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,103,"""Number 0: {0,number,integer}; Number 1: {1,number,integer}; Number 2: {2,number,integer}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,104,NUMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,107,public void testIntegerLooseFormatting() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,108,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,109,"""Number 0: 0; Number 1: 1; Number 2: 2"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,110,"""Number 0: {0, number , integer }; Number 1: {1, number , integer }; Number 2: {2, number , integer }"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,111,"NUMBERS,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,112,"""Number 0: {0,number,integer}; Number 1: {1,number,integer}; Number 2: {2,number,integer}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,115,public void testCurrency() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,116,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,117,"""Number 0: $0.10; Number 1: $1.10; Number 2: $2.10"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,118,"""Number 0: {0,number,currency}; Number 1: {1,number,currency}; Number 2: {2,number,currency}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,119,NUMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,122,public void testPercent() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,123,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,124,"""Number 0: 10%; Number 1: 110%; Number 2: 210%"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,125,"""Number 0: {0,number,percent}; Number 1: {1,number,percent}; Number 2: {2,number,percent}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,126,NUMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,129,public void testNumberPattern() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,130,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,131,"""Number 0: 000.100; Number 1: 001.100; Number 2: 002.100"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,132,"""Number 0: {0,number,#000.000}; Number 1: {1,number,#000.000}; Number 2: {2,number,#000.000}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,133,NUMBERS);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,136,public void testDate() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,137,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,138,"""Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,139,"""Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"", DATES);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,142,public void testDateLooseFormatting() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,143,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,144,"""Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,145,"""Date 0: {0, date }; Date 1: {1, date }; Date 2: {2,  date  }"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,146,"DATES, ""Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,149,public void testShortDate() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,150,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,151,"""Date 0: 1/1/70; Date 1: 2/2/70; Date 2: 3/3/70"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,152,"""Date 0: {0,date,short}; Date 1: {1,date,short}; Date 2: {2,date,short}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,153,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,156,public void testShortDateLooseFormatting() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,157,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,158,"""Date 0: 1/1/70; Date 1: 2/2/70; Date 2: 3/3/70"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,159,"""Date 0: {0, date , short }; Date 1: {1,  date  , short }; Date 2: {2, date ,  short  }"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,160,"DATES,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,161,"""Date 0: {0,date,short}; Date 1: {1,date,short}; Date 2: {2,date,short}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,164,public void testMediumDate() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,165,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,166,"""Date 0: Jan 1, 1970; Date 1: Feb 2, 1970; Date 2: Mar 3, 1970"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,167,"""Date 0: {0,date,medium}; Date 1: {1,date,medium}; Date 2: {2,date,medium}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,168,"DATES, ""Date 0: {0,date}; Date 1: {1,date}; Date 2: {2,date}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,171,public void testLongDate() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,172,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,173,"""Date 0: January 1, 1970; Date 1: February 2, 1970; Date 2: March 3, 1970"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,174,"""Date 0: {0,date,long}; Date 1: {1,date,long}; Date 2: {2,date,long}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,175,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,178,public void testFullDate() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,179,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,180,"""Date 0: Thursday, January 1, 1970; Date 1: Monday, February 2, 1970; Date 2: Tuesday, March 3, 1970"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,181,"""Date 0: {0,date,full}; Date 1: {1,date,full}; Date 2: {2,date,full}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,182,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,185,public void testDatePattern() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,186,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,187,"""Date 0: AD1970.1; Date 1: AD1970.33; Date 2: AD1970.62"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,188,"""Date 0: {0,date,Gyyyy.D}; Date 1: {1,date,Gyyyy.D}; Date 2: {2,date,Gyyyy.D}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,189,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,192,public void testTime() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,193,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,194,"""Time 0: 12:15:20 AM; Time 1: 12:30:35 PM; Time 2: 6:45:50 PM"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,195,"""Time 0: {0,time}; Time 1: {1,time}; Time 2: {2,time}"", DATES);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,198,public void testShortTime() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,199,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,200,"""Time 0: 12:15 AM; Time 1: 12:30 PM; Time 2: 6:45 PM"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,201,"""Time 0: {0,time,short}; Time 1: {1,time,short}; Time 2: {2,time,short}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,202,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,205,public void testMediumTime() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,206,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,207,"""Time 0: 12:15:20 AM; Time 1: 12:30:35 PM; Time 2: 6:45:50 PM"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,208,"""Time 0: {0,time,medium}; Time 1: {1,time,medium}; Time 2: {2,time,medium}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,209,"DATES, ""Time 0: {0,time}; Time 1: {1,time}; Time 2: {2,time}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,212,public void testLongTime() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,213,DateFormat df = DateFormat.getTimeInstance(DateFormat.LONG);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,214,StringBuffer expected = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,215,for (int i = 0; i < DATES.length; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,216,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,217,"expected.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,219,"expected.append(""Time "").append(i).append("": "").append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,220,df.format(DATES[i]));
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,222,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,223,"expected.toString(),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,224,"""Time 0: {0,time,long}; Time 1: {1,time,long}; Time 2: {2,time,long}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,225,DATES);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,228,public void testFullTime() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,229,DateFormat df = DateFormat.getTimeInstance(DateFormat.FULL);
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,230,StringBuffer expected = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,231,for (int i = 0; i < DATES.length; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,232,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,233,"expected.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,235,"expected.append(""Time "").append(i).append("": "").append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,236,df.format(DATES[i]));
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,238,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,239,"expected.toString(),"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,240,"""Time 0: {0,time,full}; Time 1: {1,time,full}; Time 2: {2,time,full}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,241,"DATES,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,242,"""Time 0: {0,time,long}; Time 1: {1,time,long}; Time 2: {2,time,long}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,245,public void testTimePattern() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,246,doAssertions(
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,247,"""Time 0: AM01520; Time 1: PM123035; Time 2: PM184550"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,248,"""Time 0: {0,time,aHms}; Time 1: {1,time,aHms}; Time 2: {2,time,aHms}"","
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,249,"DATES,"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,250,"""Time 0: {0,date,aHms}; Time 1: {1,date,aHms}; Time 2: {2,date,aHms}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,253,public void testChoice() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,254,"String choice = ""0.0#x|1.0#y|2.0#z"";"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,255,StringBuffer pattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,256,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,257,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,258,"pattern.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,260,"pattern.append(""Choice "").append(i).append("": {"").append(i).append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,261,""",choice,"").append(choice).append(""}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,263,"doAssertions(""Choice 0: x; Choice 1: y; Choice 2: z"", pattern"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,264,".toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,267,public void testChoiceLooseFormatting() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,268,"String choice = ""0.0#x |1.0#y |2.0#z "";"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,269,StringBuffer pattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,270,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,271,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,272,"pattern.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,274,"pattern.append(""Choice "").append(i).append("": {"").append(i).append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,275,""",choice,"").append(choice).append(""}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,277,"doAssertions(""Choice 0: x ; Choice 1: y ; Choice 2: z "", pattern"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,278,".toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,281,public void testChoiceRecursive() {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,282,"String choice = ""0.0#{0}|1.0#{1}|2.0#{2}"";"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,283,StringBuffer pattern = new StringBuffer();
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,284,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,285,if (i > 0) {
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,286,"pattern.append(""; "");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,288,"pattern.append(""Choice "").append(i).append("": {"").append(i).append("
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,289,""",choice,"").append(choice).append(""}"");"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,291,"doAssertions(""Choice 0: 0.1; Choice 1: 1.1; Choice 2: 2.1"", pattern"
True,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java,292,".toString(), NUMBERS);"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,19,import java.text.MessageFormat;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,23,* Baseline tests for {@link ExtendedMessageFormat}
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,25,* @author Matt Benson
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,26,* @since 2.4
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,27,* @version $Id$
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,29,public class ExtendedMessageFormatBaselineTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,32,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,34,* @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,36,protected MessageFormat createMessageFormat(String pattern) {
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,37,"return new ExtendedMessageFormat(pattern, ExtendedMessageFormat.createDefaultMetaFormat(Locale.US));"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,19,import java.text.FieldPosition;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,20,import java.text.Format;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,21,import java.text.MessageFormat;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,22,import java.text.ParsePosition;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,23,import java.util.Calendar;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,24,import java.util.GregorianCalendar;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,25,import java.util.Locale;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,28,* Extension tests for {@link ExtendedMessageFormat}
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,30,* @author Matt Benson
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,31,* @since 2.4
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,32,* @version $Id$
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,34,public class MessageFormatExtensionTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,36,static class ProperNameCapitalizationFormat extends Format {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,37,private static final long serialVersionUID = -6081911520622186866L;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,38,private static final StrMatcher MATCH = StrMatcher
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,39,".charSetMatcher("" ,."");"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,42,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,44,"* @see java.text.Format#format(java.lang.Object,"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,45,"*      java.lang.StringBuffer, java.text.FieldPosition)"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,47,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,48,FieldPosition fpos) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,49,char[] buffer = String.valueOf(obj).toCharArray();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,50,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,51,while (pos.getIndex() < buffer.length) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,52,char c = buffer[pos.getIndex()];
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,53,if (Character.isLowerCase(c)) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,54,c = Character.toUpperCase(c);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,56,if (Character.isUpperCase(c)) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,57,toAppendTo.append(c);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,58,next(pos);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,60,int start = pos.getIndex();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,61,"seekDelimiter(buffer, pos);"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,62,"toAppendTo.append(new String(buffer, start, pos.getIndex()"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,63,- start).toLowerCase());
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,65,return toAppendTo;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,69,* Unable to do much; return the String.
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,71,"public Object parseObject(String source, ParsePosition pos) {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,72,return source.substring(pos.getIndex());
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,75,"private static void seekDelimiter(char[] buffer, ParsePosition pos) {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,76,for (; pos.getIndex() < buffer.length
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,77,"&& MATCH.isMatch(buffer, pos.getIndex()) == 0; next(pos))"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,79,if (pos.getIndex() >= buffer.length) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,80,return;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,82,int len = 0;
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,83,do {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,84,"len = MATCH.isMatch(buffer, pos.getIndex());"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,85,pos.setIndex(pos.getIndex() + len);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,86,} while (len > 0 && pos.getIndex() < buffer.length);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,89,private static void next(ParsePosition pos) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,90,pos.setIndex(pos.getIndex() + 1);
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,95,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,97,* @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,99,protected MessageFormat createMessageFormat(String pattern) {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,100,"return new ExtendedMessageFormat(pattern, new MultiFormat.Builder()"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,101,.add(ExtendedMessageFormat.createDefaultMetaFormat(Locale.US)).add(
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,102,"new NameKeyedMetaFormat.Builder().put(""properName"","
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,103,new ProperNameCapitalizationFormat())
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,104,.toNameKeyedMetaFormat()).toMultiFormat());
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,107,public void testProperName() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,108,"doAssertions(""John Q. Public; John Q. Public"","
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,109,"""{0,properName}; {1,properName}"", new String[] {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,110,"""JOHN Q. PUBLIC"", ""john q. public"" });"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,113,public void testMixed() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,114,"doAssertions(""John Q. Public was born on Thursday, January 1, 1970."","
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,115,"""{0,properName} was born on {1,date,full}."", new Object[] {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,116,"""john q. public"","
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,117,"new GregorianCalendar(1970, Calendar.JANUARY, 01, 0,"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,118,"15, 20).getTime() });"
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,1,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,3,import java.text.MessageFormat;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,4,import java.util.Locale;
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,7,* Baseline tests for java.text.MessageFormat.
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,9,* @author Matt Benson
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,10,* @since 2.4
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,11,* @version $Id$
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,13,public class MessageFormatTest extends AbstractMessageFormatTest {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,15,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,17,* @see org.apache.commons.lang.text.AbstractMessageFormatTest#createMessageFormat(java.lang.String)
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,19,protected MessageFormat createMessageFormat(String pattern) {
True,src/test/org/apache/commons/lang/text/MessageFormatTest.java,src/test/org/apache/commons/lang/text/MessageFormatTest.java,20,"return new MessageFormat(pattern, Locale.US);"
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,60,suite.addTestSuite(MessageFormatTest.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,61,suite.addTestSuite(ExtendedMessageFormatBaselineTest.class);
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,62,suite.addTestSuite(MessageFormatExtensionTest.class);

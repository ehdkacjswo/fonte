is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,39,private LifeCycleStage stage = LifeCycleStage.RAW;
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,167, @return Whether the normalization pass has been run.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,169,* @return The current life-cycle stage of the AST we're working on.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,169,bstract boolean isNormalized();
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,171,LifeCycleStage getLifeCycleStage() {
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,172,return stage;
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,225, Set if the normalization pass has been done.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,226, Note: non-private to enable test cases that require the Normalize pass.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,228,bstract void setNormalized();
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,231, Set once unnormalizing passes have been start.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,232, Note: non-private to enable test cases that require the Normalize pass.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,229,* Set the current life-cycle state.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,234,bstract void setUnnormalized();
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,231,void setLifeCycleStage(LifeCycleStage stage) {
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,232,this.stage = stage;
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,259,static enum LifeCycleStage {
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,260,"RAW,"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,261,NORMALIZED;
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,263,boolean isNormalized() {
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,264,return this == NORMALIZED;
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,86,eturn currentTraversal.getCompiler().isNormalized();
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,86,return currentTraversal.getCompiler().getLifeCycleStage().isNormalized();
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,134,reconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,134,Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,79,reconditions.checkState(!compiler.isNormalized());
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,79,Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,43,reconditions.checkArgument(compiler.isNormalized());
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,43,Preconditions.checkArgument(compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,96,reconditions.checkState(!compiler.isNormalized());
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,96,Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,119," Whether the optional ""normalization"" pass has been run.  Passes that"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,120, depend on the assumptions made there should check this value.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,122,rivate boolean normalized = false;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,914, Set if the normalization pass has been done.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,915, Note: non-private to enable test cases that require the Normalize pass.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,917,Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,918,oid setNormalized() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,919,ormalized = true;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,923, Set once unnormalizing passes have been start.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,924, Note: non-private to enable test cases that require the Normalize pass.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,926,Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,927,oid setUnnormalized() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,928,ormalized = false;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,931,Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,932,oolean isNormalized() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,933,eturn normalized;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1873,rivate boolean normalized;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1844,private AbstractCompiler.LifeCycleStage lifeCycleStage;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1890,tate.normalized = normalized;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1861,state.lifeCycleStage = getLifeCycleStage();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1908,ormalized = state.normalized;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1879,setLifeCycleStage(state.lifeCycleStage);
False,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,54,reconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,54,Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,26,import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1692,ompiler.setUnnormalized();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1693,compiler.setLifeCycleStage(LifeCycleStage.RAW);
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,212,reconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,212,Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,48,reconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,48,Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,107,reconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,107,Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,22,import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,144,ompiler.setNormalized();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,145,compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,54,f (compiler.isNormalized()) {
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,54,if (compiler.getLifeCycleStage().isNormalized()) {
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,112,f (compiler.isNormalized()) {
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,112,if (compiler.getLifeCycleStage().isNormalized()) {
False,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,173,"reconditions.checkState(compiler.isNormalized(),"
True,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,173,"Preconditions.checkState(compiler.getLifeCycleStage().isNormalized(),"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,20,import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1375,ompiler.setNormalized();
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1376,compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,21,import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,219,ompiler.setNormalized();
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,220,compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,19,import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,73,etLastCompiler().setNormalized();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,73,getLastCompiler().setLifeCycleStage(LifeCycleStage.NORMALIZED);
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,95,etLastCompiler().setNormalized();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,95,getLastCompiler().setLifeCycleStage(LifeCycleStage.NORMALIZED);

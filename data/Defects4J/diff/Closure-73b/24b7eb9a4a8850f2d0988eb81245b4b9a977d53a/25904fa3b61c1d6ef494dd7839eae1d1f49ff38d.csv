is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,147,* Parses code for testing.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,149,abstract Node parseTestCode(String code);
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,142,/ TODO(johnlenz): The pass should maintain the constant annotations during
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,143,/ the main pass.
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,144,"ew Normalize.PropogateConstantAnnotations(compiler, false);"
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,54,Preconditions.checkState(compiler.isNormalized());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,96,static Node parseAndNormalizeTestCode(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,97,"AbstractCompiler compiler, String code, String prefix) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,98,Node js = compiler.parseTestCode(code);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,99,"NodeTraversal.traverse(compiler, js,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,100,"new Normalize.NormalizeStatements(compiler, false));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,101,NodeTraversal.traverse(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,102,"compiler, js,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,103,new MakeDeclaredNamesUnique());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,104,return js;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,128,"ew PropogateConstantAnnotations(compiler, assertOnChange)"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,139,"new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,134,ublic static class PropogateConstantAnnotations
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,146,* Propagate constant annotations over the Var graph.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,148,static class PropagateConstantAnnotationsOverVars
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,140,ublic PropogateConstantAnnotations(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,154,PropagateConstantAnnotationsOverVars(
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,166,f ((info != null && info.isConstant()) &&
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,167,n.getBooleanProp(Node.IS_CONSTANT_NAME)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,180,boolean shouldBeConstant =
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,181,(info != null && info.isConstant()) ||
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,182,NodeUtil.isConstantByConvention(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,183,"compiler.getCodingConvention(), n, parent);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,184,boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,185,if (shouldBeConstant && !isMarkedConstant) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,176,"/ Even though the AST has changed (an annotation was added),"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,177,/ the annotations are not compared so don't report the change.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,178,"/ reportCodeChange(""constant annotation"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,285,*   - Add constant annotations based on coding convention.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,330,case Token.NAME:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,331,case Token.STRING:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,332,"annotateConstantsByConvention(n, parent);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,333,break;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,338,* Mark names and properties that are constants by convention.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,340,"private void annotateConstantsByConvention(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,341,Preconditions.checkState(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,342,n.getType() == Token.NAME || n.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,344,// There are only two cases where a string token
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,345,// may be a variable reference: The right side of a GETPROP
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,346,// or an OBJECTLIT key.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,347,"boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,348,boolean isProperty = isObjLitKey ||
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,349,(parent.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,350,parent.getLastChild() == n);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,if (n.getType() == Token.NAME || isProperty) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,if (NodeUtil.isConstantByConvention(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,353,"compiler.getCodingConvention(), n, parent)) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,"n.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,355,// TODO(nicksantos): Turn this on.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,356,// if (assertOnChange) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,//   String name = n.getString();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,//   throw new IllegalStateException(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,359,"//       ""Unexpected const change.\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,360,"//       ""  name: ""+ name + ""\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,"//       ""  gramps:"" + n.getParent().getParent().toStringTree());"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,132,xtends NodeTraversal.AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,132,implements NodeTraversal.Callback {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,140,@Override
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,141,"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,142,if (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,143,normalizeObjectLiteralAnnotations(n);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,145,return true;
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,148,@Override
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,151,ase Token.NAME:
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,152,ase Token.STRING:
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,153,"nnotateConstants(n, parent);"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,154,reak;
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,156,ase Token.OBJECTLIT:
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,157,isitObjectLiteral(n);
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,158,reak;
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,162,rivate void visitObjectLiteral(Node objlit) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,162,private void normalizeObjectLiteralAnnotations(Node objlit) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,167,"isitObjectLiteralKey(objlit, key, value);"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,167,"normalizeObjectLiteralKeyAnnotations(objlit, key, value);"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,172, Prepare the object literal keys.
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,174,"rivate void visitObjectLiteralKey(Node objlit, Node key, Node value) {"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,175,"ormalizeObjectLitJsDocs(objlit, key, value);"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,176,"nnotateObjLitConstants(objlit, key, value);"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,230,"rivate void normalizeObjectLitJsDocs(Node objlit, Node key, Node value) {"
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,222,private void normalizeObjectLiteralKeyAnnotations(
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,223,"Node objlit, Node key, Node value) {"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,239, Mark names and properties that are constants by convention.
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,241,"rivate void annotateConstants(Node n, Node parent) {"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,242,reconditions.checkState(
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,243,.getType() == Token.NAME || n.getType() == Token.STRING);
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,245,/ There are only two cases where a string token
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,246,/ may be a variable reference: The right side of a GETPROP
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,247,/ or an OBJECTLIT key.
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,248,f (n.getType() != Token.STRING
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,249,| parent.getType() == Token.GETPROP) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,250,"f (NodeUtil.isConstantByConvention(convention, n, parent)) {"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,251,".putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,257, Mark objlit names that are constants by convention.
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,259,"rivate void annotateObjLitConstants(Node objlit, Node key, Node value) {"
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,260,f (key.getType() == Token.NAME || key.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,261,tring name = key.getString();
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,262,f (convention.isConstantKey(name)) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,263,"ey.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,test/com/google/javascript/jscomp/ConstCheckTest.java,test/com/google/javascript/jscomp/ConstCheckTest.java,144,public void testConstAnnotation() {
True,test/com/google/javascript/jscomp/ConstCheckTest.java,test/com/google/javascript/jscomp/ConstCheckTest.java,145,"testError(""/** @const */ var xyz = 1; xyz = 3;"");"
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,602,ode n = compiler.parseTestCode(js);
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,602,"Node n = Normalize.parseAndNormalizeTestCode(compiler, js, """");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,20,import com.google.common.collect.Sets;
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,21,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,24,import java.util.Set;
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,392,public void testIsConstant() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,393,"testSame(""var CONST = 3; var b = CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,394,Node n = getLastCompiler().getRoot();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,396,"Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,397,"assertEquals(2, constantNodes.size());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,398,for (Node hasProp : constantNodes) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,399,"assertEquals(""CONST"", hasProp.getString());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,403,public void testPropertyIsConstant() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,404,"testSame(""var a = {};a.CONST = 3; var b = a.CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,405,Node n = getLastCompiler().getRoot();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,407,"Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,408,"assertEquals(2, constantNodes.size());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,409,for (Node hasProp : constantNodes) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,410,"assertEquals(""CONST"", hasProp.getString());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,414,"private Set<Node> findNodesWithProperty(Node root, final int prop) {"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,415,final Set<Node> set = Sets.newHashSet();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,416,NodeTraversal.traverse(
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,417,"getLastCompiler(), root, new AbstractPostOrderCallback() {"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,418,"public void visit(NodeTraversal t, Node node, Node parent) {"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,419,if (node.getBooleanProp(prop)) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,420,set.add(node);
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,424,return set;
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,402,"var a$ACONST = 4; var b = a$ACONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,441,"""var a$ACONST = 4; var b = a$ACONST;"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,71,"uper(false, c, a, b, new ClassicalRungeKuttaStepInterpolator(), step);"
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaIntegrator.java,71,"super(c, a, b, new ClassicalRungeKuttaStepInterpolator(), step);"
False,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/EulerIntegrator.java,69,"uper(false, c, a, b, new EulerStepInterpolator(), step);"
True,src/java/org/apache/commons/math/ode/EulerIntegrator.java,src/java/org/apache/commons/math/ode/EulerIntegrator.java,69,"super(c, a, b, new EulerStepInterpolator(), step);"
False,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/GillIntegrator.java,71,"uper(false, c, a, b, new GillStepInterpolator(), step);"
True,src/java/org/apache/commons/math/ode/GillIntegrator.java,src/java/org/apache/commons/math/ode/GillIntegrator.java,71,"super(c, a, b, new GillStepInterpolator(), step);"
False,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,64,"uper(false, c, a, b, new MidpointStepInterpolator(), step);"
True,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,src/java/org/apache/commons/math/ode/MidpointIntegrator.java,64,"super(c, a, b, new MidpointStepInterpolator(), step);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,37, <p>Some methods are qualified as <i>fsal</i> (first same as last)
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,38, methods. This means the last evaluation of the derivatives in one
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,39," step is the same as the first in the next step. Then, this"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,40, evaluation can be reused from one step to the next one and the cost
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,41, of such a method is really s-1 evaluations despite the method still
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,42," has s stages. This behaviour is true only for successful steps, if"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,43," the step is rejected after the error estimation phase, no"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,44," evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,45, asi = bi for all i.</p>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,62, @param fsal indicate that the method is an <i>fsal</i>
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,69,"rotected RungeKuttaIntegrator(boolean fsal,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,70,"ouble[] c, double[][] a, double[] b,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,58,"protected RungeKuttaIntegrator(double[] c, double[][] a, double[] b,"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,73,his.fsal       = fsal;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,185,oolean firstTime = true;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,197,f (firstTime || !fsal) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,198,/ first stage
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,199,"quations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,200,irstTime = false;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,183,// first stage
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,184,"equations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,252,f (fsal) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,253,/ save the last evaluation for the next step
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,254,"ystem.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,291,** Indicator for <i>fsal</i> methods. */
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,292,rivate boolean fsal;
False,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,69,"uper(false, c, a, b, new ThreeEighthesStepInterpolator(), step);"
True,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,src/java/org/apache/commons/math/ode/ThreeEighthesIntegrator.java,69,"super(c, a, b, new ThreeEighthesStepInterpolator(), step);"

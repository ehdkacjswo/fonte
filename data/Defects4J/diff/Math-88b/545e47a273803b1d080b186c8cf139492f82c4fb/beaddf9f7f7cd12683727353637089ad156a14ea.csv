is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,90,min = fm;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,20,import org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,36,"** A complex number representing ""(Double.NaN) + (Double.NaN)i"" */"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,37,/** A complex number analogous to {@link java.lang.Double#NaN} */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,150, Test for the equality of two Complex objects.  If both the
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,151, real and imaginary parts of two Complex numbers are exactly
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,152," the same, the two Complex objects are considered to be equal."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,151,* Test for the equality of two Complex objects.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,152,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,153,* If both the real and imaginary parts of two Complex numbers
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,154,"* are exactly the same, and neither is <code>Double.NaN</code>, the two"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,155,* Complex objects are considered to be equal.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,156,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,157,"* All <code>NaN</code> values are considered to be equal - i.e, if either"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,158,* (or both) real and imaginary parts of the complex number are equal
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,159,"* to Double.NaN, the complex number is equal to"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,160,* <code>Complex.NaN</code>.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,167, else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,175,} else  {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,178,if (rhs.isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,179,ret = this.isNaN();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,180,} else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,196,* Get a hashCode for the complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,197,* <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,198,* All NaN values have the same hash code.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,200,* @return a hash code value for this object
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,202,public int hashCode() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,203,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,204,return 7;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,206,return 37 * (17 * MathUtils.hash(imaginary) +
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,207,MathUtils.hash(real));
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,874,  and all corresponding matrix entries are equal.
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,874,* and all corresponding matrix entries are equal.  Corresponding entries
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,875,* are compared using {@link java.lang.Double#doubleToLongBits(double)}
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,894,"f (data[row][col] != m.getEntry(row, col)) {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,895,if (Double.doubleToLongBits(data[row][col]) !=
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,896,"Double.doubleToLongBits(m.getEntry(row, col))) {"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,94,ouble skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,96,kewness = 0.0;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,95,return 0.0d;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,99,kewness = (n0 * moment.m3) /
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,98,return  (n0 * moment.m3) /
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,102,eturn skewness;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,115,ax = (max > values[i]) ? max : values[i];
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,115,if (!Double.isNaN(values[i])) {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,116,max = (max > values[i]) ? max : values[i];
False,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,117,in = (min < values[i]) ? min : values[i];
True,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,117,if (!Double.isNaN(values[i])) {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/java/org/apache/commons/math/stat/descriptive/rank/Min.java,118,min = (min < values[i]) ? min : values[i];
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,189,ouble n = (double) length;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,190,f (n == 0) {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,189,if (length == 0) {
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,193,f (n == 1) {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,192,if (length == 1) {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,195,double n = (double) length;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,736,"hrow new ArithmeticException(""overflow: add"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,736,"throw new ArithmeticException(""overflow: subtract"");"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,454,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,455,ouble value = Double.NaN;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,454,public synchronized double getElement(int index) {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,462,alue = internalArray[startIndex + index];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,461,return internalArray[startIndex + index];
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,468,eturn value;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,478,ublic double[] getElements() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,476,public synchronized double[] getElements() {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,520,nt getInternalLength() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,518,synchronized int getInternalLength() {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,530,ublic int getNumElements() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,528,public synchronized int getNumElements() {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,545,ublic double[] getValues() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,543,public synchronized double[] getValues() {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,686,ublic int start() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,684,public synchronized int start() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,165,public void testEqualsNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,166,"Complex realNaN = new Complex(Double.NaN, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,167,"Complex imaginaryNaN = new Complex(0.0, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,168,Complex complexNaN = Complex.NaN;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,169,assertTrue(realNaN.equals(imaginaryNaN));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,170,assertTrue(imaginaryNaN.equals(complexNaN));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,171,assertTrue(realNaN.equals(complexNaN));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,174,public void testHashCode() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,175,"Complex x = new Complex(0.0, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,176,"Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,177,assertFalse(x.hashCode()==y.hashCode());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,178,"y = new Complex(0.0 + Double.MIN_VALUE, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,179,assertFalse(x.hashCode()==y.hashCode());
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,180,"Complex realNaN = new Complex(Double.NaN, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,181,"Complex imaginaryNaN = new Complex(0.0, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,182,"assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,183,"assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,45,private double nan = Double.NaN;
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,301,// test first nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,302,"x = new double[] {nan, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,303,"TestUtils.assertEquals(three, StatUtils.max(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,305,// test middle nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,306,"x = new double[] {one, nan, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,307,"TestUtils.assertEquals(three, StatUtils.max(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,309,// test last nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,310,"x = new double[] {one, two, nan};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,311,"TestUtils.assertEquals(two, StatUtils.max(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,313,// test all nan returns nan
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,314,"x = new double[] {nan, nan, nan};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,315,"TestUtils.assertEquals(nan, StatUtils.max(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,340,// test first nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,341,"x = new double[] {nan, two, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,342,"TestUtils.assertEquals(two, StatUtils.min(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,344,// test middle nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,345,"x = new double[] {one, nan, three};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,346,"TestUtils.assertEquals(one, StatUtils.min(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,348,// test last nan is ignored
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,349,"x = new double[] {one, two, nan};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,350,"TestUtils.assertEquals(one, StatUtils.min(x), tolerance);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,352,// test all nan returns nan
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,353,"x = new double[] {nan, nan, nan};"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,354,"TestUtils.assertEquals(nan, StatUtils.min(x), tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,75,public void testNaNs() {
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,76,Max max = new Max();
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,77,double nan = Double.NaN;
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,78,"assertEquals(3d, max.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,79,"assertEquals(3d, max.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,80,"assertEquals(2d, max.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,81,"assertTrue(Double.isNaN(max.evaluate(new double[]{nan, nan, nan})));"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,75,public void testNaNs() {
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,76,Min min = new Min();
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,77,double nan = Double.NaN;
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,78,"assertEquals(2d, min.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,79,"assertEquals(1d, min.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,80,"assertEquals(1d, min.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/MinTest.java,81,"assertTrue(Double.isNaN(min.evaluate(new double[]{nan, nan, nan})));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,49,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,53,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,67,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,77,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,81,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,85,public void testSubAndCheckErrorMessage() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,86,int big = Integer.MAX_VALUE;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,87,int bigNeg = Integer.MIN_VALUE;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,88,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,89,"int res = MathUtils.subAndCheck(big, -1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,90,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,91,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,92,"assertEquals(""overflow: subtract"", ex.getMessage());"

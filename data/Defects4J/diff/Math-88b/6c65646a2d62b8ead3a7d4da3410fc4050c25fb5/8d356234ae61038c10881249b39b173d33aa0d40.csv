is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,rivate static final double DEFAULT_EPSILON = 1.0e-10;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,private static final double DEFAULT_EPSILON = 1.0e-6;
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,65,"f (tableau.getEntry(0, i) < minValue) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,65,"if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {"
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,84,"f (tableau.getEntry(i, col) >= 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,84,"if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {"
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,136,"f (tableau.getEntry(0, i) < 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,136,"if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,153,"f (tableau.getEntry(0, i) < 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,153,"if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
False,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,189,"ew SimplexTableau(f, constraints, goalType, restrictToNonNegative);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,189,"new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,30,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,83,/** Amount of error to accept in floating point comparisons. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,84,protected final double epsilon;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,93,* @param epsilon amount of error to accept in floating point comparisons
False,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,92,"inal GoalType goalType, final boolean restrictToNonNegative) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,97,"final GoalType goalType, final boolean restrictToNonNegative,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,98,final double epsilon) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,102,this.epsilon                = epsilon;
False,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,262,"f (getEntry(i, col) != 0.0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,269,"if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,145,public void testEpsilon() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,146,LinearObjectiveFunction f =
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,147,"new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,148,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,149,"constraints.add(new LinearConstraint(new double[] {  9, 8, 0 }, Relationship.EQ,  17));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,150,"constraints.add(new LinearConstraint(new double[] {  0, 7, 8 }, Relationship.LEQ,  7));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,151,"constraints.add(new LinearConstraint(new double[] { 10, 0, 2 }, Relationship.LEQ, 10));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,153,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,154,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,155,"assertEquals(1.0, solution.getPoint()[0]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,156,"assertEquals(1.0, solution.getPoint()[1]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,157,"assertEquals(0.0, solution.getPoint()[2]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,158,"assertEquals(15.0, solution.getValue());"
False,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,33,"ew SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,33,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,48,"ew SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,48,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);"
False,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,66,"ew SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,66,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false, 1.0e-6);"

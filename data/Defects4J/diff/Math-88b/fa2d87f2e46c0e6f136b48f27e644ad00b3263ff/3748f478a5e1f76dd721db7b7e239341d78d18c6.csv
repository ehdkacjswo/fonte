is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,36,rivate static final long serialVersionUID = 3446121671437672843L;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,private static final long serialVersionUID = 1954692554563387537L;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,64, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,65, constructor and then call {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,71,ecompose(matrix);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,68,"this(matrix, DEFAULT_TOO_SMALL);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,76, <p>Calling this constructor is equivalent to first call the no-arguments
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,77," constructor and then call {@link #decompose(RealMatrix, double)}.</p>"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,85,"ecompose(matrix, singularityThreshold);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,88,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,89,ublic void decompose(RealMatrix matrix)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,90,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,91,"ecompose(matrix, DEFAULT_TOO_SMALL);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,94,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,95,"ublic void decompose(RealMatrix matrix, double singularityThreshold)"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,96,hrows InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,225,eturn pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,210,return pivot.clone();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,213,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,214,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,215,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,216,return 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,217,} else {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,218,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,219,double determinant = even ? 1 : -1;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,220,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,221,determinant *= lu[i][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,223,return determinant;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,227,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,228,public boolean isSingular() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,229,return singular;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,234,ublic boolean isSingular()
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,235,hrows IllegalStateException {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,236,eturn singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,238,public DecompositionSolver getSolver() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,239,"return new Solver(lu, pivot, singular);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,242,private static class Solver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,244,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,245,private static final long serialVersionUID = -6353105415121373022L;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,247,/** Entries of LU decomposition. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,248,private final double lu[][];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,250,/** Pivot permutation associated with LU decomposition. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,251,private final int[] pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,253,/** Singularity indicator. */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,254,private final boolean singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,257,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,258,* @param lu entries of LU decomposition
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,259,* @param pivot pivot permutation associated with LU decomposition
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,260,* @param singular singularity indicator
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,262,"private Solver(final double[][] lu, final int[] pivot, final boolean singular) {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,263,this.lu       = lu;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,264,this.pivot    = pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,265,this.singular = singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,268,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,269,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,270,return !singular;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,273,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,274,public double[] solve(double[] b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,275,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,277,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,278,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,279,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,281,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,282,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,285,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,287,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,288,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,289,bp[row] = b[pivot[row]];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,292,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,293,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,294,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,295,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,299,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,300,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,301,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,302,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,303,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,307,return bp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,312,public RealVector solve(RealVector b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,313,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,314,try {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,315,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,316,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,318,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,319,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,320,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,322,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,323,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,326,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,328,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,329,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,330,bp[row] = b.getEntry(pivot[row]);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,333,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,334,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,335,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,336,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,340,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,342,bp[col] /= lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,343,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,344,bp[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,348,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,356,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,357,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,358,* has not been called
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,362,public RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,363,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,364,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,367,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,368,public RealMatrix solve(RealMatrix b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,369,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,371,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,372,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,373,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,375,if (singular) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,376,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,379,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,381,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,382,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,383,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,384,final double[] bpRow = bp[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,385,final int pRow = pivot[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,386,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,387,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,391,// Solve LY = b
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,392,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,393,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,394,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,395,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,396,final double luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,397,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,398,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,403,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,404,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,405,final double[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,406,final double luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,407,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,408,bpCol[j] /= luDiag;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,410,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,411,final double[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,412,final double luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,413,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,414,bpI[j] -= bpCol[j] * luICol;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,419,"return new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,423,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,424,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,425,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,426,return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,32,rivate static final long serialVersionUID = -8775006035077527661L;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,32,private static final long serialVersionUID = -369589527412301256L;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,34,** Underlying decomposition. */
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,35,rivate final LUDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,34,/** Underlying solver. */
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,35,private final DecompositionSolver solver;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,37,/** Determinant. */
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,38,private final double determinant;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,42,his.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,45,this.solver      = decomposition.getSolver();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,46,this.determinant = decomposition.getDeterminant();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,56,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,57,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,58,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,59,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,61,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,62,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,65,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,67,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,68,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,69,p[row] = b[pivot[row]];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,72,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,73,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,74,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,75,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,76,"p[i] -= bp[col] * l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,80,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,81,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,82,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,83,"p[col] /= u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,84,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,85,"p[i] -= bp[col] * u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,89,eturn bp;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,59,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,105,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,106,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,107,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,108,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,110,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,111,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,114,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,116,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,117,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,118,p[row] = b.getEntry(pivot[row]);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,121,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,122,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,123,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,124,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,125,"p[i] -= bp[col] * l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,129,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,130,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,131,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,132,"p[col] /= u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,133,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,134,"p[i] -= bp[col] * u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,138,"eturn new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,73,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,153,inal int[] pivot = decomposition.getPivot();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,154,inal int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,155,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,156,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,158,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,159,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,162,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,164,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,165,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,166,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,167,inal double[] bpRow = bp[row];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,168,inal int pRow = pivot[row];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,169,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,170,"pRow[col] = b.getEntry(pRow, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,174,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,175,inal RealMatrix l = decomposition.getL();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,176,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,177,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,178,or (int i = col + 1; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,179,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,180,"inal double luICol = l.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,181,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,182,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,187,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,188,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,189,or (int col = m - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,190,inal double[] bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,191,"inal double luDiag = u.getEntry(col, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,192,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,193,pCol[j] /= luDiag;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,195,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,196,inal double[] bpI = bp[i];
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,197,"inal double luICol = u.getEntry(i, col);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,198,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,199,pI[j] -= bpCol[j] * luICol;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,204,eturn MatrixUtils.createRealMatrix(bp);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,209, Return the determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,210, @return determinant of the matrix
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,211, @see #isNonSingular()
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,213,ublic double getDeterminant() {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,214,f (decomposition.isSingular()) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,215,eturn 0;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,216, else {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,217,inal int m = decomposition.getPivot().length;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,218,inal RealMatrix u = decomposition.getU();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,219,ouble determinant = decomposition.evenPermutation() ? 1 : -1;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,220,or (int i = 0; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,221,"eterminant *= u.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,223,eturn determinant;
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,86,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,232,eturn !decomposition.isSingular();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,94,return solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,241,inal int m = decomposition.getPivot().length;
False,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,242,eturn solve(MatrixUtils.createRealIdentityMatrix(m));
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,103,return solver.getInverse();
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,107,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,108,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,110,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/LUSolver.java,src/java/org/apache/commons/math/linear/LUSolver.java,111,return determinant;

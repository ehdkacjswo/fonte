is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,23,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,mport org.apache.commons.math.optimization.ScalarConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,26,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,mport org.apache.commons.math.optimization.ScalarObjectiveFunction;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,mport org.apache.commons.math.optimization.ScalarOptimizer;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,mport org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,import org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,61," #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize} will reuse"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,61,"* #optimize(MultivariateRealFunction, GoalType, double[]) optimize} will reuse"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68," <p>If {@link #setConvergenceChecker(ScalarConvergenceChecker)} is not called,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68,"* <p>If {@link #setConvergenceChecker(RealConvergenceChecker)} is not called,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,79, @see ScalarObjectiveFunction
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,79,* @see MultivariateRealFunction
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,85,ublic abstract class DirectSearchOptimizer implements ScalarOptimizer {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,85,public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,91,rotected ScalarPointValuePair[] simplex;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,91,protected RealPointValuePair[] simplex;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,rivate ScalarObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,private MultivariateRealFunction f;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,97,rivate ScalarConvergenceChecker checker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,97,private RealConvergenceChecker checker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235,ublic void setConvergenceChecker(ScalarConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,235,public void setConvergenceChecker(RealConvergenceChecker checker) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,240,ublic ScalarConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,240,public RealConvergenceChecker getConvergenceChecker() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,245,"ublic ScalarPointValuePair optimize(final ScalarObjectiveFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,245,"public RealPointValuePair optimize(final MultivariateRealFunction f,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246,"final GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,247,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,248,"throws FunctionEvaluationException, OptimizationException,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,IllegalArgumentException {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,inal Comparator<ScalarPointValuePair> comparator = new Comparator<ScalarPointValuePair>() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,"ublic int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,inal double v1 = o1.getValue();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,inal double v2 = o2.getValue();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,262,eturn (goalType == GoalType.MINIMIZE) ?
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,"ouble.compare(v1, v2) : Double.compare(v2, v1);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,final Comparator<RealPointValuePair> comparator =
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,261,new Comparator<RealPointValuePair>() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,262,"public int compare(final RealPointValuePair o1,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,final RealPointValuePair o2) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,264,final double v1 = o1.getValue();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,265,final double v2 = o2.getValue();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266,return (goalType == GoalType.MINIMIZE) ?
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,267,"Double.compare(v1, v2) : Double.compare(v2, v1);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,calarPointValuePair[] previous = new ScalarPointValuePair[simplex.length];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,277,RealPointValuePair[] previous = new RealPointValuePair[simplex.length];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,308, @exception ObjectiveException if the function cannot be evaluated at
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,312,* @exception FunctionEvaluationException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,313,rotected abstract void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,314,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,protected abstract void iterateSimplex(final Comparator<RealPointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,318,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,321, @exception ObjectiveException if no value can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,325,* @exception FunctionEvaluationException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,325,"hrows ObjectiveException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,"throws FunctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,327,eturn f.objective(x);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,331,return f.value(x);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,346,implex = new ScalarPointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,"implex[0] = new ScalarPointValuePair(startPoint, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,350,simplex = new RealPointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,351,"simplex[0] = new RealPointValuePair(startPoint, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,356,"implex[i + 1] = new ScalarPointValuePair(vertexI, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,360,"simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,363, @exception ObjectiveException if no value can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,367,* @exception FunctionEvaluationException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,365,rotected void evaluateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,366,hrows ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369,protected void evaluateSimplex(final Comparator<RealPointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,370,throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,370,inal ScalarPointValuePair vertex = simplex[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,374,final RealPointValuePair vertex = simplex[i];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,373,"implex[i] = new ScalarPointValuePair(point, evaluate(point), false);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,377,"simplex[i] = new RealPointValuePair(point, evaluate(point), false);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,386,"rotected void replaceWorstPoint(ScalarPointValuePair pointValuePair,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,387,inal Comparator<ScalarPointValuePair> comparator) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,390,"protected void replaceWorstPoint(RealPointValuePair pointValuePair,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,391,final Comparator<RealPointValuePair> comparator) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,391,calarPointValuePair tmp = simplex[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,395,RealPointValuePair tmp = simplex[i];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,22,mport org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,22,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,mport org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,rotected void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,63,"hrows ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,63,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,inal ScalarPointValuePair[] original = simplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,71,inal ScalarPointValuePair best = original[0];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,final RealPointValuePair[] original = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,71,final RealPointValuePair best = original[0];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,74,"inal ScalarPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,74,"final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,inal ScalarPointValuePair[] reflectedSimplex = simplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,79,"inal ScalarPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,final RealPointValuePair[] reflectedSimplex = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,79,"final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,90,"inal ScalarPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,90,"final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,105, @exception ObjectiveException if the function cannot be evaluated at
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,105,* @exception FunctionEvaluationException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,108,"rivate ScalarPointValuePair evaluateNewSimplex(final ScalarPointValuePair[] original,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,108,"private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,110,inal Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,hrows ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,110,final Comparator<RealPointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117,implex = new ScalarPointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117,simplex = new RealPointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,125,"implex[i] = new ScalarPointValuePair(xTransformed, Double.NaN, false);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,125,"simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,22,mport org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,22,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,24,mport org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,24,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,rotected void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,77,"hrows ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,77,"throws FunctionEvaluationException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,inal ScalarPointValuePair best       = simplex[0];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,86,inal ScalarPointValuePair secondBest = simplex[n-1];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,87,inal ScalarPointValuePair worst      = simplex[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,final RealPointValuePair best       = simplex[0];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,86,final RealPointValuePair secondBest = simplex[n-1];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,87,final RealPointValuePair worst      = simplex[n];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,109,"inal ScalarPointValuePair reflected = new ScalarPointValuePair(xR, evaluate(xR), false);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,109,"final RealPointValuePair reflected = new RealPointValuePair(xR, evaluate(xR), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,124,"inal ScalarPointValuePair expanded = new ScalarPointValuePair(xE, evaluate(xE), false);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,124,"final RealPointValuePair expanded = new RealPointValuePair(xE, evaluate(xE), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,143,"inal ScalarPointValuePair outContracted = new ScalarPointValuePair(xC, evaluate(xC), false);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,143,"final RealPointValuePair outContracted = new RealPointValuePair(xC, evaluate(xC), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,158,"inal ScalarPointValuePair inContracted = new ScalarPointValuePair(xC, evaluate(xC), false);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,158,"final RealPointValuePair inContracted = new RealPointValuePair(xC, evaluate(xC), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,175,"implex[i] = new ScalarPointValuePair(x, Double.NaN, false);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,175,"simplex[i] = new RealPointValuePair(x, Double.NaN, false);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,25,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,26,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,28,mport org.apache.commons.math.optimization.ScalarObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,mport org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,39,ublic void testObjectiveExceptions() throws ConvergenceException {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,calarObjectiveFunction wrong =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,39,public void testFunctionEvaluationExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,MultivariateRealFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,43,ublic double objective(double[] x) throws ObjectiveException {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,43,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,45,"hrow new ObjectiveException(""{0}"", ""oops"");"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,45,"throw new FunctionEvaluationException(x, ""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,47,"hrow new ObjectiveException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,47,"throw new FunctionEvaluationException(new RuntimeException(""oops""), x);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,57, catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,57,} catch (FunctionEvaluationException ce) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,67, catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,67,} catch (FunctionEvaluationException ce) {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,76,"hrows ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,76,"throws FunctionEvaluationException, ConvergenceException, NotPositiveDefiniteMatrixException {"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,calarObjectiveFunction fourExtrema = new ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,89,ublic double objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,89,public double value(double[] variables) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,calarPointValuePair optimum;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,RealPointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,135,"hrows ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,135,"throws FunctionEvaluationException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,calarObjectiveFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,MultivariateRealFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,140,ublic double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,140,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,calarPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,RealPointValuePair optimum =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,166,"hrows ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,166,"throws FunctionEvaluationException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,168,calarObjectiveFunction powell =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,168,MultivariateRealFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,171,ublic double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,171,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,calarPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,25,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,import org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,27,mport org.apache.commons.math.optimization.ObjectiveException;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,mport org.apache.commons.math.optimization.ScalarObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,mport org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,import org.apache.commons.math.optimization.RealPointValuePair;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,39,ublic void testObjectiveExceptions() throws ConvergenceException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,calarObjectiveFunction wrong =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,39,public void testFunctionEvaluationExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,MultivariateRealFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,43,ublic double objective(double[] x) throws ObjectiveException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,43,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,45,"hrow new ObjectiveException(""{0}"", ""oops"");"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,45,"throw new FunctionEvaluationException(x, ""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47,"hrow new ObjectiveException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47,"throw new FunctionEvaluationException(new RuntimeException(""oops""), x);"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57, catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,} catch (FunctionEvaluationException ce) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67, catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,} catch (FunctionEvaluationException ce) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,76,"hrows ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,76,"throws FunctionEvaluationException, ConvergenceException, NotPositiveDefiniteMatrixException {"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,calarObjectiveFunction fourExtrema = new ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,ublic double objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,public double value(double[] variables) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,calarPointValuePair optimum;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,RealPointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,"hrows ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,"throws FunctionEvaluationException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,calarObjectiveFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,MultivariateRealFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,ublic double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,calarPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,RealPointValuePair optimum =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,166,"hrows ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,166,"throws FunctionEvaluationException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,calarObjectiveFunction powell =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,ew ScalarObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,MultivariateRealFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,new MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,171,ublic double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,171,public double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,calarPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,RealPointValuePair optimum =

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,36,** Cached solver factory */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,37,rivate static UnivariateRealSolverFactory factory = null;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,56,"eturn factory.newDefaultSolver().solve(f, x0, x1);"
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,53,"return LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);"
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,80,nivariateRealSolver solver = factory.newDefaultSolver();
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,77,UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,222, Also initializes factory if factory is null.
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,233,f (factory == null) {
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,234,actory = UnivariateRealSolverFactory.newInstance();
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,228,/** Holder for the factory.
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,229,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,231,private static class LazyHolder {
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,232,/** Cached solver factory */
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,233,private static final UnivariateRealSolverFactory FACTORY =
True,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,234,UnivariateRealSolverFactory.newInstance();

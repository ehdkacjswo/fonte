is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,57,mport org.apache.commons.math.util.DoubleArray;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,65,oubleArray eDA;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,64,ContractableDoubleArray eDA;
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,127, Discards values from the front of the list.  This function removes n
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,128, elements from the front of the array.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,130,@param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,132,oid discardFrontElements(int i);
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,135, Returns the minimum value stored in this array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,137, @return minimum value contained in this array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,139,ouble getMin();
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,142, Returns the maximum value stored in this array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,144, @return maximum value contained in this array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,146,ouble getMax();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,411,* (non-Javadoc)
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,412, @see org.apache.commons.math.DoubleArray#getMax()
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,414,ublic double getMax() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,415,ouble max = internalArray[startIndex];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,417,or (int i = startIndex + 1; i < (numElements + startIndex); i++) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,418,f (internalArray[i] > max) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,419,ax = internalArray[i];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,423,eturn max;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,426,* (non-Javadoc)
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,427, @see org.apache.commons.math.DoubleArray#getMin()
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,429,ublic double getMin() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,430,ouble min = internalArray[startIndex];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,432,or (int i = startIndex + 1; i < (numElements + startIndex); i++) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,433,f (internalArray[i] < min) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,434,in = internalArray[i];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,438,eturn min;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,124,* Create a fixed array backed by the provided double[] implementation.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,125,* the array should have all the elements occupied. the size and maxElements
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,126,* are drawn from the array's length.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,128,* This implementation of DoubleArray was created to provide a more
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,129,"* ""performance-oriented"" in-place rolling mechanism for calculations"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,130,* which need to operate on a rolling window of values.
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,131,* @param array the backing array
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,133,public FixedDoubleArray(double[] array) {
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,134,this.maxElements = array.length;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,135,this.size = array.length;
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,136,internalArray = array;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,328, Retrieves the minimum double value contained in this array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,330, @return The number less than all other numbers in this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,331,         array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,332, @see org.apache.commons.math.DoubleArray#getMin()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,334,ublic double getMin() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,335,ouble min = internalArray[0];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,336,or (int i = 1; i < size; i++) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,337,f (internalArray[i] < min) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,338,in = internalArray[i];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,341,eturn min;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,345, Retrieves the maximum double value contained in this array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,347, @return The number greater than all other numbers in this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,348,         array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,349, @see org.apache.commons.math.DoubleArray#getMax()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,351,ublic double getMax() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,352,ouble max = internalArray[0];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,353,or (int i = 1; i < size; i++) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,354,f (internalArray[i] > max) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,355,ax = internalArray[i];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,358,eturn max;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,56,import org.apache.commons.math.stat.StatUtils;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,129,"a.getMax(),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,131,"StatUtils.max(ra.getElements()),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,134,"a.getMin(),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,136,"StatUtils.min(ra.getElements()),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,159,"ssertEquals(""Min should be -2.0"", -2.0, da.getMin(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,161,"assertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,163,"a.getMax(),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,165,"StatUtils.max(da.getElements()),"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,201,a.discardFrontElements(5);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,201,((ExpandableDoubleArray)da).discardFrontElements(5);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,a.discardFrontElements(-1);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,((ExpandableDoubleArray)da).discardFrontElements(-1);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,211,a.discardFrontElements( 10000 );
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,211,((ExpandableDoubleArray)da).discardFrontElements( 10000 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,174,ublic void testDiscardFront() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,175,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,176,a.discardFrontElements( 2 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,177,"ail( ""Discard front elements should throw an exception"");"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,178, catch( Exception e ) {

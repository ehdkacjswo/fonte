is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,62, @param matrix The matrix to transform.
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,62,* @param matrix the matrix to transform.
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,64,ublic BiDiagonalTransformer(RealMatrix matrix)
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,65,hrows InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,64,public BiDiagonalTransformer(RealMatrix matrix) {
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,151,Data[i][i] = main[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,152,f (i < main.length - 1) {
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,153,f (m < n) {
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,154,Data[i + 1][i] = secondary[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,155, else {
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,156,Data[i][i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,150,double[] bDataI = bData[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,151,bDataI[i] = main[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,152,if (m < n) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,153,if (i > 0) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,154,bDataI[i - 1] = secondary[i - 1];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,156,} else {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,157,if (i < main.length - 1) {
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,158,bDataI[i + 1] = secondary[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,279,inal double a = (householderVectors[k][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,281,final double[] hK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,282,final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,282,ouseholderVectors[k][k] -= a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,285,hK[k] -= a;
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,286,inal double[] uvI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,287,lpha -= uvI[j] * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,289,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,290,alpha -= hI[j] * hI[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,291,inal double[] uvI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,292,vI[j] -= alpha * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,294,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,295,hI[j] -= alpha * hI[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,299,inal double[] uvK = householderVectors[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,302,inal double c = uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,304,final double c = hK[j];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,305,inal double b = (uvK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,307,final double b = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,308,vK[k + 1] -= b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,310,hK[k + 1] -= b;
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,310,inal double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,312,final double[] hI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,313,eta -= uvI[j] * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,315,beta -= hI[j] * hK[j];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,315,eta /= b * uvK[k + 1];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,317,beta /= b * hK[k + 1];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,317,vI[j] -= beta * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,319,hI[j] -= beta * hK[j];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,338,inal double[] uvK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,340,final double[] hK = householderVectors[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,341,inal double c = uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,343,final double c = hK[j];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,344,inal double a = (uvK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,346,final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,347,vK[k] -= a;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,349,hK[k] -= a;
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,349,inal double[] uvI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,351,final double[] hI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,352,lpha -= uvI[j] * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,354,alpha -= hI[j] * hK[j];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,356,vI[j] -= alpha * uvK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,358,hI[j] -= alpha * hK[j];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,365,final double[] hKp1 = householderVectors[k + 1];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,368,inal double b = (householderVectors[k + 1][k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,371,final double b = (hKp1[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,371,ouseholderVectors[k + 1][k] -= b;
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,374,hKp1[k] -= b;
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,375,inal double[] uvI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,376,eta -= uvI[j] * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,378,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,379,beta -= hI[j] * hI[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,378,eta /= b * householderVectors[k + 1][k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,381,beta /= b * hKp1[k];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,380,inal double[] uvI = householderVectors[i];
False,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,381,vI[j] -= beta * uvI[k];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,383,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,384,hI[j] -= beta * hI[k];

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,1,// Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,2,// or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,3,// distributed with this work for additional information
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,4,// regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,5,"// to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,6,"// ""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,7,// with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,9,//   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,11,"// Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,12,// software distributed under the License is distributed on an
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,13,"// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,14,"// KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,15,// specific language governing permissions and limitations
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,16,// under the License.
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,18,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,20,/** This class is a gaussian normalized random generator for scalars.
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,21,* <p>This class is a simple wrapper around the {@link
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,22,* RandomGenerator#nextGaussian} method.</p>
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,23,* @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,26,public class GaussianRandomGenerator implements NormalizedRandomGenerator {
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,28,/** Create a new generator.
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,29,* @param generator underlying random generator to use
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,31,public GaussianRandomGenerator(RandomGenerator generator) {
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,32,this.generator = generator;
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,35,/** Generate a random scalar with null mean and unit standard deviation.
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,36,* @return a random scalar with null mean and unit standard deviation
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,38,public double nextNormalizedDouble() {
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,39,return generator.nextGaussian();
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,42,/** Underlying generator. */
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,43,private RandomGenerator generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,20,mport java.io.Serializable;
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,18,package org.apache.commons.math.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,24, Normalized generator should provide null mean and unit standard
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,25, deviation scalars.
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,26, @version $Id: NormalizedRandomGenerator.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,27, @author L. Maisonobe
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,22,* Normalized generator provide null mean and unit standard deviation scalars.
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,23,* @version $Revision:$ $Date$
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,29,ublic interface NormalizedRandomGenerator extends Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,25,public interface NormalizedRandomGenerator {
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,36, @return a random scalar
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,32,* @return a random scalar with null mean and unit standard deviation
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,38,ublic double nextDouble();
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,34,public double nextNormalizedDouble();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,18,ackage org.spaceroots.mantissa.random;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,18,package org.apache.commons.math.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,20,mport junit.framework.*;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,20,import org.apache.commons.math.MathException;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,22,ublic class UniformRandomGeneratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,23,xtends TestCase {
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,22,/** This class represents exceptions thrown by the correlated random
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,23,* vector generator.
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,24,* @version $Revision:$ $Date$
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,25,ublic UniformRandomGeneratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,26,uper(name);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,27,public class NotPositiveDefiniteMatrixException extends MathException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,29,ublic void testMeanAndStandardDeviation() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,30,niformRandomGenerator generator = new UniformRandomGenerator(17399225432l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,31,calarSampleStatistics sample = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,32,or (int i = 0; i < 1000; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,33,ample.add(generator.nextDouble());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,35,"ssertEquals(0.0, sample.getMean(), 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,36,"ssertEquals(1.0, sample.getStandardDeviation(), 0.02);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,29,/** Serializable version identifier */
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,30,private static final long serialVersionUID = 4122929125438624648L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,39,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,40,eturn new TestSuite(UniformRandomGeneratorTest.class);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,32,/** Simple constructor.
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,33,* build an exception with a default message.
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,35,public NotPositiveDefiniteMatrixException() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UniformRandomGeneratorTest.java,src/java/org/apache/commons/math/random/NotPositiveDefiniteMatrixException.java,36,"super(""not positive definite matrix"", new Object[0]);"
False,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,18,ackage org.spaceroots.mantissa.random;
True,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,18,package org.apache.commons.math.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,30, @return a random vector as an array of double. The generator
False,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,31," <em>will</em> reuse the same array for each call, in order to"
False,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,32," save the allocation time, so the user should keep a copy by"
False,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,33, himself if he needs so.
True,src/mantissa/src/org/spaceroots/mantissa/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,30,* @return a random vector as an array of double.
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,18,ackage org.spaceroots.mantissa.random;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,18,package org.apache.commons.math.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,20,mport java.io.Serializable;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,20,import java.util.Arrays;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,24, @version $Id: UncorrelatedRandomVectorGenerator.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,25, @author L. Maisonobe
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,23,* @version $Id:$
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,30,"mplements Serializable, RandomVectorGenerator {"
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,27,implements RandomVectorGenerator {
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,33, <p>Build an uncorrelated random vector generator from its mean
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,34, and standard deviation vectors.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,35, @param mean expected mean values for all components
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,36, @param standardDeviation standard deviation for all components
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,30,* <p>Build an uncorrelated random vector generator from
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,31,* its mean and standard deviation vectors.</p>
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,32,* @param mean expected mean values for each component
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,33,* @param standardDeviation standard deviation for each component
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,39, @exception IllegalArgumentException if there is a dimension
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,40, mismatch between the mean and standard deviation vectors
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,68,or (int i = 0; i < dimension; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,69,ean[i]              = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,70,tandardDeviation[i] = 1;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,59,"Arrays.fill(standardDeviation, 1.0);"
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,77,** Get the underlying normalized components generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,78, @return underlying uncorrelated components generator
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,80,ublic NormalizedRandomGenerator getGenerator() {
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,81,eturn generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,85, @return a random vector as an array of double. The returned array
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,86," is created at each call, the caller can do what it wants with it."
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,64,* @return a random vector as a newly built array of double
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,92,andom[i] = mean[i] + standardDeviation[i] * generator.nextDouble();
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,70,random[i] = mean[i] + standardDeviation[i] * generator.nextNormalizedDouble();
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,106,ormalizedRandomGenerator generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,108,rivate static final long serialVersionUID = -9094322067568302961L;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,84,private NormalizedRandomGenerator generator;
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,1,// Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,2,// or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,3,// distributed with this work for additional information
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,4,// regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,5,"// to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,6,"// ""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,7,// with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,9,//   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,11,"// Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,12,// software distributed under the License is distributed on an
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,13,"// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,14,"// KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,15,// specific language governing permissions and limitations
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,16,// under the License.
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,18,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,20,/** This class implements a normalized uniform random generator.
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,21,"* <p>Since it is a normalized random generator, it has a null mean"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,22,* and a unit standard deviation. Being also a uniform
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,23,"* generator, it produces numbers in the range [-&sqrt;(3) ; +&sqrt;(3)].</p>"
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,24,* @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,27,public class UniformRandomGenerator implements NormalizedRandomGenerator {
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,29,/** Create a new generator.
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,30,* @param generator underlying random generator to use
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,32,public UniformRandomGenerator(RandomGenerator generator) {
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,33,this.generator = generator;
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,36,/** Generate a random scalar with null mean and unit standard deviation.
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,37,* <p>The number generated is uniformly distributed between -&sqrt;(3)
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,38,* and +&sqrt;(3).</p>
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,39,* @return a random scalar with null mean and unit standard deviation
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,41,public double nextNormalizedDouble() {
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,42,return SQRT3 * (2 * generator.nextDouble() - 1.0);
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,45,/** Underlying generator. */
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,46,private RandomGenerator generator;
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,48,private static final double SQRT3 = Math.sqrt(3.0);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,17,package org.apache.commons.math.stat.descriptive.moment;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,21,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,22,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,23,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,26,* Returns the covariance matrix of the available vectors.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,27,* @version $Revision:$
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,29,public class VectorialCovariance implements Serializable {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,31,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,32,private static final long serialVersionUID = 4118372414238930270L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,34,/** Sums for each component. */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,35,private double[] sums;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,37,/** Sums of products for each component. */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,38,private double[] productsSums;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,40,/** Number of vectors in the sample. */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,41,private long n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,43,/** Constructs a VectorialMean.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,44,* @param dimension vectors dimension
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,46,public VectorialCovariance(int dimension) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,47,sums         = new double[dimension];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,48,productsSums = new double[dimension * (dimension + 1) / 2];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,49,n            = 0;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,53,* Add a new vector to the sample.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,54,* @param vector vector to add
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,55,* @exception DimensionMismatchException if the vector does not have the right dimension
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,57,public void increment(double[] v) throws DimensionMismatchException {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,58,if (v.length != sums.length) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,59,"throw new DimensionMismatchException(v.length, sums.length);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,61,int k = 0;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,62,for (int i = 0; i < v.length; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,63,sums[i] += v[i];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,64,for (int j = 0; j <= i; ++j) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,65,productsSums[k++] += v[i] * v[j];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,68,n++;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,72,* Get the covariance matrix.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,73,* @return covariance matrix
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,75,public RealMatrix getResult() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,77,int dimension = sums.length;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,78,"RealMatrixImpl result = new RealMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,80,if (n > 1) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,81,double[][] resultData = result.getDataRef();
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,82,double c = 1.0 / (n * (n - 1));
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,83,int k = 0;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,84,for (int i = 0; i < dimension; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,85,for (int j = 0; j <= i; ++j) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,86,double e = c * (n * productsSums[k++] - sums[i] * sums[j]);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,87,resultData[i][j] = e;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,88,resultData[j][i] = e;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,93,return result;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,98,* Get the number of vectors in the sample.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,99,* @return number of vectors in the sample
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,101,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,102,return n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,17,package org.apache.commons.math.stat.descriptive.moment;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,21,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,24,* Returns the arithmetic mean of the available vectors.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,25,* @version $Revision:$
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,27,public class VectorialMean implements Serializable {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,29,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,30,private static final long serialVersionUID = 8223009086481006892L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,32,/** Means for each component. */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,33,private Mean[] means;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,35,/** Constructs a VectorialMean.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,36,* @param dimension vectors dimension
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,38,public VectorialMean(int dimension) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,39,means = new Mean[dimension];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,40,for (int i = 0; i < dimension; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,41,means[i] = new Mean();
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,46,* Add a new vector to the sample.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,47,* @param vector vector to add
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,48,* @exception DimensionMismatchException if the vector does not have the right dimension
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,50,public void increment(double[] v) throws DimensionMismatchException {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,51,if (v.length != means.length) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,52,"throw new DimensionMismatchException(v.length, means.length);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,54,for (int i = 0; i < v.length; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,55,means[i].increment(v[i]);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,60,* Get the mean vector.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,61,* @return mean vector
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,63,public double[] getResult() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,64,double[] result = new double[means.length];
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,65,for (int i = 0; i < result.length; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,66,result[i] = means[i].getResult();
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,68,return result;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,72,* Get the number of vectors in the sample.
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,73,* @return number of vectors in the sample
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,75,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,76,return (means.length == 0) ? 0 : means[0].getN();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,20,mport org.spaceroots.mantissa.MantissaException;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,21,mport org.spaceroots.mantissa.linalg.Matrix;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,22,mport org.spaceroots.mantissa.linalg.GeneralMatrix;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,23,mport org.spaceroots.mantissa.linalg.SymetricalMatrix;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,25,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,27,** This class allows to generate random vectors with correlated components.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,29, <p>Random vectors with correlated components are built by combining
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,30, the uncorrelated components of another random vector in such a way
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,31, the resulting correlations are the ones specified by a positive
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,32, definite covariance matrix.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,34," <p>Sometimes, the covariance matrix for a given simulation is not"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,35, strictly positive definite. This means that the correlations are
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,36," not all independant from each other. In this case, however, the non"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,37, strictly positive elements found during the Cholesky decomposition
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,38," of the covariance matrix should not be negative either, they"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,39, should be null. This implies that rather than computing <code>C =
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,40, L.Lt</code> where <code>C</code> is the covariance matrix and
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,41," <code>L</code> is a lower-triangular matrix, we compute <code>C ="
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,42, B.Bt</code> where <code>B</code> is a rectangular matrix having
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,43, more rows than columns. The number of columns of <code>B</code> is
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,44," the rank of the covariance matrix, and it is the dimension of the"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,45, uncorrelated random vector that is needed to compute the component
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,46, of the correlated vector. This class does handle this situation
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,47, automatically.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,49, @version $Id: CorrelatedRandomVectorGenerator.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,50, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,54,ublic class CorrelatedRandomVectorGenerator
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,55,"mplements Serializable, RandomVectorGenerator {"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,57,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,58, <p>Build a correlated random vector generator from its mean
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,59, vector and covariance matrix.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,60, @param mean expected mean values for all components
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,61, @param covariance covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,62, @param generator underlying generator for uncorrelated normalized
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,63, components
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,64, @exception IllegalArgumentException if there is a dimension
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,65, mismatch between the mean vector and the covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,66, @exception NotPositiveDefiniteMatrixException if the
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,67, covariance matrix is not strictly positive definite
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,69,"ublic CorrelatedRandomVectorGenerator(double[] mean,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,70,"ymetricalMatrix covariance,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,71,ormalizedRandomGenerator generator)
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,72,hrows NotPositiveDefiniteMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,74,nt order = covariance.getRows();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,75,f (mean.length != order) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,76,tring message =
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,77,"antissaException.translate(""dimension mismatch {0} != {1}"","
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,78,ew String[] {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,79,"nteger.toString(mean.length),"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,80,nteger.toString(order)
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,82,hrow new IllegalArgumentException(message);
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,84,his.mean = (double[]) mean.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,86,actorize(covariance);
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,88,his.generator = generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,89,ormalized = new double[rank];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,93,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,94, <p>Build a null mean random correlated vector generator from its
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,95, covariance matrix.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,96, @param covariance covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,97, @param generator underlying generator for uncorrelated normalized
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,98, components
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,99, @exception NotPositiveDefiniteMatrixException if the
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,100, covariance matrix is not strictly positive definite
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,102,"ublic CorrelatedRandomVectorGenerator(SymetricalMatrix covariance,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,103,ormalizedRandomGenerator generator)
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,104,hrows NotPositiveDefiniteMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,106,nt order = covariance.getRows();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,107,ean = new double[order];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,108,or (int i = 0; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,109,ean[i] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,112,actorize(covariance);
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,114,his.generator = generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,115,ormalized = new double[rank];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,119,** Get the root of the covariance matrix.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,120, The root is the matrix <code>B</code> such that <code>B.Bt</code>
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,121, is equal to the covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,122, @return root of the square matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,124,ublic Matrix getRootMatrix() {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,125,eturn root;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,128,** Get the underlying normalized components generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,129, @return underlying uncorrelated components generator
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,131,ublic NormalizedRandomGenerator getGenerator() {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,132,eturn generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,135,** Get the rank of the covariance matrix.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,136, The rank is the number of independant rows in the covariance
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,137," matrix, it is also the number of columns of the rectangular"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,138, matrix of the factorization.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,139, @return rank of the square matrix.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,141,ublic int getRank() {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,142,eturn rank;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,145,** Factorize the original square matrix.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,146, @param covariance covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,147, @exception NotPositiveDefiniteMatrixException if the
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,148, covariance matrix is not strictly positive definite
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,150,rivate void factorize(SymetricalMatrix covariance)
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,151,hrows NotPositiveDefiniteMatrixException {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,153,nt order = covariance.getRows();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,154,ymetricalMatrix c = (SymetricalMatrix) covariance.duplicate();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,155,"eneralMatrix    b = new GeneralMatrix(order, order);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,157,nt[] swap  = new int[order];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,158,nt[] index = new int[order];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,159,or (int i = 0; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,160,ndex[i] = i;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,163,ank = 0;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,164,or (boolean loop = true; loop;) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,166,/ find maximal diagonal element
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,167,wap[rank] = rank;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,168,or (int i = rank + 1; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,169,"f (c.getElement(index[i], index[i])"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,170," c.getElement(index[swap[i]], index[swap[i]])) {"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,171,wap[rank] = i;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,176,/ swap elements
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,177,f (swap[rank] != rank) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,178,nt tmp = index[rank];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,179,ndex[rank] = index[swap[rank]];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,180,ndex[swap[rank]] = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,183,/ check diagonal element
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,184,"f (c.getElement(index[rank], index[rank]) < 1.0e-12) {"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,186,f (rank == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,187,hrow new NotPositiveDefiniteMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,190,/ check remaining diagonal elements
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,191,or (int i = rank; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,192,"f (c.getElement(index[rank], index[rank]) < -1.0e-12) {"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,193,"/ there is at least one sufficiently negative diagonal element,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,194,/ the covariance matrix is wrong
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,195,hrow new NotPositiveDefiniteMatrixException();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,199,"/ all remaining diagonal elements are close to zero,"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,200,/ we consider we have found the rank of the covariance matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,201,+rank;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,202,oop = false;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,204, else {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,206,/ transform the matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,207,"ouble sqrt = Math.sqrt(c.getElement(index[rank], index[rank]));"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,208,".setElement(rank, rank, sqrt);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,209,ouble inverse = 1 / sqrt;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,210,or (int i = rank + 1; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,211,"ouble e = inverse * c.getElement(index[i], index[rank]);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,212,".setElement(i, rank, e);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,213,".setElement(index[i], index[i],"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,214,".getElement(index[i], index[i]) - e * e);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,215,or (int j = rank + 1; j < i; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,216,"ouble f = b.getElement(j, rank);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,217,".setElementAndSymetricalElement(index[i], index[j],"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,218,".getElement(index[i], index[j])"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,219, e * f);
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,223,/ prepare next iteration
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,224,oop = ++rank < order;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,230,/ build the root matrix
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,231,"oot = new GeneralMatrix(order, rank);"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,232,or (int i = 0; i < order; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,233,or (int j = 0; j < rank; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,234,"oot.setElement(swap[i], j, b.getElement(i, j));"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,240,** Generate a correlated random vector.
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,241, @return a random vector as an array of double. The returned array
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,242," is created at each call, the caller can do what it wants with it."
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,244,ublic double[] nextVector() {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,246,/ generate uncorrelated vector
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,247,or (int i = 0; i < rank; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,248,ormalized[i] = generator.nextDouble();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,251,/ compute correlated vector
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,252,ouble[] correlated = new double[mean.length];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,253,or (int i = 0; i < correlated.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,254,orrelated[i] = mean[i];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,255,or (int j = 0; j < rank; ++j) {
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,256,"orrelated[i] += root.getElement(i, j) * normalized[j];"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,260,eturn correlated;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,264,** Mean vector. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,265,rivate double[] mean;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,267,** Permutated Cholesky root of the covariance matrix. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,268,rivate Matrix root;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,270,** Rank of the covariance matrix. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,271,rivate int rank;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,273,** Underlying generator. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,274,ormalizedRandomGenerator generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,276,** Storage for the normalized vector. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,277,rivate double[] normalized;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,279,rivate static final long serialVersionUID = -88563624902398453L;
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,20,mport java.util.Random;
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,22,** This class is a gaussian normalized random generator
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,23, for scalars.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,25, <p>This class is a simple interface adaptor around the {@link
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,26, java.util.Random#nextGaussian nextGaussian} method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,28, @version $Id: GaussianRandomGenerator.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,29, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,33,ublic class GaussianRandomGenerator
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,34,mplements NormalizedRandomGenerator {
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,36,** Create a new generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,37, The seed of the generator is related to the current time.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,39,ublic GaussianRandomGenerator() {
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,40,enerator = new Random();
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,43,** Creates a new random number generator using a single int seed.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,44, @param seed the initial seed (32 bits integer)
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,46,ublic GaussianRandomGenerator(int seed) {
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,47,enerator = new Random(seed);
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,50,** Create a new generator initialized with a single long seed.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,51, @param seed seed for the generator (64 bits integer)
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,53,ublic GaussianRandomGenerator(long seed) {
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,54,enerator = new Random(seed);
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,57,** Generate a random scalar with null mean and unit standard deviation.
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,58, @return a random scalar with null mean and unit standard deviation
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,60,ublic double nextDouble() {
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,61,eturn generator.nextGaussian();
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,64,** Underlying generator. */
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,65,rivate Random generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,67,rivate static final long serialVersionUID = 5504568059866195697L;
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,20,mport org.spaceroots.mantissa.MantissaException;
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,22,** This class represents exceptions thrown by the correlated random
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,23, vector generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,25, @version $Id: NotPositiveDefiniteMatrixException.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,26, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,30,ublic class NotPositiveDefiniteMatrixException
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,31,xtends MantissaException {
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,33,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,34, build an exception with a default message.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,36,ublic NotPositiveDefiniteMatrixException() {
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,37,"uper(""not positive definite matrix"");"
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,40,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,41, build an exception with the specified message.
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,42, @param message message to use to build the exception
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,44,ublic NotPositiveDefiniteMatrixException(String message) {
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,45,uper(message);
False,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,src/mantissa/src/org/spaceroots/mantissa/random/NotPositiveDefiniteMatrixException.java,48,rivate static final long serialVersionUID = -6801349873804445905L;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,20,mport java.util.Random;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,22,** This class implements a normalized uniform random generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,24," <p>Since this is a normalized random generator, it has a null mean"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,25, and a unit standard deviation. Being also a uniform
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,26," generator, it produces numbers in the range [-sqrt(3) ;"
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,27, sqrt(3)].</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,29, @version $Id: UniformRandomGenerator.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,30, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,34,ublic class UniformRandomGenerator
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,35,mplements NormalizedRandomGenerator {
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,37,** Create a new generator.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,38, The seed of the generator is related to the current time.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,40,ublic UniformRandomGenerator() {
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,41,enerator = new Random();
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,44,** Creates a new random number generator using a single int seed.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,45, @param seed the initial seed (32 bits integer)
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,47,ublic UniformRandomGenerator(int seed) {
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,48,enerator = new Random(seed);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,51,** Create a new generator initialized with a single long seed.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,52, @param seed seed for the generator (64 bits integer)
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,54,ublic UniformRandomGenerator(long seed) {
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,55,enerator = new Random(seed);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,58,** Generate a random scalar with null mean and unit standard deviation.
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,59, <p>The number generated is uniformly distributed between -sqrt(3)
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,60, and sqrt(3).</p>
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,61, @return a random scalar with null mean and unit standard deviation
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,63,ublic double nextDouble() {
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,64,eturn TWOSQRT3 * generator.nextDouble() - SQRT3;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,67,** Underlying generator. */
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,68,rivate Random generator;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,70,rivate static final double SQRT3 = Math.sqrt(3.0);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,72,rivate static final double TWOSQRT3 = 2.0 * Math.sqrt(3.0);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,74,rivate static final long serialVersionUID = -6913329325753217654L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,20,mport org.spaceroots.mantissa.linalg.Matrix;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,21,mport org.spaceroots.mantissa.linalg.GeneralMatrix;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,22,mport org.spaceroots.mantissa.linalg.SymetricalMatrix;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,24,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,26,ublic class CorrelatedRandomVectorGeneratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,27,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,29,ublic CorrelatedRandomVectorGeneratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,30,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,31,ean       = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,32,ovariance = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,33,enerator  = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,36,ublic void testRank() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,37,"ssertEquals(3, generator.getRank());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,40,ublic void testRootMatrix() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,41,atrix b = generator.getRootMatrix();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,42,atrix bbt = b.mul(b.getTranspose());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,43,or (int i = 0; i < covariance.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,44,or (int j = 0; j < covariance.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,45,"ssertEquals(covariance.getElement(i, j),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,46,"bt.getElement(i, j),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,47,.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,52,ublic void testMeanAndCovariance() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,54,ectorialSampleStatistics sample = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,55,or (int i = 0; i < 5000; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,56,ample.add(generator.nextVector());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,59,ouble[] estimatedMean = sample.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,60,ymetricalMatrix estimatedCovariance = sample.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,61,or (int i = 0; i < estimatedMean.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,62,"ssertEquals(mean[i], estimatedMean[i], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,63,or (int j = 0; j <= i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,64,"ssertEquals(covariance.getElement(i, j),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,65,"stimatedCovariance.getElement(i, j),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,66,.1 * (1.0 + Math.abs(mean[i])) * (1.0 + Math.abs(mean[j])));
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,72,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,73,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,74,"ean = new double[] { 0.0, 1.0, -3.0, 2.3};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,76,"eneralMatrix b = new GeneralMatrix(4, 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,77,nt counter = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,78,or (int i = 0; i < b.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,79,or (int j = 0; j < b.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,80,".setElement(i, j, 1.0 + 0.1 * ++counter);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,83,atrix bbt = b.mul(b.getTranspose());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,84,ovariance = new SymetricalMatrix(mean.length);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,85,or (int i = 0; i < covariance.getRows(); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,86,"ovariance.setElement(i, i, bbt.getElement(i, i));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,87,or (int j = 0; j < covariance.getColumns(); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,88,"ovariance.setElementAndSymetricalElement(i, j,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,89,"bt.getElement(i, j));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,93,aussianRandomGenerator rawGenerator = new GaussianRandomGenerator(17399225432l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,94,"enerator = new CorrelatedRandomVectorGenerator(mean, covariance, rawGenerator);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,95, catch (NotPositiveDefiniteMatrixException e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,96,"ail(""not positive definite matrix"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,100,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,101,ean       = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,102,ovariance = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,103,enerator  = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,106,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,107,eturn new TestSuite(CorrelatedRandomVectorGeneratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,110,rivate double[] mean;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,111,rivate SymetricalMatrix covariance;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,112,rivate CorrelatedRandomVectorGenerator generator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,22,ublic class GaussianRandomGeneratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,25,ublic GaussianRandomGeneratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,29,ublic void testMeanAndStandardDeviation() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,30,aussianRandomGenerator generator = new GaussianRandomGenerator(17399225432l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,31,calarSampleStatistics sample = new ScalarSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,32,or (int i = 0; i < 10000; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,33,ample.add(generator.nextDouble());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,35,"ssertEquals(0.0, sample.getMean(), 0.012);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,36,"ssertEquals(1.0, sample.getStandardDeviation(), 0.01);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,39,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/GaussianRandomGeneratorTest.java,40,eturn new TestSuite(GaussianRandomGeneratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,20,mport org.spaceroots.mantissa.linalg.SymetricalMatrix;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,24,ublic class UncorrelatedRandomVectorGeneratorTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,27,ublic UncorrelatedRandomVectorGeneratorTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,29,ean = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,30,tandardDeviation = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,31,enerator = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,34,ublic void testMeanAndCorrelation() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,36,ectorialSampleStatistics sample = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,37,or (int i = 0; i < 10000; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,38,ample.add(generator.nextVector());
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,41,ouble[] estimatedMean = sample.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,42,ouble scale;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,43,ymetricalMatrix estimatedCorrelation = sample.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,44,or (int i = 0; i < estimatedMean.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,45,"ssertEquals(mean[i], estimatedMean[i], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,46,or (int j = 0; j < i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,47,cale = standardDeviation[i] * standardDeviation[j];
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,48,"ssertEquals(0, estimatedCorrelation.getElement(i, j) / scale, 0.03);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,50,cale = standardDeviation[i] * standardDeviation[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,51,"ssertEquals(1, estimatedCorrelation.getElement(i, i) / scale, 0.025);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,56,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,57,"ean              = new double[] {0.0, 1.0, -3.0, 2.3};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,58,"tandardDeviation = new double[] {1.0, 2.0, 10.0, 0.1};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,59,enerator =
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,60,"ew UncorrelatedRandomVectorGenerator(mean, standardDeviation,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,61,ew GaussianRandomGenerator(17399225432l));
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,64,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,65,ean = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,66,tandardDeviation = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,67,enerator = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,70,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,71,eturn new TestSuite(UncorrelatedRandomVectorGeneratorTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,74,rivate double[] mean;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,75,rivate double[] standardDeviation;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,76,rivate UncorrelatedRandomVectorGenerator generator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,18,ackage org.spaceroots.mantissa.random;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,20,mport org.spaceroots.mantissa.linalg.SymetricalMatrix;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,22,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,24,ublic class VectorialSampleStatisticsTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,25,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,27,ublic VectorialSampleStatisticsTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,28,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,29,oints = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,32,ublic void testSimplistic() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,33,ectorialSampleStatistics sample = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,34,"ample.add(new double[] {-1.0,  1.0});"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,35,"ample.add(new double[] { 1.0, -1.0});"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,36,ymetricalMatrix c = sample.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,37,"ssertEquals( 2.0, c.getElement(0, 0), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,38,"ssertEquals(-2.0, c.getElement(1, 0), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,39,"ssertEquals( 2.0, c.getElement(1, 1), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,42,ublic void testBasicStats() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,44,ectorialSampleStatistics sample = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,45,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,46,ample.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,49,"ssertEquals(points.length, sample.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,51,ouble[] min = sample.getMin();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,52,ouble[] max = sample.getMax();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,53,ouble[] mean = sample.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,54,ymetricalMatrix c = sample.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,56,"ouble[]   refMin  = new double[] {-0.70, 0.00, -3.10};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,57,"ouble[]   refMax  = new double[] { 6.00, 2.30,  5.00};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,58,"ouble[]   refMean = new double[] { 1.78, 1.62,  3.12};"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,59,ouble[][] refC    = new double[][] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,60," 8.0470, -1.9195, -3.4445},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,61,"-1.9195,  1.0470,  3.2795},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,62,"-3.4445,  3.2795, 12.2070}"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,65,or (int i = 0; i < min.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,66,"ssertEquals(refMin[i],  min[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,67,"ssertEquals(refMax[i],  max[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,68,"ssertEquals(refMean[i], mean[i], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,69,or (int j = 0; j <= i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,70,"ssertEquals(refC[i][j], c.getElement(i, j), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,76,ublic void testAddSample() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,78,ectorialSampleStatistics all  = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,79,ectorialSampleStatistics even = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,80,ectorialSampleStatistics odd  = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,81,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,82,ll.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,83,f (i % 2 == 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,84,ven.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,85, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,86,dd.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,90,ven.add(odd);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,92,"ssertEquals(all.size(), even.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,94,ouble[] min = even.getMin();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,95,ouble[] max = even.getMax();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,96,ouble[] mean = even.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,97,ymetricalMatrix c = even.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,99,ouble[] refMin = all.getMin();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,100,ouble[] refMax = all.getMax();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,101,ouble[] refMean = all.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,102,ymetricalMatrix refC = all.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,104,or (int i = 0; i < min.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,105,"ssertEquals(refMin[i],  min[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,106,"ssertEquals(refMax[i],  max[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,107,"ssertEquals(refMean[i], mean[i], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,108,or (int j = 0; j <= i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,109,"ssertEquals(refC.getElement(i, j), c.getElement(i, j), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,115,ublic void testAddArray() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,117,ectorialSampleStatistics loop   = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,118,ectorialSampleStatistics direct = new VectorialSampleStatistics();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,119,or (int i = 0; i < points.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,120,oop.add(points[i]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,122,irect.add(points);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,124,"ssertEquals(loop.size(), direct.size());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,126,ouble[] min = direct.getMin();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,127,ouble[] max = direct.getMax();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,128,ouble[] mean = direct.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,129,ymetricalMatrix c = direct.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,131,ouble[] refMin = loop.getMin();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,132,ouble[] refMax = loop.getMax();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,133,ouble[] refMean = loop.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,134,ymetricalMatrix refC = loop.getCovarianceMatrix(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,136,or (int i = 0; i < min.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,137,"ssertEquals(refMin[i],  min[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,138,"ssertEquals(refMax[i],  max[i],  1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,139,"ssertEquals(refMean[i], mean[i], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,140,or (int j = 0; j <= i; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,141,"ssertEquals(refC.getElement(i, j), c.getElement(i, j), 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,147,ublic void setUp() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,148,oints = new double[][] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,149," 1.2, 2.3,  4.5},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,150,"-0.7, 2.3,  5.0},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,151," 3.1, 0.0, -3.1},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,152," 6.0, 1.2,  4.2},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,153,"-0.7, 2.3,  5.0}"
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,157,ublic void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,158,oints = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,161,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,162,eturn new TestSuite(VectorialSampleStatisticsTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,165,rivate double [][] points;
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,16,//under the License.
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,18,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,20,import org.apache.commons.math.stat.StatUtils;
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,22,import junit.framework.*;
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,24,public class GaussianRandomGeneratorTest
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,25,extends TestCase {
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,27,public GaussianRandomGeneratorTest(String name) {
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,28,super(name);
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,31,public void testMeanAndStandardDeviation() {
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,32,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,33,rg.setSeed(17399225432l);
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,34,GaussianRandomGenerator generator = new GaussianRandomGenerator(rg);
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,35,double[] sample = new double[10000];
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,36,for (int i = 0; i < sample.length; ++i) {
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,37,sample[i] = generator.nextNormalizedDouble();
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,39,"assertEquals(0.0, StatUtils.mean(sample), 0.012);"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,40,"assertEquals(1.0, StatUtils.variance(sample), 0.01);"
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,43,public static Test suite() {
True,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,44,return new TestSuite(GaussianRandomGeneratorTest.class);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,16,//under the License.
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,18,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,22,import org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,23,import org.apache.commons.math.stat.descriptive.moment.VectorialMean;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,25,import junit.framework.*;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,27,public class UncorrelatedRandomVectorGeneratorTest
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,28,extends TestCase {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,30,public UncorrelatedRandomVectorGeneratorTest(String name) {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,31,super(name);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,32,mean = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,33,standardDeviation = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,34,generator = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,37,public void testMeanAndCorrelation() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,39,VectorialMean meanStat = new VectorialMean(mean.length);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,40,VectorialCovariance covStat = new VectorialCovariance(mean.length);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,41,for (int i = 0; i < 10000; ++i) {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,42,double[] v = generator.nextVector();
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,43,meanStat.increment(v);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,44,covStat.increment(v);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,47,double[] estimatedMean = meanStat.getResult();
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,48,double scale;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,49,RealMatrix estimatedCorrelation = covStat.getResult();
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,50,for (int i = 0; i < estimatedMean.length; ++i) {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,51,"assertEquals(mean[i], estimatedMean[i], 0.07);"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,52,for (int j = 0; j < i; ++j) {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,53,scale = standardDeviation[i] * standardDeviation[j];
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,54,"assertEquals(0, estimatedCorrelation.getEntry(i, j) / scale, 0.03);"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,56,scale = standardDeviation[i] * standardDeviation[i];
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,57,"assertEquals(1, estimatedCorrelation.getEntry(i, i) / scale, 0.025);"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,62,public void setUp() {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,63,"mean              = new double[] {0.0, 1.0, -3.0, 2.3};"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,64,"standardDeviation = new double[] {1.0, 2.0, 10.0, 0.1};"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,65,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,66,rg.setSeed(17399225432l);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,67,generator =
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,68,"new UncorrelatedRandomVectorGenerator(mean, standardDeviation,"
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,69,new GaussianRandomGenerator(rg));
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,72,public void tearDown() {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,73,mean = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,74,standardDeviation = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,75,generator = null;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,78,public static Test suite() {
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,79,return new TestSuite(UncorrelatedRandomVectorGeneratorTest.class);
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,82,private double[] mean;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,83,private double[] standardDeviation;
True,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/UncorrelatedRandomVectorGeneratorTest.java,84,private UncorrelatedRandomVectorGenerator generator;
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,16,//under the License.
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,18,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,20,import org.apache.commons.math.stat.StatUtils;
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,22,import junit.framework.*;
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,24,public class UniformRandomGeneratorTest
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,25,extends TestCase {
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,27,public UniformRandomGeneratorTest(String name) {
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,28,super(name);
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,31,public void testMeanAndStandardDeviation() {
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,32,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,33,rg.setSeed(17399225432l);
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,34,UniformRandomGenerator generator = new UniformRandomGenerator(rg);
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,35,double[] sample = new double[10000];
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,36,for (int i = 0; i < sample.length; ++i) {
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,37,sample[i] = generator.nextNormalizedDouble();
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,39,"assertEquals(0.0, StatUtils.mean(sample), 0.07);"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,40,"assertEquals(1.0, StatUtils.variance(sample), 0.02);"
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,43,public static Test suite() {
True,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/org/apache/commons/math/random/UniformRandomGeneratorTest.java,44,return new TestSuite(UniformRandomGeneratorTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,16,//under the License.
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,18,package org.apache.commons.math.stat.descriptive.moment;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,27,public class VectorialCovarianceTest
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,28,extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,30,public VectorialCovarianceTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,31,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,32,points = null;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,35,public void testMismatch() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,36,try {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,37,new VectorialCovariance(8).increment(new double[5]);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,38,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,39,} catch (DimensionMismatchException dme) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,40,"assertEquals(5, dme.getDimension1());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,41,"assertEquals(8, dme.getDimension2());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,42,} catch (Exception e) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,43,"fail(""wrong exception type caught: "" + e.getClass().getName());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,47,public void testSimplistic() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,48,VectorialCovariance stat = new VectorialCovariance(2);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,49,"stat.increment(new double[] {-1.0,  1.0});"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,50,"stat.increment(new double[] { 1.0, -1.0});"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,51,RealMatrix c = stat.getResult();
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,52,"assertEquals( 2.0, c.getEntry(0, 0), 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,53,"assertEquals(-2.0, c.getEntry(1, 0), 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,54,"assertEquals( 2.0, c.getEntry(1, 1), 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,57,public void testBasicStats() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,59,VectorialCovariance stat = new VectorialCovariance(points[0].length);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,60,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,61,stat.increment(points[i]);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,64,"assertEquals(points.length, stat.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,66,RealMatrix c = stat.getResult();
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,67,double[][] refC    = new double[][] {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,68,"{ 8.0470, -1.9195, -3.4445},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,69,"{-1.9195,  1.0470,  3.2795},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,70,"{-3.4445,  3.2795, 12.2070}"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,73,for (int i = 0; i < c.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,74,for (int j = 0; j <= i; ++j) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,75,"assertEquals(refC[i][j], c.getEntry(i, j), 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,81,public void setUp() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,82,points = new double[][] {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,83,"{ 1.2, 2.3,  4.5},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,84,"{-0.7, 2.3,  5.0},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,85,"{ 3.1, 0.0, -3.1},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,86,"{ 6.0, 1.2,  4.2},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,87,"{-0.7, 2.3,  5.0}"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,91,public void tearDown() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,92,points = null;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,95,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,96,return new TestSuite(VectorialCovarianceTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,99,private double [][] points;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,16,//under the License.
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,18,package org.apache.commons.math.stat.descriptive.moment;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,26,public class VectorialMeanTest
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,27,extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,29,public VectorialMeanTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,30,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,31,points = null;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,34,public void testMismatch() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,35,try {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,36,new VectorialMean(8).increment(new double[5]);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,37,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,38,} catch (DimensionMismatchException dme) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,39,"assertEquals(5, dme.getDimension1());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,40,"assertEquals(8, dme.getDimension2());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,41,} catch (Exception e) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,42,"fail(""wrong exception type caught: "" + e.getClass().getName());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,46,public void testSimplistic() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,47,VectorialMean stat = new VectorialMean(2);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,48,"stat.increment(new double[] {-1.0,  1.0});"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,49,"stat.increment(new double[] { 1.0, -1.0});"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,50,double[] mean = stat.getResult();
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,51,"assertEquals(0.0, mean[0], 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,52,"assertEquals(0.0, mean[1], 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,55,public void testBasicStats() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,57,VectorialMean stat = new VectorialMean(points[0].length);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,58,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,59,stat.increment(points[i]);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,62,"assertEquals(points.length, stat.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,64,double[] mean = stat.getResult();
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,65,"double[]   refMean = new double[] { 1.78, 1.62,  3.12};"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,67,for (int i = 0; i < mean.length; ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,68,"assertEquals(refMean[i], mean[i], 1.0e-12);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,73,public void setUp() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,74,points = new double[][] {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,75,"{ 1.2, 2.3,  4.5},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,76,"{-0.7, 2.3,  5.0},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,77,"{ 3.1, 0.0, -3.1},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,78,"{ 6.0, 1.2,  4.2},"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,79,"{-0.7, 2.3,  5.0}"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,83,public void tearDown() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,84,points = null;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,87,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,88,return new TestSuite(VectorialMeanTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,91,private double [][] points;

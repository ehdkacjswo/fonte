is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,158, Returns the variance of the available values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,158,* Returns the variance of the available values. This uses a corrected
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,159,* two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,160,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,161,"* corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,162,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,163,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,164,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,178,double accum2 = 0.0;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,181,accum2 += (values[i] - mean);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,174,ariance = accum / (double)(values.length - 1);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183,"variance = (accum - (Math.pow(accum2,2)/(double)values.length)) / (double)(values.length - 1);"

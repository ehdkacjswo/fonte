is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,20,import java.text.Format;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,22,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,24,import org.apache.commons.lang.Validate;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,27,* Format that tries a number of delegates in turn until one is successful.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,28,* Contrast to {@link CompositeFormat}.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,30,* @author Matt Benson
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,31,* @since 2.4
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,32,* @version $Id$
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,34,public class MultiFormat extends Format {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,35,private static final long serialVersionUID = -6128683973856547540L;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,38,* Provides a builder with a fluent interface. Example:
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,39,* <p>
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,40,* <code>
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,41,* <pre>
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,42,* MultiFormat mf = new MultiFormat.Builder().add(new FooFormat()).add(
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,43,*         new BarFormat()).add(new BazFormat()).toMultiFormat();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,44,* </pre></code>
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,45,* </p>
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,47,public static class Builder {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,48,private ArrayList delegates = new ArrayList();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,51,* Add a delegate format.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,53,* @param delegate
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,54,* @return the builder
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,56,public Builder add(Format delegate) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,57,"Validate.notNull(delegate, ""delegate format is null"");"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,58,delegates.add(delegate);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,59,return this;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,63,* Render the {@link MultiFormat} instance from this Builder.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,65,* @return MultiFormat
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,67,public MultiFormat toMultiFormat() {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,68,return new MultiFormat((Format[]) delegates
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,69,.toArray(new Format[delegates.size()]));
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,74,private Format[] delegates;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,77,* Create a new MultiFormat.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,79,public MultiFormat() {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,83,* Create a new MultiFormat.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,85,* @param delegates
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,87,public MultiFormat(Format[] delegates) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,88,setDelegates(delegates);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,92,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,94,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer,"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,95,*      java.text.FieldPosition)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,97,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,98,FieldPosition pos) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,99,Format[] d = getValidDelegates();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,100,for (int i = 0; i < d.length; i++) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,101,try {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,102,"return d[i].format(obj, toAppendTo, pos);"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,103,} catch (IllegalArgumentException e) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,104,continue;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,107,"throw new IllegalArgumentException(""No delegate Format can parse """
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,108,+ obj);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,112,* (non-Javadoc)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,114,"* @see java.text.Format#parseObject(java.lang.String,"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,115,*      java.text.ParsePosition)
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,117,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,118,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,119,Format[] d = getDelegates();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,120,for (int i = 0; i < d.length; i++) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,121,"Object o = d[i].parseObject(source, pos);"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,122,if (pos.getErrorIndex() < 0) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,123,return o;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,125,// set up for next attempt:
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,126,pos.setIndex(start);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,127,pos.setErrorIndex(-1);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,129,pos.setErrorIndex(start);
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,130,return null;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,134,* Set the delegates.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,136,* @param delegates
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,137,*            the Format[] delegates to set.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,139,public void setDelegates(Format[] delegates) {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,140,"Validate.noNullElements(delegates,"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,141,"""Null elements present in delegates Format[]"");"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,142,this.delegates = delegates;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,146,* Get the delegates.
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,148,* @return Format[].
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,150,public Format[] getDelegates() {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,151,return delegates;
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,154,private Format[] getValidDelegates() {
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,155,Format[] result = getDelegates();
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,156,"Validate.notEmpty(result, ""No delegate Formats configured"");"
True,src/java/org/apache/commons/lang/text/MultiFormat.java,src/java/org/apache/commons/lang/text/MultiFormat.java,157,return result;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,19,import java.text.DateFormat;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,20,import java.text.FieldPosition;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,21,import java.text.Format;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,22,import java.text.NumberFormat;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,23,import java.text.ParseException;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,24,import java.text.ParsePosition;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,25,import java.util.Calendar;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,26,import java.util.Date;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,27,import java.util.GregorianCalendar;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,28,import java.util.Locale;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,30,import org.apache.commons.lang.ClassUtils;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,31,import org.apache.commons.lang.Validate;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,33,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,36,* Test MultiFormat
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,38,* @author Matt Benson
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,39,* @since 2.4
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,40,* @version $Id$
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,42,public class MultiFormatTest extends TestCase {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,43,private class GuardedFormat extends Format {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,44,private static final long serialVersionUID = 1L;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,46,Format delegate;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,47,Class[] allowableTypes;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,50,* Create a new MultiFormatTest.GuardedFormat.
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,52,"public GuardedFormat(Format delegate, Class[] allowableTypes) {"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,53,Validate.notNull(delegate);
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,54,this.delegate = delegate;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,55,Validate.notNull(allowableTypes);
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,56,this.allowableTypes = allowableTypes;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,59,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,60,FieldPosition pos) {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,61,Class c = obj == null ? null : obj.getClass();
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,62,for (int i = 0; i < allowableTypes.length; i++) {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,63,"if (ClassUtils.isAssignable(c, allowableTypes[i])) {"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,64,"return delegate.format(obj, toAppendTo, pos);"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,67,throw new IllegalArgumentException();
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,70,"public Object parseObject(String source, ParsePosition pos) {"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,71,"return delegate.parseObject(source, pos);"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,75,private Format format;
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,78,* (non-Javadoc)
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,80,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,82,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,83,super.setUp();
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,84,"// silliness to avoid the DateFormat grabbing the Integer, or the"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,85,// integer parsing the first (month) date component:
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,86,format = new MultiFormat.Builder().add(
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,87,"new GuardedFormat(DateFormat.getDateInstance(DateFormat.SHORT,"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,88,"Locale.US), new Class[] { Date.class })).add("
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,89,NumberFormat.getIntegerInstance(Locale.US)).toMultiFormat();
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,92,public void testWTF() {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,93,"System.out.println(DateFormat.getDateInstance(DateFormat.SHORT,"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,94,Locale.US).format(new Integer(1000)));
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,97,public void testFormatNumber() {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,98,"assertEquals(""1,000"", format.format(new Integer(1000)));"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,101,public void testParseNumber() throws ParseException {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,102,"assertEquals(new Integer(-1000).intValue(), ((Number) format"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,103,".parseObject(""-1,000"")).intValue());"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,106,public void testFormatDate() {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,107,"assertEquals(""1/1/70"", format.format(new GregorianCalendar(1970,"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,108,"Calendar.JANUARY, 01).getTime()));"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,111,public void testParseDate() throws ParseException {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,112,"assertEquals(new GregorianCalendar(1970, Calendar.JANUARY, 01)"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,113,".getTime(), format.parseObject(""1/1/70""));"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,116,public void testFormatObject() {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,117,try {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,118,format.format(new Object());
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,119,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,120,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,121,// okay
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,125,public void testParseGarbage() {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,126,try {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,127,"format.parseObject(""garbage"");"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,128,"fail(""expected ParseException"");"
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,129,} catch (ParseException e) {
True,src/test/org/apache/commons/lang/text/MultiFormatTest.java,src/test/org/apache/commons/lang/text/MultiFormatTest.java,130,//okay
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,59,suite.addTestSuite(MultiFormatTest.class);

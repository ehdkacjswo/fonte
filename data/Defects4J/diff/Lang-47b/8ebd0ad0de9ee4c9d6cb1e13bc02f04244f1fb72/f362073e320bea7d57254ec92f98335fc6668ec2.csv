is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,798,"his.escape(stringWriter, str);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,798,try {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,799,"this.escape(stringWriter, str);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,800,} catch (IOException e) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,801,"// This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,802,// throw IOExceptions.
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,803,throw new UnhandledException(e);
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,841, <p>
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,842, Escapes the characters in the <code>String</code> passed and writes the result to the <code>StringWriter</code>
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,843, passed.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,844, </p>
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,846, @param writer
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,847,            The <code>StringWriter</code> to write the results of the escaping to. Assumed to be a non-null
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,848,            value.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,849, @param str
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,850,            The <code>String</code> to escape. Assumed to be a non-null value.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,852, @see #escape(String)
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,853, @see Writer
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,854, @since 2.3
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,856,"ublic void escape(StringWriter writer, String str) {"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,857,ry {
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,858,"his.escape((Writer) writer, str);"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,859, catch (IOException e) {
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,860,"/ This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,861,/ throw IOExceptions.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,862,hrow new UnhandledException(e);
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,882,"his.unescape(stringWriter, str);"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,883,eturn stringWriter.toString();
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,886,rivate StringWriter createStringWriter(String str) {
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,887,/ Make the StringWriter 10% larger than the source String to avoid growing the writer
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,888,eturn new StringWriter((int) (str.length() + (str.length() * 0.1)));
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,892, <p>
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,893, Unescapes the escaped entities in the <code>String</code> passed and writes the result to the
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,894, <code>StringWriter</code> passed.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,895, </p>
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,897, @param writer
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,898,            The <code>StringWriter</code> to write the results to; assumed to be non-null.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,899, @param string
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,900,            The <code>String</code> to write the results to; assumed to be non-null.
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,902, @see #escape(String)
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,903, @see Writer
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,904, @since 2.3
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,906,"ublic void unescape(StringWriter writer, String string) {"
False,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,908,"his.unescape((Writer) writer, string);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,863,"this.unescape(stringWriter, str);"
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,869,return stringWriter.toString();
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,872,private StringWriter createStringWriter(String str) {
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,873,// Make the StringWriter 10% larger than the source String to avoid growing the writer
True,src/java/org/apache/commons/lang/Entities.java,src/java/org/apache/commons/lang/Entities.java,874,return new StringWriter((int) (str.length() + (str.length() * 0.1)));

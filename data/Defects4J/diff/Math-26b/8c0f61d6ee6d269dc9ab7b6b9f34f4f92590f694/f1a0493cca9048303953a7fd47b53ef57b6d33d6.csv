is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,20,import org.apache.commons.math3.complex.ComplexUtils;
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,21,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
False,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,147,ouble coefficients[] = getCoefficients();
False,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,148,omplex c[] = new Complex[coefficients.length];
False,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,149,or (int i = 0; i < coefficients.length; i++) {
False,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,150,"[i] = new Complex(coefficients[i], 0);"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,149,final Complex c[] = ComplexUtils.convertToComplex(getCoefficients());
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,170,* Find all complex roots for the polynomial with the given
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,171,"* coefficients, starting from the given initial value."
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,172,* <br/>
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,173,* Note: This method is not part of the API of {@link BaseUnivariateSolver}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,175,* @param coefficients Polynomial coefficients.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,176,* @param initial Start value.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,177,* @return the point at which the function value is zero.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,178,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,179,* if the maximum number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,180,* @throws NullArgumentException if the {@code coefficients} is
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,181,* {@code null}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,182,* @throws NoDataException if the {@code coefficients} array is empty.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,184,"public Complex[] solveAllComplex(double[] coefficients,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,185,double initial) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,186,"setup(Integer.MAX_VALUE,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,187,"new PolynomialFunction(coefficients),"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,188,"Double.NEGATIVE_INFINITY,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,189,"Double.POSITIVE_INFINITY,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,190,initial);
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,191,"return complexSolver.solveAll(ComplexUtils.convertToComplex(coefficients),"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,192,"new Complex(initial, 0d));"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,196,"* Find a complex root for the polynomial with the given coefficients,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,197,* starting from the given initial value.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,198,* <br/>
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,199,* Note: This method is not part of the API of {@link BaseUnivariateSolver}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,201,* @param coefficients Polynomial coefficients.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,202,* @param initial Start value.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,203,* @return the point at which the function value is zero.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,204,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,205,* if the maximum number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,206,* @throws NullArgumentException if the {@code coefficients} is
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,207,* {@code null}.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,208,* @throws NoDataException if the {@code coefficients} array is empty.
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,210,"public Complex solveComplex(double[] coefficients,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,211,double initial) {
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,212,"setup(Integer.MAX_VALUE,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,213,"new PolynomialFunction(coefficients),"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,214,"Double.NEGATIVE_INFINITY,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,215,"Double.POSITIVE_INFINITY,"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,216,initial);
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,217,"return complexSolver.solve(ComplexUtils.convertToComplex(coefficients),"
True,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java,218,"new Complex(initial, 0d));"
False,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,35,rivate ComplexUtils() {
False,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,36,uper();
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,35,private ComplexUtils() {}
False,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,61, @throws MathIllegalArgumentException  if r is negative
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,59,* @throws MathIllegalArgumentException if {@code r} is negative.
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,71,* Convert an array of primitive doubles to an array of {@code Complex} objects.
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,73,* @param real Array of numbers to be converted to their {@code Complex}
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,74,* equivalent.
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,75,* @return an array of {@code Complex} objects.
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,77,* @since 3.1
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,79,public static Complex[] convertToComplex(double[] real) {
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,80,final Complex c[] = new Complex[real.length];
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,81,for (int i = 0; i < real.length; i++) {
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,82,"c[i] = new Complex(real[i], 0);"
True,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,src/main/java/org/apache/commons/math3/complex/ComplexUtils.java,85,return c;
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,22,import org.apache.commons.math3.complex.Complex;
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,24,import org.apache.commons.math3.TestUtils;
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,113, Test of solver for the quintic function using solveAll().
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,114," XXX commented out because ""solveAll"" is not part of the API."
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,115,* Test of solver for the quintic function using
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,116,"* {@link LaguerreSolver#solveAllComplex(double[],double) solveAllComplex}."
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,116,/ public void testQuinticFunction2() {
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,117,"/     double initial = 0.0, tolerance;"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,118,"/     Complex expected, result[];"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,120,/     // p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,121,"/     double coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,122,/     LaguerreSolver solver = new LaguerreSolver();
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,123,"/     result = solver.solveAll(coefficients, initial);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,125,"/     expected = new Complex(0.0, -2.0);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,126,"/     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,127,/                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,128,"/     TestUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,130,"/     expected = new Complex(0.0, 2.0);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,131,"/     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,132,/                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,133,"/     TestUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,135,"/     expected = new Complex(0.5, 0.5 * FastMath.sqrt(3.0));"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,136,"/     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,137,/                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,138,"/     TestUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,140,"/     expected = new Complex(-1.0, 0.0);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,141,"/     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,142,/                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,143,"/     TestUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,145,"/     expected = new Complex(0.5, -0.5 * FastMath.sqrt(3.0));"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,146,"/     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,147,/                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,148,"/     TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,118,@Test
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,119,public void testQuinticFunction2() {
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,120,// p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,121,"final double[] coefficients = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,122,final LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,123,"final Complex[] result = solver.solveAllComplex(coefficients, 0);"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,125,"for (Complex expected : new Complex[] { new Complex(0, -2),"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,126,"new Complex(0, 2),"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,127,"new Complex(0.5, 0.5 * FastMath.sqrt(3)),"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,128,"new Complex(-1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,129,"new Complex(0.5, -0.5 * FastMath.sqrt(3.0)) }) {"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,130,"final double tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,131,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java,132,"TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,103,@Test
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,104,public void testConvertToComplex() {
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,105,"final double[] real = new double[] { negInf, -123.45, 0, 1, 234.56, pi, inf };"
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,106,final Complex[] complex = ComplexUtils.convertToComplex(real);
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,108,for (int i = 0; i < real.length; i++) {
True,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java,109,"Assert.assertEquals(real[i], complex[i].getReal(), 0d);"

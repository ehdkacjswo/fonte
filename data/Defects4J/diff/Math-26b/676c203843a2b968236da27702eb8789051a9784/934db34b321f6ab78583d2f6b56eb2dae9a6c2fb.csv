is_addition,old_file_path,new_file_path,line_num,content
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,36,eturn contents;
True,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources.java,36,return (Object[][]) contents.clone();
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,35,eturn contents;
True,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,35,return (Object[][]) contents.clone();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,21,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,29,  T0(X)   = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,30,  T1(X)   = X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,31,  Tk+1(X) = 2X Tk(X) - Tk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,26,*  T<sub>0</sub>(X)   = 1
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,27,*  T<sub>1</sub>(X)   = X
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,28,*  T<sub>k+1</sub>(X) = 2X T<sub>k</sub>(X) - T<sub>k-1</sub>(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,39,/** Generator for the Chebyshev polynomials. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,40,private static final CoefficientsGenerator generator =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,41,"new CoefficientsGenerator(new RationalNumber(1l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,42,"new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,43,new RationalNumber(1l)) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,44,public void setRecurrenceCoefficients(int k) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,45,// the recurrence relation is
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,46,// Tk+1(X) = 2X Tk(X) - Tk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,47,"setRecurrenceCoefficients(new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,48,"new RationalNumber(2l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,49,new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,46,"uper(0, l, maxDegree);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,57,"super(0, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,51, @param d degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,53,ublic Chebyshev(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,54,"uper(d, l, maxDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,57,** Initialize the recurrence coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,58, The recurrence relation is
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,59,  <pre>Tk+1(X) = 2X Tk(X) - Tk-1(X)</pre>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,60, @param k index of the current step
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,61, @param b2k coefficient to initialize (b2k = a2k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,62, @param b3k coefficient to initialize (b3k = a3k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,63, @param b4k coefficient to initialize (b4k = a4k / a1k)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,62,* @param degree degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,65,"rotected void initRecurrenceCoefficients(int k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,66,"ationalNumber b2k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,67,"ationalNumber b3k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,68,ationalNumber b4k) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,69,2k.reset(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,70,3k.reset(2l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,71,4k.reset(1l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,64,public Chebyshev(int degree) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,65,"super(degree, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,74,** Set the maximal degree of already computed polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,75, @param d maximal degree of already computed polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,77,rotected void setMaxDegree(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,78,axDegree = d;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,81,rivate static final long serialVersionUID = 8367010179599693222L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,83,** List holding the coefficients of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,84,rivate static List l;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,86,** Maximal degree of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,87,rivate static int maxDegree;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,89,** Build the first two polynomials. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,90,tatic {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,92, = new ArrayList ();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,94,/ T0(X)  = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,95,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,97,/ T1(X)  = X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,98,.add(new RationalNumber(0l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,99,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,101,axDegree = 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Chebyshev.java,68,private static final long serialVersionUID = -893367988717182601L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,21,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,29,  H0(X)   = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,30,  H1(X)   = 2X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,31,  Hk+1(X) = 2X Hk(X) - 2k Hk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,26,*  H<sub>0</sub>(X)   = 1
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,27,*  H<sub>1</sub>(X)   = 2X
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,28,*  H<sub>k+1</sub>(X) = 2X H<sub>k</sub>(X) - 2k H<sub>k-1</sub>(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,38,/** Generator for the Hermite polynomials. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,39,private static final CoefficientsGenerator generator =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,40,"new CoefficientsGenerator(new RationalNumber(1l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,41,"new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,42,new RationalNumber(2l)) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,43,public void setRecurrenceCoefficients(int k) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,44,// the recurrence relation is
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,45,// Hk+1(X) = 2X Hk(X) - 2k Hk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,46,"setRecurrenceCoefficients(new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,47,"new RationalNumber(2l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,48,new RationalNumber(k * 2l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,45,"uper(0, l, maxDegree);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,56,"super(0, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,50, @param d degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,52,ublic Hermite(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,53,"uper(d, l, maxDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,56,** Initialize the recurrence coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,57, The recurrence relation is
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,58,  <pre>Hk+1(X) = 2X Hk(X) - 2k Hk-1(X)</pre>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,59, @param k index of the current step
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,60, @param b2k coefficient to initialize (b2k = a2k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,61, @param b3k coefficient to initialize (b3k = a3k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,62, @param b4k coefficient to initialize (b4k = a4k / a1k)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,61,* @param degree degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,64,"rotected void initRecurrenceCoefficients(int k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,65,"ationalNumber b2k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,66,"ationalNumber b3k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,67,ationalNumber b4k) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,68,2k.reset(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,69,3k.reset(2l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,70,4k.reset(2l * k);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,63,public Hermite(int degree) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,64,"super(degree, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,73,** Set the maximal degree of already computed polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,74, @param d maximal degree of already computed polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,76,rotected void setMaxDegree(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,77,axDegree = d;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,80,rivate static final long serialVersionUID = -4639726453485128770L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,82,** Table holding the coefficients of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,83,rivate static List l;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,85,** Maximal degree of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,86,rivate static int maxDegree;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,88,** Build the first two polynomials. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,89,tatic {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,91, = new ArrayList ();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,93,/ H0(X)  = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,94,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,96,/ H1(X)  = 2X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,97,.add(new RationalNumber(0l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,98,.add(new RationalNumber(2l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,100,axDegree = 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Hermite.java,67,private static final long serialVersionUID = 7910082423686662133L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,21,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,29,        L0(X)   = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,30,        L1(X)   = 1 - X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,31,  (k+1) Lk+1(X) = (2k + 1 - X) Lk(X) - k Lk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,26,*        L<sub>0</sub>(X)   = 1
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,27,*        L<sub>1</sub>(X)   = 1 - X
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,28,*  (k+1) L<sub>k+1</sub>(X) = (2k + 1 - X) L<sub>k</sub>(X) - k L<sub>k-1</sub>(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,38,/** Generator for the Laguerre polynomials. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,39,private static final CoefficientsGenerator generator =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,40,"new CoefficientsGenerator(new RationalNumber(1l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,41,"new RationalNumber(1l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,42,new RationalNumber(-1l)) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,43,public void setRecurrenceCoefficients(int k) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,44,// the recurrence relation is
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,45,// (k+1) Lk+1(X) = (2k + 1 - X) Lk(X) - k Lk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,46,long kP1 = k + 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,47,"setRecurrenceCoefficients(new RationalNumber(2 * k + 1, kP1),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,48,"new RationalNumber(-1l, kP1),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,49,"new RationalNumber(k, kP1));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,45,"uper(0, l, maxDegree);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,57,"super(0, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,50, @param d degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,52,ublic Laguerre(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,53,"uper(d, l, maxDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,56,** Initialize the recurrence coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,57, The recurrence relation is
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,58,  <pre>(k+1) Lk+1(X) = (2k + 1 - X) Lk(X) - k Lk-1(X)</pre>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,59, @param k index of the current step
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,60, @param b2k coefficient to initialize (b2k = a2k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,61, @param b3k coefficient to initialize (b3k = a3k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,62, @param b4k coefficient to initialize (b4k = a4k / a1k)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,62,* @param degree degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,64,"rotected void initRecurrenceCoefficients(int k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,65,"ationalNumber b2k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,66,"ationalNumber b3k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,67,ationalNumber b4k) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,68,ong kP1 = k + 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,69,"2k.reset(2 * k + 1, kP1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,70,"3k.reset(-1l, kP1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,71,"4k.reset(k, kP1);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,64,public Laguerre(int degree) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,65,"super(degree, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,74,** Set the maximal degree of already computed polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,75, @param d maximal degree of already computed polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,77,rotected void setMaxDegree(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,78,axDegree = d;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,81,rivate static final long serialVersionUID = -750526984136835515L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,83,** List holding the coefficients of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,84,rivate static List l;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,86,** Maximal degree of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,87,rivate static int maxDegree;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,89,** Build the first two polynomials. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,90,tatic {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,92, = new ArrayList ();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,94,/ L0(X)  = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,95,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,97,/ L1(X)  = 1 - X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,98,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,99,.add(new RationalNumber(-1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,101,axDegree = 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Laguerre.java,68,private static final long serialVersionUID = 3213856667479179710L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,20,mport java.util.ArrayList;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,21,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,29,        P0(X)   = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,30,        P1(X)   = X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,31,  (k+1) Pk+1(X) = (2k+1) X Pk(X) - k Pk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,26,*        P<sub>0</sub>(X)   = 1
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,27,*        P<sub>1</sub>(X)   = X
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,28,*  (k+1) P<sub>k+1</sub>(X) = (2k+1) X P<sub>k</sub>(X) - k P<sub>k-1</sub>(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,39,/** Generator for the Legendre polynomials. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,40,private static final CoefficientsGenerator generator =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,41,"new CoefficientsGenerator(new RationalNumber(1l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,42,"new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,43,new RationalNumber(1l)) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,44,public void setRecurrenceCoefficients(int k) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,45,// the recurrence relation is
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,46,// (k+1) Pk+1(X) = (2k+1) X Pk(X) - k Pk-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,47,long kP1 = k + 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,48,"setRecurrenceCoefficients(new RationalNumber(0l),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,49,"new RationalNumber(2 * k + 1, kP1),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,50,"new RationalNumber(k, kP1));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,46,"uper(0, l, maxDegree);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,58,"super(0, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,51, @param d degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,53,ublic Legendre(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,54,"uper(d, l, maxDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,57,** Initialize the recurrence coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,58, The recurrence relation is
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,59,  <pre>(k+1) Pk+1(X) = (2k+1) X Pk(X) - k Ok-1(X)</pre>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,60, @param k index of the current step
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,61, @param b2k coefficient to initialize (b2k = a2k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,62, @param b3k coefficient to initialize (b3k = a3k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,63, @param b4k coefficient to initialize (b4k = a4k / a1k)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,63,* @param degree degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,65,"rotected void initRecurrenceCoefficients(int k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,66,"ationalNumber b2k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,67,"ationalNumber b3k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,68,ationalNumber b4k) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,69,ong kP1 = k + 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,70,2k.reset(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,71,"3k.reset(2 * k + 1, kP1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,72,"4k.reset(k, kP1);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,65,public Legendre(int degree) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,66,"super(degree, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,75,** Set the maximal degree of already computed polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,76, @param d maximal degree of already computed polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,78,rotected void setMaxDegree(int d) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,79,axDegree = d;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,82,rivate static final long serialVersionUID = 428266828791532209L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,84,** List holding the coefficients of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,85,rivate static List l;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,87,** Maximal degree of the polynomials computed so far. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,88,rivate static int maxDegree;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,90,** Build the first two polynomials. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,91,tatic {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,93, = new ArrayList ();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,95,/ P0(X)  = 1
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,96,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,98,/ P1(X)  = X
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,99,.add(new RationalNumber(0l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,100,.add(new RationalNumber(1l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,102,axDegree = 1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Legendre.java,69,private static final long serialVersionUID = 4014485393845978429L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,20,mport java.util.List;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,27,      O0(X)   = some 0 degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,28,      O1(X)   = some first degree polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,29,  a1k Ok+1(X) = (a2k + a3k X) Ok(X) - a4k Ok-1(X)
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,25,*      O<sub>0</sub>(X)   = some 0 degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,26,*      O<sub>1</sub>(X)   = some first degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,27,"*  a<sub>1,k</sub> O<sub>k+1</sub>(X) = (a<sub>2,k</sub> + a<sub>3,k</sub> X) O<sub>k</sub>(X) - a<sub>4,k</sub> O<sub>k-1</sub>(X)"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,31," where a0k, a1k, a2k and a3k are simple expressions which either are"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,29,"* where a<sub>1,k</sub>, a<sub>2,k</sub>, a<sub>3,k</sub> and"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,30,"* a<sub>4,k</sub> are simple expressions which either are"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,43, @param d degree of the polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,44, @param l list containing all coefficients already computed
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,45," @param maxDegree maximal degree of computed coefficients, this"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,46," coefficient <em>must</em> be greater or equal to 1, i.e. the"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,47, derived class <em>must</em> have initialized the first two
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,48, polynomials of degree 0 and 1 before this constructor can be
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,49, called.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,51,"rotected OrthogonalPolynomial(int d, List l, int maxDegree) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,52,f (d > maxDegree) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,53,"omputeUpToDegree(d, l, maxDegree);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,56,/ coefficient  for polynomial 0 is  l [0]
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,57,/ coefficient  for polynomial 1 are l [1] ... l [2] (degrees 0 ... 1)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,58,/ coefficients for polynomial 2 are l [3] ... l [5] (degrees 0 ... 2)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,59,/ coefficients for polynomial 3 are l [6] ... l [9] (degrees 0 ... 3)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,60,/ coefficients for polynomial 4 are l[10] ... l[14] (degrees 0 ... 4)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,61,/ coefficients for polynomial 5 are l[15] ... l[20] (degrees 0 ... 5)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,62,/ coefficients for polynomial 6 are l[21] ... l[27] (degrees 0 ... 6)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,64,nt start = d * (d + 1) / 2;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,66, = new RationalNumber[d+1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,67,or (int i = 0; i <= d; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,68,[i] = new RationalNumber((RationalNumber) l.get(start + i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,71,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,75,** Initialize the recurrence coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,76, The recurrence relation is
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,77,  <pre>a1k Ok+1(X) = (a2k + a3k X) Ok(X) - a4k Ok-1(X)</pre>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,78, @param k index of the current step
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,79, @param b2k coefficient to initialize (b2k = a2k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,80, @param b3k coefficient to initialize (b3k = a3k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,81, @param b4k coefficient to initialize (b4k = a4k / a1k)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,83,"rotected abstract void initRecurrenceCoefficients(int k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,84,"ationalNumber b2k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,85,"ationalNumber b3k,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,86,ationalNumber b4k);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,88,** Set the maximal degree of already computed polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,89, @param d maximal degree of already computed polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,91,rotected abstract void setMaxDegree(int d);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,93,** Compute all the polynomial coefficients up to a given degree.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,94, @param d maximal degree
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,95, @param l list containing all coefficients already computed
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,96, @param maxDegree maximal degree of computed coefficients
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,42,* @param degree degree of the polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,43,* @param generator coefficients generator for the current type of polynomials
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,98,"rotected void computeUpToDegree(int d, List l, int maxDegree) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,100,ationalNumber b2k = new RationalNumber();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,101,ationalNumber b3k = new RationalNumber();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,102,ationalNumber b4k = new RationalNumber();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,104,nt startK = (maxDegree - 1) * maxDegree / 2;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,105,or (int k = maxDegree; k < d; ++k) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,107,/ start indices of two previous polynomials Ok(X) and Ok-1(X)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,108,nt startKm1 = startK;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,109,tartK += k;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,111,/ a1k Ok+1(X) = (a2k + a3k X) Ok(X) - a4k Ok-1(X)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,112,/ we use bik = aik/a1k
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,113,"nitRecurrenceCoefficients(k, b2k, b3k, b4k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,115,ationalNumber ckPrev = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,116,ationalNumber ck     = (RationalNumber)l.get(startK);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,117,ationalNumber ckm1   = (RationalNumber)l.get(startKm1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,119,/ degree 0 coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,120,"ationalNumber coeff  = RationalNumber.multiply(ck, b2k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,121,"oeff.multiplyAndSubtractFromSelf(ckm1, b4k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,122,.add(coeff);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,124,/ degree 1 to degree k-1 coefficients
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,125,or (int i = 1; i < k; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,126,kPrev = ck;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,127,k     = (RationalNumber)l.get(startK + i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,128,km1   = (RationalNumber)l.get(startKm1 + i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,129,"oeff  = RationalNumber.multiply(ck, b2k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,130,"oeff.multiplyAndAddToSelf(ckPrev, b3k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,131,"oeff.multiplyAndSubtractFromSelf(ckm1, b4k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,132,.add(coeff);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,135,/ degree k coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,136,kPrev = ck;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,137,k     = (RationalNumber)l.get(startK + k);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,138,"oeff  = RationalNumber.multiply(ck, b2k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,139,"oeff.multiplyAndAddToSelf(ckPrev, b3k);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,140,.add(coeff);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,142,/ degree k+1 coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,143,".add(RationalNumber.multiply(ck, b3k));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,147,etMaxDegree(d);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,45,"protected OrthogonalPolynomial(int degree, CoefficientsGenerator generator) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/OrthogonalPolynomial.java,46,a       = generator.getCoefficients(degree);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,22,import java.util.Arrays;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,24, This class implements polynomials with one unknown.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,24,/** This class implements polynomials with one unknown.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,37,* <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,41,ublic abstract class Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,42,"mplements Cloneable, Serializable {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,44,** Create a copy of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,45, @return a copy of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,47,ublic abstract Object clone();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,43,public abstract class Polynomial implements Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,66,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,71,ublic abstract void negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,68,public abstract Polynomial negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,72,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,76,ublic abstract void multiplySelf(RationalNumber r);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,74,public abstract Polynomial multiply(RationalNumber r);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,78,* @return a new Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,81,ublic abstract void multiplySelf(long l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,80,public abstract Polynomial multiply(long l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,84,* @return a new Polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,86,public Polynomial multiply(BigInteger i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,87,return multiply(new RationalNumber(i));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,90,/** Divide the instance by a constant.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,91,* @param l constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,92,* @return a new polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,93,* @exception ArithmeticException if the constant is zero
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,95,public Polynomial divide(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,96,return divide(new RationalNumber(l));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,99,/** Divide the instance by a constant.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,100,* @param r constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,101,* @return a new polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,102,* @exception ArithmeticException if the constant is zero
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,104,public Polynomial divide(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,105,return multiply(r.invert());
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,108,/** Divide the instance by a constant.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,109,* @param i constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,110,* @return a new polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,111,* @exception ArithmeticException if the constant is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,86,ublic void multiplySelf(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,87,ultiplySelf(new RationalNumber(i));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,113,public Polynomial divide(BigInteger i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,114,return divide(new RationalNumber(i));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,90,** Get the value of the polynomial for a specified unknown.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,117,/** Get the value of the polynomial for a specified unknown.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,103,** Set the name of the unknown (to appear during conversions to strings).
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,104," @param name name to set (if null, the default 'x' value  will be used)"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,106,ublic abstract void setUnknownName(String name);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,121, = new RationalNumber[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,122,[0] = new RationalNumber(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,123,nknown = null;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,143,a = new RationalNumber[] { RationalNumber.ZERO };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,139, = new RationalNumber[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,140,[0] = value;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,141,nknown = null;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,159,a = new RationalNumber[] { value };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,160, = new RationalNumber[2];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,161,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,178,"a = new RationalNumber[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,163, = new RationalNumber[1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,180,a = new RationalNumber[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,165,[0] = a0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,166,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,189, = new RationalNumber[3];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,190,[2] = a2;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,191,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,204,"a = new RationalNumber[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,194, = new RationalNumber[2];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,195,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,207,"a = new RationalNumber[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,197, = new RationalNumber[1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,209,a = new RationalNumber[] { a0 };
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,214,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,215,* Build a third degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,216,* @param a3 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,217,* @param a2 second degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,218,* @param a1 first degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,219,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,221,"public Rational(long a3, long a2, long a1, long a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,222,"this(new RationalNumber(a3),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,223,"new RationalNumber(a2),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,224,"new RationalNumber(a1),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,225,new RationalNumber(a0));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,228,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,229,* Build a third degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,230,* @param a3 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,231,* @param a2 second degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,232,* @param a1 first degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,233,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,235,"public Rational(RationalNumber a3, RationalNumber a2,"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,236,"RationalNumber a1, RationalNumber a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,237,if (! a3.isZero()) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,238,"a = new RationalNumber[] { a0, a1, a2, a3 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,239,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,240,if (! a2.isZero()) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,241,"a = new RationalNumber[] { a0, a1, a2 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,242,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,243,if (! a1.isZero()) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,244,"a = new RationalNumber[] { a0, a1 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,245,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,246,a = new RationalNumber[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,200,[0] = a0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,201,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,223,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,235, = new RationalNumber[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,236,[0] = new RationalNumber(0l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,281,a = new RationalNumber[] { RationalNumber.ZERO };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,239,or (int i = 0; i < degree; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,240,[i] = new RationalNumber(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,242,[degree] = new RationalNumber(c);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,245,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,249,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,250, The copy is a deep copy: the polynomials do <em>not</em> share
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,251, their coefficients arrays
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,252, @param p polynomial to copy
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,254,ublic Rational(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,256, = new RationalNumber[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,257,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,258,[i] = new RationalNumber(p.a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,261,f (p.unknown == null) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,262,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,263, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,264,nknown = new String(p.unknown);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,284,"Arrays.fill(a, 0, degree, RationalNumber.ZERO);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,285,a[degree] = c;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,269,** Create a copy of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,270, @return a copy of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,272,ublic Object clone() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,273,eturn new Rational(this);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,305," @return a reference to the internal coefficients array, the array"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,319,"* @return a copy of the coefficients array, the array"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,307, index a.length-1 is the leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,321,* index a.length-1 is the leading degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,310,eturn a;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,313,** Set the name of the unknown (to appear during conversions to strings).
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,314," @param name name to set (if null, the default 'x' value  will be used)"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,316,ublic void setUnknownName(String name) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,317,nknown = name;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,324,return (RationalNumber[]) a.clone();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,320,"** Simplify the polynomial, by removing null high degree terms."
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,322,rivate void simplify() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,324,nt i = a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,325,hile ((i > 0) && a[i].isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,326,-i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,329,f (i < a.length - 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,330,ationalNumber[] newA = new RationalNumber[i + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,331,"ystem.arraycopy(a, 0, newA, 0, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,332, = newA;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,337,** Add a polynomial to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,327,/** Add a polynomial to the instance
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,329,* @return a new polynomial which is the sum of the instance and p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,340,ublic void addToSelf(Rational p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,331,public Rational add(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,342,f (p.a.length > a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,343,ationalNumber[] newA = new RationalNumber[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,344,"ystem.arraycopy(a, 0, newA, 0, a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,345,or (int i = a.length; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,346,ewA[i] = new RationalNumber(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,348, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,333,// identify the lowest degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,334,"int lowLength  = Math.min(a.length, p.a.length);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,335,"int highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,351,or (int i = 0; i < p.a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,352,[i].addToSelf(p.a[i]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,337,// build the coefficients array
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,338,RationalNumber[] newA = new RationalNumber[highLength];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,339,for (int i = 0; i < lowLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,340,newA[i] = a[i].add(p.a[i]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,342,"System.arraycopy((a.length < p.a.length) ? p.a : a,"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,343,"lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,355,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,345,return new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,359,** Add two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,360, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,361, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,362, @return a new polynomial which is the sum of p1 and p2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,364,"ublic static Rational add(Rational p1, Rational p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,365,ational copy = new Rational(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,366,opy.addToSelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,367,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,351,* @return a new polynomial which is the difference the instance minus p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,373,ublic void subtractFromSelf(Rational p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,353,public Rational subtract(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,375,f (p.a.length > a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,376,ationalNumber[] newA = new RationalNumber[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,377,"ystem.arraycopy(a, 0, newA, 0, a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,378,or (int i = a.length; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,379,ewA[i] = new RationalNumber(0l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,381, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,355,// identify the lowest degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,356,"int lowLength  = Math.min(a.length, p.a.length);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,357,"int highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,384,or (int i = 0; i < p.a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,385,[i].subtractFromSelf(p.a[i]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,359,// build the coefficients array
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,360,RationalNumber[] newA = new RationalNumber[highLength];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,361,for (int i = 0; i < lowLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,362,newA[i] = a[i].subtract(p.a[i]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,364,if (a.length < p.a.length) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,365,for (int i = lowLength; i < highLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,366,newA[i] = p.a[i].negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,368,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,369,"System.arraycopy(a, lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,388,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,372,return new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,392,** Subtract two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,393, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,394, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,395, @return a new polynomial which is the difference p1 minus p2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,397,"ublic static Rational subtract(Rational p1, Rational p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,398,ational copy = new Rational(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,399,opy.subtractFromSelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,400,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,377,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,405,ublic void negateSelf() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,379,public Polynomial negate() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,380,RationalNumber[] newA = new RationalNumber[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,407,[i].negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,382,newA[i] = a[i].negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,411,** Negate a polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,412, @param p polynomial to negate
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,413, @return a new polynomial which is the opposite of p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,415,ublic static Rational negate(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,416,ational copy = new Rational(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,417,opy.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,418,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,384,return new Rational(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,389,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,424,ublic void multiplySelf(Rational p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,391,public Rational multiply(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,429,ewA[i] = new RationalNumber(0l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,396,newA[i] = RationalNumber.ZERO;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,433,"ewA[i].addToSelf(RationalNumber.multiply(a[j], p.a[i-j]));"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,400,newA[i] = newA[i].add(a[j].multiply(p.a[i-j]));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,437, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,404,return new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,441,** Multiply two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,442, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,443, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,444, @return a new polynomial which is the product of p1 and p2
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,408,/** Multiply the instance by a constant.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,409,* @param l constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,410,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,446,"ublic static Rational multiply(Rational p1, Rational p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,447,ational copy = new Rational(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,448,opy.multiplySelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,449,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,412,public Polynomial multiply(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,413,return multiply(new RationalNumber(l));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,418,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,455,ublic void multiplySelf(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,420,public Polynomial multiply(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,458, = new RationalNumber[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,459,[0] = new RationalNumber(0l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,423,return new Rational(new RationalNumber[] { RationalNumber.ZERO });
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,462,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,463,[i].multiplySelf(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,468,** Multiply a polynomial by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,469, @param p polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,470, @param r constant
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,471, @return a new polynomial which is the product of p and r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,473,"ublic static Rational multiply(Rational p, RationalNumber r) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,474,ational copy = new Rational(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,475,opy.multiplySelf(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,476,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,479,** Multiply the instance by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,480, @param l constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,482,ublic void multiplySelf(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,484,f (l == 0l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,485, = new RationalNumber[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,486,[0] = new RationalNumber(0l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,426,if (r.isOne()) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,427,return this;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,430,RationalNumber[] newA = new RationalNumber[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,490,[i].multiplySelf(l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,432,newA[i] = a[i].multiply(r);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,434,return new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,495,** Multiply a polynomial by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,496, @param p polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,497, @param l constant
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,498, @return a new polynomial which is the product of p and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,500,"ublic static Rational multiply(Rational p, long l) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,501,ational copy = new Rational(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,502,opy.multiplySelf(l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,503,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,524,ational derivative = new Rational();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,526,eturn derivative;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,457,return new Rational();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,528,erivative.a = new RationalNumber[a.length - 1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,459,RationalNumber[] newA = new RationalNumber[a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,530,"erivative.a[i-1] = RationalNumber.multiply(a[i], i);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,461,newA[i - 1] = a[i].multiply(i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,532,eturn derivative;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,463,return new Rational(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,544,ational remainder = new Rational(dividend);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,475,Rational remainder = dividend;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,550,"ationalNumber c = RationalNumber.divide(remainder.a[remainderDegree],"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,551,ivisor.a[divisorDegree]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,481,RationalNumber c =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,482,remainder.a[remainderDegree].divide(divisor.a[divisorDegree]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,554,"emainder.subtractFromSelf(Rational.multiply(monomial, divisor));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,555,uotient.addToSelf(monomial);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,485,remainder = remainder.subtract(monomial.multiply(divisor));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,486,quotient  = quotient.add(monomial);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,575,"ationalNumber newCoeff = RationalNumber.multiply(a[i], lcm);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,506,RationalNumber newCoeff = a[i].multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,597," <p>The name of the unknown is <code>x</code> by default, but can"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,598, be changed using the {@link #setUnknownName setUnknownName}
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,599, method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,637,.append((unknown == null) ? defaultUnknown : unknown);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,564,"s.append(""x"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,653,** Name of the unknown. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,654,rotected String unknown;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,656,rivate static final long serialVersionUID = 3035650338772911046L;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,580,private static final long serialVersionUID = -794133890636181115L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,690, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,691,[0] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,692,nknown = null;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,614,a = new double[] { 0.0 };
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,617,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,618,* Build a constant polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,619,* @param value constant value of the polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,621,public Double(long value) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,622,this((double) value);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,700, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,701,[0] = value;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,702,nknown = null;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,630,a = new double[] { value };
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,633,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,634,* Build a first degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,635,* @param a1 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,636,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,638,"public Double(long a1, long a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,639,"this((double) a1, (double) a0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,711,f (Math.abs(a1) > 1.0e-12) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,712, = new double[2];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,713,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,648,if (a1 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,649,"a = new double[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,715, = new double[1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,651,a = new double[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,717,[0] = a0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,718,nknown = null;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,655,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,656,* Build a second degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,657,* @param a2 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,658,* @param a1 first degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,659,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,661,"public Double(long a2, long a1, long a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,662,"this((double) a2, (double) a1, (double) a0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,728,f (Math.abs(a2) > 1.0e-12) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,729, = new double[3];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,730,[2] = a2;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,731,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,672,if (a2 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,673,"a = new double[] { a0, a1, a2 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,733,f (Math.abs(a1) > 1.0e-12) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,734, = new double[2];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,735,[1] = a1;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,675,if (a1 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,676,"a = new double[] { a0, a1 };"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,737, = new double[1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,678,a = new double[] { a0 };
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,683,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,684,* Build a third degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,685,* @param a3 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,686,* @param a2 second degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,687,* @param a1 first degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,688,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,690,"public Double(long a3, long a2, long a1, long a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,691,"this((double) a3, (double) a2, (double) a1, (double) a0);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,694,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,695,* Build a third degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,696,* @param a3 leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,697,* @param a2 second degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,698,* @param a1 first degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,699,* @param a0 constant term
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,701,"public Double(double a3, double a2, double a1, double a0) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,702,if (a3 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,703,"a = new double[] { a0, a1, a2, a3 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,704,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,705,if (a2 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,706,"a = new double[] { a0, a1, a2 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,707,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,708,if (a1 != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,709,"a = new double[] { a0, a1 };"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,710,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,711,a = new double[] { a0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,740,[0] = a0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,741,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,755,hile ((i > 0) && (Math.abs(a[i]) <= 1.0e-12)) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,728,while ((i > 0) && (a[i] == 0)) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,763,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,774,f ((Math.abs(c) <= 1.0e-12) || degree < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,775, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,776,[0] = 0;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,744,if ((c == 0) || degree < 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,745,a = new double[] { 0.0 };
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,779,or (int i = 0; i < degree; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,780,[i] = 0;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,748,"Arrays.fill(a, 0, degree, 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,785,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,789,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,790, The copy is a deep copy: the polynomials do <em>not</em> share
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,791, their coefficients arrays
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,792, @param p polynomial to copy
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,794,ublic Double(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,796, = new double[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,797,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,798,[i] = p.a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,801,f (p.unknown == null) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,802,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,803, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,804,nknown = new String(p.unknown);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,809,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,810, The copy is a deep copy: the polynomials do <em>not</em> share
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,811, their coefficients arrays
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,812, @param p polynomial to copy
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,753,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,754,* Build a {@link Polynomial.Double Polynomial.Double} from a
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,755,* {@link Polynomial.Rational Polynomial.Rational}
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,756,* @param r a rational polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,814,ublic Double(Rational p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,816,ationalNumber[] pA = p.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,817, = new double[pA.length];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,758,public Double(Rational r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,759,// convert the coefficients
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,760,a = new double[r.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,819,[i] = pA[i].doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,822,f (p.unknown == null) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,823,nknown = null;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,824, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,825,nknown = new String(p.unknown);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,762,a[i] = r.a[i].doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,830,** Create a copy of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,831, @return a copy of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,833,ublic Object clone() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,834,eturn new Double(this);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,841,eturn (a.length == 1) && (Math.abs(a[0]) < 1.0e-12);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,770,return (a.length == 1) && (a[0] == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,848,eturn (a.length == 1) && (Math.abs(a[0] - 1) < 1.0e-12);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,777,return (a.length == 1) && ((a[0] - 1.0) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,855,eturn (a.length == 2)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,856,& (Math.abs(a[0]) < 1.0e-12)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,857,& (Math.abs(a[1] - 1) < 1.0e-12);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,784,return (a.length == 2) && (a[0] == 0) && ((a[1] - 1.0) == 0);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,868," @return a reference to the internal coefficients array, the array"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,795,"* @return a copy of the coefficients array, the array"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,870, index a.length-1 is the leeding degree coefficient
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,797,* index a.length-1 is the leading degree coefficient
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,873,eturn a;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,800,return (double[]) a.clone();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,876,"** Simplify the polynomial, by removing null high degree terms."
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,878,rivate void simplify() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,880,nt i = a.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,881,hile ((i > 0) && (Math.abs(a[i]) <= 1.0e-12)) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,882,-i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,885,f (i < a.length - 1) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,886,ouble[] newA = new double[i + 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,887,"ystem.arraycopy(a, 0, newA, 0, i + 1);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,888, = newA;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,893,** Add a polynomial to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,803,/** Add a polynomial to the instance
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,805,* @return a new polynomial which is the sum of the instance and p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,896,ublic void addToSelf(Double p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,807,public Double add(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,898,f (p.a.length > a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,899,ouble[] newA = new double[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,900,"ystem.arraycopy(a, 0, newA, 0, a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,901,or (int i = a.length; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,902,ewA[i] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,904, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,809,// identify the lowest degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,810,"int lowLength  = Math.min(a.length, p.a.length);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,811,"int highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,907,or (int i = 0; i < p.a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,908,[i] += p.a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,813,// build the coefficients array
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,814,double[] newA = new double[highLength];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,815,for (int i = 0; i < lowLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,816,newA[i] = a[i] + p.a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,818,"System.arraycopy((a.length < p.a.length) ? p.a : a,"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,819,"lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,911,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,821,return new Double(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,915,** Add two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,916, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,917, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,918, @return a new polynomial which is the sum of p1 and p2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,920,"ublic static Double add(Double p1, Double p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,921,ouble copy = new Double(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,922,opy.addToSelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,923,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,827,* @return a new polynomial which is the difference the instance minus p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,929,ublic void subtractFromSelf(Double p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,829,public Double subtract(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,931,f (p.a.length > a.length) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,932,ouble[] newA = new double[p.a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,933,"ystem.arraycopy(a, 0, newA, 0, a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,934,or (int i = a.length; i < newA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,935,ewA[i] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,937, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,831,// identify the lowest degree polynomial
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,832,"int lowLength  = Math.min(a.length, p.a.length);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,833,"int highLength = Math.max(a.length, p.a.length);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,940,or (int i = 0; i < p.a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,941,[i] -= p.a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,835,// build the coefficients array
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,836,double[] newA = new double[highLength];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,837,for (int i = 0; i < lowLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,838,newA[i] = a[i] - p.a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,840,if (a.length < p.a.length) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,841,for (int i = lowLength; i < highLength; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,842,newA[i] = -p.a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,844,} else {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,845,"System.arraycopy(a, lowLength, newA, lowLength, highLength - lowLength);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,944,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,848,return new Double(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,948,** Subtract two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,949, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,950, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,951, @return a new polynomial which is the difference p1 minus p2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,953,"ublic static Double subtract(Double p1, Double p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,954,ouble copy = new Double(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,955,opy.subtractFromSelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,956,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,853,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,961,ublic void negateSelf() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,855,public Polynomial negate() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,856,double[] newA = new double[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,963,[i] = -a[i];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,858,newA[i] = -a[i];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,967,** Negate a polynomial.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,968, @param p polynomial to negate
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,969, @return a new polynomial which is the opposite of p
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,971,ublic static Double negate(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,972,ouble copy = new Double(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,973,opy.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,974,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,860,return new Double(newA);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,865,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,980,ublic void multiplySelf(Double p) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,867,public Double multiply(Double p) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,985,ewA[i] = 0;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,872,newA[i] = 0.0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,993, = newA;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,880,return new Double(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,997,** Multiply two polynomials.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,998, @param p1 first polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,999, @param p2 second polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1000, @return a new polynomial which is the product of p1 and p2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1002,"ublic static Double multiply(Double p1, Double p2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1003,ouble copy = new Double(p1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1004,opy.multiplySelf(p2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1005,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1009, @param r constant to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1011,ublic void multiplySelf(double r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1013,f (Math.abs(r) < 1.0e-12) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1014, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1015,[0] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1018,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1019,[i] *= r;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1024,** Multiply a polynomial by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1025, @param p polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1026, @param r constant
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1027, @return a new polynomial which is the product of p and r
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,885,* @param l constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,886,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1029,"ublic static Double multiply(Double p, double r) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1030,ouble copy = new Double(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1031,opy.multiplySelf(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1032,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,888,public Polynomial multiply(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,889,return multiply((double) l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,894,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1038,ublic void multiplySelf(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1040,f (r.isZero()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1041, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1042,[0] = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1045,ouble rValue = r.doubleValue();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1046,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1047,[i] *= rValue;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,896,public Polynomial multiply(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,897,return multiply(r.doubleValue());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1053, @param l constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,901,* @param r constant to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,902,* @return a new polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1055,ublic void multiplySelf(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,904,public Polynomial multiply(double r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1057,f (l == 0l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1058, = new double[1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1059,[0] = 0;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,906,if (r == 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,907,return new Double(new double[] { 0.0 });
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,910,double[] newA = new double[a.length];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1063,[i] *= l;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,912,newA[i] = a[i] * r;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,914,return new Double(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1068,** Multiply a polynomial by a constant.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1069, @param p polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1070, @param l constant
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1071, @return a new polynomial which is the product of p and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1073,"ublic static Double multiply(Double p, long l) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1074,ouble copy = new Double(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1075,opy.multiplySelf(l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1076,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1097,ouble derivative = new Double();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1099,eturn derivative;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,937,return new Double();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1101,erivative.a = new double[a.length - 1];
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,939,double[] newA = new double[a.length - 1];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1103,erivative.a[i-1] = a[i] * i;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,941,newA[i - 1] = a[i] * i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1105,eturn derivative;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1108,** Set the name of the unknown (to appear during conversions to strings).
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1109," @param name name to set (if null, the default 'x' value  will be used)"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1111,ublic void setUnknownName(String name) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1112,nknown = name;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,943,return new Double(newA);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1127," <p>The name of the unknown is <code>x</code> by default, but can"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1128, be changed using the {@link #setUnknownName setUnknownName}
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1129, method.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1136,ouble maxCoeff = 0;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1137,or (int i = 0; i < a.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1138,ouble abs = Math.abs(a[i]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1139,f (abs > maxCoeff) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1140,axCoeff = abs;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1143,ouble epsilon = 1.0e-12 * maxCoeff;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1146,f (Math.abs(a[0]) <= epsilon) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,964,if (a[0] == 0.0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1151,.append(a[0]);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,969,s.append(java.lang.Double.toString(a[0]));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1156,f (Math.abs(a[i]) > epsilon) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,974,if (a[i] != 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1171,f (Math.abs(absAi - 1) > 1.0e-12) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1172,.append(absAi);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,989,if ((absAi - 1) != 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,990,s.append(java.lang.Double.toString(absAi));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1176,.append((unknown == null) ? defaultUnknown : unknown);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,994,"s.append(""x"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1192,** Name of the unknown. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1193,rotected String unknown;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1195,rivate static final long serialVersionUID = -5907669461605191069L;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1010,private static final long serialVersionUID = -4210522025715687648L;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1199,** Default name of unknowns. */
False,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,src/mantissa/src/org/spaceroots/mantissa/algebra/Polynomial.java,1200,"rotected static String defaultUnknown = new String(""x"");"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,20,import java.io.Serializable;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,26,* <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,31,ublic class PolynomialFraction {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,33,public class PolynomialFraction implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,38,"his(new Polynomial.Rational(new RationalNumber(0l)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,39,ew Polynomial.Rational(new RationalNumber(1l)));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,40,"this(new Polynomial.Rational(RationalNumber.ZERO),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,41,new Polynomial.Rational(RationalNumber.ONE));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,50,"his(new Polynomial.Rational(new RationalNumber(numerator)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,51,ew Polynomial.Rational(new RationalNumber(denominator)));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,52,"this(new Polynomial.Rational(numerator),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,53,new Polynomial.Rational(denominator));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,93, = new Polynomial.Rational(numerator);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,94, = new Polynomial.Rational(denominator);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,95,p = numerator;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,96,q = denominator;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,98,.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,99,.negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,100,p = (Polynomial.Rational) p.negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,101,q = (Polynomial.Rational) q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,107, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,108,/** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,125, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,125,/** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,134, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,135, Build a fraction from a single Polynom
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,133,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,134,* Build a fraction from a single Polynomial
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,139,"his(p, new Polynomial.Rational(new RationalNumber(1l)));"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,138,"this(p, new Polynomial.Rational(1l));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,143, Copy-constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,144, @param f fraction to copy
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,141,/** Negate the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,142,* @return a new polynomial fraction opposite to the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,146,ublic PolynomialFraction(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,147, = new Polynomial.Rational(f.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,148, = new Polynomial.Rational(f.q);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,144,public PolynomialFraction negate() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,145,"return new PolynomialFraction((Polynomial.Rational) p.negate(), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,152, Negate the instance
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,148,/** Add a polynomial fraction to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,149,* @param f polynomial fraction to add.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,150,* @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,154,ublic void negateSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,155,.negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,152,public PolynomialFraction add(PolynomialFraction f) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,153,"return new PolynomialFraction(p.multiply(f.q).add(f.p.multiply(q)),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,154,q.multiply(f.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,159, Negate a fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,160, @param f fraction to negate
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,161, @return a new fraction which is the opposite of f
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,157,/** Subtract a fraction from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,158,* @param f polynomial fraction to subtract.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,159,* @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,163,ublic static PolynomialFraction negate(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,164,olynomialFraction copy = new PolynomialFraction(f);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,165,opy.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,166,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,161,public PolynomialFraction subtract(PolynomialFraction f) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,162,"return new PolynomialFraction(p.multiply(f.q).subtract(f.p.multiply(q)),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,163,q.multiply(f.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,170, Add a fraction to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,171, @param f fraction to add.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,173,ublic void addToSelf(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,174,"olynomialFraction sum = add(this, f);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,175, = sum.p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,176, = sum.q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,179,** Add two fractions.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,180, @param f1 first fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,181, @param f2 second fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,182, @return a new fraction which is the sum of f1 and f2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,184,"ublic static PolynomialFraction add(PolynomialFraction f1,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,185,olynomialFraction f2) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,186,olynomial.Rational num =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,187,"olynomial.Rational.add(Polynomial.Rational.multiply(f1.p, f2.q),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,188,"olynomial.Rational.multiply(f2.p, f1.q));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,189,"olynomial.Rational den = Polynomial.Rational.multiply(f1.q, f2.q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,190,"eturn new PolynomialFraction(num, den);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,194, Subtract a fraction to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,195, @param f fraction to subtract.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,197,ublic void subtractFromSelf(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,198,"olynomialFraction diff = subtract(this, f);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,199, = diff.p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,200, = diff.q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,203,** Subtract two fractions.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,204, @param f1 first fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,205, @param f2 second fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,206, @return a new fraction which is the difference f1 minus f2
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,166,/** Multiply the instance by a polynomial fraction.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,167,* @param f polynomial fraction to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,168,* @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,208,"ublic static PolynomialFraction subtract(PolynomialFraction f1,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,209,olynomialFraction f2) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,210,olynomial.Rational num =
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,211,"olynomial.Rational.subtract(Polynomial.Rational.multiply(f1.p, f2.q),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,212,"olynomial.Rational.multiply(f2.p, f1.q));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,213,"olynomial.Rational den = Polynomial.Rational.multiply(f1.q, f2.q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,214,"eturn new PolynomialFraction(num, den);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,170,public PolynomialFraction multiply(PolynomialFraction f) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,171,PolynomialFraction product =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,172,"new PolynomialFraction(p.multiply(f.p), q.multiply(f.q));"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,173,product.simplify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,174,return product;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,217,** Multiply the instance by a fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,218, @param f fraction to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,220,ublic void multiplySelf(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,221,.multiplySelf(f.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,222,.multiplySelf(f.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,223,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,226,** Multiply two fractions.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,227, @param f1 first fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,228, @param f2 second fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,229, @return a new fraction which is the product of f1 and f2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,231,"ublic static PolynomialFraction multiply(PolynomialFraction f1,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,232,olynomialFraction f2) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,233,olynomialFraction copy = new PolynomialFraction(f1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,234,opy.multiplySelf(f2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,235,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,238,** Divide the instance by a fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,239, @param f fraction to divide by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,177,/** Divide the instance by a polynomial fraction.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,178,* @param f polynomial fraction to divide by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,179,* @return a new polynomial fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,242,ublic void divideSelf(PolynomialFraction f) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,182,public PolynomialFraction divide(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,248,.multiplySelf(f.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,249,.multiplySelf(f.p);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,188,Polynomial.Rational newP = p.multiply(f.q);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,189,Polynomial.Rational newQ = q.multiply(f.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,251,ationalNumber[] a = q.getCoefficients();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,191,RationalNumber[] a = newQ.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,253,.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,254,.negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,193,newP = (Polynomial.Rational) newP.negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,194,newQ = (Polynomial.Rational) newQ.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,257,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,197,"PolynomialFraction result = new PolynomialFraction(newP, newQ);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,198,result.simplify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,199,return result;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,261,** Divide two fractions.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,262, @param f1 first fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,263, @param f2 second fraction
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,264, @return a new fraction which is the quotient of f1 by f2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,266,"ublic static PolynomialFraction divide(PolynomialFraction f1,"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,267,olynomialFraction f2) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,268,olynomialFraction copy = new PolynomialFraction(f1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,269,opy.divideSelf(f2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,270,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,274, Replace the instance by its inverse.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,275, @exception ArithmeticException if the instance is null
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,204,* @return the inverse of the instance
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,205,* @exception ArithmeticException if the instance is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,277,ublic void invertSelf() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,207,public PolynomialFraction invert() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,283,olynomial.Rational tmp = p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,284, = q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,285, = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,287,ationalNumber[] a = q.getCoefficients();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,288,f (a[a.length - 1].isNegative()) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,289,.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,290,.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,293,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,213,RationalNumber[] a = p.getCoefficients();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,214,PolynomialFraction inverse =
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,215,(a[a.length - 1].isNegative())
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,216,"? new PolynomialFraction((Polynomial.Rational) q.negate(),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,217,(Polynomial.Rational) p.negate())
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,218,": new PolynomialFraction(q, p);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,219,inverse.simplify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,220,return inverse;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,297,** Invert a fraction.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,298, @param f fraction to invert
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,299, @return a new fraction which is the inverse of f
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,301,ublic static PolynomialFraction invert(PolynomialFraction f) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,302,olynomialFraction copy = new PolynomialFraction(f);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,303,opy.invertSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,304,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,321,olynomial.Rational a = new Polynomial.Rational(p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,322,olynomial.Rational b = new Polynomial.Rational(q);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,238,Polynomial.Rational a = p;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,239,Polynomial.Rational b = q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,345,ationalNumber f = q.getCoefficients()[0];
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,346,.invertSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,347,.multiplySelf(f);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,262,p = (Polynomial.Rational) p.divide(q.getCoefficients()[0]);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,354,.multiplySelf(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,355,.multiplySelf(lcm);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,269,p = (Polynomial.Rational) p.multiply(lcm);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,270,q = (Polynomial.Rational) q.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,360,.multiplySelf(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,361,.multiplySelf(lcm);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,275,p = (Polynomial.Rational) p.multiply(lcm);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,276,q = (Polynomial.Rational) q.multiply(lcm);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,367,.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,368,.negateSelf();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,282,p = (Polynomial.Rational) p.negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,283,q = (Polynomial.Rational) q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,389,** Set the name of the unknown (to appear during conversions to
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,390, strings).
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,391," @param name name to set (if null, the default 'x' value will be"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,392, used)
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,394,ublic void setUnknownName(String name) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,395,.setUnknownName(name);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,396,.setUnknownName(name);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,src/mantissa/src/org/spaceroots/mantissa/algebra/PolynomialFraction.java,344,private static final long serialVersionUID = 6033909492898954748L;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,20,import java.io.Serializable;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,25,* <p>Instances of this class are immutable.</p>
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,29,ublic class RationalNumber {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,32,public class RationalNumber implements Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,34,/** Zero as a rational numer. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,35,public static final RationalNumber ZERO = new RationalNumber(0l);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,37,/** One as a rational numer. */
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,38,public static final RationalNumber ONE  = new RationalNumber(1l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,41, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,49,/** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,48,"eset(numerator, denominator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,52, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,53, Build a rational number from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,54, @param numerator numerator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,55, @param denominator denominator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,56, @exception ArithmeticException if the denominator is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,58,"ublic RationalNumber(BigInteger numerator, BigInteger denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,59,"eset(numerator, denominator);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,63, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,64, Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,65, @param l value of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,67,ublic RationalNumber(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,68, = BigInteger.valueOf(l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,69, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,73, Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,74, Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,75, @param i value of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,77,ublic RationalNumber(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,78, = i;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,79, = BigInteger.ONE;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,83, Copy-constructor.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,84, @param r rational number to copy
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,86,ublic RationalNumber(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,87, = r.p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,88, = r.q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,91,** Reset the instance from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,92, @param numerator numerator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,93, @param denominator denominator of the rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,94, @exception ArithmeticException if the denominator is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,96,"ublic void reset(long numerator, long denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,113,** Reset the instance from a numerator and a denominator.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,73,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,74,* Build a rational number from a numerator and a denominator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,118,"ublic void reset(BigInteger numerator, BigInteger denominator) {"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,79,"public RationalNumber(BigInteger numerator, BigInteger denominator) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,135,** Reset the instance from a single integer
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,97,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,98,* Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,138,ublic void reset(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,101,public RationalNumber(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,143,** Reset the instance from a single integer
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,106,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,107,* Build a rational number from a single integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,146,ublic void reset(BigInteger i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,110,public RationalNumber(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,151,** Reset the instance from another rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,152, @param r rational number to copy
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,115,/** Negate the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,116,"* @return a new rational number, opposite to the isntance"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,154,ublic void reset(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,155, = r.p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,156, = r.q;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,118,public RationalNumber negate() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,119,"return new RationalNumber(p.negate(), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,160, Negate the instance
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,122,/** Add an integer to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,123,* @param l integer to add
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,124,* @return a new rational number which is the sum of the instance and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,162,ublic void negateSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,163, = p.negate();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,126,public RationalNumber add(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,127,return add(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,167, Negate a rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,168, @param r rational number to negate
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,169, @return a new rational number which is the opposite of r
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,130,/** Add an integer to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,131,* @param l integer to add
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,132,* @return a new rational number which is the sum of the instance and l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,171,ublic static RationalNumber negate(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,172,ationalNumber copy = new RationalNumber(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,173,opy.negateSelf();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,174,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,134,public RationalNumber add(BigInteger l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,135,"return new RationalNumber(p.add(q.multiply(l)), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,178, Add a rational number to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,179, @param r rational number to add.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,138,/** Add a rational number to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,139,* @param r rational number to add
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,140,* @return a new rational number which is the sum of the instance and r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,181,ublic void addToSelf(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,182, = p.multiply(r.q).add(r.p.multiply(q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,183, = q.multiply(r.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,184,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,142,public RationalNumber add(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,143,"return new RationalNumber(p.multiply(r.q).add(r.p.multiply(q)),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,144,q.multiply(r.q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,187,** Add two rational numbers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,188, @param r1 first rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,189, @param r2 second rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,190, @return a new rational number which is the sum of r1 and r2
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,147,/** Subtract an integer from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,148,* @param l integer to subtract
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,149,* @return a new rational number which is the difference the instance minus l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,192,"ublic static RationalNumber add(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,193,"eturn new RationalNumber(r1.p.multiply(r2.q).add(r2.p.multiply(r1.q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,194,1.q.multiply(r2.q));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,151,public RationalNumber subtract(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,152,return subtract(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,198, Subtract a rational number to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,199, @param r rational number to subtract.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,155,/** Subtract an integer from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,156,* @param l integer to subtract
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,157,* @return a new rational number which is the difference the instance minus l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,201,ublic void subtractFromSelf(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,202, = p.multiply(r.q).subtract(r.p.multiply(q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,203, = q.multiply(r.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,204,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,159,public RationalNumber subtract(BigInteger l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,160,"return new RationalNumber(p.subtract(q.multiply(l)), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,207,** Subtract two rational numbers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,208, @param r1 first rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,209, @param r2 second rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,210, @return a new rational number which is the difference r1 minus r2
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,163,/** Subtract a rational number from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,164,* @param r rational number to subtract
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,165,* @return a new rational number which is the difference the instance minus r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,212,"ublic static RationalNumber subtract(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,213,"eturn new RationalNumber(r1.p.multiply(r2.q).subtract(r2.p.multiply(r1.q)),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,214,1.q.multiply(r2.q));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,167,public RationalNumber subtract(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,168,"return new RationalNumber(p.multiply(r.q).subtract(r.p.multiply(q)),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,169,q.multiply(r.q));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,174,* @return a new rational number which is the produc of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,220,ublic void multiplySelf(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,221, = p.multiply(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,222,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,176,public RationalNumber multiply(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,177,return multiply(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,226, @param i integer to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,228,ublic void multiplySelf(BigInteger i) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,229, = p.multiply(i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,230,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,233,** Multiply a rational number by an integer.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,182,* @return a new rational number which is the produc of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,236,"ublic static RationalNumber multiply(RationalNumber r, long l) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,237,"eturn new RationalNumber(r.p.multiply(BigInteger.valueOf(l)), r.q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,240,** Multiply a rational number by an integer.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,241, @param i integer to multiply by
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,243,"ublic static RationalNumber multiply(RationalNumber r, BigInteger i) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,244,"eturn new RationalNumber(r.p.multiply(i), r.q);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,184,public RationalNumber multiply(BigInteger l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,185,"return new RationalNumber(p.multiply(l), q);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,248, @param r rational number to multiply by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,189,* @param r rational number to multiply the instance with
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,190,* @return a new rational number which is the product of the instance and r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,250,ublic void multiplySelf(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,251, = p.multiply(r.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,252, = q.multiply(r.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,253,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,256,** Multiply two rational numbers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,257, @param r1 first rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,258, @param r2 second rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,259, @return a new rational number which is the product of r1 and r2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,261,"ublic static RationalNumber multiply(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,262,"eturn new RationalNumber(r1.p.multiply(r2.p),"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,263,1.q.multiply(r2.q));
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,192,public RationalNumber multiply(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,193,"return new RationalNumber(p.multiply(r.p), q.multiply(r.q));"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,198,* @return a new rational number which is the quotient of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,270,ublic void divideSelf(long l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,272,f (l == 0l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,273,"hrow new ArithmeticException(""divide by zero"");"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,274, else if (l > 0l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,275, = q.multiply(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,276, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,277, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,278, = q.multiply(BigInteger.valueOf(-l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,281,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,201,public RationalNumber divide(long l) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,202,return divide(BigInteger.valueOf(l));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,286, @param i integer to divide by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,206,* @param l integer to divide by
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,207,* @return a new rational number which is the quotient of the instance by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,289,ublic void divideSelf(BigInteger i) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,210,public RationalNumber divide(BigInteger l) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,291,f (i.signum() == 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,212,if (l.signum() == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,293, else if (i.signum() > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,294, = q.multiply(i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,295, else {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,296, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,297, = q.multiply(i.negate());
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,300,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,216,if (l.signum() > 0) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,217,"return new RationalNumber(p, q.multiply(l));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,304,** Divide a rational number by an integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,305, @param r rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,306, @param l integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,307, @return a new rational number which is the quotient of r by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,308, @exception ArithmeticException if l is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,310,"ublic static RationalNumber divide(RationalNumber r, long l) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,311,ationalNumber copy = new RationalNumber(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,312,opy.divideSelf(l);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,313,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,220,"return new RationalNumber(p.negate(), q.multiply(l.negate()));"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,316,** Divide a rational number by an integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,317, @param r rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,318, @param i integer
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,319, @return a new rational number which is the quotient of r by l
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,320, @exception ArithmeticException if l is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,322,"ublic static RationalNumber divide(RationalNumber r, BigInteger i) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,323,ationalNumber copy = new RationalNumber(r);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,324,opy.divideSelf(i);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,325,eturn copy;
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,226,* @return a new rational number which is the quotient of the instance by r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,332,ublic void divideSelf(RationalNumber r) {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,229,public RationalNumber divide(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,338, = p.multiply(r.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,339, = q.multiply(r.p);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,341,f (q.signum() < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,342, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,343, = q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,346,implify();
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,235,BigInteger newP = p.multiply(r.q);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,236,BigInteger newQ = q.multiply(r.p);
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,238,"return (newQ.signum() < 0) ? new RationalNumber(newP.negate(),"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,239,newQ.negate())
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,240,": new RationalNumber(newP, newQ);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,350,** Divide two rational numbers.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,351, @param r1 first rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,352, @param r2 second rational number
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,353, @return a new rational number which is the quotient of r1 by r2
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,354, @exception ArithmeticException if r2 is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,356,"ublic static RationalNumber divide(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,357,ationalNumber copy = new RationalNumber(r1);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,358,opy.divideSelf(r2);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,359,eturn copy;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,363, Replace the instance by its inverse.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,245,* @return the inverse of the instance
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,366,ublic void invertSelf() {
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,248,public RationalNumber invert() {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,372,igInteger tmp = p;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,373, = q;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,374, = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,376,f (q.signum() < 0) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,377, = p.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,378, = q.negate();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,383,** Invert a rational number.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,384, @param r rational number to invert
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,385, @return a new rational number which is the inverse of r
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,386, @exception ArithmeticException if r is zero
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,388,ublic static RationalNumber invert(RationalNumber r) {
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,389,"eturn new RationalNumber(r.q, r.p);"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,254,"return (q.signum() < 0) ? new RationalNumber(q.negate(), p.negate())"
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,255,": new RationalNumber(q, p);"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,393, Add the product of two rational numbers to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,394, This operation is equivalent to
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,395," <code>addToSelf(RationalNumber.multiply(r1, r2))</code> except"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,396, that no intermediate simplification is attempted.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,397, @param r1 first term of the product to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,398, @param r2 second term of the product to add
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,400,"ublic void multiplyAndAddToSelf(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,401,igInteger r1qr2q = r1.q.multiply(r2.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,402, = p.multiply(r1qr2q).add(r1.p.multiply(r2.p).multiply(q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,403, = q.multiply(r1qr2q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,404,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,408, Subtract the product of two rational numbers from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,409, This operation is equivalent to
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,410," <code>subtractFromSelf(RationalNumber.multiply(r1, r2))</code>"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,411, except that no intermediate simplification is attempted.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,412, @param r1 first term of the product to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,413, @param r2 second term of the product to subtract
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,415,"ublic void multiplyAndSubtractFromSelf(RationalNumber r1, RationalNumber r2) {"
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,416,igInteger r1qr2q = r1.q.multiply(r2.q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,417, = p.multiply(r1qr2q).subtract(r1.p.multiply(r2.p).multiply(q));
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,418, = q.multiply(r1qr2q);
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,419,implify();
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,435, Get the numerator.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,271,/** Get the numerator.
False,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,443, Get the denominator.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,278,/** Get the denominator.
True,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,src/mantissa/src/org/spaceroots/mantissa/algebra/RationalNumber.java,371,private static final long serialVersionUID = -324954393137577531L;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,23,mport java.util.Iterator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,44, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,42,/** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,46, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,47, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,48, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,49," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,50, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,51," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,52, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,53, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,54, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,55, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,56, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,57, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,58," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,44,* @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,60,"rotected AbstractCurveFitter(int n,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,61,"nt maxIterations,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,62,"ouble convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,63,"ouble steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,64,ouble epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,66,oefficients              = new EstimatedParameter[n];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,67,easurements              = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,68,easurementsArray         = null;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,69,his.maxIterations        = maxIterations;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,70,his.steadyStateThreshold = steadyStateThreshold;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,71,his.convergence          = convergence;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,72,his.epsilon              = epsilon;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,46,"protected AbstractCurveFitter(int n, Estimator estimator) {"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,48,coefficients   = new EstimatedParameter[n];
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,49,measurements   = new ArrayList();
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,50,this.estimator = estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,77, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,53,/** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,82, @param maxIterations maximum number of iterations allowed
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,83, @param convergence criterion threshold below which we do not need
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,84, to improve the criterion anymore
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,85," @param steadyStateThreshold steady state detection threshold, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,86, problem has reached a steady state (read converged) if
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,87," <code>Math.abs (Jn - Jn-1) < Jn * convergence</code>, where"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,88, <code>Jn</code> and <code>Jn-1</code> are the current and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,89, preceding criterion value (square sum of the weighted residuals
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,90, of considered measurements).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,91, @param epsilon threshold under which the matrix of the linearized
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,92, problem is considered singular (see {@link
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,93, org.spaceroots.mantissa.linalg.SquareMatrix#solve(
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,94," org.spaceroots.mantissa.linalg.Matrix,double) SquareMatrix.solve})."
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,58,* @param estimator estimator to use for the fitting
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,97,"nt maxIterations,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,98,"ouble convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,99,"ouble steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,100,ouble epsilon) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,102,his.coefficients         = coefficients;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,103,easurements              = new ArrayList();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,104,easurementsArray         = null;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,105,his.maxIterations        = maxIterations;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,106,his.steadyStateThreshold = steadyStateThreshold;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,107,his.convergence          = convergence;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,108,his.epsilon              = epsilon;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,61,Estimator estimator) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,63,this.coefficients = coefficients;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,64,measurements      = new ArrayList();
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,65,this.estimator     = estimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,117,easurementsArray = null;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,134,/ perform the fit using a linear least square estimator
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,135,"ew GaussNewtonEstimator(maxIterations, convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,136,"teadyStateThreshold, epsilon).estimate(this);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,90,// perform the fit
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,91,estimator.estimate(this);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,149,f (measurementsArray == null) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,150,easurementsArray = new FitMeasurement[measurements.size()];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,151,nt i = 0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,152,or (Iterator iterator = measurements.iterator(); iterator.hasNext(); ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,153,easurementsArray[i] = (FitMeasurement) iterator.next();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,156,eturn measurementsArray;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,104,return (WeightedMeasurement[]) measurements.toArray(new FitMeasurement[measurements.size()]);
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,164,eturn coefficients;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,112,return (EstimatedParameter[]) coefficients.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,171,eturn coefficients;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,119,return (EstimatedParameter[]) coefficients.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,208,/ make sure subsequent calls to getMeasurements
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,209,/ will not use the unsorted array
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,210,easurementsArray = null;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,275,** Measurements array.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,276," This array contains the same entries as measurements_, but in a"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,277, different structure.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,279,rivate FitMeasurement[] measurementsArray;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,281,rivate int    maxIterations;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,282,rivate double convergence;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,283,rivate double steadyStateThreshold;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,284,rivate double epsilon;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,219,/** Estimator for the fitting problem. */
True,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/AbstractCurveFitter.java,220,private Estimator estimator;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,61,double[] y = point.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,62,/ hack the values (to avoid building a new object)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,63,ouble[] y = point.getY();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,64,[0] *= y[0];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,65,[1] *= y[1];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,66,eturn point;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,63,// square the values
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,64,"return new VectorialValuedPair(point.x,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,65,new double[] {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,src/mantissa/src/org/spaceroots/mantissa/fitting/F2FP2Iterator.java,66,"y[0] * y[0], y[1] * y[1]"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,35," <p>We know f (t) at some sampling points ti and want to find a,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,36, omega and phi such that f (t) = a cos (omega t + phi).
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,35,"* <p>We know f (t) at some sampling points t<sub>i</sub> and want to find a,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,36,* &omega; and &phi; such that f (t) = a cos (&omega; t + &phi;).
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,41,     If2  (t) = int (f^2)  = a^2 * [t + S (t)] / 2
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,42,     If'2 (t) = int (f'^2) = a^2 * omega^2 * [t - S (t)] / 2
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,43,     where S (t) = sin (2 * (omega * t + phi)) / (2 * omega)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,41,*     If2  (t) = &int; f<sup>2</sup>  = a<sup>2</sup> &times; [t + S (t)] / 2
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,42,*     If'2 (t) = &int; f'<sup>2</sup> = a<sup>2</sup> &omega;<sup>2</sup> &times; [t - S (t)] / 2
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,43,*     where S (t) = sin (2 (&omega; t + &phi;)) / (2 &omega;)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,49,     If'2 (t) = a^2 * omega ^ 2 * t - omega ^ 2 * If2 (t)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,49,*     If'2 (t) = a<sup>2</sup> &omega;<sup>2</sup> t - &omega;<sup>2</sup> If2 (t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,54, combination of both t and If2 (t): If'2 (t) = A * t + B * If2 (t)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,54,* combination of both t and If2 (t): If'2 (t) = A &times; t + B &times; If2 (t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,58, integrals between t1 and ti for each ti :
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,58,* integrals between t<sub>1</sub> and t<sub>i</sub> for each t<sub>i</sub> :
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,60,   If2 (ti) - If2 (t1) = A * (ti - t1) + B * (If2 (ti) - If2 (t1))
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,60,*   If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>) = A &times; (t<sub>i</sub> - t<sub>1</sub>) + B &times; (If2 (t<sub>i</sub>) - If2 (t<sub>1</sub>))
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,69," <p>For a bilinear expression z (xi, yi) = A * xi + B * yi, the"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,70, coefficients a and b that minimize a least square criterion
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,71," Sum ((zi - z (xi, yi))^2) are given by these expressions:</p>"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,69,"* <p>For a bilinear expression z (x<sub>i</sub>, y<sub>i</sub>) = A &times; x<sub>i</sub> + B &times; y<sub>i</sub>, the"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,70,* coefficients A and B that minimize a least square criterion
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,71,"* &sum; (z<sub>i</sub> - z (x<sub>i</sub>, y<sub>i</sub>))<sup>2</sup> are given by these expressions:</p>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,74,         Sum (yi^2) Sum (xi zi) - Sum (xi yi) Sum (yi zi)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,75,     A = ------------------------------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,76,         Sum (xi^2) Sum (yi^2)  - Sum (xi yi) Sum (xi yi)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,74,*         &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,75,*     A = ------------------------
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,76,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,78,         Sum (xi^2) Sum (yi zi) - Sum (xi yi) Sum (xi zi)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,79,     B = ------------------------------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,80,         Sum (xi^2) Sum (yi^2)  - Sum (xi yi) Sum (xi yi)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,78,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,79,*     B = ------------------------
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,80,*         &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,85," <p>In fact, we can assume both a and omega are positive and"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,86," compute them directly, knowing that A = a^2 * omega^2 and that"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,87, B = - omega^2. The complete algorithm is therefore:</p>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,85,"* <p>In fact, we can assume both a and &omega; are positive and"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,86,"* compute them directly, knowing that A = a<sup>2</sup> &omega;<sup>2</sup> and that"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,87,* B = - &omega;<sup>2</sup>. The complete algorithm is therefore:</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,90," for each ti from t1 to t(n-1), compute:"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,91,   f  (ti)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,92,   f' (ti) = (f (t(i+1)) - f(t(i-1))) / (t(i+1) - t(i-1))
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,93,   xi = ti - t1
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,94,   yi = int (f^2) from t1 to ti
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,95,   zi = int (f'^2) from t1 to ti
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,96,"   update the sums Sum (xi^2), Sum (yi^2),"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,97,"                   Sum (xi yi), Sum (xi zi)"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,98,                   and Sum (yi zi)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,90,"* for each t<sub>i</sub> from t<sub>1</sub> to t<sub>n-1</sub>, compute:"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,91,*   f  (t<sub>i</sub>)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,92,*   f' (t<sub>i</sub>) = (f (t<sub>i+1</sub>) - f(t<sub>i-1</sub>)) / (t<sub>i+1</sub> - t<sub>i-1</sub>)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,93,*   x<sub>i</sub> = t<sub>i</sub> - t<sub>1</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,94,*   y<sub>i</sub> = &int; f<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,95,*   z<sub>i</sub> = &int; f'<sup>2</sup> from t<sub>1</sub> to t<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,96,"*   update the sums &sum;x<sub>i</sub>x<sub>i</sub>, &sum;y<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>y<sub>i</sub>, &sum;x<sub>i</sub>z<sub>i</sub> and &sum;y<sub>i</sub>z<sub>i</sub>"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,102,         \  | Sum (yi^2) Sum (xi zi) - Sum (xi yi) Sum (yi zi)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,103, a     =  \ | ------------------------------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,104,           \| Sum (xi yi) Sum (xi zi) - Sum (xi^2) Sum (yi zi)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,100,*         \  | &sum;y<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,101,* a     =  \ | ------------------------
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,102,*           \| &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,108,         \  | Sum (xi yi) Sum (xi zi) - Sum (xi^2) Sum (yi zi)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,109, omega =  \ | ------------------------------------------------
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,110,           \| Sum (xi^2) Sum (yi^2)  - Sum (xi yi) Sum (xi yi)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,106,*         \  | &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>z<sub>i</sub> - &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>z<sub>i</sub>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,107,* &omega;     =  \ | ------------------------
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,108,*           \| &sum;x<sub>i</sub>x<sub>i</sub> &sum;y<sub>i</sub>y<sub>i</sub> - &sum;x<sub>i</sub>y<sub>i</sub> &sum;x<sub>i</sub>y<sub>i</sub>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,115," <p>Once we know omega, we can compute:"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,113,"* <p>Once we know &omega;, we can compute:"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,117,    fc = omega * f (t) * cos (omega * t) - f' (t) * sin (omega * t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,118,    fs = omega * f (t) * sin (omega * t) + f' (t) * cos (omega * t)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,115,*    fc = &omega; f (t) cos (&omega; t) - f' (t) sin (&omega; t)
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,116,*    fs = &omega; f (t) sin (&omega; t) + f' (t) cos (&omega; t)
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,122, <p>It appears that <code>fc = a * omega * cos (phi)</code> and
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,123," <code>fs = -a * omega * sin (phi)</code>, so we can use these"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,124, expressions to compute phi. The best estimate over the sample is
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,120,* <p>It appears that <code>fc = a &omega; cos (&phi;)</code> and
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,121,"* <code>fs = -a &omega; sin (&phi;)</code>, so we can use these"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,122,* expressions to compute &phi;. The best estimate over the sample is
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,141,his.measurements = measurements;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,139,this.measurements =
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,140,(AbstractCurveFitter.FitMeasurement[]) measurements.clone();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,162,** Estimate a first guess of the a and omega coefficients.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,161,/** Estimate a first guess of the a and &omega; coefficients.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,188,ouble   p0X = p0.getX();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,189,ouble[] p0Y = p0.getY();
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,187,double   p0X = p0.x;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,188,double[] p0Y = p0.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,195,ouble   pX = point.getX();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,196,ouble[] pY = point.getY();
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,194,double   pX = point.x;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,195,double[] pY = point.y;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,198,ouble dx  = pX    - p0X;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,199,ouble dy0 = pY[0] - p0Y[0];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,200,ouble dy1 = pY[1] - p0Y[1];
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,197,double x = pX    - p0X;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,198,double y = pY[0] - p0Y[0];
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,199,double z = pY[1] - p0Y[1];
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,202,x2 += dx  * dx;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,203,y2 += dy0 * dy0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,204,xy += dx  * dy0;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,205,xz += dx  * dy1;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,206,yz += dy0 * dy1;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,201,sx2 += x * x;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,202,sy2 += y * y;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,203,sxy += x * y;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,204,sxz += x * z;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,205,syz += y * z;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,222,** Estimate a first guess of the phi coefficient.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,221,/** Estimate a first guess of the &phi; coefficient.
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,240,ouble   omegaX = omega * point.getX();
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,241,ouble[] pY     = point.getY();
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,239,double   omegaX = omega * point.x;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,244,cMean += omega * pY[0] * cosine - pY[1] *   sine;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,245,sMean += omega * pY[0] *   sine + pY[1] * cosine;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,242,fcMean += omega * point.y[0] * cosine - point.y[1] *   sine;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicCoefficientsGuesser.java,243,fsMean += omega * point.y[0] *   sine + point.y[1] * cosine;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,22,mport org.spaceroots.mantissa.estimation.*;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,20,import org.spaceroots.mantissa.estimation.EstimatedParameter;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,21,import org.spaceroots.mantissa.estimation.EstimationException;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,22,import org.spaceroots.mantissa.estimation.Estimator;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,23,import org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,43,xtends AbstractCurveFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,44,"mplements EstimationProblem, Serializable {"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,44,extends AbstractCurveFitter {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,46,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,47,* @param estimator estimator to use for the fitting
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,49,public HarmonicFitter(Estimator estimator) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,50,"super(3, estimator);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,51,"coefficients[0]  = new EstimatedParameter(""a"", 2.0 * Math.PI);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,52,"coefficients[1]  = new EstimatedParameter(""omega"", 0.0);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,53,"coefficients[2]  = new EstimatedParameter(""phi"", 0.0);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,54,firstGuessNeeded = true;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,58,* Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,60,* <p>This constructor can be used when a first estimate of the
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,61,* coefficients is already known.</p>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,63,* @param coefficients first estimate of the coefficients.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,64,* A reference to this array is hold by the newly created
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,65,* object. Its elements will be adjusted during the fitting process
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,66,* and they will be set to the adjusted coefficients at the end.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,67,* @param estimator estimator to use for the fitting
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,70,"public HarmonicFitter(EstimatedParameter[] coefficients,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,71,Estimator estimator) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,72,"super(coefficients, estimator);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,73,firstGuessNeeded = false;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,91,* @deprecated replaced by {@link #HarmonicFitter(Estimator)}
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,92,* as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,64,"uper(3, maxIterations, convergence, steadyStateThreshold, epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,65,"oefficients[0]  = new EstimatedParameter(""a"", 2.0 * Math.PI);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,66,"oefficients[1]  = new EstimatedParameter(""omega"", 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,67,"oefficients[2]  = new EstimatedParameter(""phi"", 0.0);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,68,irstGuessNeeded = true;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,96,"this(new GaussNewtonEstimator(maxIterations, convergence,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,97,"steadyStateThreshold, epsilon));"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,124,"* @deprecated replaced by {@link #HarmonicFitter(EstimatedParameter[],"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,125,* Estimator)} as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,99,"uper(coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,100,"axIterations, convergence,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,101,"teadyStateThreshold, epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,102,irstGuessNeeded = false;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,130,"this(coefficients,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,131,"new GaussNewtonEstimator(maxIterations, convergence,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/HarmonicFitter.java,132,"steadyStateThreshold, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,22,mport org.spaceroots.mantissa.estimation.*;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,20,import org.spaceroots.mantissa.estimation.EstimatedParameter;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,21,import org.spaceroots.mantissa.estimation.Estimator;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,22,import org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,41,xtends AbstractCurveFitter
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,42,"mplements EstimationProblem, Serializable {"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,41,extends AbstractCurveFitter {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,43,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,45,"* <p>The polynomial fitter built this way are complete polynoms,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,46,* ie. a n-degree polynom has n+1 coefficients. In order to build
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,47,* fitter for sparse polynoms (for example <code>a x^20 - b
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,48,"* x^30</code>, on should first build the coefficients array and"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,49,* provide it to {@link
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,50,"* #PolynomialFitter(PolynomialCoefficient[], int, double, double,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,51,* double)}.</p>
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,52,* @param degree maximal degree of the polynom
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,53,* @param estimator estimator to use for the fitting
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,55,"public PolynomialFitter(int degree, Estimator estimator) {"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,56,"super(degree + 1, estimator);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,57,for (int i = 0; i < coefficients.length; ++i) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,58,coefficients[i] = new PolynomialCoefficient(i);
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,62,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,64,* <p>This constructor can be used either when a first estimate of
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,65,* the coefficients is already known (which is of little interest
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,66,* because the fit cost is the same whether a first guess is known or
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,67,* not) or when one needs to handle sparse polynoms like <code>a
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,68,* x^20 - b x^30</code>.</p>
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,45, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,70,* @param coefficients first estimate of the coefficients.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,71,* A reference to this array is hold by the newly created
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,72,* object. Its elements will be adjusted during the fitting process
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,73,* and they will be set to the adjusted coefficients at the end.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,74,* @param estimator estimator to use for the fitting
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,76,"public PolynomialFitter(PolynomialCoefficient[] coefficients,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,77,Estimator estimator) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,78,"super(coefficients, estimator);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,81,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,105,"* @deprecated replaced by {@link #PolynomialFitter(int,Estimator)}"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,106,* as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,74,"uper(degree + 1,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,75,"axIterations, steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,76,"onvergence, epsilon);"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,78,or (int i = 0; i < coefficients.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,79,oefficients[i] = new PolynomialCoefficient(i);
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,111,"this(degree,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,112,"new GaussNewtonEstimator(maxIterations, steadyStateThreshold,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,113,"convergence, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,85, Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,116,/** Simple constructor.
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,142,"* @deprecated replaced by {@link #PolynomialFitter(PolynomialCoefficient[],"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,143,* Estimator)} as of version 7.0
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,115,"uper(coefficients,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,116,"axIterations, steadyStateThreshold,"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,117,"onvergence, epsilon);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,148,"this(coefficients,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,149,"new GaussNewtonEstimator(maxIterations, steadyStateThreshold,"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,150,"convergence, epsilon));"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,138,"eturn Math.pow(x, ((PolynomialCoefficient) p).degree);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,171,if (p instanceof PolynomialCoefficient) {
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,172,"return Math.pow(x, ((PolynomialCoefficient) p).degree);"
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,174,"throw new RuntimeException(""internal error"");"
False,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,141,rivate static final long serialVersionUID = -226724596015163603L;
True,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,src/mantissa/src/org/spaceroots/mantissa/fitting/PolynomialFitter.java,177,private static final long serialVersionUID = -744904084649890769L;
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,45,ublic interface ComputableFunction {
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/ComputableFunction.java,47,public interface ComputableFunction extends Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,48,ublic interface SampledFunction {
True,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/scalar/SampledFunction.java,50,public interface SampledFunction extends Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,45,ublic interface ComputableFunction {
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/ComputableFunction.java,47,public interface ComputableFunction extends Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,48,ublic interface SampledFunction {
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/SampledFunction.java,50,public interface SampledFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,25, value is a vector. This class is used has a simple placeholder to
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,25,* value is a vector. This class is used has a simple immutable placeholder to
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,47,his.y = y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,51, Copy-constructor.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,52, @param p point to copy
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,54,ublic VectorialValuedPair(VectorialValuedPair p) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,55, = p.x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,56, = p.y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,60, Getter for the abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,61, @return value of the abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,63,ublic double getX() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,64,eturn x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,68, Getter for the ordinate.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,69, @return value of the ordinate
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,71,ublic double[] getY() {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,72,eturn y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,76, Setter for the abscissa.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,77, @param x new value for the abscissa
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,79,ublic void setX(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,80,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,84, Setter for the ordinate.
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,85, @param y new value for the ordinate
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,87,ublic void setY(double[] y) {
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,88,his.y = y;
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,47,this.y = (double[]) y.clone();
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,92,rivate double x;
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,51,public final double x;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,95,rivate double[] y;
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,54,public final double[] y;
False,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,97,rivate static final long serialVersionUID = -1336411215846160578L;
True,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,src/mantissa/src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPair.java,56,private static final long serialVersionUID = -7397116933564410103L;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,35, <p>This implies that this class can be used to transform one
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,36," representation into another one. For example, converting a rotation"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,35,* <p>This implies that this class can be used to convert from one
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,36,"* representation to another one. For example, converting a rotation"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,466, are often tagged as Euler angles).</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,466,* are often wrongly tagged as Euler angles).</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,475,"his(computeRotation(order, alpha1, alpha2, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,478,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,479, <p>This constructor is used only for the sake of Cardan/Euler
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,480, angles handling.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,481, @param r rotation to copy
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,483,rivate Rotation(Rotation r) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,484,0 = r.q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,485,1 = r.q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,486,2 = r.q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,487,3 = r.q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,490,** Build a rotation from three Cardan or Euler elementary rotations.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,491, @param order order of rotations to use
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,492, @param alpha1 angle of the first elementary rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,493, @param alpha2 angle of the second elementary rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,494, @param alpha3 angle of the third elementary rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,496,"ublic static Rotation computeRotation(RotationOrder order,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,497,"ouble alpha1,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,498,"ouble alpha2,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,499,ouble alpha3) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,500,f (order == RotationOrder.XYZ) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,501,"eturn compose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,502,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,503,"ew Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,504, else if (order == RotationOrder.XZY) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,505,"eturn compose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,506,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,507,"ew Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,508, else if (order == RotationOrder.YXZ) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,509,"eturn compose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,510,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,511,"ew Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,512, else if (order == RotationOrder.YZX) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,513,"eturn compose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,514,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,515,"ew Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,516, else if (order == RotationOrder.ZXY) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,517,"eturn compose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,518,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,519,"ew Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,520, else if (order == RotationOrder.ZYX) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,521,"eturn compose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,522,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,523,"ew Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,524, else if (order == RotationOrder.XYX) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,525,"eturn compose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,526,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,527,"ew Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,528, else if (order == RotationOrder.XZX) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,529,"eturn compose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,530,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,531,"ew Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,532, else if (order == RotationOrder.YXY) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,533,"eturn compose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,534,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,535,"ew Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,536, else if (order == RotationOrder.YZY) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,537,"eturn compose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,538,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,539,"ew Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,540, else if (order == RotationOrder.ZXZ) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,541,"eturn compose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,542,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,543,"ew Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,544, else { // last possibility is ZYZ
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,545,"eturn compose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,546,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,547,"ew Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,551,** Override the instance by the composition of three rotations.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,552, @param r3 last (outermost) rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,553, @param r2 intermediate rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,554, @param r1 first (innermost) rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,556,"rivate static Rotation compose(Rotation r3, Rotation r2, Rotation r1) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,557,eturn r3.applyTo(r2.applyTo(r1));
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,475,"Rotation r1 = new Rotation(order.getA1(), alpha1);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,476,"Rotation r2 = new Rotation(order.getA2(), alpha2);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,477,"Rotation r3 = new Rotation(order.getA3(), alpha3);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,478,Rotation composed = r1.applyTo(r2.applyTo(r3));
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,479,q0 = composed.q0;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,480,q1 = composed.q1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,481,q2 = composed.q2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,482,q3 = composed.q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,562," rotation. This means that is r(u) = v, then r.revert (v) = u. The"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,487,"* rotation. This means that if r(u) = v, then r.revert(v) = u. The"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1090,rivate static final long serialVersionUID = 7264384082212242475L;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1015,private static final long serialVersionUID = 5127795878493115119L;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,39,* @param a1 axis of the first rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,40,* @param a2 axis of the second rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,41,* @param a3 axis of the third rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,40,rivate RotationOrder(String name) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,43,"private RotationOrder(String name,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,44,"Vector3D a1, Vector3D a2, Vector3D a3) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,46,this.a1   = a1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,47,this.a2   = a2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,48,this.a3   = a3;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,58,/** Get the axis of the first rotation.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,59,* @return axis of the first rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,61,public Vector3D getA1() {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,62,return a1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,65,/** Get the axis of the second rotation.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,66,* @return axis of the second rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,68,public Vector3D getA2() {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,69,return a2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,72,/** Get the axis of the second rotation.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,73,* @return axis of the second rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,75,public Vector3D getA3() {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,76,return a3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,55,"ublic static final RotationOrder XYZ = new RotationOrder(""XYZ"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,83,public static final RotationOrder XYZ =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,84,"new RotationOrder(""XYZ"", Vector3D.plusI, Vector3D.plusJ, Vector3D.plusK);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,61,"ublic static final RotationOrder XZY = new RotationOrder(""XZY"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,90,public static final RotationOrder XZY =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,91,"new RotationOrder(""XZY"", Vector3D.plusI, Vector3D.plusK, Vector3D.plusJ);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,67,"ublic static final RotationOrder YXZ = new RotationOrder(""YXZ"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,97,public static final RotationOrder YXZ =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,98,"new RotationOrder(""YXZ"", Vector3D.plusJ, Vector3D.plusI, Vector3D.plusK);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,73,"ublic static final RotationOrder YZX = new RotationOrder(""YZX"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,104,public static final RotationOrder YZX =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,105,"new RotationOrder(""YZX"", Vector3D.plusJ, Vector3D.plusK, Vector3D.plusI);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,79,"ublic static final RotationOrder ZXY = new RotationOrder(""ZXY"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,111,public static final RotationOrder ZXY =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,112,"new RotationOrder(""ZXY"", Vector3D.plusK, Vector3D.plusI, Vector3D.plusJ);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,85,"ublic static final RotationOrder ZYX = new RotationOrder(""ZYX"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,118,public static final RotationOrder ZYX =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,119,"new RotationOrder(""ZYX"", Vector3D.plusK, Vector3D.plusJ, Vector3D.plusI);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,91,"ublic static final RotationOrder XYX = new RotationOrder(""XYX"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,125,public static final RotationOrder XYX =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,126,"new RotationOrder(""XYX"", Vector3D.plusI, Vector3D.plusJ, Vector3D.plusI);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,97,"ublic static final RotationOrder XZX = new RotationOrder(""XZX"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,132,public static final RotationOrder XZX =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,133,"new RotationOrder(""XZX"", Vector3D.plusI, Vector3D.plusK, Vector3D.plusI);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,103,"ublic static final RotationOrder YXY = new RotationOrder(""YXY"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,139,public static final RotationOrder YXY =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,140,"new RotationOrder(""YXY"", Vector3D.plusJ, Vector3D.plusI, Vector3D.plusJ);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,109,"ublic static final RotationOrder YZY = new RotationOrder(""YZY"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,146,public static final RotationOrder YZY =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,147,"new RotationOrder(""YZY"", Vector3D.plusJ, Vector3D.plusK, Vector3D.plusJ);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,115,"ublic static final RotationOrder ZXZ = new RotationOrder(""ZXZ"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,153,public static final RotationOrder ZXZ =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,154,"new RotationOrder(""ZXZ"", Vector3D.plusK, Vector3D.plusI, Vector3D.plusK);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,121,"ublic static final RotationOrder ZYZ = new RotationOrder(""ZYZ"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,160,public static final RotationOrder ZYZ =
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,161,"new RotationOrder(""ZYZ"", Vector3D.plusK, Vector3D.plusJ, Vector3D.plusK);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,166,/** Axis of the first rotation. */
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,167,private final Vector3D a1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,169,/** Axis of the second rotation. */
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,170,private final Vector3D a2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,172,/** Axis of the third rotation. */
True,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,src/mantissa/src/org/spaceroots/mantissa/geometry/RotationOrder.java,173,private final Vector3D a3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,24, <p>Vector3D are guaranteed to be immutable objects.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,25, @version $Id: Vector3D.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,23,* <p>Instance of this class are guaranteed to be immutable.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,24,* @version $Id: Vector3D.java 1716 2006-12-13 22:56:35Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,28,ublic class Vector3D implements Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,28,public class Vector3D
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,29,implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,45,"** Opposite of the third canonical vector (coordinates : 0, 0, -1). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,46,"/** Opposite of the third canonical vector (coordinates : 0, 0, -1).  */"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,101, The vector built will be a * u +  b * v
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,102, @param a first scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,103, @param u first base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,104, @param b second scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,105, @param v second base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,102,* The vector built will be a1 * u1 + a2 * u2
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,103,* @param a1 first scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,104,* @param u1 first base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,105,* @param a2 second scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,106,* @param u2 second base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,107,"ublic Vector3D(double a, Vector3D u, double b, Vector3D v) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,108,his.x = a * u.x + b * v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,109,his.y = a * u.y + b * v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,110,his.z = a * u.z + b * v.z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,108,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,109,this.x = a1 * u1.x + a2 * u2.x;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,110,this.y = a1 * u1.y + a2 * u2.y;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,111,this.z = a1 * u1.z + a2 * u2.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,115, The vector built will be a * u +  b * v + c * w
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,116, @param a first scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,117, @param u first base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,118, @param b second scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,119, @param v second base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,120, @param c third scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,121, @param w third base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,116,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,117,* @param a1 first scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,118,* @param u1 first base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,119,* @param a2 second scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,120,* @param u2 second base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,121,* @param a3 third scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,122,* @param u3 third base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,123,"ublic Vector3D(double a, Vector3D u, double b, Vector3D v,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,124,"ouble c, Vector3D w) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,125,his.x = a * u.x + b * v.x + c * w.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,126,his.y = a * u.y + b * v.y + c * w.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,127,his.z = a * u.z + b * v.z + c * w.z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,124,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,125,"double a3, Vector3D u3) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,126,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,127,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,128,this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,132, The vector built will be a * t +  b * u + c * v + d * w
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,133, @param a first scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,134, @param t first base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,135, @param b second scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,136, @param u second base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,137, @param c third scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,138, @param v third base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,139, @param d third scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,140, @param w third base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,133,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,134,* @param a1 first scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,135,* @param u1 first base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,136,* @param a2 second scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,137,* @param u2 second base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,138,* @param a3 third scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,139,* @param u3 third base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,140,* @param a4 fourth scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,141,* @param u4 fourth base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,142,"ublic Vector3D(double a, Vector3D t, double b, Vector3D u,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,143,"ouble c, Vector3D v, double d, Vector3D w) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,144,his.x = a * t.x + b * u.x + c * v.x + d * w.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,145,his.y = a * t.y + b * u.y + c * v.y + d * w.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,146,his.z = a * t.z + b * u.z + c * v.z + d * w.z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,143,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,144,"double a3, Vector3D u3, double a4, Vector3D u4) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,145,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,146,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,147,this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,152, @see #setX(double)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,161, @see #setY(double)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,170, @see #setZ(double)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,199,** Normalize a vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,200, @param v vector to normalize
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,201, @return a new vector equal to v / ||v||
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,202, @exception ArithmeticException if the norm of the instance is null
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,197,/** Add a vector to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,198,* @param v vector to add
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,199,* @return a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,204,ublic static Vector3D normalize(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,205,ouble norm = v.getNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,206,f (norm == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,207,"hrow new ArithmeticException(""null norm"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,209,ouble inv = 1.0 / norm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,210,"eturn new Vector3D(inv * v.x, inv * v.y, inv * v.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,201,public Vector3D add(Vector3D v) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,202,"return new Vector3D(x + v.x, y + v.y, z + v.z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,213,** Add two vectors.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,214, Add two vectors and return the sum as a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,215, @param v1 first vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,216, @param v2 second vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,217, @return a new vector equal to v1 + v2
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,205,/** Add a scaled vector to the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,206,* @param factor scale factor to apply to v before adding it
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,207,* @param v vector to add
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,208,* @return a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,219,"ublic static Vector3D add(Vector3D v1, Vector3D v2) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,220,"eturn new Vector3D(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,210,"public Vector3D add(double factor, Vector3D v) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,211,"return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,223,** Subtract two vectors.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,224, Subtract two vectors and return the difference as a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,225, @param v1 first vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,226, @param v2 second vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,227, @return a new vector equal to v1 - v2
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,214,/** Subtract a vector from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,215,* @param v vector to subtract
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,216,* @return a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,229,"ublic static Vector3D subtract(Vector3D v1, Vector3D v2) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,230,"eturn new Vector3D(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,218,public Vector3D subtract(Vector3D v) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,219,"return new Vector3D(x - v.x, y - v.y, z - v.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,222,/** Subtract a scaled vector from the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,223,* @param factor scale factor to apply to v before subtracting it
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,224,* @param v vector to subtract
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,225,* @return a new vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,227,"public Vector3D subtract(double factor, Vector3D v) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,228,"return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,231,/** Normalize the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,232,* @return a new normalized vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,233,* @exception ArithmeticException if the norm is null
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,235,public Vector3D normalize() {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,236,double s = getNorm();
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,237,if (s == 0) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,238,"throw new ArithmeticException(""null norm"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,240,return multiply(1 / s);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,241,   Vector3D k = Vector3D.normalize(u);
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,251,*   Vector3D k = u.normalize();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,301,** Get the opposite of a vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,302, @param u vector to revert
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,303, @return a new vector which is -u
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,311,/** Get the opposite of the instance.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,312,* @return a new vector which is opposite to the instance
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,305,ublic static Vector3D negate(Vector3D u) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,306,"eturn new Vector3D(-u.x, -u.y, -u.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,314,public Vector3D negate() {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,315,"return new Vector3D(-x, -y, -z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,309,** Multiply a vector by a scalar
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,310, Multiply a vectors by a scalar and return the product as a new vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,318,/** Multiply the instance by a scalar
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,312, @param v vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,313, @return a new vector equal to a * v
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,320,* @return a new vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,315,"ublic static Vector3D multiply(double a, Vector3D v) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,316,"eturn new Vector3D(a * v.x, a * v.y, a * v.z);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,322,public Vector3D multiply(double a) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,323,"return new Vector3D(a * x, a * y, a * z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,348,rivate static final long serialVersionUID = 484345009325358136L;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,355,private static final long serialVersionUID = 7318440192750283659L;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,30,xtends SquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,31,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/DiagonalMatrix.java,28,extends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,33,xtends Matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,34,mplements Serializable {
True,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralMatrix.java,31,extends Matrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,30,xtends SquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,31,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,28,extends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,267,/ release the memory as soon as possible
False,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/GeneralSquareMatrix.java,268,ork = null;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,30,xtends SquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,31,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/LowerTriangularMatrix.java,28,extends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,81,his.data    = data;
True,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/Matrix.java,81,this.data    = (data == null) ? null : (double[]) data.clone();
False,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,55,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,src/mantissa/src/org/spaceroots/mantissa/linalg/NonNullRange.java,55,implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,34,xtends Matrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,35,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SquareMatrix.java,32,extends Matrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,30,xtends GeneralSquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,31,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/SymetricalMatrix.java,28,extends GeneralSquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,20,mport java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,30,xtends SquareMatrix
False,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,31,"mplements Serializable, Cloneable {"
True,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,src/mantissa/src/org/spaceroots/mantissa/linalg/UpperTriangularMatrix.java,28,extends SquareMatrix {
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,134,nt dimension = interpolator.currentState.length;
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,136,urrentState = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,137,"ystem.arraycopy(interpolator.currentState, 0, currentState, 0,"
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,138,imension);
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,140,nterpolatedState = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,141,"ystem.arraycopy(interpolator.interpolatedState, 0, interpolatedState, 0,"
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,142,imension);
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,134,currentState      = (double[]) interpolator.currentState.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,135,interpolatedState = (double[]) interpolator.interpolatedState.clone();
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,192,ublic abstract Object clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,185,public Object clone() {
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,186,try {
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,187,return super.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,188,} catch (CloneNotSupportedException cnse) {
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,189,// should never happen
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,190,return null;
False,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,294,eturn interpolatedState;
True,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/AbstractStepInterpolator.java,294,return (double[]) interpolatedState.clone();
False,src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegrator.java,50,"rivate static final String methodName = new String(""classical Runge-Kutta"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegrator.java,50,"private static final String methodName = ""classical Runge-Kutta"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54Integrator.java,50,"rivate static final String methodName = new String(""Dormand-Prince 5(4)"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54Integrator.java,50,"private static final String methodName = ""Dormand-Prince 5(4)"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,71,nt dimension = interpolator.v1.length;
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,73,1 = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,74,2 = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,75,3 = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,76,4 = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,78,"ystem.arraycopy(interpolator.v1, 0, v1, 0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,79,"ystem.arraycopy(interpolator.v2, 0, v2, 0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,80,"ystem.arraycopy(interpolator.v3, 0, v3, 0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,81,"ystem.arraycopy(interpolator.v4, 0, v4, 0, dimension);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,71,v1 = (double[]) interpolator.v1.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,72,v2 = (double[]) interpolator.v2.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,73,v3 = (double[]) interpolator.v3.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince54StepInterpolator.java,74,v4 = (double[]) interpolator.v4.clone();
False,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853Integrator.java,58,"rivate static final String methodName = new String(""Dormand-Prince 8 (5, 3)"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DormandPrince853Integrator.java,58,"private static final String methodName = ""Dormand-Prince 8 (5, 3)"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,52,rotected DummyStepInterpolator() {
True,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,52,public DummyStepInterpolator() {
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,86,** Copy the instance.
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,87, the copy is a deep copy: its arrays are separated from the
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,88, original arrays of the instance
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,89, @return a copy of the instance.
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,91,ublic Object clone() {
False,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,src/mantissa/src/org/spaceroots/mantissa/ode/DummyStepInterpolator.java,92,eturn new DummyStepInterpolator(this);
False,src/mantissa/src/org/spaceroots/mantissa/ode/EulerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/EulerIntegrator.java,53,"rivate static final String methodName = new String(""Euler"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/EulerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/EulerIntegrator.java,53,"private static final String methodName = ""Euler"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/GillIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GillIntegrator.java,49,"rivate static final String methodName = new String(""Gill"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/GillIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GillIntegrator.java,49,"private static final String methodName = ""Gill"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,91,"rivate static final String methodName = new String(""Gragg-Bulirsch-Stoer"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,91,"private static final String methodName = ""Gragg-Bulirsch-Stoer"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,716,ouble ratio = sequence [k] * sequence[k+1]
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,716,double ratio = ((double) sequence [k] * sequence[k+1])
False,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,743,ouble ratio = sequence[k+1] / sequence[0];
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,743,double ratio = ((double) sequence[k+1]) / sequence[0];
False,src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54Integrator.java,38,"rivate static final String methodName = new String(""Higham-Hall 5(4)"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54Integrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/HighamHall54Integrator.java,38,"private static final String methodName = ""Higham-Hall 5(4)"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/MidpointIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/MidpointIntegrator.java,46,"rivate static final String methodName = new String(""midpoint"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/MidpointIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/MidpointIntegrator.java,46,"private static final String methodName = ""midpoint"";"
False,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,107,astState = new double[state.length];
False,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,108,"ystem.arraycopy(state, 0, lastState, 0, lastState.length);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,src/mantissa/src/org/spaceroots/mantissa/ode/StepNormalizer.java,107,lastState = (double[]) state.clone();
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,45,private static final long serialVersionUID = 6944466361876662425L;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,48,ublic interface SwitchingFunction {
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,50,public interface SwitchingFunction extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesIntegrator.java,49,"rivate static final String methodName = new String(""3/8"");"
True,src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/ThreeEighthesIntegrator.java,49,"private static final String methodName = ""3/8"";"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,246,"ew CorrelatedRandomVectorGenerator(statistics.getMean(null),"
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,246,"new CorrelatedRandomVectorGenerator(statistics.getMean(),"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,347,implex[i] = new PointCostPair(vertex);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,347,"simplex[i] = new PointCostPair(vertex, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,359,implex[i] = new PointCostPair(vertices[i]);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,359,"simplex[i] = new PointCostPair(vertices[i], Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,372,implex[0] = new PointCostPair(vertex);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,372,"simplex[0] = new PointCostPair(vertex, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,376,implex[i] = new PointCostPair(generator.nextVector());
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,376,"simplex[i] = new PointCostPair(generator.nextVector(), Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,431,eturn minima;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,431,return (PointCostPair[]) minima.clone();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,525,f (! pair.isEvaluated()) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,526,air.setCost(evaluateCost(pair.getPoint()));
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,525,if (Double.isNaN(pair.cost)) {
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,526,"simplex[i] = new PointCostPair(pair.point, evaluateCost(pair.point));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,541,f (simplex[i].getCost() > pointCostPair.getCost()) {
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,541,if (simplex[i].cost > pointCostPair.cost) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,558,ouble cost1 = ((PointCostPair) o1).getCost();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,559,ouble cost2 = ((PointCostPair) o2).getCost();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,558,double cost1 = ((PointCostPair) o1).cost;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,559,double cost2 = ((PointCostPair) o2).cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,57,ouble originalCost = original[0].getCost();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,57,double originalCost = original[0].cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,96,ouble[] xSmallest = original[0].getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,96,double[] xSmallest = original[0].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,103,ouble[] xOriginal    = original[i].getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,103,double[] xOriginal    = original[i].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,108,implex[i] = new PointCostPair(xTransformed);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,108,"simplex[i] = new PointCostPair(xTransformed, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,113,eturn simplex[0].getCost();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,113,return simplex[0].cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,64,ouble   smallest      = simplex[0].getCost();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,65,ouble   secondLargest = simplex[n-1].getCost();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,66,ouble   largest       = simplex[n].getCost();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,67,ouble[] xLargest      = simplex[n].getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,64,double   smallest      = simplex[0].cost;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,65,double   secondLargest = simplex[n-1].cost;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,66,double   largest       = simplex[n].cost;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,67,double[] xLargest      = simplex[n].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,73,ouble[] x = simplex[i].getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,73,double[] x = simplex[i].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,93,ointCostPair r = new PointCostPair(xR);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,94,.setCost(costR);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,95,eplaceWorstPoint(r);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,93,"replaceWorstPoint(new PointCostPair(xR, costR));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,108,ointCostPair e = new PointCostPair(xE);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,109,.setCost(costE);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,110,eplaceWorstPoint(e);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,106,"replaceWorstPoint(new PointCostPair(xE, costE));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,113,ointCostPair r = new PointCostPair(xR);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,114,.setCost(costR);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,115,eplaceWorstPoint(r);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,109,"replaceWorstPoint(new PointCostPair(xR, costR));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,131,ointCostPair c = new PointCostPair(xC);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,132,.setCost(costC);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,133,eplaceWorstPoint(c);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,125,"replaceWorstPoint(new PointCostPair(xC, costC));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,148,ointCostPair c = new PointCostPair(xC);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,149,.setCost(costC);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,150,eplaceWorstPoint(c);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,140,"replaceWorstPoint(new PointCostPair(xC, costC));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,157,ouble[] xSmallest = simplex[0].getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,147,double[] xSmallest = simplex[0].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,159,ointCostPair pair = simplex[i];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,160,ouble[] x = pair.getPoint();
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,149,double[] x = simplex[i].point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,164,air.setCost(Double.NaN);
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,153,"simplex[i] = new PointCostPair(x, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,21, <p>A cost/point pair is not evaluated at build time. Its associated
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,22, cost set to <code>Double.NaN</code> until it is evaluated.</p>
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,21,* <p>This is a simple immutable container.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,24, @version $Id: PointCostPair.java 1705 2006-09-17 19:57:39Z luc $
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,23,* @version $Id: PointCostPair.java 1709 2006-12-03 21:16:50Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,29,** Build a point/cost pair with non-evaluated cost.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,28,/** Build a point/cost pair.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,30,* @param cost point cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,32,ublic PointCostPair(double[] point) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,33,his.point = point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,34,ost = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,37,** Reset the point coordinates.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,38, <p>Resetting the points coordinates automatically reset the cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,39, to non-evaluated</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,40, @param point new point coordinates
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,41, @return old point coordinates (this can be re-used to put the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,42, coordinates of another point without re-allocating an array)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,44,ublic double[] setPoint(double[] point) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,45,ouble[] oldPoint = this.point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,46,his.point = point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,47,ost = Double.NaN;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,48,eturn oldPoint;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,51,** Get the point coordinates.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,52, @return point coordinates
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,54,ublic double[] getPoint() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,55,eturn point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,58,** Set the cost.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,59, @param cost cost to store in the instance (can be
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,60, <code>Double.NaN</code> to reset the instance to non-evaluated)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,62,ublic void setCost(double cost) {
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,32,"public PointCostPair(double[] point, double cost) {"
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,33,this.point = (double[]) point.clone();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,66,** Get the cost.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,67, @return cost associated to the point (or <code>Double.NaN</code>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,68, if the instance is not evaluated)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,70,ublic double getCost() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,71,eturn cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,74,** Check if the cost has been evaluated.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,75, <p>The cost is considered to be non-evaluated if it is
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,76, <code>Double.isNaN(pair.getCost())</code> would return true</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,77, @return true if the cost has been evaluated
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,79,ublic boolean isEvaluated() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,80,eturn ! Double.isNaN(cost);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,84,rivate double[] point;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,38,public final double[] point;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,87,rivate double cost;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,41,public final double cost;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,48,um = sampler.nextSamplePoint().getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegrator.java,48,sum = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,88,ouble h1 = current.getX() - previous.getX();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,89,ouble h2 = next.getX()    - current.getX();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,88,double h1 = current.x - previous.x;
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,89,double h2 = next.x    - current.x;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,94,ouble[] pY = previous.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,95,ouble[] cY = current.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,96,ouble[] nY = next.getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,94,double[] pY = previous.y;
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,95,double[] cY = current.y;
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,96,double[] nY = next.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,104,ouble halfDx = 0.5 * (current.getX() - previous.getX());
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,105,ouble[] pY = previous.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,106,ouble[] cY = current.getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,104,double halfDx = 0.5 * (current.x - previous.x);
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,105,double[] pY = previous.y;
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,106,double[] cY = current.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,110,"eturn new VectorialValuedPair(current.getX(), sum);"
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,110,"return new VectorialValuedPair(current.x, sum);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,113,ouble[] values = new double[sum.length];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,114,"ystem.arraycopy(sum, 0, values, 0, sum.length);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,115,"eturn new VectorialValuedPair(next.getX(), values);"
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/EnhancedSimpsonIntegratorSampler.java,113,"return new VectorialValuedPair(next.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,54,um = sampler.nextSamplePoint().getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegrator.java,54,sum = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,89,ouble step =  (current.getX() - previous.getX());
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,90,ouble[] pY = previous.getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,89,double step =  (current.x - previous.x);
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,90,double[] pY = previous.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,95,ouble[] values = new double[sum.length];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,96,"ystem.arraycopy(sum, 0, values, 0, sum.length);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,97,"eturn new VectorialValuedPair (current.getX(), values);"
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/RiemannIntegratorSampler.java,95,"return new VectorialValuedPair (current.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,45,um = sampler.nextSamplePoint().getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegrator.java,45,sum = sampler.nextSamplePoint().y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,90,ouble halfDx = 0.5 * (current.getX() - previous.getX());
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,91,ouble[] pY = previous.getY();
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,92,ouble[] cY = current.getY();
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,90,double halfDx = 0.5 * (current.x - previous.x);
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,91,double[] pY = previous.y;
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,92,double[] cY = current.y;
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,97,ouble[] values = new double[sum.length];
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,98,"ystem.arraycopy(sum, 0, values, 0, sum.length);"
False,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,99,"eturn new VectorialValuedPair (current.getX(), values);"
True,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,src/mantissa/src/org/spaceroots/mantissa/quadrature/vectorial/TrapezoidIntegratorSampler.java,97,"return new VectorialValuedPair (current.x, (double[]) sum.clone());"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,84,his.mean = mean;
True,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,84,this.mean = (double[]) mean.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,90,orrelated = new double[order];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,117,orrelated = new double[order];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,243, @return a random vector as an array of double. The generator
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,244," <em>will</em> reuse the same array for each call, in order to"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,245," save the allocation time, so the user should keep a copy by"
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,246, himself if he needs so.
True,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,241,* @return a random vector as an array of double. The returned array
True,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,242,"* is created at each call, the caller can do what it wants with it."
True,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,252,double[] correlated = new double[mean.length];
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,282,** Storage for the random vector. */
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,283,rivate double[] correlated;
False,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,285,rivate static final long serialVersionUID = -4754497552287369719L;
True,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGenerator.java,279,private static final long serialVersionUID = -88563624902398453L;
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,36,** Underlying generator. */
False,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,37,andom generator;
True,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,64,/** Underlying generator. */
True,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,65,private Random generator;
True,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/GaussianRandomGenerator.java,67,private static final long serialVersionUID = 5504568059866195697L;
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,20,import java.io.Serializable;
False,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,27,ublic interface NormalizedRandomGenerator {
True,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/NormalizedRandomGenerator.java,29,public interface NormalizedRandomGenerator extends Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,49,his.mean              = mean;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,50,his.standardDeviation = standardDeviation;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,49,this.mean              = (double[]) mean.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,50,this.standardDeviation = (double[]) standardDeviation.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,53,andom = new double[mean.length];
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,75,andom = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,87, @return a random vector as an array of double. The generator
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,88," <em>will</em> reuse the same array for each call, in order to"
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,89," save the allocation time, so the user should keep a copy by"
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,90, himself if he needs so.
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,85,* @return a random vector as an array of double. The returned array
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,86,"* is created at each call, the caller can do what it wants with it."
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,90,double[] random = new double[mean.length];
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,111,** Storage for the random vector. */
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,112,rivate double[] random;
False,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,114,rivate static final long serialVersionUID = -3323293740860311151L;
True,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGenerator.java,108,private static final long serialVersionUID = -9094322067568302961L;
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,37,rivate static final double SQRT3 = Math.sqrt(3.0);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,39,rivate static final double TWOSQRT3 = 2.0 * Math.sqrt(3.0);
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,41,** Underlying generator. */
False,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,42,andom generator;
True,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,67,/** Underlying generator. */
True,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,68,private Random generator;
True,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,70,private static final double SQRT3 = Math.sqrt(3.0);
True,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,72,private static final double TWOSQRT3 = 2.0 * Math.sqrt(3.0);
True,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,src/mantissa/src/org/spaceroots/mantissa/random/UniformRandomGenerator.java,74,private static final long serialVersionUID = -6913329325753217654L;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,22,mport java.util.Arrays;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,68,** Allocate all the arrays. */
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,69,rivate void allocate() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,70,in        = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,71,inIndices = new int[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,72,ax        = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,73,axIndices = new int[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,74,um        = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,75,um2       = new double[dimension * (dimension + 1) / 2];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,88,imension = x.length;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,89,llocate();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,91,"rrays.fill(minIndices, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,92,"rrays.fill(maxIndices, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,93,"ystem.arraycopy(x, 0, min, 0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,94,"ystem.arraycopy(x, 0, max, 0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,95,"ystem.arraycopy(x, 0, sum, 0, dimension);"
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,76,dimension  = x.length;
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,77,minIndices = new int[dimension];
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,78,maxIndices = new int[dimension];
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,79,min        = (double[]) x.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,80,max        = (double[]) x.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,81,sum        = (double[]) x.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,82,sum2       = new double[dimension * (dimension + 1) / 2];
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,156,llocate();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,158,"ystem.arraycopy(s.min,         0, min,         0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,159,"ystem.arraycopy(s.minIndices,  0, minIndices,  0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,160,"ystem.arraycopy(s.max,         0, max,         0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,161,"ystem.arraycopy(s.maxIndices,  0, maxIndices,  0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,162,"ystem.arraycopy(s.sum,         0, sum,         0, dimension);"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,163,"ystem.arraycopy(s.sum2,        0, sum2,        0, sum2.length);"
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,143,min        = (double[]) s.min.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,144,minIndices = (int[])    s.minIndices.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,145,max        = (double[]) s.max.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,146,maxIndices = (int[])    s.maxIndices.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,147,sum        = (double[]) s.sum.clone();
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,148,sum2       = (double[]) s.sum2.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,206, @return minimal value in the sample (the array is a reference to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,207, an internal array that changes each time something is added to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,208," the instance, the caller should neither change it nor rely on its"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,209, value in the long term)
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,191,* @return minimal value in the sample (a new array is created
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,192,"* at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,213,eturn min;
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,196,return (double[]) min.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,218, the sample reached its minimal value (the array is a reference to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,219, an internal array that changes each time something is added to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,220," the instance, the caller should neither change it nor rely on its"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,221, value in the long term)
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,201,* the sample reached its minimal value (a new array is created
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,202,"* at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,225,eturn minIndices;
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,206,return (int[]) minIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,235, @return maximal value in the sample (the array is a reference to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,236, an internal array that changes each time something is added to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,237," the instance, the caller should neither change it nor rely on its"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,238, value in the long term)
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,216,* @return maximal value in the sample (a new array is created
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,217,"* at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,242,eturn max;
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,221,return (double[]) max.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,247, the sample reached its maximal value (the array is a reference to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,248, an internal array that changes each time something is added to
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,249," the instance, the caller should neither change it nor rely on its"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,250, value in the long term)
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,226,* the sample reached its maximal value (a new array is created
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,227,"* at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,254,eturn maxIndices;
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,231,return (int[]) maxIndices.clone();
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,258," @param mean placeholder where to store the array, if null a new"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,259, array will be allocated
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,260, @return mean value of the sample or null if the sample is empty
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,261, and hence the dimension of the vectors is still unknown
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,262," (reference to mean if it was non-null, reference to a new array"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,263, otherwise)
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,235,* @return mean value of the sample or an empty array
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,236,* if the sample is empty (a new array is created
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,237,"* at each call, the caller may do what it wants to with it)"
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,265,ublic double[] getMean(double[] mean) {
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,239,public double[] getMean() {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,267,eturn null;
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,269,f (mean == null) {
False,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,270,ean = new double[dimension];
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,241,return new double[0];
True,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,src/mantissa/src/org/spaceroots/mantissa/random/VectorialSampleStatistics.java,243,double[] mean = new double[dimension];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,80,** Get the internal data array.
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,81, @return internal data array
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,80,/** Get the data array.
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,81,* @return copy of the data array
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,83,ublic double[] getInternalDataArray() {
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,83,public double[] getDataArray() {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,87,eturn internalData;
True,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,src/mantissa/src/org/spaceroots/mantissa/utilities/ArrayMapper.java,87,return (double[]) internalData.clone();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,46, @param doReallocate true if a new array should be allocated and
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,47," initialized using the other argument, false if the instance"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,48, should reference the existing array throughout its lifetime
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,50,"ublic MappableArray(double[] array, boolean doReallocate) {"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,51,f (doReallocate) {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,52,nternalArray = new double[array.length];
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,53,"ystem.arraycopy(array, 0, internalArray, 0, array.length);"
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,54, else {
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,55,nternalArray = array;
True,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,47,public MappableArray(double[] array) {
True,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,48,internalArray = (double[]) array.clone();
False,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,63,eturn internalArray;
True,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,src/mantissa/src/org/spaceroots/mantissa/utilities/MappableArray.java,55,return (double[]) internalArray.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,29,ublic void aatestOne() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,29,public void testOne() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,47,ublic void aatestBounds() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,47,public void testBounds() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,49,hebyshev Tk = new Chebyshev(k);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,49,OrthogonalPolynomial Tk = new Chebyshev(k);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,56,ublic void aatestDifferentials() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,56,public void testDifferentials() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,67,"olynomial.Rational Tk0g0 = Polynomial.Rational.multiply(Tk0, g0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,68,"olynomial.Rational Tk1g1 = Polynomial.Rational.multiply(Tk1, g1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,69,"olynomial.Rational Tk2g2 = Polynomial.Rational.multiply(Tk2, g2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,67,Polynomial.Rational Tk0g0 = Tk0.multiply(g0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,68,Polynomial.Rational Tk1g1 = Tk1.multiply(g1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,69,Polynomial.Rational Tk2g2 = Tk2.multiply(g2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,71,olynomial.Rational d =
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,72,"olynomial.Rational.add(Tk0g0, Polynomial.Rational.add(Tk1g1, Tk2g2));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/ChebyshevTest.java,71,Polynomial.Rational d = Tk0g0.add(Tk1g1.add(Tk2g2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,58,"olynomial.Rational Hk0g0 = Polynomial.Rational.multiply(Hk0, g0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,59,"olynomial.Rational Hk1g1 = Polynomial.Rational.multiply(Hk1, g1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,60,"olynomial.Rational Hk2g2 = Polynomial.Rational.multiply(Hk2, g2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,58,Polynomial.Rational Hk0g0 = Hk0.multiply(g0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,59,Polynomial.Rational Hk1g1 = Hk1.multiply(g1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,60,Polynomial.Rational Hk2g2 = Hk2.multiply(g2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,62,olynomial.Rational d =
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,63,"olynomial.Rational.add(Hk0g0, Polynomial.Rational.add(Hk1g1, Hk2g2));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/HermiteTest.java,62,Polynomial.Rational d = Hk0g0.add(Hk1g1.add(Hk2g2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,64,"olynomial.Rational Lk0g0 = Polynomial.Rational.multiply(Lk0, g0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,65,"olynomial.Rational Lk1g1 = Polynomial.Rational.multiply(Lk1, g1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,66,"olynomial.Rational Lk2g2 = Polynomial.Rational.multiply(Lk2, g2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,64,Polynomial.Rational Lk0g0 = Lk0.multiply(g0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,65,Polynomial.Rational Lk1g1 = Lk1.multiply(g1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,66,Polynomial.Rational Lk2g2 = Lk2.multiply(g2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,68,olynomial.Rational d =
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,69,"olynomial.Rational.add(Lk0g0, Polynomial.Rational.add(Lk1g1, Lk2g2));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,68,Polynomial.Rational d = Lk0g0.add(Lk1g1.add(Lk2g2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,76,"ssertTrue(Laguerre.multiply(p, denominator).toString().equals(reference));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LaguerreTest.java,75,assertTrue(p.multiply(denominator).toString().equals(reference));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,58,"olynomial.Rational Pk0g0 = Polynomial.Rational.multiply(Pk0, g0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,59,"olynomial.Rational Pk1g1 = Polynomial.Rational.multiply(Pk1, g1);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,60,"olynomial.Rational Pk2g2 = Polynomial.Rational.multiply(Pk2, g2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,58,Polynomial.Rational Pk0g0 = Pk0.multiply(g0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,59,Polynomial.Rational Pk1g1 = Pk1.multiply(g1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,60,Polynomial.Rational Pk2g2 = Pk2.multiply(g2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,62,olynomial.Rational d =
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,63,"olynomial.Rational.add(Pk0g0, Polynomial.Rational.add(Pk1g1, Pk2g2));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,62,Polynomial.Rational d = Pk0g0.add(Pk1g1.add(Pk2g2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,95,"ssertTrue(Legendre.multiply(p, denominator).toString().equals(reference));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/LegendreTest.java,94,assertTrue(p.multiply(denominator).toString().equals(reference));
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,52,".multiplySelf(new RationalNumber(1l, 2l));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,52,"r = (Polynomial.Rational) r.multiply(new RationalNumber(1l, 2l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,61,".setUnknownName(""alpha"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,62,"heckPolynomial(p, ""-5.0 + 3.0 alpha + alpha^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,63,.setUnknownName(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,64,"heckPolynomial(p, ""-5.0 + 3.0 x + x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,85,"ssertTrue(Polynomial.Double.add(p1, p2).isZero());"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,78,assertTrue(p1.add(p2).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,87,2 = new Polynomial.Double(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,88,2.addToSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,80,p2 = p1.add(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,93,1.addToSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,85,p1 = p1.add(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,102,"ssertTrue(Polynomial.Double.subtract(p1, p1).isZero());"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,94,assertTrue(p1.subtract(p1).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,105,2.subtractFromSelf(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,97,p2 = p2.subtract(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,110,1.subtractFromSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,102,p1 = p1.subtract(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,120,"heckPolynomial(Polynomial.Double.multiply(p1, p2), ""-9.0 + x^2 + 2.0 x^3"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,112,"checkPolynomial(p1.multiply(p2), ""-9.0 + x^2 + 2.0 x^3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,123,2 = new Polynomial.Double(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,115,p2 = p1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,125,2.multiplySelf(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialDoubleTest.java,117,p2 = p2.multiply(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,58,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,58,f= f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,60,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,60,f = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,64,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,64,f = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,69,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,69,f = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,77,olynomialFraction fInverse = PolynomialFraction.invert(f);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,77,PolynomialFraction fInverse = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,86,1.addToSelf(f1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,86,f1 = f1.add(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,89,"heckValue(PolynomialFraction.add(new PolynomialFraction(17l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,90,"ew PolynomialFraction(-17l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,89,"checkValue(new PolynomialFraction(17l, 3l).add(new PolynomialFraction(-17l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,92,"heckValue(PolynomialFraction.add(new PolynomialFraction(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,93,"ew PolynomialFraction(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,91,"checkValue(new PolynomialFraction(2l, 3l).add(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,95,"heckValue(PolynomialFraction.add(new PolynomialFraction(1l, 6l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,96,"ew PolynomialFraction(2l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,93,"checkValue(new PolynomialFraction(1l, 6l).add(new PolynomialFraction(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,98,"heckValue(PolynomialFraction.add(new PolynomialFraction(4l, 5l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,99,"ew PolynomialFraction(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,95,"checkValue(new PolynomialFraction(4l, 5l).add(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,101,"heckValue(PolynomialFraction.add(new PolynomialFraction(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,102,"ew PolynomialFraction(4l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,97,"checkValue(new PolynomialFraction(-3l, 4l).add(new PolynomialFraction(4l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,110,1.subtractFromSelf(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,111,"heckValue(f1, ""0"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,105,"checkValue(f1.subtract(f1), ""0"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,113,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(7l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,114,"ew PolynomialFraction(-7l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,107,"checkValue(new PolynomialFraction(7l, 3l).subtract(new PolynomialFraction(-7l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,117,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,118,"ew PolynomialFraction(2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,110,"checkValue(new PolynomialFraction(3l, 4l).subtract(new PolynomialFraction(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,120,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,121,"ew PolynomialFraction(-2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,112,"checkValue(new PolynomialFraction(3l, 4l).subtract(new PolynomialFraction(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,123,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,124,"ew PolynomialFraction(2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,114,"checkValue(new PolynomialFraction(-3l, 4l).subtract(new PolynomialFraction(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,126,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,127,"ew PolynomialFraction(-2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,116,"checkValue(new PolynomialFraction(-3l, 4l).subtract(new PolynomialFraction(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,130,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,131,"ew PolynomialFraction(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,119,"checkValue(new PolynomialFraction(2l, 3l).subtract(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,133,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(-2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,134,"ew PolynomialFraction(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,121,"checkValue(new PolynomialFraction(-2l, 3l).subtract(new PolynomialFraction(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,136,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,137,"ew PolynomialFraction(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,123,"checkValue(new PolynomialFraction(2l, 3l).subtract(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,139,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(-2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,140,"ew PolynomialFraction(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,125,"checkValue(new PolynomialFraction(-2l, 3l).subtract(new PolynomialFraction(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,143,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(1l, 6l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,144,"ew PolynomialFraction(2l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,128,"checkValue(new PolynomialFraction(1l, 6l).subtract(new PolynomialFraction(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,146,"heckValue(PolynomialFraction.subtract(new PolynomialFraction(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,147,"ew PolynomialFraction(1l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,130,"checkValue(new PolynomialFraction(1l, 2l).subtract(new PolynomialFraction(1l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,155,".multiplySelf(new PolynomialFraction(9l,4l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,156,"heckValue(f, ""3/2"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,138,"checkValue(f.multiply(new PolynomialFraction(9l,4l)), ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,158,"heckValue(PolynomialFraction.multiply(new PolynomialFraction(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,159,"ew PolynomialFraction(0l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,140,"checkValue(new PolynomialFraction(1l, 2l).multiply(new PolynomialFraction(0l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,161,"heckValue(PolynomialFraction.multiply(new PolynomialFraction(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,162,"ew PolynomialFraction(-5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,142,"checkValue(new PolynomialFraction(4l, 15l).multiply(new PolynomialFraction(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,164,"heckValue(PolynomialFraction.multiply(new PolynomialFraction(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,165,"ew PolynomialFraction(5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,144,"checkValue(new PolynomialFraction(-4l, 15l).multiply(new PolynomialFraction(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,167,"heckValue(PolynomialFraction.multiply(new PolynomialFraction(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,168,"ew PolynomialFraction(5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,146,"checkValue(new PolynomialFraction(4l, 15l).multiply(new PolynomialFraction(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,170,"heckValue(PolynomialFraction.multiply(new PolynomialFraction(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,171,"ew PolynomialFraction(-5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,148,"checkValue(new PolynomialFraction(-4l, 15l).multiply(new PolynomialFraction(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,179,".divideSelf(new PolynomialFraction(4l,9l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,180,"heckValue(f, ""3/2"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,157,"checkValue(f.divide(new PolynomialFraction(4l,9l)), ""3/2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,183,"olynomialFraction.divide(new PolynomialFraction(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,184,ew PolynomialFraction(0l));
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,160,"new PolynomialFraction(1l, 2l).divide(new PolynomialFraction(0l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,191,"heckValue(PolynomialFraction.divide(new PolynomialFraction(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,192,"ew PolynomialFraction(-2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,167,"checkValue(new PolynomialFraction(4l, 15l).divide(new PolynomialFraction(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,194,"heckValue(PolynomialFraction.divide(new PolynomialFraction(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,195,"ew PolynomialFraction(2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,169,"checkValue(new PolynomialFraction(-4l, 15l).divide(new PolynomialFraction(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,197,"heckValue(PolynomialFraction.divide(new PolynomialFraction(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,198,"ew PolynomialFraction(2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,171,"checkValue(new PolynomialFraction(4l, 15l).divide(new PolynomialFraction(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,200,"heckValue(PolynomialFraction.divide(new PolynomialFraction(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,201,"ew PolynomialFraction(-2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialFractionTest.java,173,"checkValue(new PolynomialFraction(-4l, 15l).divide(new PolynomialFraction(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,60,".setUnknownName(""alpha"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,61,"heckPolynomial(p, ""-5 + 3 alpha + alpha^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,62,.setUnknownName(null);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,63,"heckPolynomial(p, ""-5 + 3 x + x^2"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,78,"ssertTrue(Polynomial.Rational.add(p1, p2).isZero());"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,74,assertTrue(p1.add(p2).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,80,2 = new Polynomial.Rational(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,81,2.addToSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,76,p2 = p1.add(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,86,1.addToSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,81,p1 = p1.add(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,95,"ssertTrue(Polynomial.Rational.subtract(p1, p1).isZero());"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,90,assertTrue(p1.subtract(p1).isZero());
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,98,2.subtractFromSelf(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,93,p2 = p2.subtract(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,103,1.subtractFromSelf(p2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,98,p1 = p1.subtract(p2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,113,"heckPolynomial(Polynomial.Rational.multiply(p1, p2), ""-9 + x^2 + 2 x^3"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,108,"checkPolynomial(p1.multiply(p2), ""-9 + x^2 + 2 x^3"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,116,2 = new Polynomial.Rational(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,111,p2 = p1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,118,2.multiplySelf(p1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,113,p2 = p2.multiply(p1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,131,.multiplySelf(lcm);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/PolynomialRationalTest.java,126,p = (Polynomial.Rational) p.multiply(lcm);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,57,"ationalNumber f = new RationalNumber(2l, 4l);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,58,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,57,"RationalNumber f = new RationalNumber(2l, 4l).invert();"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,60,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,59,f = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,63, = new RationalNumber(120l);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,64,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,62,f = new RationalNumber(120l).invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,69,.invertSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,67,f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,77,ationalNumber fInverse = RationalNumber.invert(f);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,75,RationalNumber fInverse = f.invert();
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,86,1.addToSelf(f1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,84,f1 = f1.add(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,89,"heckValue(RationalNumber.add(new RationalNumber(17l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,90,"ew RationalNumber(-17l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,87,"checkValue(new RationalNumber(17l, 3l).add(new RationalNumber(-17l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,92,"heckValue(RationalNumber.add(new RationalNumber(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,93,"ew RationalNumber(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,89,"checkValue(new RationalNumber(2l, 3l).add(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,95,"heckValue(RationalNumber.add(new RationalNumber(1l, 6l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,96,"ew RationalNumber(2l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,91,"checkValue(new RationalNumber(1l, 6l).add(new RationalNumber(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,98,"heckValue(RationalNumber.add(new RationalNumber(4l, 5l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,99,"ew RationalNumber(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,93,"checkValue(new RationalNumber(4l, 5l).add(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,101,"heckValue(RationalNumber.add(new RationalNumber(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,102,"ew RationalNumber(4l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,95,"checkValue(new RationalNumber(-3l, 4l).add(new RationalNumber(4l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,110,1.subtractFromSelf(f1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,103,f1 = f1.subtract(f1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,113,"heckValue(RationalNumber.subtract(new RationalNumber(7l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,114,"ew RationalNumber(-7l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,106,"checkValue(new RationalNumber(7l, 3l).subtract(new RationalNumber(-7l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,117,"heckValue(RationalNumber.subtract(new RationalNumber(3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,118,"ew RationalNumber(2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,109,"checkValue(new RationalNumber(3l, 4l).subtract(new RationalNumber(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,120,"heckValue(RationalNumber.subtract(new RationalNumber(3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,121,"ew RationalNumber(-2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,111,"checkValue(new RationalNumber(3l, 4l).subtract(new RationalNumber(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,123,"heckValue(RationalNumber.subtract(new RationalNumber(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,124,"ew RationalNumber(2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,113,"checkValue(new RationalNumber(-3l, 4l).subtract(new RationalNumber(2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,126,"heckValue(RationalNumber.subtract(new RationalNumber(-3l, 4l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,127,"ew RationalNumber(-2l, 3l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,115,"checkValue(new RationalNumber(-3l, 4l).subtract(new RationalNumber(-2l, 3l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,130,"heckValue(RationalNumber.subtract(new RationalNumber(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,131,"ew RationalNumber(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,118,"checkValue(new RationalNumber(2l, 3l).subtract(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,133,"heckValue(RationalNumber.subtract(new RationalNumber(-2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,134,"ew RationalNumber(3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,120,"checkValue(new RationalNumber(-2l, 3l).subtract(new RationalNumber(3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,136,"heckValue(RationalNumber.subtract(new RationalNumber(2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,137,"ew RationalNumber(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,122,"checkValue(new RationalNumber(2l, 3l).subtract(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,139,"heckValue(RationalNumber.subtract(new RationalNumber(-2l, 3l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,140,"ew RationalNumber(-3l, 4l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,124,"checkValue(new RationalNumber(-2l, 3l).subtract(new RationalNumber(-3l, 4l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,143,"heckValue(RationalNumber.subtract(new RationalNumber(1l, 6l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,144,"ew RationalNumber(2l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,127,"checkValue(new RationalNumber(1l, 6l).subtract(new RationalNumber(2l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,146,"heckValue(RationalNumber.subtract(new RationalNumber(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,147,"ew RationalNumber(1l, 6l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,129,"checkValue(new RationalNumber(1l, 2l).subtract(new RationalNumber(1l, 6l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,155,".multiplySelf(new RationalNumber(9l,4l));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,137,"f = f.multiply(new RationalNumber(9l,4l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,158,"heckValue(RationalNumber.multiply(new RationalNumber(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,159,"ew RationalNumber(0l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,140,"checkValue(new RationalNumber(1l, 2l).multiply(new RationalNumber(0l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,161,"heckValue(RationalNumber.multiply(new RationalNumber(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,162,"ew RationalNumber(-5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,142,"checkValue(new RationalNumber(4l, 15l).multiply(new RationalNumber(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,164,"heckValue(RationalNumber.multiply(new RationalNumber(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,165,"ew RationalNumber(5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,144,"checkValue(new RationalNumber(-4l, 15l).multiply(new RationalNumber(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,167,"heckValue(RationalNumber.multiply(new RationalNumber(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,168,"ew RationalNumber(5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,146,"checkValue(new RationalNumber(4l, 15l).multiply(new RationalNumber(5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,170,"heckValue(RationalNumber.multiply(new RationalNumber(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,171,"ew RationalNumber(-5l, 2l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,148,"checkValue(new RationalNumber(-4l, 15l).multiply(new RationalNumber(-5l, 2l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,179,".divideSelf(new RationalNumber(4l,9l));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,156,"f = f.divide(new RationalNumber(4l,9l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,183,"ationalNumber.divide(new RationalNumber(1l, 2l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,184,ew RationalNumber(0l));
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,160,"new RationalNumber(1l, 2l).divide(new RationalNumber(0l));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,191,"heckValue(RationalNumber.divide(new RationalNumber(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,192,"ew RationalNumber(-2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,167,"checkValue(new RationalNumber(4l, 15l).divide(new RationalNumber(-2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,194,"heckValue(RationalNumber.divide(new RationalNumber(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,195,"ew RationalNumber(2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,169,"checkValue(new RationalNumber(-4l, 15l).divide(new RationalNumber(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,197,"heckValue(RationalNumber.divide(new RationalNumber(4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,198,"ew RationalNumber(2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,171,"checkValue(new RationalNumber(4l, 15l).divide(new RationalNumber(2l, 5l)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,200,"heckValue(RationalNumber.divide(new RationalNumber(-4l, 15l),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,201,"ew RationalNumber(-2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/algebra/RationalNumberTest.java,173,"checkValue(new RationalNumber(-4l, 15l).divide(new RationalNumber(-2l, 5l)),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/AllTests.java,33,suite.addTest(MinpackTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,109,tring name            = new Integer(k).toString();
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,109,String name            = Integer.toString(k);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,197,rivate class Distance extends WeightedMeasurement {
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,197,private static class Distance extends WeightedMeasurement {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,246,eturn measurements;
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,246,return (WeightedMeasurement[]) measurements.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,250,eturn unboundPars;
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,250,return (EstimatedParameter[]) unboundPars.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,254,eturn randomizedPars;
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/GaussNewtonEstimatorTest.java,254,return (EstimatedParameter[]) randomizedPars.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,21,mport java.util.Arrays;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,508,ublic void testMinpackLinearFullRank()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,509,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,510,"inpackTest(new LinearFullRankFunction(10, 5, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,511,".0, 2.23606797749979), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,512,"inpackTest(new LinearFullRankFunction(50, 5, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,513,".06225774829855, 6.70820393249937), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,516,ublic void testMinpackLinearRank1()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,517,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,518,"inpackTest(new LinearRank1Function(10, 5, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,519,"91.521868819476, 1.4638501094228), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,520,"inpackTest(new LinearRank1Function(50, 5, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,521,"101.60039334535, 3.48263016573496), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,524,ublic void testMinpackLinearRank1ZeroColsAndRows()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,525,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,526,"inpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,527,"inpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,530,ublic void testMinpackRosenbrok()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,531,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,532,"inpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,533,"ath.sqrt(24.2)), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,534,"inpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,535,"ath.sqrt(1795769.0)), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,536,"inpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,537,"1.0 * Math.sqrt(169000121.0)), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,540,ublic void testMinpackHelicalValley()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,541,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,542,"inpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,543,"0.0), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,544,"inpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,545,"02.95630140987), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,546,"inpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0},"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,547,"91.261822123701), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,550,ublic void testMinpackPowellSingular()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,551,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,552,"inpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,553,"4.6628782986152), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,554,"inpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,555,"270.9838708654), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,556,"inpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,557,"26887.903284750), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,560,ublic void testMinpackFreudensteinRoth()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,561,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,562,"inpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,563,"0.0124960961895, 6.99887517584575,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,564,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,565,"1.4124844654993,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,566,0.896827913731509
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,567,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,568,"inpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,569,"2432.833948863, 6.9988751744895,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,570,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,571,"1.4130046614746,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,572,0.896796038685958
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,573,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,574,"inpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,575,"1426454.595762, 6.99887517242903,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,576,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,577,"1.4127817857886,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,578,0.89680510749204
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,579,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,582,ublic void testMinpackBard()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,583,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,584,"inpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,585,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,586,".0824105765758334,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,587,".1330366534715,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,588,.34369463894115
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,589,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,590,"inpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,591,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,592,".840666673818329,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,593,"158848033.259565,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,594,164378671.653535
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,595,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,596,"inpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,597,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,598,".840666673867645,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,599,"158946167.205518,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,600,164464906.857771
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,601,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,604,ublic void testMinpackKowalikOsborne()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,605,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,606,"inpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,607,".0728915102882945,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,608,".017535837721129,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,609,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,610,".192807810476249,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,611,".191262653354071,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,612,".123052801046931,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,613,.136053221150517
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,614,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,615,"inpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,616,".97937007555202,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,617,".032052192917937,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,618,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,619,"28675.473768287,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,620,"14.0758803129393,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,621,"32977797.7841797,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,622,20571594.1977912
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,623,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,624,"inpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,625,"9.9590617016037,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,626,".0175364017658228,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,627,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,628,".192948328597594,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,629,".188053165007911,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,630,".122430604321144,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,631,.134575665392506
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,632,"), true);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,635,ublic void testMinpackMeyer()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,636,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,637,"inpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,638,"1153.4665543031, 9.37794514651874,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,639,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,640,".00560963647102661,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,641,"181.34634628659,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,642,45.223634624144
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,643,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,644,"inpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,645,"168216.89130846, 792.917871779501,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,646,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,647,".42367074157994e-11,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,648,"3695.7133432541,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,649,01.268527953801
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,650,"), true);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,653,ublic void testMinpackWatson()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,654,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,656,"inpackTest(new WatsonFunction(6, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,657,".47722557505166, 0.0478295939097601,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,658,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,659,"0.0157249615083782, 1.01243488232965,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,660,"0.232991722387673,  1.26043101102818,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,661,"1.51373031394421,   0.99299727291842"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,662,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,663,"inpackTest(new WatsonFunction(6, 10.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,664,"433.12578950026, 0.0478295939096951,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,665,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,666,"0.0157251901386677, 1.01243485860105,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,667,"0.232991545843829,  1.26042932089163,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,668,"1.51372776706575,   0.99299573426328"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,669,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,670,"inpackTest(new WatsonFunction(6, 100.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,671,"74256.040605213, 0.047829593911544,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,672,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,673,"0.0157247019712586, 1.01243490925658,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,674,"0.232991922761641,  1.26043292929555,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,675,"1.51373320452707,   0.99299901922322"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,676,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,678,"inpackTest(new WatsonFunction(9, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,679,".47722557505166, 0.00118311459212420,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,680,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,681,"0.153070644166722e-4, 0.999789703934597,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,682,".0147639634910978,   0.146342330145992,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,683,".00082109454817,    -2.61773112070507,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,684,".10440313943354,    -3.14361226236241,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,685,.05262640378759
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,686,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,687,"inpackTest(new WatsonFunction(9, 10.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,688,"2088.127069307, 0.00118311459212513,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,689,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,690,"0.153071334849279e-4, 0.999789703941234,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,691,".0147639629786217,   0.146342334818836,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,692,".00082107321386,    -2.61773107084722,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,693,".10440307655564,    -3.14361222178686,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,694,.05262639322589
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,695,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,696,"inpackTest(new WatsonFunction(9, 100.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,697,"269109.29043834, 0.00118311459212384,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,698,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,699,"0.153069523352176e-4, 0.999789703958371,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,700,".0147639625185392,   0.146342341096326,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,701,".00082104729164,    -2.61773101573645,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,702,".10440301427286,    -3.14361218602503,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,703,.05262638516774
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,704,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,706,"inpackTest(new WatsonFunction(12, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,707,".47722557505166, 0.217310402535861e-4,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,708,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,709,"0.660266001396382e-8, 1.00000164411833,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,710,"0.000563932146980154, 0.347820540050756,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,711,"0.156731500244233,    1.05281515825593,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,712,"3.24727109519451,     7.2884347837505,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,713,"10.271848098614,       9.07411353715783,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,714,"4.54137541918194,     1.01201187975044"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,715,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,716,"inpackTest(new WatsonFunction(12, 10.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,717,"9220.7589790951, 0.217310402518509e-4,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,718,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,719,"0.663710223017410e-8, 1.00000164411787,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,720,"0.000563932208347327, 0.347820540486998,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,721,"0.156731503955652,    1.05281517654573,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,722,"3.2472711515214,      7.28843489430665,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,723,"10.2718482369638,      9.07411364383733,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,724,"4.54137546533666,     1.01201188830857"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,725,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,726,"inpackTest(new WatsonFunction(12, 100.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,727,"018918.04462367, 0.217310402539845e-4,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,728,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,729,"0.663806046485249e-8, 1.00000164411786,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,730,"0.000563932210324959, 0.347820540503588,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,731,"0.156731504091375,    1.05281517718031,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,732,"3.24727115337025,     7.28843489775302,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,733,"10.2718482410813,      9.07411364688464,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,734,"4.54137546660822,     1.0120118885369"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,735,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,739,ublic void testMinpackBox3Dimensional()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,740,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,741,"inpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,742,"2.1115837449572), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,745,ublic void testMinpackJennrichSampson()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,746,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,747,"inpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,748,"4.5856498144943, 11.1517793413499,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,749,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,750,".257819926636811, 0.257829976764542"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,751,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,754,ublic void testMinpackBrownDennis()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,755,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,756,"inpackTest(new BrownDennisFunction(20,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,757,"ew double[] { 25.0, 5.0, -5.0, -1.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,758,"815.43839161816, 292.954288244866,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,759,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,760,"11.59125141003, 13.2024883984741,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,761,"0.403574643314272, 0.236736269844604"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,762,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,763,"inpackTest(new BrownDennisFunction(20,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,764,"ew double[] { 250.0, 50.0, -50.0, -10.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,765,"55073.354173069, 292.954270581415,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,766,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,767,"11.5959274272203, 13.2041866926242,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,768,"0.403417362841545, 0.236771143410386"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,769,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,770,"inpackTest(new BrownDennisFunction(20,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,771,"ew double[] { 2500.0, 500.0, -500.0, -100.0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,772,"1211252.2338581, 292.954306151134,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,773,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,774,"11.5902596937374, 13.2020628854665,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,775,"0.403688070279258, 0.236665033746463"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,776,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,779,ublic void testMinpackChebyquad()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,780,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,781,"inpackTest(new ChebyquadFunction(1, 8, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,782,".88623796907732, 1.88623796907732,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,783,"ew double[] { 0.5 }), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,784,"inpackTest(new ChebyquadFunction(1, 8, 10.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,785,"383344372.34005, 1.88424820499951,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,786,"ew double[] { 0.9817314924684 }), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,787,"inpackTest(new ChebyquadFunction(1, 8, 100.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,788,".118088726698392e19, 1.88424820499347,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,789,"ew double[] { 0.9817314852934 }), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,790,"inpackTest(new ChebyquadFunction(8, 8, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,791,".196513862833975, 0.0593032355046727,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,792,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,793,".0431536648587336, 0.193091637843267,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,794,".266328593812698,  0.499999334628884,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,795,".500000665371116,  0.733671406187302,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,796,".806908362156733,  0.956846335141266"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,797,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,798,"inpackTest(new ChebyquadFunction(9, 9, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,799,".16994993465202, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,800,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,801,".0442053461357828, 0.199490672309881,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,802,".23561910847106,   0.416046907892598,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,803,".5,                0.583953092107402,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,804,".764380891528940,  0.800509327690119,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,805,.955794653864217
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,806,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,807,"inpackTest(new ChebyquadFunction(10, 10, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,808,".183747831178711, 0.0806471004038253,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,809,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,810,".0596202671753563, 0.166708783805937,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,811,".239171018813509,  0.398885290346268,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,812,".398883667870681,  0.601116332129320,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,813,".60111470965373,   0.760828981186491,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,814,".833291216194063,  0.940379732824644"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,815,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,818,ublic void testMinpackBrownAlmostLinear()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,819,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,820,"inpackTest(new BrownAlmostLinearFunction(10, 0.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,821,"6.5302162063499, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,822,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,823,".979430303349862, 0.979430303349862,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,824,".979430303349862, 0.979430303349862,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,825,".979430303349862, 0.979430303349862,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,826,".979430303349862, 0.979430303349862,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,827,".979430303349862, 1.20569696650138"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,828,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,829,"inpackTest(new BrownAlmostLinearFunction(10, 5.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,830,"765624.00089211, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,831,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,832,".979430303349865, 0.979430303349865,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,833,".979430303349865, 0.979430303349865,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,834,".979430303349865, 0.979430303349865,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,835,".979430303349865, 0.979430303349865,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,836,".979430303349865, 1.20569696650135"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,837,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,838,"inpackTest(new BrownAlmostLinearFunction(10, 50.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,839,".9765625e17, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,840,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,841,".0, 1.0, 1.0, 1.0, 1.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,842,".0, 1.0, 1.0, 1.0, 1.0"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,843,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,844,"inpackTest(new BrownAlmostLinearFunction(30, 0.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,845,"3.476044467848, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,846,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,847,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,848,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,849,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,850,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,851,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,852,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,853,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,854,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,855,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,856,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,857,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,858,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,859,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,860,".997754216442807, 0.997754216442807,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,861,".997754216442807, 1.06737350671578"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,862,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,863,"inpackTest(new BrownAlmostLinearFunction(40, 0.5,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,864,"28.026364472323, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,865,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,866,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,867,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,868,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,869,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,870,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,871,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,872,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,873,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,874,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,875,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,876,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,877,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,878,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,879,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,880,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,881,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,882,".00000000000002, 1.00000000000002,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,883,.999999999999121
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,884,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,887,ublic void testMinpackOsborne1()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,888,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,889,"inpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,890,".937564021037838, 0.00739249260904843,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,891,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,892,".375410049244025, 1.93584654543108,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,893,"1.46468676748716, 0.0128675339110439,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,894,.0221227011813076
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,895,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,898,ublic void testMinpackOsborne2()
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,899,hrows EstimationException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,901,inpackTest(new Osborne2Function(new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,902,".3, 0.65, 0.65, 0.7, 0.6,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,903,".0, 5.0, 7.0, 2.0, 4.5, 5.5"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,905,".44686540984712, 0.20034404483314,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,906,ew double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,907,".30997663810096,  0.43155248076,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,908,".633661261602859, 0.599428560991695,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,909,".754179768272449, 0.904300082378518,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,910,".36579949521007, 4.82373199748107,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,911,".39868475104871, 4.56887554791452,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,912,.67534206273052
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,913,"), false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,916,"rivate void minpackTest(MinpackFunction function, boolean exceptionExpected) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,917,evenbergMarquardtEstimator estimator = new LevenbergMarquardtEstimator();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,918,stimator.setMaxCostEval(100 * (function.getN() + 1));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,919,stimator.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,920,stimator.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,921,stimator.setOrthoTolerance(2.22044604926e-16);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,922,ssertTrue(function.checkTheoreticalStartCost(estimator.getRMS(function)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,923,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,924,stimator.estimate(function);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,925,ssertFalse(exceptionExpected);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,926, catch (EstimationException lsse) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,927,ssertTrue(exceptionExpected);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,929,ssertTrue(function.checkTheoreticalMinCost(estimator.getRMS(function)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,930,ssertTrue(function.checkTheoreticalMinParams());
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1106,rivate static abstract class MinpackFunction implements EstimationProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1108,"rotected MinpackFunction(int m,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1109,"ouble[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1110,"ouble   theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1111,"ouble   theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1112,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1113,his.m = m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1114,his.n = startParams.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1115,arameters = new EstimatedParameter[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1116,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1117,"arameters[i] = new EstimatedParameter(""p"" + i, startParams[i]);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1119,his.theoreticalStartCost = theoreticalStartCost;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1120,his.theoreticalMinCost   = theoreticalMinCost;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1121,his.theoreticalMinParams = theoreticalMinParams;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1122,his.costAccuracy         = 1.0e-8;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1123,his.paramsAccuracy       = 1.0e-5;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1126,"rotected static double[] buildArray(int n, double x) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1127,ouble[] array = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1128,"rrays.fill(array, x);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1129,eturn array;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1132,rotected void setCostAccuracy(double costAccuracy) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1133,his.costAccuracy = costAccuracy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1136,rotected void setParamsAccuracy(double paramsAccuracy) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1137,his.paramsAccuracy = paramsAccuracy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1140,ublic int getN() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1141,eturn parameters.length;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1144,ublic boolean checkTheoreticalStartCost(double rms) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1145,ouble threshold = costAccuracy * (1.0 + theoreticalStartCost);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1146,eturn Math.abs(Math.sqrt(m) * rms - theoreticalStartCost) <= threshold;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1149,ublic boolean checkTheoreticalMinCost(double rms) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1150,ouble threshold = costAccuracy * (1.0 + theoreticalMinCost);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1151,eturn Math.abs(Math.sqrt(m) * rms - theoreticalMinCost) <= threshold;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1154,ublic boolean checkTheoreticalMinParams() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1155,f (theoreticalMinParams != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1156,or (int i = 0; i < theoreticalMinParams.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1157,ouble mi = theoreticalMinParams[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1158,ouble vi = parameters[i].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1159,f (Math.abs(mi - vi) > (paramsAccuracy * (1.0 + Math.abs(mi)))) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1160,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1164,eturn true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1167,ublic WeightedMeasurement[] getMeasurements() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1168,eightedMeasurement[] measurements = new WeightedMeasurement[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1169,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1170,easurements[i] = new MinpackMeasurement(i);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1172,eturn measurements;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1175,ublic EstimatedParameter[] getUnboundParameters() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1176,eturn parameters;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1179,ublic EstimatedParameter[] getAllParameters() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1180,eturn parameters;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1183,rotected abstract double[][] getJacobian();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1185,rotected abstract double[] getResiduals();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1187,rivate class MinpackMeasurement extends WeightedMeasurement {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1189,ublic MinpackMeasurement(int index) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1190,"uper(1.0, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1191,his.index = index;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1194,ublic double getTheoreticalValue() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1195,/ this is obviously NOT efficient as we recompute the whole vector
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1196,"/ each time we need only one element, but it is only for test"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1197,/ purposes and is simpler to check.
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1198,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1199,eturn getResiduals()[index];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1202,ublic double getPartial(EstimatedParameter parameter) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1203,/ this is obviously NOT efficient as we recompute the whole jacobian
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1204,"/ each time we need only one element, but it is only for test"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1205,/ purposes and is simpler to check.
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1206,"/ This implementation should NOT be taken as an example, it is ugly!"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1207,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1208,f (parameter == parameters[j]) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1209,eturn getJacobian()[index][j];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1212,eturn 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1215,rivate int index;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1216,rivate static final long serialVersionUID = 1L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1220,rotected int                  n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1221,rotected int                  m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1222,rotected EstimatedParameter[] parameters;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1223,rotected double               theoreticalStartCost;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1224,rotected double               theoreticalMinCost;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1225,rotected double[]             theoreticalMinParams;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1226,rotected double               costAccuracy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1227,rotected double               paramsAccuracy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1231,rivate static class LinearFullRankFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1233,"ublic LinearFullRankFunction(int m, int n, double x0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1234,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1235,ouble theoreticalMinCost) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1236,"uper(m, buildArray(n, x0), theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1237,"heoreticalMinCost, buildArray(n, -1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1240,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1241,ouble t = 2.0 / m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1242,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1243,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1244,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1245,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1246,acobian[i][j] = (i == j) ? (1 - t) : -t;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1249,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1252,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1253,ouble sum = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1254,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1255,um += parameters[i].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1257,ouble t  = 1 + 2 * sum / m;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1258,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1259,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1260,[i] = parameters[i].getEstimate() - t;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1262,"rrays.fill(f, n, m, -t);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1263,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1268,rivate static class LinearRank1Function extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1270,"ublic LinearRank1Function(int m, int n, double x0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1271,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1272,ouble theoreticalMinCost) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1273,"uper(m, buildArray(n, x0), theoreticalStartCost, theoreticalMinCost, null);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1276,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1277,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1278,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1279,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1280,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1281,acobian[i][j] = (i + 1) * (j + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1284,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1287,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1288,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1289,ouble sum = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1290,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1291,um += (i + 1) * parameters[i].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1293,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1294,[i] = (i + 1) * sum - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1296,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1301,rivate static class LinearRank1ZeroColsAndRowsFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1303,"ublic LinearRank1ZeroColsAndRowsFunction(int m, int n, double x0) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1304,"uper(m, buildArray(n, x0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1305,"ath.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1306,"ath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1307,ull);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1310,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1311,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1312,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1313,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1314,acobian[i][0] = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1315,or (int j = 1; j < (n - 1); ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1316,f (i == 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1317,acobian[i][j] = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1318, else if (i != (m - 1)) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1319,acobian[i][j] = i * (j + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1320, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1321,acobian[i][j] = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1324,acobian[i][n - 1] = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1326,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1329,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1330,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1331,ouble sum = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1332,or (int i = 1; i < (n - 1); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1333,um += (i + 1) * parameters[i].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1335,or (int i = 0; i < (m - 1); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1336,[i] = i * sum - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1338,[m - 1] = -1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1339,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1344,rivate static class RosenbrockFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1346,"ublic RosenbrockFunction(double[] startParams, double theoreticalStartCost) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1347,"uper(2, startParams, theoreticalStartCost, 0.0, buildArray(2, 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1350,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1351,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1352,"eturn new double[][] { { -20 * x1, 10 }, { -1, 0 } };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1355,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1356,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1357,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1358,"eturn new double[] { 10 * (x2 - x1 * x1), 1 - x1 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1363,rivate static class HelicalValleyFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1365,"ublic HelicalValleyFunction(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1366,ouble theoreticalStartCost) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1367,"uper(3, startParams, theoreticalStartCost, 0.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1368,"ew double[] { 1.0, 0.0, 0.0 });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1371,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1372,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1373,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1374,ouble tmpSquare = x1 * x1 + x2 * x2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1375,ouble tmp1 = twoPi * tmpSquare;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1376,ouble tmp2 = Math.sqrt(tmpSquare);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1377,eturn new double[][] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1378,"  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1379," 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1380," 0, 0, 1 }"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1384,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1385,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1386,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1387,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1388,ouble tmp1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1389,f (x1 == 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1390,mp1 = (x2 >= 0) ? 0.25 : -0.25;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1391, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1392,mp1 = Math.atan(x2 / x1) / twoPi;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1393,f (x1 < 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1394,mp1 += 0.5;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1397,ouble tmp2 = Math.sqrt(x1 * x1 + x2 * x2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1398,eturn new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1399,"0.0 * (x3 - 10 * tmp1),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1400,"0.0 * (tmp2 - 1),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1401,3
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1405,rivate static final double twoPi = 2.0 * Math.PI;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1409,rivate static class PowellSingularFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1411,"ublic PowellSingularFunction(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1412,ouble theoreticalStartCost) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1413,"uper(4, startParams, theoreticalStartCost, 0.0, buildArray(4, 0.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1416,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1417,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1418,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1419,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1420,ouble x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1421,eturn new double[][] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1422," 1, 10, 0, 0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1423," 0, 0, sqrt5, -sqrt5 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1424," 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1425," 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1429,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1430,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1431,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1432,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1433,ouble x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1434,eturn new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1435,"1 + 10 * x2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1436,"qrt5 * (x3 - x4),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1437,"x2 - 2 * x3) * (x2 - 2 * x3),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1438,qrt10 * (x1 - x4) * (x1 - x4)
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1442,rivate static final double sqrt5  = Math.sqrt( 5.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1443,rivate static final double sqrt10 = Math.sqrt(10.0);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1447,rivate static class FreudensteinRothFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1449,"ublic FreudensteinRothFunction(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1450,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1451,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1452,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1453,"uper(2, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1454,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1457,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1458,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1459,eturn new double[][] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1460," 1, x2 * (10 - 3 * x2) -  2 },"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1461," 1, x2 * ( 2 + 3 * x2) - 14, }"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1465,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1466,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1467,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1468,eturn new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1469,"13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1470,29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1476,rivate static class BardFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1478,"ublic BardFunction(double x0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1479,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1480,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1481,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1482,"uper(15, buildArray(3, x0), theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1483,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1486,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1487,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1488,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1489,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1490,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1491,ouble tmp1 = i  + 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1492,ouble tmp2 = 15 - i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1493,ouble tmp3 = (i <= 7) ? tmp1 : tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1494,ouble tmp4 = x2 * tmp2 + x3 * tmp3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1495,mp4 *= tmp4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1496,"acobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1498,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1501,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1502,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1503,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1504,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1505,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1506,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1507,ouble tmp1 = i + 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1508,ouble tmp2 = 15 - i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1509,ouble tmp3 = (i <= 7) ? tmp1 : tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1510,[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1512,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1515,rivate static final double[] y = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1516,".14, 0.18, 0.22, 0.25, 0.29,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1517,".32, 0.35, 0.39, 0.37, 0.58,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1518,".73, 0.96, 1.34, 2.10, 4.39"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1523,rivate static class KowalikOsborneFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1525,"ublic KowalikOsborneFunction(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1526,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1527,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1528,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1529,"uper(11, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1530,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1531,f (theoreticalStartCost > 20.0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1532,etCostAccuracy(2.0e-4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1533,etParamsAccuracy(5.0e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1537,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1538,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1539,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1540,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1541,ouble   x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1542,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1543,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1544,ouble tmp = v[i] * (v[i] + x3) + x4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1545,ouble j1  = -v[i] * (v[i] + x2) / tmp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1546,ouble j2  = -v[i] * x1 / tmp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1547,ouble j3  = j1 * j2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1548,ouble j4  = j3 / v[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1549,"acobian[i] = new double[] { j1, j2, j3, j4 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1551,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1554,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1555,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1556,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1557,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1558,ouble x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1559,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1560,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1561,[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1563,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1566,rivate static final double[] v = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1567,".0, 2.0, 1.0, 0.5, 0.25, 0.167, 0.125, 0.1, 0.0833, 0.0714, 0.0625"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1570,rivate static final double[] y = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1571,".1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1572,".0456, 0.0342, 0.0323, 0.0235, 0.0246"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1577,rivate static class MeyerFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1579,"ublic MeyerFunction(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1580,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1581,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1582,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1583,"uper(16, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1584,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1585,f (theoreticalStartCost > 1.0e6) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1586,etCostAccuracy(7.0e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1587,etParamsAccuracy(2.0e-2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1591,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1592,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1593,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1594,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1595,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1596,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1597,ouble temp = 5.0 * (i + 1) + 45.0 + x3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1598,ouble tmp1 = x2 / temp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1599,ouble tmp2 = Math.exp(tmp1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1600,ouble tmp3 = x1 * tmp2 / temp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1601,"acobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1603,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1606,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1607,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1608,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1609,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1610,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1611,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1612,[i] = x1 * Math.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1614,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1617,rivate static final double[] y = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1618,"4780.0, 28610.0, 23650.0, 19630.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1619,"6370.0, 13720.0, 11540.0,  9744.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1620,"261.0,  7030.0,  6005.0,  5147.0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1621,"427.0,  3820.0,  3307.0,  2872.0"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1626,rivate static class WatsonFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1628,"ublic WatsonFunction(int n, double x0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1629,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1630,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1631,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1632,"uper(31, buildArray(n, x0), theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1633,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1636,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1638,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1640,or (int i = 0; i < (m - 2); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1641,ouble div = (i + 1) / 29.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1642,ouble s2  = 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1643,ouble dx  = 1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1644,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1645,2 += dx * parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1646,x *= div;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1648,ouble temp= 2 * div * s2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1649,x = 1.0 / div;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1650,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1651,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1652,acobian[i][j] = dx * (j - temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1653,x *= div;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1657,acobian[m - 2]    = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1658,acobian[m - 2][0] = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1660,acobian[m - 1]   = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1661,acobian[m - 1][0]= -2 * parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1662,acobian[m - 1][1]= 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1664,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1668,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1669,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1670,or (int i = 0; i < (m - 2); ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1671,ouble div = (i + 1) / 29.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1672,ouble s1 = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1673,ouble dx = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1674,or (int j = 1; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1675,1 += j * dx * parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1676,x *= div;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1678,ouble s2 =0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1679,x =1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1680,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1681,2 += dx * parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1682,x *= div;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1684,[i] = s1 - s2 * s2 - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1687,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1688,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1689,[m - 2] = x1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1690,[m - 1] = x2 - x1 * x1 - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1692,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1698,rivate static class Box3DimensionalFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1700,"ublic Box3DimensionalFunction(int m, double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1701,ouble theoreticalStartCost) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1702,"uper(m, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1703,".0, new double[] { 1.0, 10.0, 1.0 });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1706,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1707,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1708,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1709,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1710,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1711,ouble tmp = (i + 1) / 10.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1712,acobian[i] = new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1713,"tmp * Math.exp(-tmp * x1),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1714,"mp * Math.exp(-tmp * x2),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1715,ath.exp(-i - 1) - Math.exp(-tmp)
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1718,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1721,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1722,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1723,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1724,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1725,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1726,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1727,ouble tmp = (i + 1) / 10.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1728,[i] = Math.exp(-tmp * x1) - Math.exp(-tmp * x2)
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1729, (Math.exp(-i - 1) - Math.exp(-tmp)) * x3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1731,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1736,rivate static class JennrichSampsonFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1738,"ublic JennrichSampsonFunction(int m, double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1739,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1740,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1741,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1742,"uper(m, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1743,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1746,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1747,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1748,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1749,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1750,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1751,ouble t = i + 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1752,"acobian[i] = new double[] { -t * Math.exp(t * x1), -t * Math.exp(t * x2) };"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1754,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1757,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1758,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1759,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1760,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1761,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1762,ouble temp = i + 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1763,[i] = 2 + 2 * temp - Math.exp(temp * x1) - Math.exp(temp * x2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1765,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1770,rivate static class BrownDennisFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1772,"ublic BrownDennisFunction(int m, double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1773,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1774,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1775,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1776,"uper(m, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1777,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1780,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1781,ouble   x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1782,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1783,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1784,ouble   x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1785,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1786,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1787,ouble temp = (i + 1) / 5.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1788,ouble ti   = Math.sin(temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1789,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1790,ouble tmp2 = x3 + ti   * x4 - Math.cos(temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1791,acobian[i] = new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1792," * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1795,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1798,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1799,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1800,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1801,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1802,ouble x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1803,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1804,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1805,ouble temp = (i + 1) / 5.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1806,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1807,ouble tmp2 = x3 + Math.sin(temp) * x4 - Math.cos(temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1808,[i] = tmp1 * tmp1 + tmp2 * tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1810,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1815,rivate static class ChebyquadFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1817,"rivate static double[] buildChebyquadArray(int n, double factor) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1818,ouble[] array = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1819,ouble inv = factor / (n + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1820,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1821,rray[i] = (i + 1) * inv;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1823,eturn array;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1826,"ublic ChebyquadFunction(int n, int m, double factor,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1827,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1828,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1829,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1830,"uper(m, buildChebyquadArray(n, factor), theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1831,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1834,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1836,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1837,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1838,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1841,ouble dx = 1.0 / n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1842,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1843,ouble tmp1 = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1844,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1845,ouble temp = 2 * tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1846,ouble tmp3 = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1847,ouble tmp4 = 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1848,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1849,acobian[i][j] = dx * tmp4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1850,ouble ti = 4 * tmp2 + temp * tmp4 - tmp3;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1851,mp3 = tmp4;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1852,mp4 = ti;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1853,i   = temp * tmp2 - tmp1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1854,mp1 = tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1855,mp2 = ti;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1859,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1863,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1865,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1867,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1868,ouble tmp1 = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1869,ouble tmp2 = 2 * parameters[j].getEstimate() - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1870,ouble temp = 2 * tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1871,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1872,[i] += tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1873,ouble ti = temp * tmp2 - tmp1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1874,mp1 = tmp2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1875,mp2 = ti;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1879,ouble dx = 1.0 / n;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1880,oolean iev = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1881,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1882,[i] *= dx;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1883,f (iev) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1884,[i] += 1.0 / (i * (i + 2));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1886,ev = ! iev;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1889,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1895,rivate static class BrownAlmostLinearFunction extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1897,"ublic BrownAlmostLinearFunction(int m, double factor,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1898,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1899,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1900,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1901,"uper(m, buildArray(m, factor), theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1902,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1905,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1906,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1907,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1908,acobian[i] = new double[n];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1911,ouble prod = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1912,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1913,rod *= parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1914,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1915,acobian[i][j] = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1917,acobian[j][j] = 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1920,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1921,stimatedParameter vj = parameters[j];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1922,ouble temp = vj.getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1923,f (temp == 0) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1924,emp = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1925,rod = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1926,or (int k = 0; k < n; ++k) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1927,f (k != j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1928,rod *= parameters[k].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1932,acobian[n - 1][j] = prod / temp;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1935,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1939,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1940,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1941,ouble sum  = -(n + 1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1942,ouble prod = 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1943,or (int j = 0; j < n; ++j) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1944,um  += parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1945,rod *= parameters[j].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1947,or (int i = 0; i < n; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1948,[i] = parameters[i].getEstimate() + sum;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1950,[n - 1] = prod - 1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1951,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1956,rivate static class Osborne1Function extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1958,"ublic Osborne1Function(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1959,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1960,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1961,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1962,"uper(33, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1963,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1966,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1967,ouble   x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1968,ouble   x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1969,ouble   x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1970,ouble   x5 = parameters[4].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1971,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1972,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1973,ouble temp = 10.0 * i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1974,ouble tmp1 = Math.exp(-temp * x4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1975,ouble tmp2 = Math.exp(-temp * x5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1976,acobian[i] = new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1977,"1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1980,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1983,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1984,ouble x1 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1985,ouble x2 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1986,ouble x3 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1987,ouble x4 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1988,ouble x5 = parameters[4].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1989,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1990,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1991,ouble temp = 10.0 * i;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1992,ouble tmp1 = Math.exp(-temp * x4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1993,ouble tmp2 = Math.exp(-temp * x5);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1994,[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1996,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,1999,rivate static final double[] y = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2000,".844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.850, 0.818, 0.784, 0.751,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2001,".718, 0.685, 0.658, 0.628, 0.603, 0.580, 0.558, 0.538, 0.522, 0.506, 0.490,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2002,".478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.420, 0.414, 0.411, 0.406"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2007,rivate static class Osborne2Function extends MinpackFunction {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2009,"ublic Osborne2Function(double[] startParams,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2010,"ouble theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2011,"ouble theoreticalMinCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2012,ouble[] theoreticalMinParams) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2013,"uper(65, startParams, theoreticalStartCost,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2014,"heoreticalMinCost, theoreticalMinParams);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2017,rotected double[][] getJacobian() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2018,ouble   x01 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2019,ouble   x02 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2020,ouble   x03 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2021,ouble   x04 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2022,ouble   x05 = parameters[4].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2023,ouble   x06 = parameters[5].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2024,ouble   x07 = parameters[6].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2025,ouble   x08 = parameters[7].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2026,ouble   x09 = parameters[8].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2027,ouble   x10 = parameters[9].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2028,ouble   x11 = parameters[10].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2029,ouble[][] jacobian = new double[m][];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2030,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2031,ouble temp = i / 10.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2032,ouble tmp1 = Math.exp(-x05 * temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2033,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2034,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2035,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2036,acobian[i] = new double[] {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2037,"tmp1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2038,"tmp2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2039,"tmp3,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2040,"tmp4,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2041,"emp * x01 * tmp1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2042,"02 * (temp - x09) * (temp - x09) * tmp2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2043,"03 * (temp - x10) * (temp - x10) * tmp3,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2044,"04 * (temp - x11) * (temp - x11) * tmp4,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2045,"2 * x02 * x06 * (temp - x09) * tmp2,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2046,"2 * x03 * x07 * (temp - x10) * tmp3,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2047,2 * x04 * x08 * (temp - x11) * tmp4
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2050,eturn jacobian;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2053,rotected double[] getResiduals() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2054,ouble x01 = parameters[0].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2055,ouble x02 = parameters[1].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2056,ouble x03 = parameters[2].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2057,ouble x04 = parameters[3].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2058,ouble x05 = parameters[4].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2059,ouble x06 = parameters[5].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2060,ouble x07 = parameters[6].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2061,ouble x08 = parameters[7].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2062,ouble x09 = parameters[8].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2063,ouble x10 = parameters[9].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2064,ouble x11 = parameters[10].getEstimate();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2065,ouble[] f = new double[m];
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2066,or (int i = 0; i < m; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2067,ouble temp = i / 10.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2068,ouble tmp1 = Math.exp(-x05 * temp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2069,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2070,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2071,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2072,[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2074,eturn f;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2077,rivate static final double[] y = {
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2078,".366, 1.191, 1.112, 1.013, 0.991,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2079,".885, 0.831, 0.847, 0.786, 0.725,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2080,".746, 0.679, 0.608, 0.655, 0.616,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2081,".606, 0.602, 0.626, 0.651, 0.724,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2082,".649, 0.649, 0.694, 0.644, 0.624,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2083,".661, 0.612, 0.558, 0.533, 0.495,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2084,".500, 0.423, 0.395, 0.375, 0.372,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2085,".391, 0.396, 0.405, 0.428, 0.429,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2086,".523, 0.562, 0.607, 0.653, 0.672,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2087,".708, 0.633, 0.668, 0.645, 0.632,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2088,".591, 0.559, 0.597, 0.625, 0.739,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2089,".710, 0.729, 0.720, 0.636, 0.581,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/LevenbergMarquardtEstimatorTest.java,2090,".428, 0.292, 0.162, 0.098, 0.054"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,27,p1 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,28,p2 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,30,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,32,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,36,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,38,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,45,"eightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,47,"WeightedMeasurement m = new MyMeasurement(3.0, theoretical() + 0.1, this);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,95,rivate class MyMeasurement
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,97,private static class MyMeasurement
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,98,"ublic MyMeasurement(double weight, double measuredValue) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,100,"public MyMeasurement(double weight, double measuredValue,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,101,WeightedMeasurementTest testInstance) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,103,this.testInstance = testInstance;
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,103,eturn theoretical();
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,107,return testInstance.theoretical();
False,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,107,eturn partial(p);
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,111,return testInstance.partial(p);
True,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/estimation/WeightedMeasurementTest.java,114,private transient WeightedMeasurementTest testInstance;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,24,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,32,fitter = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,77,ublic void tearOff() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,79,public void tearDown() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,81,rivate class DummyFitter
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,83,private static class DummyFitter
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,85,"uper(10, 10, 0.0, 0.0, 0.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,87,"super(10, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,100,rivate static final long serialVersionUID = -5453139487565082528L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/AbstractCurveFitterTest.java,102,private static final long serialVersionUID = 4016396219767783678L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,24,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,37,"armonicFitter fitter = new HarmonicFitter(20, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,38,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,38,HarmonicFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,39,new HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,48,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 1.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,49,ssertTrue(Math.abs(coeffs[1] - f.getOmega()) < 1.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,50,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,49,assertTrue(Math.abs(coeffs[0] - f.getA()) < 1.0e-13);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,50,assertTrue(Math.abs(coeffs[1] - f.getOmega()) < 1.0e-13);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,51,"assertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.0e-13);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,53,ssertTrue(Math.abs(f.valueAt(x) - fitted.valueAt(x)) < 1.0e-12);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,54,assertTrue(Math.abs(f.valueAt(x) - fitted.valueAt(x)) < 1.0e-13);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,63,"armonicFitter fitter = new HarmonicFitter(20, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,64,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,64,HarmonicFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,65,new HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,73,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 1.0e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,74,ssertTrue(Math.abs(coeffs[1] - f.getOmega()) < 3.5e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,75,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 2.0e-2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,74,assertTrue(Math.abs(coeffs[0] - f.getA()) < 7.6e-4);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,75,assertTrue(Math.abs(coeffs[1] - f.getOmega()) < 2.7e-3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,76,"assertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.3e-2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,91,"armonicFitter fitter = new HarmonicFitter(100, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,92,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,92,HarmonicFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,93,new HarmonicFitter(new LevenbergMarquardtEstimator());
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,123,ssertTrue(Math.abs(coeffs[0] - f.getA()) < 1.0e-3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,124,assertTrue(Math.abs(coeffs[0] - f.getA()) < 7.6e-4);
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,125,"ssertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 2.0e-2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,126,"assertTrue(Math.abs(coeffs[2] - center(f.getPhi(), coeffs[2])) < 1.5e-2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,145,rivate class HarmonicFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/HarmonicFitterTest.java,146,private static class HarmonicFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,24,import org.spaceroots.mantissa.estimation.Estimator;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,25,import org.spaceroots.mantissa.estimation.GaussNewtonEstimator;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,26,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,41,"olynomialFitter fitter = new PolynomialFitter(degree,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,42,"0, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,43,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,44,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,45,"new PolynomialFitter(degree, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,69,"olynomialFitter fitter = new PolynomialFitter(degree,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,70,"0, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,71,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,71,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,72,"new PolynomialFitter(degree, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,88,ublic void testUnsolvableProblem()
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,89,hrows EstimationException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,89,public void testRedundantSolvable() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,90,// Levenberg-Marquardt should handle redundant information gracefully
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,91,"checkUnsolvableProblem(new LevenbergMarquardtEstimator(), true);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,94,public void testRedundantUnsolvable() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,95,// Gauss-Newton should not be able to solve redundant information
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,96,"checkUnsolvableProblem(new GaussNewtonEstimator(10, 1.0e-7, 1.0e-7,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,97,"1.0e-10),"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,98,false);
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,101,"private void checkUnsolvableProblem(Estimator estimator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,102,boolean solvable) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,93,or (int i = 1; i <= degree; ++i) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,106,for (int i = 0; i <= degree; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,97,"olynomialFitter fitter = new PolynomialFitter(degree,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,98,"0, 1.0e-7,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,99,".0e-10, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,110,"PolynomialFitter fitter = new PolynomialFitter(degree, estimator);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,109,oolean gotIt = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,122,assertTrue(solvable || (degree == 0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,113,otIt = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,124,assertTrue((! solvable) && (degree > 0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,115,ssertTrue((degree == 0 && ! gotIt) || (degree > 0 && gotIt));
False,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,125,rivate class Polynom {
True,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/fitting/PolynomialFitterTest.java,135,private static class Polynom {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,74,ew BasicSampledFunctionIterator(new SampledFunction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,76,rivate boolean fireException = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,78,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,79,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,82,ublic ScalarValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,83,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,84,f (fireException) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,85,"hrow new FunctionException(""boom"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,87,ireException = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,88,"eturn new ScalarValuedPair(0.0, 0.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,74,new BasicSampledFunctionIterator(new ExceptionGeneratingFunction());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,115,rivate class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,98,private static class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,101,private static final long serialVersionUID = -5071329620086891960L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,129,private static class ExceptionGeneratingFunction
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,130,implements SampledFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,132,private static final long serialVersionUID = 1417147976215668305L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,133,private boolean fireException = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,135,public int size() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,136,return 2;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,139,public ScalarValuedPair samplePointAt(int i)
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,140,throws FunctionException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,141,if (fireException) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,142,"throw new FunctionException(""boom"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,144,fireException = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/BasicSampledFunctionIteratorTest.java,145,"return new ScalarValuedPair(0.0, 0.0);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,134,ew ComputableFunctionSampler(new ComputableFunction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,135,ublic double valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,136,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,137,f (x < 0.5) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,138,eturn -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,140,"hrow new FunctionException(""upper half range exception"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,134,"new ComputableFunctionSampler(new ExceptionGeneratingFunction(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,167,rivate class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,159,private static class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,162,private static final long serialVersionUID = -7173012970400285826L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,184,private static class ExceptionGeneratingFunction
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,185,implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,186,private static final long serialVersionUID = 7853080602731012102L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,187,public double valueAt(double x)
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,188,throws FunctionException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,189,if (x < 0.5) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,190,return -x;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/scalar/ComputableFunctionSamplerTest.java,192,"throw new FunctionException(""upper half range exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,41,ssertTrue(Math.abs(pair.getX()    - 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,42,ssertTrue(Math.abs(pair.getY()[0] + 0.1 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,43,ssertTrue(Math.abs(pair.getY()[1] + 0.2 * i) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,41,assertTrue(Math.abs(pair.x    - 0.1 * i) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,42,assertTrue(Math.abs(pair.y[0] + 0.1 * i) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,43,assertTrue(Math.abs(pair.y[1] + 0.2 * i) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,75,ew BasicSampledFunctionIterator(new SampledFunction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,77,rivate boolean fireException = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,79,ublic int size() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,80,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,83,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,84,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,87,ublic VectorialValuedPair samplePointAt(int i)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,88,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,89,f (fireException) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,90,"hrow new FunctionException(""boom"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,92,ireException = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,93,"eturn new VectorialValuedPair(0.0, null);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,75,new BasicSampledFunctionIterator(new ExceptionGeneratingFunction());
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,119,rivate class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,99,private static class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,102,private static final long serialVersionUID = -6049535144225908344L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,138,private static class ExceptionGeneratingFunction
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,139,implements SampledFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,141,private static final long serialVersionUID = 3750401068561053681L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,142,private boolean fireException = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,144,public int size() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,145,return 2;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,148,public int getDimension() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,149,return 2;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,152,public VectorialValuedPair samplePointAt(int i)
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,153,throws FunctionException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,154,if (fireException) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,155,"throw new FunctionException(""boom"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,157,fireException = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/BasicSampledFunctionIteratorTest.java,158,"return new VectorialValuedPair(0.0, new double[] { 0, 1 });"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,39,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()     - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,40,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[0]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,41,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[1]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,42,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()     - 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,43,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[0]  + 0.495) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,44,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[1]  + 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,45,ssertTrue(Math.abs(sampler.samplePointAt(10).getX()    - 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,46,ssertTrue(Math.abs(sampler.samplePointAt(10).getY()[0] + 0.990) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,47,ssertTrue(Math.abs(sampler.samplePointAt(10).getY()[1] + 1.980) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,39,assertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,40,assertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,41,assertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,42,assertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.495) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,43,assertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.495) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,44,assertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 0.990) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,45,assertTrue(Math.abs(sampler.samplePointAt(10).x    - 0.990) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,46,assertTrue(Math.abs(sampler.samplePointAt(10).y[0] + 0.990) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,47,assertTrue(Math.abs(sampler.samplePointAt(10).y[1] + 1.980) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,62,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()     - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,63,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[0]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,64,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[1]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,65,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()     - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,66,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[0]  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,67,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[1]  + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,68,ssertTrue(Math.abs(sampler.samplePointAt(10).getX()    - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,69,ssertTrue(Math.abs(sampler.samplePointAt(10).getY()[0] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,70,ssertTrue(Math.abs(sampler.samplePointAt(10).getY()[1] + 2.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,62,assertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,63,assertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,64,assertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,65,assertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.5) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,66,assertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.5) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,67,assertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,68,assertTrue(Math.abs(sampler.samplePointAt(10).x    - 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,69,assertTrue(Math.abs(sampler.samplePointAt(10).y[0] + 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,70,assertTrue(Math.abs(sampler.samplePointAt(10).y[1] + 2.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,86,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()     - 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,87,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[0]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,88,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[1]  + 0.000) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,89,ssertTrue(Math.abs(sampler.samplePointAt(5).getX()     - 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,90,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[0]  + 0.415) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,91,ssertTrue(Math.abs(sampler.samplePointAt(5).getY()[1]  + 0.830) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,92,ssertTrue(Math.abs(sampler.samplePointAt(11).getX()    - 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,93,ssertTrue(Math.abs(sampler.samplePointAt(11).getY()[0] + 0.913) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,94,ssertTrue(Math.abs(sampler.samplePointAt(11).getY()[1] + 1.826) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,86,assertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,87,assertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,88,assertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.000) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,89,assertTrue(Math.abs(sampler.samplePointAt(5).x     - 0.415) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,90,assertTrue(Math.abs(sampler.samplePointAt(5).y[0]  + 0.415) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,91,assertTrue(Math.abs(sampler.samplePointAt(5).y[1]  + 0.830) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,92,assertTrue(Math.abs(sampler.samplePointAt(11).x    - 0.913) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,93,assertTrue(Math.abs(sampler.samplePointAt(11).y[0] + 0.913) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,94,assertTrue(Math.abs(sampler.samplePointAt(11).y[1] + 1.826) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,110,ssertTrue(Math.abs(sampler.samplePointAt(0).getX()     - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,111,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[0]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,112,ssertTrue(Math.abs(sampler.samplePointAt(0).getY()[1]  + 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,113,ssertTrue(Math.abs(sampler.samplePointAt(6).getX()     - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,114,ssertTrue(Math.abs(sampler.samplePointAt(6).getY()[0]  + 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,115,ssertTrue(Math.abs(sampler.samplePointAt(6).getY()[1]  + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,116,ssertTrue(Math.abs(sampler.samplePointAt(12).getX()    - 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,117,ssertTrue(Math.abs(sampler.samplePointAt(12).getY()[0] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,118,ssertTrue(Math.abs(sampler.samplePointAt(12).getY()[1] + 2.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,110,assertTrue(Math.abs(sampler.samplePointAt(0).x     - 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,111,assertTrue(Math.abs(sampler.samplePointAt(0).y[0]  + 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,112,assertTrue(Math.abs(sampler.samplePointAt(0).y[1]  + 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,113,assertTrue(Math.abs(sampler.samplePointAt(6).x     - 0.5) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,114,assertTrue(Math.abs(sampler.samplePointAt(6).y[0]  + 0.5) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,115,assertTrue(Math.abs(sampler.samplePointAt(6).y[1]  + 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,116,assertTrue(Math.abs(sampler.samplePointAt(12).x    - 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,117,assertTrue(Math.abs(sampler.samplePointAt(12).y[0] + 1.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,118,assertTrue(Math.abs(sampler.samplePointAt(12).y[1] + 2.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,149,ew ComputableFunctionSampler(new ComputableFunction() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,151,ublic int getDimension() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,152,eturn 2;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,155,ublic double[] valueAt(double x)
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,156,hrows FunctionException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,157,f (x < 0.5) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,158,ouble[] res = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,159,es[0] = -x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,160,es[1] = -2.0 * x;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,161,eturn res;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,163,"hrow new FunctionException(""upper half range exception"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,149,"new ComputableFunctionSampler(new ExceptionGeneratingFunction(),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,191,rivate class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,174,private static class Function
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,203,private static final long serialVersionUID = -1859103913610458563L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,207,private static class ExceptionGeneratingFunction
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,208,implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,210,public int getDimension() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,211,return 2;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,214,public double[] valueAt(double x)
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,215,throws FunctionException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,216,if (x < 0.5) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,217,double[] res = new double[2];
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,218,res[0] = -x;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,219,res[1] = -2.0 * x;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,220,return res;
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,222,"throw new FunctionException(""upper half range exception"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/ComputableFunctionSamplerTest.java,225,private static final long serialVersionUID = 2849780376767626912L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,34,ssertTrue(Math.abs(pair.getX()    - 1.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,35,ssertTrue(Math.abs(pair.getY()[0] + 8.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,36,ssertTrue(Math.abs(pair.getY()[1] + 3.2) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,34,assertTrue(Math.abs(pair.x    - 1.2) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,35,assertTrue(Math.abs(pair.y[0] + 8.4) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,36,assertTrue(Math.abs(pair.y[1] + 3.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,44,ectorialValuedPair pair2 = new VectorialValuedPair(pair1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,45,ssertTrue(Math.abs(pair2.getX()    - pair1.getX())    < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,46,ssertTrue(Math.abs(pair2.getY()[0] - pair1.getY()[0]) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,47,ssertTrue(Math.abs(pair2.getY()[1] - pair1.getY()[1]) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,48,ssertTrue(Math.abs(pair2.getX()    - 1.2)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,49,ssertTrue(Math.abs(pair2.getY()[0] + 8.4)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,50,ssertTrue(Math.abs(pair2.getY()[1] + 3.2)        < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,44,"VectorialValuedPair pair2 = new VectorialValuedPair(pair1.x,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,45,pair1.y);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,46,assertTrue(Math.abs(pair2.x    - pair1.x)    < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,47,assertTrue(Math.abs(pair2.y[0] - pair1.y[0]) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,48,assertTrue(Math.abs(pair2.y[1] - pair1.y[1]) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,49,assertTrue(Math.abs(pair2.x    - 1.2)        < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,50,assertTrue(Math.abs(pair2.y[0] + 8.4)        < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/functions/vectorial/VectorialValuedPairTest.java,51,assertTrue(Math.abs(pair2.y[1] + 3.2)        < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,62," = new Rotation(new Vector3D(0, 0, 0), 2 * Math.PI / 3);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,62,"new Rotation(new Vector3D(0, 0, 0), 2 * Math.PI / 3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,84,"heckVector(r.applyTo(Vector3D.multiply(v.getNorm(), u)),"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,85,"ector3D.multiply(u.getNorm(), v));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,84,"checkVector(r.applyTo(u.multiply(v.getNorm())), v.multiply(u.getNorm()));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,87,"heckAngle(new Rotation(u, Vector3D.negate(u)).getAngle(), Math.PI);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,86,"checkAngle(new Rotation(u, u.negate()).getAngle(), Math.PI);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,99,"heckVector(r.applyTo(Vector3D.plusJ), Vector3D.negate(Vector3D.plusI));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,98,"checkVector(r.applyTo(Vector3D.plusJ), Vector3D.minusI);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,101," = new Rotation(u1, u2, Vector3D.negate(u1), Vector3D.negate(u2));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,100,"r = new Rotation(u1, u2, u1.negate(), u2.negate());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,106,"heckVector(axis, Vector3D.negate(Vector3D.plusK));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,105,"checkVector(axis, Vector3D.minusK);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,190,"ail(""an exception should have been thrown"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,189,"fail(""got "" + r + "", should have caught an exception"");"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,191,// expected
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,332,"ssertTrue(Vector3D.subtract(v1, v2).getNorm() < 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/RotationTest.java,332,assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,46,"1 = Vector3D.subtract(v1, v2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,46,v1 = v1.subtract(v2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,49,"heckVector(Vector3D.subtract(v2, v1), new Vector3D(-7, -6, -5));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,49,"checkVector(v2.subtract(v1), new Vector3D(-7, -6, -5));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,56,"1 = Vector3D.add(v1, v2);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,56,v1 = v1.add(v2);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,59,"heckVector(Vector3D.add(v2, v1), new Vector3D(-5, -2, 1));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,59,"checkVector(v2.add(v1), new Vector3D(-5, -2, 1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,65," = Vector3D.multiply(3, v);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,65,v = v.multiply(3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,68,"heckVector(Vector3D.multiply(0.5, v), new Vector3D(1.5, 3, 4.5));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,68,"checkVector(v.multiply(0.5), new Vector3D(1.5, 3, 4.5));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,104,ector3D  k = Vector3D.normalize(v1);
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,104,Vector3D  k = v1.normalize();
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,107,"ector3D v2 = new Vector3D(Math.cos(1.2), k, Math.sin(1.2), i);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,106,Vector3D v2 = k.multiply(Math.cos(1.2)).add(i.multiply(Math.sin(1.2)));
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,114,"ssertTrue(Vector3D.subtract(v1, v2).getNorm() < 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,113,assertTrue(v1.subtract(v2).getNorm() < 1.0e-12);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,152,"esult = d.solve(b, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/DiagonalMatrixTest.java,152,"d.solve(b, 1.0e-10);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,57,"atrix m = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,58,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,59,eturn i + 0.01 * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,63,"heckMatrix(m, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,64,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,65,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,57,"Matrix m = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,59,"checkMatrix(m, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,72,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,73,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,74,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,64,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,89,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,90,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,91,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,77,"checkMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,98,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,99,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,100,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,82,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,116,"heckMatrix (m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,117,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,118,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,96,"checkMatrix (m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,136,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,137,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,138,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,112,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,144,ew ElementPattern() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,145,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,146,eturn 100 * i - 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,116,"new BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,152,"heckMatrix(m3, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,153,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,154,eturn 101 * i;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,120,"checkMatrix(m3, new BilinearPattern(101, 0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,162,"eneralMatrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,163,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,164,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,126,"GeneralMatrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,170,ew ElementPattern() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,171,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,172,eturn 100 * i - 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,130,"new BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,178,"heckMatrix(m1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,179,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,180,eturn 101 * i;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,134,"checkMatrix(m1, new BilinearPattern(101, 0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,198,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,199,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,200,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,150,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,206,ew ElementPattern() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,207,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,208,eturn 100 * i - 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,154,"new BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,214,"heckMatrix(m3, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,215,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,216,eturn 0.02 * j - 99 * i;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,158,"checkMatrix(m3, new BilinearPattern(-99, 0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,224,"eneralMatrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,225,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,226,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,164,"GeneralMatrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,232,ew ElementPattern() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,233,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,234,eturn 100 * i - 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,168,"new BilinearPattern(100, -0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,240,"heckMatrix(m1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,241,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,242,eturn 0.02 * j - 99 * i;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,172,"checkMatrix(m1, new BilinearPattern(-99, 0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,260,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,261,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,262,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,188,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,266,"atrix m2 = buildMatrix(m1.getColumns(), 4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,267,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,268,eturn 2 * i - j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,190,"Matrix m2 = buildMatrix(m1.getColumns(), 4, new BilinearPattern(2, -1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,274,"heckMatrix(m3, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,275,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,276,nt p = 10; // must be equal to m1.getColumns()
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,277,eturn p * ((2 * i - 0.01 *j) * (p - 1) / 2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,278, i* j
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,279, (p - 1) * (2 * p - 1) / 300.0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,194,"checkMatrix(m3, new ComplexPattern(m1.getColumns()));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,287,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,288,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,289,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,200,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,295,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,296,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,297,eturn 2.5 * (i + 0.01 * j);
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,204,"checkMatrix(m2, new BilinearPattern(2.5, 0.025));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,305,"atrix m = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,306,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,307,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,210,"Matrix m = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,313,"heckMatrix(m, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,314,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,315,eturn 2.5 * (i + 0.01 * j);
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,214,"checkMatrix(m, new BilinearPattern(2.5, 0.025));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,323,"atrix m1 = buildMatrix(5, 10, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,324,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,325,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,220,"Matrix m1 = buildMatrix(5, 10, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,334,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,335,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,336,eturn 0.01 * i + j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,227,"checkMatrix(m2, new BilinearPattern(0.01, 1.0));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,346,ublic interface ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,235,private interface ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,239,private static class BilinearPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,240,"public BilinearPattern(double coeffI, double coeffJ) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,241,this.coeffI = coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,242,this.coeffJ = coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,244,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,245,return coeffI * i + coeffJ * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,247,private final double coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,248,private final double coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,251,private static class ComplexPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,252,public ComplexPattern(int p) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,253,this.p = p;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,255,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,256,return p * ((2 * i - 0.01 *j) * (p - 1) / 2.0
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,257,- i* j
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,258,+ (p - 1) * (2 * p - 1) / 300.0);
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,260,private final int p;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,351,lementPattern pattern) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralMatrixTest.java,264,BilinearPattern pattern) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,57,"atrix m = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,58,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,59,eturn i + 0.01 * j;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,63,"heckMatrix(m, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,64,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,65,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,57,"Matrix m = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,59,"checkMatrix(m, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,72,"eneralSquareMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,73,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,74,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,64,"GeneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,89,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,90,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,91,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,77,"checkMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,98,"eneralSquareMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,99,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,100,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,82,"GeneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,116,"heckMatrix(m2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,117,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,118,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,96,"checkMatrix(m2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,125,"eneralSquareMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,126,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,127,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,101,"GeneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,131,"eneralSquareMatrix m2 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,132,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,133,eturn 2 * i - 0.03 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,103,"GeneralSquareMatrix m2 = buildMatrix(5, new BilinearPattern(2, -0.03));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,140,"heckMatrix(m1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,141,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,142,eturn 3 * i - 0.02 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,108,"checkMatrix(m1, new BilinearPattern(3, -0.02));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,149,"eneralSquareMatrix m1 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,150,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,151,eturn i + 0.01 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,113,"GeneralSquareMatrix m1 = buildMatrix(5, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,155,"eneralSquareMatrix m2 = buildMatrix(5, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,156,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,157,eturn 2 * i - 0.03 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,115,"GeneralSquareMatrix m2 = buildMatrix(5, new BilinearPattern(2, -0.03));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,164,"heckMatrix(m1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,165,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,166,eturn 0.04 * j - i;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,120,"checkMatrix(m1, new BilinearPattern(-1, 0.04));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,199,oolean gotIt = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,154,"fail(""got "" + result + "", should have caught an exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,204,otIt = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,156,// expected
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,157,} catch(Exception e) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,158,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,206,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,217,"heckMatrix(a.mul(inverse), new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,218,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,219,eturn (i == j) ? 1.0 : 0.0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,170,"checkMatrix(a.mul(inverse), new IdentityPattern());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,225,"heckMatrix(a.mul(inverse), new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,226,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,227,eturn (i == j) ? 1.0 : 0.0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,174,"checkMatrix(a.mul(inverse), new IdentityPattern());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,231,oolean gotIt = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,179,"fail(""got "" + inverse + "", should have caught an exception"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,236,otIt = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,181,// expected
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,182,} catch(Exception e) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,183,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,238,ssertTrue(gotIt);
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,246,ublic interface ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,192,private interface ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,196,private static class BilinearPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,197,"public BilinearPattern(double coeffI, double coeffJ) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,198,this.coeffI = coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,199,this.coeffJ = coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,201,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,202,return coeffI * i + coeffJ * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,204,private final double coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,205,private final double coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,208,private static class IdentityPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,209,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,210,return (i == j) ? 1.0 : 0.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,273,rivate class LinearProblem {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/GeneralSquareMatrixTest.java,237,private static class LinearProblem {
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,41,.setElement
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,42,"i, j, -1.3);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,41,"l.setElement(i, j, -1.3);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,51,"heckMatrix(l, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,52,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,53,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,50,"checkMatrix(l, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,61,"owerTriangularMatrix l1 = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,62,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,63,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,56,"LowerTriangularMatrix l1 = buildMatrix(4, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,69,"heckMatrix (l2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,70,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,71,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,60,"checkMatrix (l2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,79,"owerTriangularMatrix l1 = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,80,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,81,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,66,"LowerTriangularMatrix l1 = buildMatrix(4, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,88,"heckMatrix(l2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,89,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,90,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,71,"checkMatrix(l2, new BilinearPattern(1.0, 0.01));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,98,"owerTriangularMatrix l = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,99,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,100,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,77,"LowerTriangularMatrix l = buildMatrix(7, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,117,"owerTriangularMatrix l1 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,118,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,119,eturn 3 * i - 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,92,"LowerTriangularMatrix l1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,123,"owerTriangularMatrix l2 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,124,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,125,eturn 2 * i - 0.4 * j; }
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,94,"LowerTriangularMatrix l2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,130,"heckMatrix(l1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,131,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,132,eturn 5 * i - 0.6 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,98,"checkMatrix(l1, new BilinearPattern(5, -0.6));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,138,"owerTriangularMatrix l1 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,139,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,140,eturn 3 * i - 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,102,"LowerTriangularMatrix l1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,144,"owerTriangularMatrix l2 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,145,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,146,eturn 2 * i - 0.4 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,104,"LowerTriangularMatrix l2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,152,"heckMatrix(l1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,153,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,154,eturn i + 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,108,"checkMatrix(l1, new BilinearPattern(1, 0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,202,"esult = l.solve(b, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,154,"l.solve(b, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,190,private static class BilinearPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,191,"public BilinearPattern(double coeffI, double coeffJ) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,192,this.coeffI = coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,193,this.coeffJ = coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,195,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,196,return coeffI * i + coeffJ * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,198,private final double coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/LowerTriangularMatrixTest.java,199,private final double coeffJ;
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,49,"heckMatrix(u, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,50,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,51,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,49,"checkMatrix(u, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,59,"pperTriangularMatrix u1 = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,60,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,61,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,55,"UpperTriangularMatrix u1 = buildMatrix(4, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,67,"heckMatrix(u2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,68,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,69,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,59,"checkMatrix(u2, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,77,"pperTriangularMatrix u1 = buildMatrix(4, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,78,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,79,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,65,"UpperTriangularMatrix u1 = buildMatrix(4, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,86,"heckMatrix(u2, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,87,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,88,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,70,"checkMatrix(u2, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,96,"pperTriangularMatrix u = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,97,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,98,eturn i + 0.1 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,76,"UpperTriangularMatrix u = buildMatrix(7, new BilinearPattern(1.0, 0.1));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,115,"pperTriangularMatrix u1 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,116,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,117,eturn 3 * i - 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,91,"UpperTriangularMatrix u1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,121,"pperTriangularMatrix u2 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,122,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,123,eturn 2 * i - 0.4 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,93,"UpperTriangularMatrix u2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,129,"heckMatrix(u1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,130,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,131,eturn 5 * i - 0.6 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,97,"checkMatrix(u1, new BilinearPattern(5, -0.6));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,137,"pperTriangularMatrix u1 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,138,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,139,eturn 3 * i - 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,101,"UpperTriangularMatrix u1 = buildMatrix(7, new BilinearPattern(3, -0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,143,"pperTriangularMatrix u2 = buildMatrix(7, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,144,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,145,eturn 2 * i - 0.4 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,103,"UpperTriangularMatrix u2 = buildMatrix(7, new BilinearPattern(2, -0.4));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,151,"heckMatrix(u1, new ElementPattern() {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,152,"ublic double value(int i, int j) {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,153,eturn i + 0.2 * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,107,"checkMatrix(u1, new BilinearPattern(1, 0.2));"
False,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,202,"esult = u.solve(b, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,154,"u.solve(b, 1.0e-10);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,190,private static class BilinearPattern implements ElementPattern {
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,191,"public BilinearPattern(double coeffI, double coeffJ) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,192,this.coeffI = coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,193,this.coeffJ = coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,195,"public double value(int i, int j) {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,196,return coeffI * i + coeffJ * j;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,198,private final double coeffI;
True,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/linalg/UpperTriangularMatrixTest.java,199,private final double coeffJ;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,23,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,75,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,76,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,77,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,78,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,76,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,77,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,78,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,98,"olynomialFitter fitter = new PolynomialFitter(1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,99,"0, 1.0e-7, 1.0e-10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,100,.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,97,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,98,"new PolynomialFitter(1, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,115,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,116,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,117,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,118,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,113,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,114,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,115,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,180,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,181,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,182,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,183,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,185,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,186,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,188,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,189,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,191,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,192,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,193,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,194,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,195,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,196,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,197,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,199,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,200,"/ even with more than 1000 evaluations per period,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,201,/ RK4 is not able to integrate such an eccentric
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,202,/ orbit with a good accuracy
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,203,ssertTrue(maxError > 0.005);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,176,integ.setStepHandler(new KeplerHandler(pb));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,182,private static class KeplerHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,183,public KeplerHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,184,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,185,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,187,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,188,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,190,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,191,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,193,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,194,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,196,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,197,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,198,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,199,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,200,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,201,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,202,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,204,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,205,"// even with more than 1000 evaluations per period,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,206,// RK4 is not able to integrate such an eccentric
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,207,// orbit with a good accuracy
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,208,assertTrue(maxError > 0.005);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,211,private double maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ClassicalRungeKuttaIntegratorTest.java,212,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ContinuousOutputModelTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ContinuousOutputModelTest.java,28,pb    = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ContinuousOutputModelTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ContinuousOutputModelTest.java,29,integ = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,94,rivate class DP54SmallLastHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,94,private static class DP54SmallLastHandler implements StepHandler {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,173,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,174,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,175,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,176,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,173,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,174,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,175,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,200,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,201,rivate int nbSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,202,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,203,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,204,eturn true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,206,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,207,bSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,208,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,210,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,211,oolean isLast)
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,212,hrows DerivativeException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,214,+nbSteps;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,215,or (int a = 1; a < 10; ++a) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,217,ouble prev   = interpolator.getPreviousTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,218,ouble curr   = interpolator.getCurrentTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,219,ouble interp = ((10 - a) * prev + a * curr) / 10;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,220,nterpolator.setInterpolatedTime(interp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,222,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,223,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,224,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,225,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,226,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,227,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,228,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,231,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,232,ssertTrue(maxError < 7.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,233,ssertTrue(nbSteps < 400);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,198,integ.setStepHandler(new KeplerHandler(pb));
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,257,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,258,rivate boolean firstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,259,rivate double  minStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,260,rivate double  maxStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,261,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,262,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,264,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,265,irstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,266,inStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,267,axStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,269,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,270,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,272,ouble step = Math.abs(interpolator.getCurrentTime()
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,273, interpolator.getPreviousTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,274,f (firstTime) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,275,inStep   = Math.abs(step);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,276,axStep   = minStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,277,irstTime = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,278, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,279,f (step < minStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,280,inStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,282,f (step > maxStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,283,axStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,287,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,288,ssertTrue(minStep < (1.0 / 450.0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,289,ssertTrue(maxStep > (1.0 / 4.2));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,219,integ.setStepHandler(new VariableHandler());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,225,private static class KeplerHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,226,public KeplerHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,227,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,228,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,230,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,231,return true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,233,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,234,nbSteps = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,235,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,237,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,238,boolean isLast)
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,239,throws DerivativeException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,241,++nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,242,for (int a = 1; a < 10; ++a) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,244,double prev   = interpolator.getPreviousTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,245,double curr   = interpolator.getCurrentTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,246,double interp = ((10 - a) * prev + a * curr) / 10;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,247,interpolator.setInterpolatedTime(interp);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,249,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,250,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,251,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,252,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,253,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,254,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,255,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,258,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,259,assertTrue(maxError < 7.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,260,assertTrue(nbSteps < 400);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,263,private int nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,264,private double maxError;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,265,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,268,private static class VariableHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,269,public VariableHandler() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,270,firstTime = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,271,minStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,272,maxStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,274,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,275,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,277,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,278,firstTime = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,279,minStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,280,maxStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,282,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,283,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,285,double step = Math.abs(interpolator.getCurrentTime()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,286,- interpolator.getPreviousTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,287,if (firstTime) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,288,minStep   = Math.abs(step);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,289,maxStep   = minStep;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,290,firstTime = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,291,} else {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,292,if (step < minStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,293,minStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,295,if (step > maxStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,296,maxStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,300,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,301,assertTrue(minStep < (1.0 / 450.0));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,302,assertTrue(maxStep > (1.0 / 4.2));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,305,private boolean firstTime;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,306,private double  minStep;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince54IntegratorTest.java,307,private double  maxStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,133,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,134,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,135,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,136,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,133,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,134,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,135,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,160,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,161,rivate int nbSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,162,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,163,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,164,eturn true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,166,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,167,bSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,168,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,170,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,171,oolean isLast)
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,172,hrows DerivativeException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,174,+nbSteps;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,175,or (int a = 1; a < 10; ++a) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,177,ouble prev   = interpolator.getPreviousTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,178,ouble curr   = interpolator.getCurrentTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,179,ouble interp = ((10 - a) * prev + a * curr) / 10;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,180,nterpolator.setInterpolatedTime(interp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,182,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,183,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,184,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,185,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,186,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,187,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,188,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,191,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,192,ssertTrue(maxError < 2.4e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,193,ssertTrue(nbSteps < 150);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,158,integ.setStepHandler(new KeplerHandler(pb));
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,217,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,218,rivate boolean firstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,219,rivate double  minStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,220,rivate double  maxStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,221,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,222,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,224,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,225,irstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,226,inStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,227,axStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,229,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,230,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,232,ouble step = Math.abs(interpolator.getCurrentTime()
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,233, interpolator.getPreviousTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,234,f (firstTime) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,235,inStep   = Math.abs(step);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,236,axStep   = minStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,237,irstTime = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,238, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,239,f (step < minStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,240,inStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,242,f (step > maxStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,243,axStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,247,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,248,ssertTrue(minStep < (1.0 / 100.0));
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,249,ssertTrue(maxStep > (1.0 / 2.0));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,179,integ.setStepHandler(new VariableHandler());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,270,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,271,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,272,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,274,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,276,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,277,oolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,197,integ.setStepHandler(DummyStepHandler.getInstance());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,285,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,286,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,287,eturn true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,289,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,291,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,292,oolean isLast)
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,293,hrows DerivativeException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,294,ouble prev = interpolator.getPreviousTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,295,ouble curr = interpolator.getCurrentTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,296,nterpolator.setInterpolatedTime(0.5*(prev + curr));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,203,integ.setStepHandler(new InterpolatingStepHandler());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,224,private static class KeplerHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,225,public KeplerHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,226,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,227,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,229,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,230,return true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,232,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,233,nbSteps = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,234,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,236,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,237,boolean isLast)
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,238,throws DerivativeException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,240,++nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,241,for (int a = 1; a < 10; ++a) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,243,double prev   = interpolator.getPreviousTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,244,double curr   = interpolator.getCurrentTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,245,double interp = ((10 - a) * prev + a * curr) / 10;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,246,interpolator.setInterpolatedTime(interp);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,248,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,249,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,250,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,251,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,252,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,253,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,254,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,257,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,258,assertTrue(maxError < 2.4e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,259,assertTrue(nbSteps < 150);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,262,private int nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,263,private double maxError;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,264,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,267,private static class VariableHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,268,public VariableHandler() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,269,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,271,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,272,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,274,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,275,firstTime = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,276,minStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,277,maxStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,279,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,280,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,282,double step = Math.abs(interpolator.getCurrentTime()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,283,- interpolator.getPreviousTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,284,if (firstTime) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,285,minStep   = Math.abs(step);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,286,maxStep   = minStep;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,287,firstTime = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,288,} else {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,289,if (step < minStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,290,minStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,292,if (step > maxStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,293,maxStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,297,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,298,assertTrue(minStep < (1.0 / 100.0));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,299,assertTrue(maxStep > (1.0 / 2.0));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,302,private boolean firstTime = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,303,private double  minStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,304,private double  maxStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,307,private static class InterpolatingStepHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,308,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,309,return true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,311,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,313,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,314,boolean isLast)
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,315,throws DerivativeException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,316,double prev = interpolator.getPreviousTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,317,double curr = interpolator.getCurrentTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,318,interpolator.setInterpolatedTime(0.5*(prev + curr));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,23,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,62,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,63,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,64,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,65,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,63,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,64,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,65,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,87,"olynomialFitter fitter = new PolynomialFitter(1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,88,"0, 1.0e-7, 1.0e-10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,89,.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,86,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,87,"new PolynomialFitter(1, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,104,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,105,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,106,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,107,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,102,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,103,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerIntegratorTest.java,104,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,58,ouble[] y = new double[y0.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,59,"ystem.arraycopy(y0, 0, y, 0, y0.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,58,double[] y = (double[]) y0.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,157,rivate class DummyEquations
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/EulerStepInterpolatorTest.java,156,private static class DummyEquations
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/FirstOrderConverterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/FirstOrderConverterTest.java,72,rivate class Equations
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/FirstOrderConverterTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/FirstOrderConverterTest.java,72,private static class Equations
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,23,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,62,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,63,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,64,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,65,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,63,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,64,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,65,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,85,"olynomialFitter fitter = new PolynomialFitter(1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,86,"0, 1.0e-7, 1.0e-10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,87,.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,84,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,85,"new PolynomialFitter(1, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,102,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,103,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,104,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,105,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,100,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,101,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,102,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,167,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,168,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,169,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,170,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,172,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,173,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,175,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,176,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,178,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,179,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,180,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,181,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,182,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,183,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,184,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,186,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,187,"/ even with more than 1000 evaluations per period,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,188,/ RK4 is not able to integrate such an eccentric
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,189,/ orbit with a good accuracy
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,190,ssertTrue(maxError > 0.001);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,163,integ.setStepHandler(new KeplerStepHandler(pb));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,179,private static class KeplerStepHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,180,public KeplerStepHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,181,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,182,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,184,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,185,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,187,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,188,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,190,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,191,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,193,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,194,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,195,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,196,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,197,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,198,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,199,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,201,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,202,"// even with more than 1000 evaluations per period,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,203,// RK4 is not able to integrate such an eccentric
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,204,// orbit with a good accuracy
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,205,assertTrue(maxError > 0.001);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,208,private double maxError;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,209,private TestProblem3 pb;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,135,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,136,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,137,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,138,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,135,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,136,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,137,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,162,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,163,rivate int nbSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,164,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,165,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,166,eturn true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,168,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,169,bSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,170,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,172,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,173,oolean isLast)
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,174,hrows DerivativeException {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,176,+nbSteps;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,177,or (int a = 1; a < 100; ++a) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,179,ouble prev   = interpolator.getPreviousTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,180,ouble curr   = interpolator.getCurrentTime();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,181,ouble interp = ((100 - a) * prev + a * curr) / 100;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,182,nterpolator.setInterpolatedTime(interp);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,184,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,185,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,186,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,187,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,188,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,189,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,190,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,193,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,194,ssertTrue(maxError < 2.7e-6);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,195,ssertTrue(nbSteps < 80);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,160,integ.setStepHandler(new KeplerStepHandler(pb));
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,218,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,219,rivate boolean firstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,220,rivate double  minStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,221,rivate double  maxStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,222,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,223,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,225,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,226,irstTime = true;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,227,inStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,228,axStep = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,230,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,231,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,233,ouble step = Math.abs(interpolator.getCurrentTime()
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,234, interpolator.getPreviousTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,235,f (firstTime) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,236,inStep   = Math.abs(step);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,237,axStep   = minStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,238,irstTime = false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,239, else {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,240,f (step < minStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,241,inStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,243,f (step > maxStep) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,244,axStep = step;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,248,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,249,ssertTrue(minStep < 8.2e-3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,250,ssertTrue(maxStep > 1.7);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,180,integ.setStepHandler(new VariableStepHandler());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,197,private static class KeplerStepHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,198,public KeplerStepHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,199,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,200,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,202,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,203,return true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,205,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,206,nbSteps = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,207,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,209,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,210,boolean isLast)
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,211,throws DerivativeException {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,213,++nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,214,for (int a = 1; a < 100; ++a) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,216,double prev   = interpolator.getPreviousTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,217,double curr   = interpolator.getCurrentTime();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,218,double interp = ((100 - a) * prev + a * curr) / 100;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,219,interpolator.setInterpolatedTime(interp);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,221,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,222,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,223,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,224,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,225,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,226,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,227,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,230,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,231,assertTrue(maxError < 2.7e-6);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,232,assertTrue(nbSteps < 80);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,235,private int nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,236,private double maxError;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,237,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,240,public static class VariableStepHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,241,public VariableStepHandler() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,242,reset();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,244,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,245,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,247,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,248,firstTime = true;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,249,minStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,250,maxStep = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,252,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,253,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,255,double step = Math.abs(interpolator.getCurrentTime()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,256,- interpolator.getPreviousTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,257,if (firstTime) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,258,minStep   = Math.abs(step);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,259,maxStep   = minStep;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,260,firstTime = false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,261,} else {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,262,if (step < minStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,263,minStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,265,if (step > maxStep) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,266,maxStep = step;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,270,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,271,assertTrue(minStep < 8.2e-3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,272,assertTrue(maxStep > 1.7);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,275,private boolean firstTime;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,276,private double  minStep;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,277,private double  maxStep;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,118,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,119,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,120,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,121,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,118,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,119,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,120,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,145,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,146,rivate int nbSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,147,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,148,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,149,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,151,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,152,bSteps = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,153,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,155,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,156,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,158,+nbSteps;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,159,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,160,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,161,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,162,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,163,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,164,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,165,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,167,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,168,ssertTrue(maxError < 1.54e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,169,ssertTrue(nbSteps < 520);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,143,integ.setStepHandler(new KeplerHandler(pb));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,149,private static class KeplerHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,150,public KeplerHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,151,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,152,nbSteps = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,153,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,155,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,156,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,158,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,159,nbSteps = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,160,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,162,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,163,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,165,++nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,166,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,167,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,168,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,169,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,170,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,171,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,172,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,174,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,175,assertTrue(maxError < 1.54e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,176,assertTrue(nbSteps < 520);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,179,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,180,private int nbSteps;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/HighamHall54IntegratorTest.java,181,private double maxError;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,23,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,61,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,62,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,63,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,64,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,62,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,63,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,64,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,84,"olynomialFitter fitter = new PolynomialFitter(1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,85,"0, 1.0e-7, 1.0e-10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,86,.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,83,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,84,"new PolynomialFitter(1, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,101,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,102,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,103,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,104,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,99,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,100,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/MidpointIntegratorTest.java,101,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/StepNormalizerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/StepNormalizerTest.java,27,pb    = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/StepNormalizerTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/StepNormalizerTest.java,28,integ = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,59, = new double[problem.y.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,60,"ystem.arraycopy(problem.y, 0, y, 0, problem.y.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem1.java,59,y = (double[]) problem.y.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,60, = new double[problem.y.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,61,"ystem.arraycopy(problem.y, 0, y, 0, problem.y.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem2.java,60,y = (double[]) problem.y.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,75, = new double[problem.y.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,76,"ystem.arraycopy(problem.y, 0, y, 0, problem.y.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem3.java,75,y = (double[]) problem.y.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,63, = new double[problem.y.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,64,"ystem.arraycopy(problem.y, 0, y, 0, problem.y.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,63,y = (double[]) problem.y.clone();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,93,private static final long serialVersionUID = 1356097180027801200L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,118,private static final long serialVersionUID = 6975050568227951931L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,68,0 = new double[problem.y0.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,69,"ystem.arraycopy(problem.y0, 0, y0, 0, problem.y0.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,68,y0 = (double[]) problem.y0.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,74,rrorScale = new double[problem.errorScale.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,75,"ystem.arraycopy(problem.errorScale, 0, errorScale, 0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,76,roblem.errorScale.length);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,73,errorScale = (double[]) problem.errorScale.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,96,his.y0   = new double[y0.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,97,"ystem.arraycopy(y0, 0, this.y0, 0, y0.length);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,93,this.y0   = (double[]) y0.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,113,his.errorScale = new double[errorScale.length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,114,"ystem.arraycopy(errorScale, 0, this.errorScale, 0,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,115,rrorScale.length);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,109,this.errorScale = (double[]) errorScale.clone();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,159,eturn null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblemAbstract.java,153,return new SwitchingFunction[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,23,import org.spaceroots.mantissa.estimation.LevenbergMarquardtEstimator;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,62,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,63,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,64,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,65,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,63,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,64,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,65,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,85,"olynomialFitter fitter = new PolynomialFitter(1,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,86,"0, 1.0e-7, 1.0e-10,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,87,.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,84,PolynomialFitter fitter =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,85,"new PolynomialFitter(1, new LevenbergMarquardtEstimator());"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,102,f (functions != null) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,103,or (int l = 0; l < functions.length; ++l) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,104,"nteg.addSwitchingFunction(functions[l],"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,105,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,100,for (int l = 0; l < functions.length; ++l) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,101,"integ.addSwitchingFunction(functions[l],"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,102,"Double.POSITIVE_INFINITY, 1.0e-6 * step);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,167,nteg.setStepHandler(new StepHandler() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,168,rivate double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,169,ublic boolean requiresDenseOutput() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,170,eturn false;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,172,ublic void reset() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,173,axError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,175,"ublic void handleStep(StepInterpolator interpolator,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,176,oolean isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,178,ouble[] interpolatedY = interpolator.getInterpolatedState ();
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,179,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,180,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,181,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,182,ouble error = dx * dx + dy * dy;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,183,f (error > maxError) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,184,axError = error;
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,186,f (isLast) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,187,"/ even with more than 1000 evaluations per period,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,188,/ RK4 is not able to integrate such an eccentric
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,189,/ orbit with a good accuracy
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,190,ssertTrue(maxError > 0.005);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,163,integ.setStepHandler(new KeplerHandler(pb));
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,169,private static class KeplerHandler implements StepHandler {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,171,public KeplerHandler(TestProblem3 pb) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,172,this.pb = pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,173,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,176,public boolean requiresDenseOutput() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,177,return false;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,180,public void reset() {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,181,maxError = 0;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,184,"public void handleStep(StepInterpolator interpolator,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,185,boolean isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,187,double[] interpolatedY = interpolator.getInterpolatedState ();
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,188,double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,189,double dx = interpolatedY[0] - theoreticalY[0];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,190,double dy = interpolatedY[1] - theoreticalY[1];
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,191,double error = dx * dx + dy * dy;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,192,if (error > maxError) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,193,maxError = error;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,195,if (isLast) {
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,196,"// even with more than 1000 evaluations per period,"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,197,// RK4 is not able to integrate such an eccentric
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,198,// orbit with a good accuracy
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,199,assertTrue(maxError > 0.005);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,203,private TestProblem3 pb;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/ThreeEighthesIntegratorTest.java,204,private double maxError = 0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,49,ssertTrue(optimum.getCost() > 0.02);
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,49,assertTrue(optimum.cost > 0.02);
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,74,ssertTrue(optimum.getCost() > 0.015);
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,74,assertTrue(optimum.cost > 0.015);
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,78,rivate class ValueChecker implements ConvergenceChecker {
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,78,private static class ValueChecker implements ConvergenceChecker {
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,87,eturn (largest.getCost() - smallest.getCost()) < threshold;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,87,return (largest.cost - smallest.cost) < threshold;
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,49,"ssertEquals(0.0, optimum.getCost(), 6.0e-4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,50,"ssertEquals(1.0, optimum.getPoint()[0], 0.05);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,51,"ssertEquals(1.0, optimum.getPoint()[1], 0.05);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,49,"assertEquals(0.0, optimum.cost, 6.0e-4);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,50,"assertEquals(1.0, optimum.point[0], 0.05);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,51,"assertEquals(1.0, optimum.point[1], 0.05);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,76,"ssertEquals(0.0, optimum.getCost(), 6.0e-4);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,77,"ssertEquals(0.0, optimum.getPoint()[0], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,78,"ssertEquals(0.0, optimum.getPoint()[1], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,79,"ssertEquals(0.0, optimum.getPoint()[2], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,80,"ssertEquals(0.0, optimum.getPoint()[3], 0.07);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,76,"assertEquals(0.0, optimum.cost, 6.0e-4);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,77,"assertEquals(0.0, optimum.point[0], 0.07);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,78,"assertEquals(0.0, optimum.point[1], 0.07);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,79,"assertEquals(0.0, optimum.point[2], 0.07);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,80,"assertEquals(0.0, optimum.point[3], 0.07);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,84,rivate class ValueChecker implements ConvergenceChecker {
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,84,private static class ValueChecker implements ConvergenceChecker {
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,93,eturn (largest.getCost() - smallest.getCost()) < threshold;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,93,return (largest.cost - smallest.cost) < threshold;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,67,rivate class Polynom implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,67,private static class Polynom implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/scalar/GaussLegendreIntegratorTest.java,98,private static final long serialVersionUID = -7304282612679254557L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,69,rivate class Polynom implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,69,private static class Polynom implements ComputableFunction {
True,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/quadrature/vectorial/GaussLegendreIntegratorTest.java,120,private static final long serialVersionUID = -8032020368915042278L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,31,mean       = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,32,covariance = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,33,generator  = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,56,ouble[] estimatedMean = sample.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/CorrelatedRandomVectorGeneratorTest.java,59,double[] estimatedMean = sample.getMean();
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/ScalarSampleStatisticsTest.java,27,points = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,29,mean = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,30,standardDeviation = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,31,generator = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,38,ouble[] estimatedMean = sample.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/UncorrelatedRandomVectorGeneratorTest.java,41,double[] estimatedMean = sample.getMean();
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,29,points = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,52,ouble[] mean = sample.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,53,double[] mean = sample.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,95,ouble[] mean = even.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,96,double[] mean = even.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,100,ouble[] refMean = all.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,101,double[] refMean = all.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,127,ouble[] mean = direct.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,128,double[] mean = direct.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,132,ouble[] refMean = loop.getMean(null);
True,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/random/VectorialSampleStatisticsTest.java,133,double[] refMean = loop.getMean();
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,48,rivate class Checker implements ConvergenceChecker {
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/BrentSolverTest.java,48,private static class Checker implements ConvergenceChecker {
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,207,eturn (TestProblem[]) problems.toArray(new TestProblem[0]);
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,207,return (TestProblem[]) problems.toArray(new TestProblem[problems.size()]);
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,212,private static final long serialVersionUID = -186095948802525864L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,222,private static final long serialVersionUID = -1284328672006328516L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,238,private static final long serialVersionUID = 3371996034561221313L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,250,private static final long serialVersionUID = -5460543876513796612L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,265,private static final long serialVersionUID = 6762799934117390438L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,275,private static final long serialVersionUID = 4962041891152128524L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,287,private static final long serialVersionUID = -7391954140799812791L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,303,private static final long serialVersionUID = -4160028543895639114L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,315,private static final long serialVersionUID = 3807046732154081146L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,333,private static final long serialVersionUID = -486669213837396921L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,345,private static final long serialVersionUID = -628275471717968182L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,357,private static final long serialVersionUID = 5207170686914959073L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,371,private static final long serialVersionUID = 1063884352586457076L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,398,private static final long serialVersionUID = -3549158218723499035L;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,413,private static final long serialVersionUID = -8198306839874267863L;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,399,rivate double yHigh;
True,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,415,private static final double yHigh= Math.exp(1.0) - 1.859;
False,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,src/mantissa/tests-src/org/spaceroots/mantissa/roots/TestProblem.java,404,High     = Math.exp(1.0) - 1.859;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,28,b1 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,29,b2 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,30,b3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,34,ssertTrue(mapper.getInternalDataArray().length == size);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,37,assertTrue(mapper.getDataArray().length == size);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,72,ouble[] data = mapper.getInternalDataArray();
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,75,double[] data = mapper.getDataArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,106,rivate class DomainObject implements ArraySliceMappable {
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/ArrayMapperTest.java,109,private static class DomainObject implements ArraySliceMappable {
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,27,array1 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,28,array2 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,29,array3 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,30,mapper = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,30,ssertTrue(mapper.getInternalDataArray().length == 9);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,34,assertTrue(mapper.getDataArray().length == 9);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,33,ublic void testRealloc() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,35,or (int i = 0; i < reusedArray.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,36,eusedArray[i] = -1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,39,or (int i = 0; i < clonedArray.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,40,lonedArray[i] = -1.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,43,ouble[] data = new double [mapper.getInternalDataArray().length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,44,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,45,ata [i] = i * 0.1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,48,apper.updateObjects(data);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,50,ssertTrue(Math.abs(reusedArray[0] - 0.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,51,ssertTrue(Math.abs(reusedArray[1] - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,53,ssertTrue(Math.abs(clonedArray[0] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,54,ssertTrue(Math.abs(clonedArray[1] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,55,ssertTrue(Math.abs(clonedArray[2] + 1.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,61,ouble[] data = new double [mapper.getInternalDataArray().length];
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,39,double[] data = new double [mapper.getDataArray().length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,68,ssertTrue(Math.abs(array1.getArray()[0] - 0.0) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,69,ssertTrue(Math.abs(array1.getArray()[1] - 0.1) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,70,ssertTrue(Math.abs(array1.getArray()[2] - 0.2) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,71,ssertTrue(Math.abs(array1.getArray()[3] - 0.3) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,46,double[] a1 = array1.getArray();
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,47,assertTrue(Math.abs(a1[0] - 0.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,48,assertTrue(Math.abs(a1[1] - 0.1) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,49,assertTrue(Math.abs(a1[2] - 0.2) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,50,assertTrue(Math.abs(a1[3] - 0.3) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,73,ssertTrue(Math.abs(array2.getArray()[0] - 0.4) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,74,ssertTrue(Math.abs(array2.getArray()[1] - 0.5) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,52,double[] a2 = array2.getArray();
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,53,assertTrue(Math.abs(a2[0] - 0.4) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,54,assertTrue(Math.abs(a2[1] - 0.5) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,76,ssertTrue(Math.abs(array3.getArray()[0] - 0.6) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,77,ssertTrue(Math.abs(array3.getArray()[1] - 0.7) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,78,ssertTrue(Math.abs(array3.getArray()[2] - 0.8) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,82,ublic void testUpdateArray() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,84,rray1.getArray()[0] = 00.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,85,rray1.getArray()[1] = 10.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,86,rray1.getArray()[2] = 20.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,87,rray1.getArray()[3] = 30.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,89,rray2.getArray()[0] = 40.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,90,rray2.getArray()[1] = 50.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,92,rray3.getArray()[0] = 60.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,93,rray3.getArray()[1] = 70.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,94,rray3.getArray()[2] = 80.0;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,96,apper.updateArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,98,ouble[] data = mapper.getInternalDataArray();
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,99,or (int i = 0; i < data.length; ++i) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,100,ssertTrue(Math.abs(data [i] - i * 10.0) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,56,double[] a3 = array3.getArray();
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,57,assertTrue(Math.abs(a3[0] - 0.6) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,58,assertTrue(Math.abs(a3[1] - 0.7) < 1.0e-10);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,59,assertTrue(Math.abs(a3[2] - 0.8) < 1.0e-10);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,111,eusedArray = new double[2];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,112,lonedArray = new double[3];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,115,"rray2 = new MappableArray(reusedArray, false);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,116,"rray3 = new MappableArray(clonedArray, true);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,70,array2 = new MappableArray(new double[2]);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,71,array3 = new MappableArray(new double[3]);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,126,eusedArray = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,127,lonedArray = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,137,rivate double[] reusedArray;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,138,rivate double[] clonedArray;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,144,rivate ArrayMapper mapper;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableArrayTest.java,90,private ArrayMapper   mapper;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,27,mapper  = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,28,scalar1 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,29,scalar2 = null;
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,30,scalar3 = null;
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,30,ssertTrue(mapper.getInternalDataArray().length == 3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,34,assertTrue(mapper.getDataArray().length == 3);
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,35,ouble[] data = new double [mapper.getInternalDataArray().length];
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,39,double[] data = new double [mapper.getDataArray().length];
False,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,56,ouble[] data = mapper.getInternalDataArray();
True,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/utilities/MappableScalarTest.java,60,double[] data = mapper.getDataArray();

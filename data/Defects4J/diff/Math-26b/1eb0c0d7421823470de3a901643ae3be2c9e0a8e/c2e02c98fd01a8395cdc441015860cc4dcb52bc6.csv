is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,18,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,22,import org.apache.commons.math.FieldElement;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,25,*  Decimal floating point library for Java
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,27,*  <p>Another floating point class.  This one is built using radix 10000
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,28,"*  which is 10<sup>4</sup>, so its almost decimal.</p>"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,30,*  <p>The design goals here are:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,31,*  <ol>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,32,"*    <li>Decimal math, or close to it</li>"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,33,*    <li>Settable precision (but no mix between numbers using different settings)</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,34,*    <li>Portability.  Code should be keep as portable as possible.</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,35,*    <li>Performance</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,36,*    <li>Accuracy  - Results should always be +/- 1 ULP for basic
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,37,*         algebraic operation</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,38,*    <li>Comply with IEEE 854-1987 as much as possible.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,39,*         (See IEEE 854-1987 notes below)</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,40,*  </ol></p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,42,*  <p>Trade offs:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,43,*  <ol>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,44,*    <li>Memory foot print.  I'm using more memory than necessary to
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,45,*         represent numbers to get better performance.</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,46,"*    <li>Digits are bigger, so rounding is a greater loss.  So, if you"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,47,"*         really need 12 decimal digits, better use 4 base 10000 digits"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,48,*         there can be one partially filled.</li>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,49,*  </ol></p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,51,*  <p>Numbers are represented  in the following form:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,52,*  <pre>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,53,*  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,54,*  </pre>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,55,"*  where sign is &plusmn;1, mantissa represents a fractional number between"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,56,*  zero and one.  mant[0] is the least significant digit.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,57,*  exp is in the range of -32767 to 32768</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,59,*  <p>IEEE 854-1987  Notes and differences</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,61,*  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,62,"*  10000, so that requirement is not met, but  it is possible that a"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,63,*  subclassed can be made to make it behave as a radix 10
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,64,*  number.  It is my opinion that if it looks and behaves as a radix
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,65,*  10 number then it is one and that requirement would be met.</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,67,*  <p>The radix of 10000 was chosen because it should be faster to operate
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,68,*  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,69,*  can be realized by add an additional rounding step to ensure that
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,70,*  the number of decimal digits represented is constant.</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,72,"*  <p>The IEEE standard specifically leaves out internal data encoding,"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,73,*  so it is reasonable to conclude that such a subclass of this radix
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,74,*  10000 system is merely an encoding of a radix 10 system.</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,76,"*  <p>IEEE 854 also specifies the existence of ""sub-normal"" numbers.  This"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,77,*  class does not contain any such entities.  The most significant radix
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,78,"*  10000 digit is always non-zero.  Instead, we support ""gradual underflow"""
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,79,*  by raising the underflow flag for numbers less with exponent less than
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,80,"*  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,81,*  Thus the smallest number we can represent would be:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,82,"*  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,83,*  be 1e-131092.</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,85,*  <p>IEEE 854 defines that the implied radix point lies just to the right
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,86,*  of the most significant digit and to the left of the remaining digits.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,87,*  This implementation puts the implied radix point to the left of all
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,88,*  digits including the most significant one.  The most significant digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,89,*  here is the one just to the right of the radix point.  This is a fine
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,90,*  detail and is really only a matter of definition.  Any side effects of
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,91,*  this can be rendered invisible by a subclass.</p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,92,* @see DfpField
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,93,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,94,* @since 2.2
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,96,public class Dfp implements FieldElement<Dfp> {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,98,"/** The radix, or base of this system.  Set to 10000 */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,99,public static final int RADIX = 10000;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,101,/** The minimum exponent before underflow is signaled.  Flush to zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,102,*  occurs at minExp-DIGITS */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,103,public static final int MIN_EXP = -32767;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,105,/** The maximum exponent before overflow is signaled and results flushed
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,106,*  to infinity */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,107,public static final int MAX_EXP =  32768;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,109,/** The amount under/overflows are scaled by before going to trap handler */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,110,public static final int ERR_SCALE = 32760;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,112,/** Indicator value for normal finite numbers. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,113,public static final byte FINITE = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,115,/** Indicator value for Infinity. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,116,public static final byte INFINITE = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,118,/** Indicator value for signaling NaN. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,119,public static final byte SNAN = 2;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,121,/** Indicator value for quiet NaN. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,122,public static final byte QNAN = 3;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,124,/** String for NaN representation. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,125,"private static final String NAN_STRING = ""NaN"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,127,/** String for positive infinity representation. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,128,"private static final String POS_INFINITY_STRING = ""Infinity"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,130,/** String for negative infinity representation. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,131,"private static final String NEG_INFINITY_STRING = ""-Infinity"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,133,/** Name for traps triggered by addition. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,134,"private static final String ADD_TRAP = ""add"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,136,/** Name for traps triggered by multiplication. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,137,"private static final String MULTIPLY_TRAP = ""multiply"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,139,/** Name for traps triggered by division. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,140,"private static final String DIVIDE_TRAP = ""divide"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,142,/** Name for traps triggered by square root. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,143,"private static final String SQRT_TRAP = ""sqrt"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,145,/** Name for traps triggered by alignment. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,146,"private static final String ALIGN_TRAP = ""align"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,148,/** Name for traps triggered by truncation. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,149,"private static final String TRUNC_TRAP = ""trunc"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,151,/** Name for traps triggered by nextAfter. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,152,"private static final String NEXT_AFTER_TRAP = ""nextAfter"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,154,/** Name for traps triggered by lessThan. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,155,"private static final String LESS_THAN_TRAP = ""lessThan"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,157,/** Name for traps triggered by greaterThan. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,158,"private static final String GREATER_THAN_TRAP = ""greaterThan"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,160,/** Name for traps triggered by newInstance. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,161,"private static final String NEW_INSTANCE_TRAP = ""newInstance"";"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,163,/** Mantissa. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,164,protected int[] mant;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,166,"/** Sign bit: & for positive, -1 for negative. */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,167,protected byte sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,169,/** Exponent. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,170,protected int exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,172,/** Indicator for non-finite / non-number values. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,173,protected byte nans;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,175,/** Factory building similar Dfp's. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,176,private final DfpField field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,178,/** Makes an instance with a value of zero.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,179,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,181,protected Dfp(final DfpField field) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,182,mant = new int[field.getRadixDigits()];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,183,sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,184,exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,185,nans = FINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,186,this.field = field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,189,/** Create an instance from a byte value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,190,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,191,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,193,"protected Dfp(final DfpField field, byte x) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,194,"this(field, (long) x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,197,/** Create an instance from an int value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,198,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,199,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,201,"protected Dfp(final DfpField field, int x) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,202,"this(field, (long) x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,205,/** Create an instance from a long value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,206,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,207,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,209,"protected Dfp(final DfpField field, long x) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,211,// initialize as if 0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,212,mant = new int[field.getRadixDigits()];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,213,nans = FINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,214,this.field = field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,216,boolean isLongMin = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,217,if (x == Long.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,218,// special case for Long.MIN_VALUE (-9223372036854775808)
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,219,// we must shift it before taking its absolute value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,220,isLongMin = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,221,++x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,224,// set the sign
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,225,if (x < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,226,sign = -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,227,x = -x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,228,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,229,sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,232,exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,233,while (x != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,234,"System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,235,mant[mant.length - 1] = (int) (x % RADIX);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,236,x /= RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,237,exp++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,240,if (isLongMin) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,241,// remove the shift added for Long.MIN_VALUE
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,242,// we know in this case that fixing the last digit is sufficient
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,243,for (int i = 0; i < mant.length - 1; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,244,if (mant[i] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,245,mant[i]++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,246,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,252,/** Create an instance from a double value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,253,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,254,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,256,"protected Dfp(final DfpField field, double x) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,258,// initialize as if 0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,259,mant = new int[field.getRadixDigits()];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,260,sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,261,exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,262,nans = FINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,263,this.field = field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,265,long bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,266,long mantissa = bits & 0x000fffffffffffffL;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,267,int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,269,if (exponent == -1023) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,270,// Zero or sub-normal
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,271,if (x == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,272,return;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,275,exponent++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,277,// Normalize the subnormal number
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,278,while ( (mantissa & 0x0010000000000000L) == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,279,exponent--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,280,mantissa <<= 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,282,mantissa &= 0x000fffffffffffffL;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,285,if (exponent == 1024) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,286,// infinity or NAN
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,287,if (x != x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,288,sign = (byte) 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,289,nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,290,} else if (x < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,291,sign = (byte) -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,292,nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,293,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,294,sign = (byte) 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,295,nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,297,return;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,300,"Dfp xdfp = new Dfp(field, mantissa);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,301,"xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,302,"xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,304,if ((bits & 0x8000000000000000L) != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,305,xdfp = xdfp.negate();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,308,"System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,309,sign = xdfp.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,310,exp  = xdfp.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,311,nans = xdfp.nans;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,315,/** Copy constructor.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,316,* @param d instance to copy
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,318,public Dfp(final Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,319,mant  = d.mant.clone();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,320,sign  = d.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,321,exp   = d.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,322,nans  = d.nans;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,323,field = d.field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,326,/** Create an instance from a String representation.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,327,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,328,* @param s string representation of the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,330,"protected Dfp(final DfpField field, final String s) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,332,// initialize as if 0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,333,mant = new int[field.getRadixDigits()];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,334,sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,335,exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,336,nans = FINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,337,this.field = field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,339,boolean decimalFound = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,340,final int rsize = 4;   // size of radix in decimal digits
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,341,final int offset = 4;  // Starting offset into Striped
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,342,final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,344,// Check some special cases
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,345,if (s.equals(POS_INFINITY_STRING)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,346,sign = (byte) 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,347,nans = (byte) INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,348,return;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,351,if (s.equals(NEG_INFINITY_STRING)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,352,sign = (byte) -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,353,nans = (byte) INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,354,return;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,357,if (s.equals(NAN_STRING)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,358,sign = (byte) 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,359,nans = (byte) QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,360,return;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,363,// Check for scientific notation
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,364,"int p = s.indexOf(""e"");"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,365,if (p == -1) { // try upper case?
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,366,"p = s.indexOf(""E"");"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,369,final String fpdecimal;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,370,int sciexp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,371,if (p != -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,372,// scientific notation
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,373,"fpdecimal = s.substring(0, p);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,374,String fpexp = s.substring(p+1);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,375,boolean negative = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,377,for (int i=0; i<fpexp.length(); i++)
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,379,if (fpexp.charAt(i) == '-')
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,381,negative = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,382,continue;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,384,if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,385,sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,388,if (negative) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,389,sciexp = -sciexp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,391,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,392,// normal case
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,393,fpdecimal = s;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,396,// If there is a minus sign in the number then it is negative
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,397,"if (fpdecimal.indexOf(""-"") !=  -1) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,398,sign = -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,401,"// First off, find all of the leading zeros, trailing zeros, and significant digits"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,402,p = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,404,// Move p to first significant digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,405,int decimalPos = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,406,for (;;) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,407,if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,408,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,411,if (decimalFound && fpdecimal.charAt(p) == '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,412,decimalPos--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,415,if (fpdecimal.charAt(p) == '.') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,416,decimalFound = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,419,p++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,421,if (p == fpdecimal.length()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,422,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,426,// Copy the string onto Stripped
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,427,int q = offset;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,428,striped[0] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,429,striped[1] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,430,striped[2] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,431,striped[3] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,432,int significantDigits=0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,433,for(;;) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,434,if (p == (fpdecimal.length())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,435,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,438,// Don't want to run pass the end of the array
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,439,if (q == mant.length*rsize+offset+1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,440,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,443,if (fpdecimal.charAt(p) == '.') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,444,decimalFound = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,445,decimalPos = significantDigits;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,446,p++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,447,continue;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,450,if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,451,p++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,452,continue;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,455,striped[q] = fpdecimal.charAt(p);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,456,q++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,457,p++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,458,significantDigits++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,462,// If the decimal point has been found then get rid of trailing zeros.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,463,if (decimalFound && q != offset) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,464,for (;;) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,465,q--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,466,if (q == offset) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,467,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,469,if (striped[q] == '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,470,significantDigits--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,471,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,472,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,477,"// special case of numbers like ""0.00000"""
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,478,if (decimalFound && significantDigits == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,479,decimalPos = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,482,// Implicit decimal point at end of number if not present
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,483,if (!decimalFound) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,484,decimalPos = q-offset;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,487,// Find the number of significant trailing zeros
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,488,q = offset;  // set q to point to first sig digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,489,p = significantDigits-1+offset;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,491,int trailingZeros = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,492,while (p > q) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,493,if (striped[p] != '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,494,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,496,trailingZeros++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,497,p--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,500,// Make sure the decimal is on a mod 10000 boundary
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,501,int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,502,q -= i;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,503,decimalPos += i;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,505,// Make the mantissa length right by adding zeros at the end if necessary
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,506,while ((p - q) < (mant.length * rsize)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,507,for (i = 0; i < rsize; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,508,striped[++p] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,512,"// Ok, now we know how many trailing zeros there are,"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,513,// and where the least significant digit is
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,514,for (i = mant.length - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,515,mant[i] = (striped[q]   - '0') * 1000 +
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,516,(striped[q+1] - '0') * 100  +
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,517,(striped[q+2] - '0') * 10   +
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,518,(striped[q+3] - '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,519,q += 4;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,523,exp = (decimalPos+sciexp) / rsize;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,525,if (q < striped.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,526,// Is there possible another digit?
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,527,round((striped[q] - '0')*1000);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,532,/** Creates an instance with a non-finite value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,533,* @param field field to which this instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,534,* @param sign sign of the Dfp to create
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,535,"* @param nans code of the value, must be one of {@link #INFINITE},"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,536,"* {@link #SNAN},  {@link #QNAN}"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,538,"protected Dfp(final DfpField field, final byte sign, final byte nans) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,539,this.field = field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,540,this.mant    = new int[field.getRadixDigits()];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,541,this.sign    = sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,542,this.exp     = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,543,this.nans    = nans;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,546,/** Create an instance with a value of 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,547,* Use this internally in preference to constructors to facilitate subclasses
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,548,* @return a new instance with a value of 0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,550,public Dfp newInstance() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,551,return new Dfp(getField());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,554,/** Create an instance from a byte value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,555,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,556,* @return a new instance with value x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,558,public Dfp newInstance(final byte x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,559,"return new Dfp(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,562,/** Create an instance from an int value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,563,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,564,* @return a new instance with value x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,566,public Dfp newInstance(final int x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,567,"return new Dfp(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,570,/** Create an instance from a long value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,571,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,572,* @return a new instance with value x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,574,public Dfp newInstance(final long x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,575,"return new Dfp(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,578,/** Create an instance from a double value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,579,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,580,* @return a new instance with value x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,582,public Dfp newInstance(final double x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,583,"return new Dfp(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,586,/** Create an instance by copying an existing one.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,587,* Use this internally in preference to constructors to facilitate subclasses.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,588,* @param d instance to copy
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,589,* @return a new instance with the same value as d
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,591,public Dfp newInstance(final Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,593,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,594,if (field.getRadixDigits() != d.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,595,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,596,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,597,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,598,"return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,601,return new Dfp(d);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,605,/** Create an instance from a String representation.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,606,* Use this internally in preference to constructors to facilitate subclasses.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,607,* @param s string representation of the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,608,* @return a new instance parsed from specified string
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,610,public Dfp newInstance(final String s) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,611,"return new Dfp(field, s);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,614,/** Creates an instance with a non-finite value.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,615,* @param sig sign of the Dfp to create
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,616,"* @param code code of the value, must be one of {@link #INFINITE},"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,617,"* {@link #SNAN},  {@link #QNAN}"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,618,* @return a new instance with a non-finite value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,620,"public Dfp newInstance(final byte sig, final byte code) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,621,"return field.newDfp(sig, code);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,624,/** Get the {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,625,* <p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,626,* The field is linked to the number of digits and acts as a factory
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,627,* for {@link Dfp} instances.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,628,* </p>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,629,* @return {@link org.apache.commons.math.Field Field} (really a {@link DfpField}) to which the instance belongs
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,631,public DfpField getField() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,632,return field;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,635,/** Get the number of radix digits of the instance.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,636,* @return number of radix digits
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,638,public int getRadixDigits() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,639,return field.getRadixDigits();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,642,/** Get the constant 0.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,643,* @return a Dfp with value zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,645,public Dfp getZero() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,646,return field.getZero();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,649,/** Get the constant 1.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,650,* @return a Dfp with value one
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,652,public Dfp getOne() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,653,return field.getOne();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,656,/** Get the constant 2.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,657,* @return a Dfp with value two
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,659,public Dfp getTwo() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,660,return field.getTwo();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,663,"/** Shift the mantissa left, and adjust the exponent to compensate."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,665,protected void shiftLeft() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,666,for (int i = mant.length - 1; i > 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,667,mant[i] = mant[i-1];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,669,mant[0] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,670,exp--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,673,/* Note that shiftRight() does not call round() as that round() itself
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,674,uses shiftRight() */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,675,"/** Shift the mantissa right, and adjust the exponent to compensate."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,677,protected void shiftRight() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,678,for (int i = 0; i < mant.length - 1; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,679,mant[i] = mant[i+1];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,681,mant[mant.length - 1] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,682,exp++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,685,"/** Make our exp equal to the supplied one, this may cause rounding."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,686,*  Also causes de-normalized numbers.  These numbers are generally
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,687,*  dangerous because most routines assume normalized numbers.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,688,"*  Align doesn't round, so it will return the last digit destroyed"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,689,*  by shifting right.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,690,*  @param e desired exponent
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,691,*  @return last digit destroyed by shifting right
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,693,protected int align(int e) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,694,int lostdigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,695,boolean inexact = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,697,int diff = exp - e;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,699,int adiff = diff;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,700,if (adiff < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,701,adiff = -adiff;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,704,if (diff == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,705,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,708,if (adiff > (mant.length + 1)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,709,// Special case
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,710,"Arrays.fill(mant, 0);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,711,exp = e;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,713,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,714,"dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,716,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,719,for (int i = 0; i < adiff; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,720,if (diff < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,721,/* Keep track of loss -- only signal inexact after losing 2 digits.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,722,* the first lost digit is returned to add() and may be incorporated
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,723,* into the result.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,725,if (lostdigit != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,726,inexact = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,729,lostdigit = mant[0];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,731,shiftRight();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,732,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,733,shiftLeft();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,737,if (inexact) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,738,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,739,"dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,742,return lostdigit;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,746,/** Check if instance is less than x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,747,* @param x number to check instance against
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,748,"* @return true if instance is less than x and neither are NaN, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,750,public boolean lessThan(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,752,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,753,if (field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,754,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,755,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,756,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,757,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,758,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,761,"/* if a nan is involved, signal invalid and return false */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,762,if (isNaN() || x.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,763,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,764,"dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,765,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,768,"return compare(this, x) < 0;"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,771,/** Check if instance is greater than x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,772,* @param x number to check instance against
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,773,"* @return true if instance is greater than x and neither are NaN, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,775,public boolean greaterThan(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,777,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,778,if (field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,779,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,780,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,781,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,782,"dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,783,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,786,"/* if a nan is involved, signal invalid and return false */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,787,if (isNaN() || x.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,788,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,789,"dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,790,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,793,"return compare(this, x) > 0;"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,796,/** Check if instance is infinite.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,797,* @return true if instance is infinite
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,799,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,800,return nans == INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,803,/** Check if instance is not a number.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,804,* @return true if instance is not a number
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,806,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,807,return (nans == QNAN) || (nans == SNAN);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,810,/** Check if instance is equal to x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,811,* @param other object to check instance against
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,812,"* @return true if instance is equal to x and neither are NaN, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,814,@Override
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,815,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,817,if (other instanceof Dfp) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,818,final Dfp x = (Dfp) other;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,819,if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,820,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,823,"return compare(this, x) == 0;"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,826,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,831,* Gets a hashCode for the instance.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,832,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,834,@Override
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,835,public int hashCode() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,836,return 17 + (sign << 8) + (nans << 16) + exp + mant.hashCode();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,839,/** Check if instance is not equal to x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,840,* @param x number to check instance against
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,841,"* @return true if instance is not equal to x and neither are NaN, false otherwise"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,843,public boolean unequal(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,844,if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,845,return false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,848,return greaterThan(x) || lessThan(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,851,/** Compare two instances.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,852,* @param a first instance in comparison
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,853,* @param b second instance in comparison
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,854,"* @return -1 if a<b, 1 if a>b and 0 if a==b"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,855,*  Note this method does not properly handle NaNs or numbers with different precision.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,857,"private static int compare(final Dfp a, final Dfp b) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,858,// Ignore the sign of zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,859,if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,860,a.nans == FINITE && b.nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,861,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,864,if (a.sign != b.sign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,865,if (a.sign == -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,866,return -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,867,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,868,return 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,872,// deal with the infinities
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,873,if (a.nans == INFINITE && b.nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,874,return a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,877,if (a.nans == FINITE && b.nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,878,return -b.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,881,if (a.nans == INFINITE && b.nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,882,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,885,"// Handle special case when a or b is zero, by ignoring the exponents"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,886,if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,887,if (a.exp < b.exp) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,888,return -a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,891,if (a.exp > b.exp) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,892,return a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,896,// compare the mantissas
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,897,for (int i = a.mant.length - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,898,if (a.mant[i] > b.mant[i]) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,899,return a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,902,if (a.mant[i] < b.mant[i]) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,903,return -a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,907,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,911,/** Round to nearest integer using the round-half-even method.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,912,*  That is round to nearest integer unless both are equidistant.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,913,*  In which case round to the even one.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,914,*  @return rounded value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,916,public Dfp rint() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,917,return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,920,/** Round to an integer using the round floor mode.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,921,"* That is, round toward -Infinity"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,922,*  @return rounded value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,924,public Dfp floor() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,925,return trunc(DfpField.RoundingMode.ROUND_FLOOR);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,928,/** Round to an integer using the round ceil mode.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,929,"* That is, round toward +Infinity"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,930,*  @return rounded value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,932,public Dfp ceil() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,933,return trunc(DfpField.RoundingMode.ROUND_CEIL);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,936,/** Returns the IEEE remainder.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,937,* @param d divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,938,"* @return this less n &times; d, where n is the integer closest to this/d"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,940,public Dfp remainder(final Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,942,final Dfp result = this.subtract(this.divide(d).rint().multiply(d));
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,944,"// IEEE 854-1987 says that if the result is zero, then it carries the sign of this"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,945,if (result.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,946,result.sign = sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,949,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,953,/** Does the integer conversions with the specified rounding.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,954,* @param rmode rounding mode to use
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,955,* @return truncated value
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,957,protected Dfp trunc(final DfpField.RoundingMode rmode) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,958,boolean changed = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,960,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,961,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,964,if (nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,965,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,968,if (mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,969,// a is zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,970,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,973,/* If the exponent is less than zero then we can certainly
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,974,* return zero */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,975,if (exp < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,976,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,977,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,978,"result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,979,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,982,"/* If the exponent is greater than or equal to digits, then it"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,983,* must already be an integer since there is no precision left
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,984,* for any fractional part */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,986,if (exp >= mant.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,987,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,990,"/* General case:  create another dfp, result, that contains the"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,991,* a with the fractional part lopped off.  */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,993,Dfp result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,994,for (int i = 0; i < mant.length-result.exp; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,995,changed |= result.mant[i] != 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,996,result.mant[i] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,999,if (changed) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1000,switch (rmode) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1001,case ROUND_FLOOR:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1002,if (result.sign == -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1003,// then we must increment the mantissa by one
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1004,result = result.add(newInstance(-1));
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1006,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1008,case ROUND_CEIL:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1009,if (result.sign == 1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1010,// then we must increment the mantissa by one
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1011,result = result.add(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1013,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1015,case ROUND_HALF_EVEN:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1016,default:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1017,"final Dfp half = newInstance(""0.5"");"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1018,Dfp a = subtract(result);  // difference between this and result
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1019,a.sign = 1;            // force positive (take abs)
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1020,if (a.greaterThan(half)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1021,a = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1022,a.sign = sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1023,result = result.add(a);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1026,/** If exactly equal to 1/2 and odd then increment */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1027,if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1028,a = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1029,a.sign = sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1030,result = result.add(a);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1032,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1035,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1036,"result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1037,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1040,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1043,/** Convert this to an integer.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1044,"* If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1045,* @return converted number
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1047,public int intValue() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1048,Dfp rounded;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1049,int result = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1051,rounded = rint();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1053,if (rounded.greaterThan(newInstance(2147483647))) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1054,return 2147483647;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1057,if (rounded.lessThan(newInstance(-2147483648))) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1058,return -2147483648;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1061,for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1062,result = result * RADIX + rounded.mant[i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1065,if (rounded.sign == -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1066,result = -result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1069,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1072,/** Get the exponent of the greatest power of 10000 that is
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1073,*  less than or equal to the absolute value of this.  I.E.  if
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1074,*  this is 10<sup>6</sup> then log10K would return 1.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1075,*  @return integer base 10000 logarithm
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1077,public int log10K() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1078,return exp - 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1081,/** Get the specified  power of 10000.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1082,* @param e desired power
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1083,* @return 10000<sup>e</sup>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1085,public Dfp power10K(final int e) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1086,Dfp d = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1087,d.exp = e + 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1088,return d;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1091,/** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1092,*  @return integer base 10 logarithm
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1094,public int log10()  {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1095,if (mant[mant.length-1] > 1000) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1096,return exp * 4 - 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1098,if (mant[mant.length-1] > 100) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1099,return exp * 4 - 2;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1101,if (mant[mant.length-1] > 10) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1102,return exp * 4 - 3;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1104,return exp * 4 - 4;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1107,/** Return the specified  power of 10.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1108,* @param e desired power
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1109,* @return 10<sup>e</sup>
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1111,public Dfp power10(final int e) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1112,Dfp d = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1114,if (e >= 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1115,d.exp = e / 4 + 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1116,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1117,d.exp = (e + 1) / 4;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1120,switch ((e % 4 + 4) % 4) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1121,case 0:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1122,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1123,case 1:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1124,d = d.multiply(10);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1125,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1126,case 2:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1127,d = d.multiply(100);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1128,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1129,default:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1130,d = d.multiply(1000);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1133,return d;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1136,/** Negate the mantissa of this by computing the complement.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1137,"*  Leaves the sign bit unchanged, used internally by add."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1138,*  Denormalized numbers are handled properly here.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1139,*  @param extra ???
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1140,*  @return ???
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1142,protected int complement(int extra) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1144,extra = RADIX-extra;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1145,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1146,mant[i] = RADIX-mant[i]-1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1149,int rh = extra / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1150,extra = extra - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1151,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1152,final int r = mant[i] + rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1153,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1154,mant[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1157,return extra;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1160,/** Add x to this.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1161,* @param x number to add
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1162,* @return sum of this and x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1164,public Dfp add(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1166,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1167,if (field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1168,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1169,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1170,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1171,"return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1174,/* handle special cases */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1175,if (nans != FINITE || x.nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1176,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1177,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1180,if (x.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1181,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1184,if (nans == INFINITE && x.nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1185,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1188,if (x.nans == INFINITE && nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1189,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1192,if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1193,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1196,if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1197,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1198,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1199,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1200,"result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1201,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1205,/* copy this and the arg */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1206,Dfp a = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1207,Dfp b = newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1209,/* initialize the result object */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1210,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1212,"/* Make all numbers positive, but remember their sign */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1213,final byte asign = a.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1214,final byte bsign = b.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1216,a.sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1217,b.sign = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1219,/* The result will be signed like the arg with greatest magnitude */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1220,byte rsign = bsign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1221,"if (compare(a, b) > 0) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1222,rsign = asign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1225,"/* Handle special case when a or b is zero, by setting the exponent"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1226,of the zero number equal to the other one.  This avoids an alignment
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1227,which would cause catastropic loss of precision */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1228,if (b.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1229,b.exp = a.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1232,if (a.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1233,a.exp = b.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1236,/* align number with the smaller exponent */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1237,int aextradigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1238,int bextradigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1239,if (a.exp < b.exp) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1240,aextradigit = a.align(b.exp);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1241,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1242,bextradigit = b.align(a.exp);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1245,/* complement the smaller of the two if the signs are different */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1246,if (asign != bsign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1247,if (asign == rsign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1248,bextradigit = b.complement(bextradigit);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1249,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1250,aextradigit = a.complement(aextradigit);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1254,/* add the mantissas */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1255,int rh = 0; /* acts as a carry */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1256,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1257,final int r = a.mant[i]+b.mant[i]+rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1258,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1259,result.mant[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1261,result.exp = a.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1262,result.sign = rsign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1264,"/* handle overflow -- note, when asign!=bsign an overflow is"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1265,* normal and should be ignored.  */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1267,if (rh != 0 && (asign == bsign)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1268,final int lostdigit = result.mant[0];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1269,result.shiftRight();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1270,result.mant[mant.length-1] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1271,final int excp = result.round(lostdigit);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1272,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1273,"result = dotrap(excp, ADD_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1277,/* normalize the result */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1278,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1279,if (result.mant[mant.length-1] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1280,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1282,result.shiftLeft();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1283,if (i == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1284,result.mant[0] = aextradigit+bextradigit;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1285,aextradigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1286,bextradigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1290,/* result is zero if after normalization the most sig. digit is zero */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1291,if (result.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1292,result.exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1294,if (asign != bsign) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1295,"// Unless adding 2 negative zeros, sign is positive"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1296,result.sign = 1;  // Per IEEE 854-1987 Section 6.3
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1300,/* Call round to test for over/under flows */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1301,final int excp = result.round(aextradigit + bextradigit);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1302,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1303,"result = dotrap(excp, ADD_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1306,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1309,/** Returns a number that is this number with the sign bit reversed.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1310,* @return the opposite of this
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1312,public Dfp negate() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1313,Dfp result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1314,result.sign = (byte) - result.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1315,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1318,/** Subtract x from this.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1319,* @param x number to subtract
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1320,* @return difference of this and a
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1322,public Dfp subtract(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1323,return add(x.negate());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1326,/** Round this given the next digit n using the current rounding mode.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1327,* @param n ???
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1328,* @return the IEEE flag if an exception occurred
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1330,protected int round(int n) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1331,boolean inc = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1332,switch (field.getRoundingMode()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1333,case ROUND_DOWN:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1334,inc = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1335,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1337,case ROUND_UP:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1338,inc = n != 0;       // round up if n!=0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1339,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1341,case ROUND_HALF_UP:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1342,inc = n >= 5000;  // round half up
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1343,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1345,case ROUND_HALF_DOWN:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1346,inc = n > 5000;  // round half down
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1347,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1349,case ROUND_HALF_EVEN:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1350,inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1351,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1353,case ROUND_HALF_ODD:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1354,inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1355,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1357,case ROUND_CEIL:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1358,inc = sign == 1 && n != 0;  // round ceil
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1359,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1361,case ROUND_FLOOR:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1362,default:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1363,inc = sign == -1 && n != 0;  // round floor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1364,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1367,if (inc) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1368,// increment if necessary
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1369,int rh = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1370,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1371,final int r = mant[i] + rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1372,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1373,mant[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1376,if (rh != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1377,shiftRight();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1378,mant[mant.length-1] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1382,// check for exceptional cases and raise signals if necessary
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1383,if (exp < MIN_EXP) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1384,// Gradual Underflow
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1385,field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1386,return DfpField.FLAG_UNDERFLOW;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1389,if (exp > MAX_EXP) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1390,// Overflow
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1391,field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1392,return DfpField.FLAG_OVERFLOW;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1395,if (n != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1396,// Inexact
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1397,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1398,return DfpField.FLAG_INEXACT;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1401,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1405,/** Multiply this by x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1406,* @param x multiplicand
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1407,* @return product of this and x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1409,public Dfp multiply(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1411,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1412,if (field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1413,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1414,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1415,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1416,"return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1419,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1421,/* handle special cases */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1422,if (nans != FINITE || x.nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1423,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1424,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1427,if (x.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1428,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1431,if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1432,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1433,result.sign = (byte) (sign * x.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1434,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1437,if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1438,result = newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1439,result.sign = (byte) (sign * x.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1440,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1443,if (x.nans == INFINITE && nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1444,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1445,result.sign = (byte) (sign * x.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1446,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1449,if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1450,(nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1451,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1452,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1453,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1454,"result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1455,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1459,int[] product = new int[mant.length*2];  // Big enough to hold even the largest result
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1461,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1462,int rh = 0;  // acts as a carry
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1463,for (int j=0; j<mant.length; j++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1464,int r = mant[i] * x.mant[j];    // multiply the 2 digits
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1465,r = r + product[i+j] + rh;  // add to the product digit with carry in
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1467,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1468,product[i+j] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1470,product[i+mant.length] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1473,// Find the most sig digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1474,"int md = mant.length * 2 - 1;  // default, in case result is zero"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1475,for (int i = mant.length * 2 - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1476,if (product[i] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1477,md = i;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1478,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1482,// Copy the digits into the result
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1483,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1484,result.mant[mant.length - i - 1] = product[md - i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1487,// Fixup the exponent.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1488,result.exp = exp + x.exp + md - 2 * mant.length + 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1489,result.sign = (byte)((sign == x.sign)?1:-1);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1491,if (result.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1492,"// if result is zero, set exp to zero"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1493,result.exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1496,final int excp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1497,if (md > (mant.length-1)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1498,excp = result.round(product[md-mant.length]);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1499,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1500,excp = result.round(0); // has no effect except to check status
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1503,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1504,"result = dotrap(excp, MULTIPLY_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1507,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1511,/** Multiply this by a single digit 0&lt;=x&lt;radix.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1512,* There are speed advantages in this special case
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1513,* @param x multiplicand
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1514,* @return product of this and x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1516,public Dfp multiply(final int x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1517,Dfp result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1519,/* handle special cases */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1520,if (nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1521,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1522,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1525,if (nans == INFINITE && x != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1526,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1527,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1530,if (nans == INFINITE && x == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1531,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1532,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1533,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1534,"result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1535,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1539,/* range check x */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1540,if (x < 0 || x >= RADIX) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1541,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1542,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1543,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1544,"result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1545,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1548,int rh = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1549,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1550,final int r = mant[i] * x + rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1551,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1552,result.mant[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1555,int lostdigit = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1556,if (rh != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1557,lostdigit = result.mant[0];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1558,result.shiftRight();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1559,result.mant[mant.length-1] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1562,"if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1563,result.exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1566,final int excp = result.round(lostdigit);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1567,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1568,"result = dotrap(excp, MULTIPLY_TRAP, result, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1571,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1574,/** Divide this by divisor.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1575,* @param divisor divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1576,* @return quotient of this by divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1578,public Dfp divide(Dfp divisor) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1579,int dividend[]; // current status of the dividend
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1580,int quotient[]; // quotient
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1581,int remainder[];// remainder
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1582,int qd;         // current quotient digit we're working with
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1583,int nsqd;       // number of significant quotient digits we have
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1584,int trial=0;    // trial quotient digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1585,int minadj;     // minimum adjustment
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1586,boolean trialgood; // Flag to indicate a good trail digit
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1587,int md=0;       // most sig digit in result
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1588,int excp;       // exceptions
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1590,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1591,if (field.getRadixDigits() != divisor.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1592,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1593,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1594,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1595,"return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1598,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1600,/* handle special cases */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1601,if (nans != FINITE || divisor.nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1602,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1603,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1606,if (divisor.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1607,return divisor;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1610,if (nans == INFINITE && divisor.nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1611,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1612,result.sign = (byte) (sign * divisor.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1613,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1616,if (divisor.nans == INFINITE && nans == FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1617,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1618,result.sign = (byte) (sign * divisor.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1619,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1622,if (divisor.nans == INFINITE && nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1623,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1624,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1625,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1626,"result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1627,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1631,/* Test for divide by zero */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1632,if (divisor.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1633,field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1634,result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1635,result.sign = (byte) (sign * divisor.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1636,result.nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1637,"result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1638,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1641,dividend = new int[mant.length+1];  // one extra digit needed
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1642,"quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1643,remainder = new int[mant.length+1]; // one extra digit needed
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1645,/* Initialize our most significant digits to zero */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1647,dividend[mant.length] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1648,quotient[mant.length] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1649,quotient[mant.length+1] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1650,remainder[mant.length] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1652,"/* copy our mantissa into the dividend, initialize the"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1653,quotient while we are at it */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1655,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1656,dividend[i] = mant[i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1657,quotient[i] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1658,remainder[i] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1661,/* outer loop.  Once per quotient digit */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1662,nsqd = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1663,for (qd = mant.length+1; qd >= 0; qd--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1664,/* Determine outer limits of our quotient digit */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1666,// r =  most sig 2 digits of dividend
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1667,final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1668,int min = divMsb       / (divisor.mant[mant.length-1]+1);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1669,int max = (divMsb + 1) / divisor.mant[mant.length-1];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1671,trialgood = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1672,while (!trialgood) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1673,// try the mean
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1674,trial = (min+max)/2;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1676,/* Multiply by divisor and store as remainder */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1677,int rh = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1678,for (int i = 0; i < mant.length + 1; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1679,int dm = (i<mant.length)?divisor.mant[i]:0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1680,final int r = (dm * trial) + rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1681,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1682,remainder[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1685,/* subtract the remainder from the dividend */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1686,rh = 1;  // carry in to aid the subtraction
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1687,for (int i = 0; i < mant.length + 1; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1688,final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1689,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1690,remainder[i] = r - rh * RADIX;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1693,/* Lets analyze what we have here */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1694,if (rh == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1695,// trial is too big -- negative remainder
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1696,max = trial-1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1697,continue;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1700,/* find out how far off the remainder is telling us we are */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1701,minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1702,minadj = minadj / (divisor.mant[mant.length-1]+1);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1704,if (minadj >= 2) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1705,min = trial+minadj;  // update the minimum
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1706,continue;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1709,"/* May have a good one here, check more thoroughly.  Basically"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1710,its a good one if it is less than the divisor */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1711,trialgood = false;  // assume false
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1712,for (int i = mant.length - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1713,if (divisor.mant[i] > remainder[i]) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1714,trialgood = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1716,if (divisor.mant[i] < remainder[i]) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1717,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1721,if (remainder[mant.length] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1722,trialgood = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1725,if (trialgood == false) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1726,min = trial+1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1730,/* Great we have a digit! */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1731,quotient[qd] = trial;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1732,if (trial != 0 || nsqd != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1733,nsqd++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1736,if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1737,// We have enough for this mode
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1738,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1741,if (nsqd > mant.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1742,// We have enough digits
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1743,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1746,/* move the remainder into the dividend while left shifting */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1747,dividend[0] = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1748,for (int i = 0; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1749,dividend[i + 1] = remainder[i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1753,/* Find the most sig digit */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1754,md = mant.length;  // default
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1755,for (int i = mant.length + 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1756,if (quotient[i] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1757,md = i;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1758,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1762,/* Copy the digits into the result */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1763,for (int i=0; i<mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1764,result.mant[mant.length-i-1] = quotient[md-i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1767,/* Fixup the exponent. */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1768,result.exp = exp - divisor.exp + md - mant.length;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1769,result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1771,"if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1772,result.exp = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1775,if (md > (mant.length-1)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1776,excp = result.round(quotient[md-mant.length]);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1777,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1778,excp = result.round(0);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1781,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1782,"result = dotrap(excp, DIVIDE_TRAP, divisor, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1785,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1788,/** Divide by a single digit less than radix.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1789,"*  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1790,* @param divisor divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1791,* @return quotient of this by divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1793,public Dfp divide(int divisor) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1795,// Handle special cases
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1796,if (nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1797,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1798,return this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1801,if (nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1802,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1806,// Test for divide by zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1807,if (divisor == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1808,field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1809,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1810,result.sign = sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1811,result.nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1812,"result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1813,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1816,// range check divisor
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1817,if (divisor < 0 || divisor >= RADIX) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1818,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1819,Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1820,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1821,"result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1822,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1825,Dfp result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1827,int rl = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1828,for (int i = mant.length-1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1829,final int r = rl*RADIX + result.mant[i];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1830,final int rh = r / divisor;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1831,rl = r - rh * divisor;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1832,result.mant[i] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1835,if (result.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1836,// normalize
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1837,result.shiftLeft();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1838,final int r = rl * RADIX;        // compute the next digit and put it in
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1839,final int rh = r / divisor;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1840,rl = r - rh * divisor;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1841,result.mant[0] = rh;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1844,final int excp = result.round(rl * RADIX / divisor);  // do the rounding
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1845,if (excp != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1846,"result = dotrap(excp, DIVIDE_TRAP, result, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1849,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1853,/** Compute the square root.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1854,* @return square root of the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1856,public Dfp sqrt() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1858,// check for unusual cases
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1859,if (nans == FINITE && mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1860,// if zero
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1861,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1864,if (nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1865,if (nans == INFINITE && sign == 1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1866,// if positive infinity
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1867,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1870,if (nans == QNAN) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1871,return newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1874,if (nans == SNAN) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1875,Dfp result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1877,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1878,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1879,"result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1880,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1884,if (sign == -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1885,// if negative
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1886,Dfp result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1888,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1889,result = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1890,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1891,"result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1892,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1895,Dfp x = newInstance(this);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1897,/* Lets make a reasonable guess as to the size of the square root */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1898,if (x.exp < -1 || x.exp > 1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1899,x.exp = this.exp / 2;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1902,/* Coarsely estimate the mantissa */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1903,switch (x.mant[mant.length-1] / 2000) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1904,case 0:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1905,x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1906,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1907,case 2:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1908,x.mant[mant.length-1] = 1500;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1909,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1910,case 3:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1911,x.mant[mant.length-1] = 2200;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1912,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1913,default:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1914,x.mant[mant.length-1] = 3000;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1917,Dfp dx = newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1919,"/* Now that we have the first pass estimate, compute the rest"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1920,by the formula dx = (y - x*x) / (2x); */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1922,Dfp px  = getZero();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1923,Dfp ppx = getZero();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1924,while (x.unequal(px)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1925,dx = newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1926,dx.sign = -1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1927,dx = dx.add(this.divide(x));
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1928,dx = dx.divide(2);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1929,ppx = px;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1930,px = x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1931,x = x.add(dx);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1933,if (x.equals(ppx)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1934,// alternating between two values
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1935,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1938,"// if dx is zero, break.  Note testing the most sig digit"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1939,// is a sufficient test since dx is normalized
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1940,if (dx.mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1941,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1945,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1949,/** Get a string representation of the instance.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1950,* @return string representation of the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1952,public String toString() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1953,if (nans != FINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1954,// if non-finite exceptional cases
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1955,if (nans == INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1956,return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1957,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1958,return NAN_STRING;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1962,if (exp > mant.length || exp < -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1963,return dfp2sci();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1966,return dfp2string();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1970,/** Convert an instance to a string using scientific notation.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1971,* @param a instance to convert
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1972,* @return string representation of the instance in scientific notation
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1974,protected String dfp2sci() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1975,char rawdigits[]    = new char[mant.length * 4];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1976,char outputbuffer[] = new char[mant.length * 4 + 20];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1977,int p;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1978,int q;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1979,int e;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1980,int ae;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1981,int shf;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1983,// Get all the digits
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1984,p = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1985,for (int i = mant.length - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1986,rawdigits[p++] = (char) ((mant[i] / 1000) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1987,rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1988,rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1989,rawdigits[p++] = (char) (((mant[i]) % 10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1992,// Find the first non-zero one
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1993,for (p = 0; p < rawdigits.length; p++) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1994,if (rawdigits[p] != '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1995,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1998,shf = p;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2000,// Now do the conversion
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2001,q = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2002,if (sign == -1) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2003,outputbuffer[q++] = '-';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2006,if (p != rawdigits.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2007,// there are non zero digits...
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2008,outputbuffer[q++] = rawdigits[p++];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2009,outputbuffer[q++] = '.';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2011,while (p<rawdigits.length) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2012,outputbuffer[q++] = rawdigits[p++];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2014,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2015,outputbuffer[q++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2016,outputbuffer[q++] = '.';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2017,outputbuffer[q++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2018,outputbuffer[q++] = 'e';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2019,outputbuffer[q++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2020,"return new String(outputbuffer, 0, 5);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2023,outputbuffer[q++] = 'e';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2025,// Find the msd of the exponent
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2027,e = exp * 4 - shf - 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2028,ae = e;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2029,if (e < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2030,ae = -e;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2033,// Find the largest p such that p < e
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2034,for (p = 1000000000; p > ae; p /= 10) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2035,// nothing to do
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2038,if (e < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2039,outputbuffer[q++] = '-';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2042,while (p > 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2043,outputbuffer[q++] = (char)(ae / p + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2044,ae = ae % p;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2045,p = p / 10;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2048,"return new String(outputbuffer, 0, q);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2052,/** Convert an instance to a string using normal notation.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2053,* @param a instance to convert
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2054,* @return string representation of the instance in normal notation
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2056,protected String dfp2string() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2057,char buffer[] = new char[mant.length*4 + 20];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2058,int p = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2059,int q;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2060,int e = exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2061,boolean pointInserted = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2063,buffer[0] = ' ';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2065,if (e <= 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2066,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2067,buffer[p++] = '.';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2068,pointInserted = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2071,while (e < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2072,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2073,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2074,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2075,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2076,e++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2079,for (int i = mant.length - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2080,buffer[p++] = (char) ((mant[i] / 1000) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2081,buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2082,buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2083,buffer[p++] = (char) (((mant[i]) % 10) + '0');
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2084,if (--e == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2085,buffer[p++] = '.';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2086,pointInserted = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2090,while (e > 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2091,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2092,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2093,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2094,buffer[p++] = '0';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2095,e--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2098,if (!pointInserted) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2099,// Ensure we have a radix point!
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2100,buffer[p++] = '.';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2103,// Suppress leading zeros
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2104,q = 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2105,while (buffer[q] == '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2106,q++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2108,if (buffer[q] == '.') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2109,q--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2112,// Suppress trailing zeros
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2113,while (buffer[p-1] == '0') {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2114,p--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2117,// Insert sign
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2118,if (sign < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2119,buffer[--q] = '-';
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2122,"return new String(buffer, q, p - q);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2126,/** Raises a trap.  This does not set the corresponding flag however.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2127,*  @param type the trap type
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2128,*  @param what - name of routine trap occurred in
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2129,*  @param oper - input operator to function
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2130,*  @param result - the result computed prior to the trap
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2131,*  @return The suggested return value from the trap handler
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2133,"public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2134,Dfp def = result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2136,switch (type) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2137,case DfpField.FLAG_INVALID:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2138,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2139,def.sign = result.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2140,def.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2141,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2143,case DfpField.FLAG_DIV_ZERO:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2144,if (nans == FINITE && mant[mant.length-1] != 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2145,"// normal case, we are finite, non-zero"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2146,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2147,def.sign = (byte)(sign*oper.sign);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2148,def.nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2151,if (nans == FINITE && mant[mant.length-1] == 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2152,//  0/0
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2153,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2154,def.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2157,if (nans == INFINITE || nans == QNAN) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2158,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2159,def.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2162,if (nans == INFINITE || nans == SNAN) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2163,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2164,def.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2166,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2168,case DfpField.FLAG_UNDERFLOW:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2169,if ( (result.exp+mant.length) < MIN_EXP) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2170,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2171,def.sign = result.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2172,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2173,def = newInstance(result);  // gradual underflow
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2175,result.exp = result.exp + ERR_SCALE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2176,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2178,case DfpField.FLAG_OVERFLOW:
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2179,result.exp = result.exp - ERR_SCALE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2180,def = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2181,def.sign = result.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2182,def.nans = INFINITE;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2183,break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2185,default: def = result; break;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2188,"return trap(type, what, oper, def, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2192,/** Trap handler.  Subclasses may override this to provide trap
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2193,*  functionality per IEEE 854-1987.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2195,*  @param type  The exception type - e.g. FLAG_OVERFLOW
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2196,*  @param what  The name of the routine we were in e.g. divide()
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2197,*  @param oper  An operand to this function if any
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2198,*  @param def   The default return value if trap not enabled
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2199,*  @param result    The result that is specified to be delivered per
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2200,"*                   IEEE 854, if any"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2201,*  @return the value that should be return by the operation triggering the trap
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2203,"protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2204,return def;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2207,"/** Returns the type - one of FINITE, INFINITE, SNAN, QNAN."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2208,* @return type of the number
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2210,public int classify() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2211,return nans;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2214,/** Creates an instance that is the same as x except that it has the sign of y.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2215,"* abs(x) = dfp.copysign(x, dfp.one)"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2216,* @param x number to get the value from
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2217,* @param y number to get the sign from
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2218,* @return a number with the value of x and the sign of y
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2220,"public static Dfp copysign(final Dfp x, final Dfp y) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2221,Dfp result = x.newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2222,result.sign = y.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2223,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2226,/** Returns the next number greater than this one in the direction of x.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2227,* If this==x then simply returns this.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2228,* @param x direction where to look at
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2229,* @return closest number next to instance in the direction of x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2231,public Dfp nextAfter(final Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2233,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2234,if (field.getRadixDigits() != x.field.getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2235,field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2236,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2237,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2238,"return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2241,// if this is greater than x
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2242,boolean up = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2243,if (this.lessThan(x)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2244,up = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2247,"if (compare(this, x) == 0) {"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2248,return newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2251,if (lessThan(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2252,up = !up;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2255,final Dfp inc;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2256,Dfp result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2257,if (up) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2258,inc = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2259,inc.exp = this.exp-mant.length+1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2260,inc.sign = this.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2262,if (this.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2263,inc.exp = MIN_EXP-mant.length;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2266,result = add(inc);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2267,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2268,inc = newInstance(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2269,inc.exp = this.exp;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2270,inc.sign = this.sign;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2272,if (this.equals(inc)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2273,inc.exp = this.exp-mant.length;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2274,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2275,inc.exp = this.exp-mant.length+1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2278,if (this.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2279,inc.exp = MIN_EXP-mant.length;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2282,result = this.subtract(inc);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2285,if (result.classify() == INFINITE && this.classify() != INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2286,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2287,"result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2290,if (result.equals(getZero()) && this.equals(getZero()) == false) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2291,field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2292,"result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2295,return result;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2299,/** Convert the instance into a double.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2300,* @return a double approximating the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2301,* @see #toSplitDouble()
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2303,public double toDouble() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2305,if (isInfinite()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2306,if (lessThan(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2307,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2308,} else {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2309,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2313,if (isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2314,return Double.NaN;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2317,Dfp y = this;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2318,boolean negate = false;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2319,if (lessThan(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2320,y = negate();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2321,negate = true;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2324,"/* Find the exponent, first estimate by integer log10, then adjust."
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2325,Should be faster than doing a natural logarithm.  */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2326,int exponent = (int)(y.log10() * 3.32);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2327,if (exponent < 0) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2328,exponent--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2331,"Dfp tempDfp = DfpMath.pow(getTwo(), exponent);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2332,while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2333,tempDfp = tempDfp.multiply(2);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2334,exponent++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2336,exponent--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2338,"/* We have the exponent, now work on the mantissa */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2340,"y = y.divide(DfpMath.pow(getTwo(), exponent));"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2341,if (exponent > -1023) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2342,y = y.subtract(getOne());
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2345,if (exponent < -1074) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2346,return 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2349,if (exponent > 1023) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2350,return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2354,y = y.multiply(newInstance(4503599627370496l)).rint();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2355,String str = y.toString();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2356,"str = str.substring(0, str.length()-1);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2357,long mantissa = Long.parseLong(str);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2359,if (mantissa == 4503599627370496L) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2360,// Handle special case where we round up to next power of two
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2361,mantissa = 0;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2362,exponent++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2365,"/* Its going to be subnormal, so make adjustments */"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2366,if (exponent <= -1023) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2367,exponent--;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2370,while (exponent < -1023) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2371,exponent++;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2372,mantissa >>>= 1;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2375,long bits = mantissa | ((exponent + 1023L) << 52);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2376,double x = Double.longBitsToDouble(bits);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2378,if (negate) {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2379,x = -x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2382,return x;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2386,/** Convert the instance into a split double.
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2387,* @return an array of two doubles which sum represent the instance
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2388,* @see #toDouble()
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2390,public double[] toSplitDouble() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2391,double split[] = new double[2];
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2392,long mask = 0xffffffffc0000000L;
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2394,split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2395,split[1] = subtract(newInstance(split[0])).toDouble();
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,2397,return split;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,18,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,20,/** Subclass of {@link Dfp} which hides the radix-10000 artifacts of the superclass.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,21,* This should give outward appearances of being a decimal number with DIGITS*4-3
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,22,* decimal digits. This class can be subclassed to appear to be an arbitrary number
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,23,* of decimal digits less than DIGITS*4-3.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,24,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,25,* @since 2.2
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,27,public class DfpDec extends Dfp {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,29,/** Makes an instance with a value of zero.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,30,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,32,protected DfpDec(final DfpField factory) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,33,super(factory);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,36,/** Create an instance from a byte value.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,37,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,38,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,40,"protected DfpDec(final DfpField factory, byte x) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,41,"super(factory, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,44,/** Create an instance from an int value.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,45,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,46,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,48,"protected DfpDec(final DfpField factory, int x) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,49,"super(factory, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,52,/** Create an instance from a long value.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,53,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,54,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,56,"protected DfpDec(final DfpField factory, long x) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,57,"super(factory, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,60,/** Create an instance from a double value.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,61,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,62,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,64,"protected DfpDec(final DfpField factory, double x) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,65,"super(factory, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,66,round(0);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,69,/** Copy constructor.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,70,* @param d instance to copy
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,72,public DfpDec(final Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,73,super(d);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,74,round(0);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,77,/** Create an instance from a String representation.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,78,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,79,* @param s string representation of the instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,81,"protected DfpDec(final DfpField factory, final String s) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,82,"super(factory, s);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,83,round(0);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,86,/** Creates an instance with a non-finite value.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,87,* @param factory factory linked to this instance
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,88,* @param sign sign of the Dfp to create
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,89,"* @param nans code of the value, must be one of {@link #INFINITE},"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,90,"* {@link #SNAN},  {@link #QNAN}"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,92,"protected DfpDec(final DfpField factory, final byte sign, final byte nans) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,93,"super(factory, sign, nans);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,96,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,97,public Dfp newInstance() {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,98,return new DfpDec(getField());
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,101,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,102,public Dfp newInstance(final byte x) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,103,"return new DfpDec(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,106,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,107,public Dfp newInstance(final int x) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,108,"return new DfpDec(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,112,public Dfp newInstance(final long x) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,113,"return new DfpDec(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,116,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,117,public Dfp newInstance(final double x) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,118,"return new DfpDec(getField(), x);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,121,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,122,public Dfp newInstance(final Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,124,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,125,if (getField().getRadixDigits() != d.getField().getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,126,getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,127,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,128,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,129,"return dotrap(DfpField.FLAG_INVALID, ""newInstance"", d, result);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,132,return new DfpDec(d);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,136,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,137,public Dfp newInstance(final String s) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,138,"return new DfpDec(getField(), s);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,141,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,142,"public Dfp newInstance(final byte sign, final byte nans) {"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,143,"return new DfpDec(getField(), sign, nans);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,146,/** Get the number of decimal digits this class is going to represent.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,147,* Default implementation returns {@link #getRadixDigits()}*4-3. Subclasses can
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,148,* override this to return something less.
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,149,* @return number of decimal digits this class is going to represent
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,151,protected int getDecimalDigits() {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,152,return getRadixDigits() * 4 - 3;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,155,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,156,protected int round(int in) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,158,int msb = mant[mant.length-1];
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,159,if (msb == 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,160,// special case -- this == zero
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,161,return 0;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,164,int cmaxdigits = mant.length * 4;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,165,int lsbthreshold = 1000;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,166,while (lsbthreshold > msb) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,167,lsbthreshold /= 10;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,168,cmaxdigits --;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,172,final int digits = getDecimalDigits();
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,173,final int lsbshift = cmaxdigits - digits;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,174,final int lsd = lsbshift / 4;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,176,lsbthreshold = 1;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,177,for (int i = 0; i < lsbshift % 4; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,178,lsbthreshold *= 10;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,181,final int lsb = mant[lsd];
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,183,if (lsbthreshold <= 1 && digits == 4 * mant.length - 3) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,184,return super.round(in);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,187,int discarded = in;  // not looking at this after this point
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,188,final int n;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,189,if (lsbthreshold == 1) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,190,// look to the next digit for rounding
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,191,n = (mant[lsd-1] / 1000) % 10;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,192,mant[lsd-1] %= 1000;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,193,discarded |= mant[lsd-1];
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,194,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,195,n = (lsb * 10 / lsbthreshold) % 10;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,196,discarded |= lsb % (lsbthreshold/10);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,199,for (int i = 0; i < lsd; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,200,discarded |= mant[i];    // need to know if there are any discarded bits
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,201,mant[i] = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,204,mant[lsd] = lsb / lsbthreshold * lsbthreshold;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,206,final boolean inc;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,207,switch (getField().getRoundingMode()) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,208,case ROUND_DOWN:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,209,inc = false;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,210,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,212,case ROUND_UP:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,213,inc = (n != 0) || (discarded != 0); // round up if n!=0
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,214,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,216,case ROUND_HALF_UP:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,217,inc = n >= 5;  // round half up
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,218,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,220,case ROUND_HALF_DOWN:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,221,inc = n > 5;  // round half down
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,222,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,224,case ROUND_HALF_EVEN:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,225,inc = (n > 5) ||
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,226,(n == 5 && discarded != 0) ||
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,227,(n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 1);  // round half-even
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,228,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,230,case ROUND_HALF_ODD:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,231,inc = (n > 5) ||
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,232,(n == 5 && discarded != 0) ||
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,233,(n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 0);  // round half-odd
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,234,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,236,case ROUND_CEIL:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,237,inc = (sign == 1) && (n != 0 || discarded != 0);  // round ceil
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,238,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,240,case ROUND_FLOOR:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,241,default:
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,242,inc = (sign == -1) && (n != 0 || discarded != 0);  // round floor
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,243,break;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,246,if (inc) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,247,// increment if necessary
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,248,int rh = lsbthreshold;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,249,for (int i = lsd; i < mant.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,250,final int r = mant[i] + rh;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,251,rh = r / RADIX;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,252,mant[i] = r % RADIX;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,255,if (rh != 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,256,shiftRight();
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,257,mant[mant.length-1]=rh;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,261,// Check for exceptional cases and raise signals if necessary
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,262,if (exp < MIN_EXP) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,263,// Gradual Underflow
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,264,getField().setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,265,return DfpField.FLAG_UNDERFLOW;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,268,if (exp > MAX_EXP) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,269,// Overflow
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,270,getField().setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,271,return DfpField.FLAG_OVERFLOW;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,274,if (n != 0 || discarded != 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,275,// Inexact
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,276,getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,277,return DfpField.FLAG_INEXACT;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,279,return 0;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,282,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,283,public Dfp nextAfter(Dfp x) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,285,"final String trapName = ""nextAfter"";"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,287,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,288,if (getField().getRadixDigits() != x.getField().getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,289,getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,290,final Dfp result = newInstance(getZero());
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,291,result.nans = QNAN;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,292,"return dotrap(DfpField.FLAG_INVALID, trapName, x, result);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,295,boolean up = false;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,296,Dfp result;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,297,Dfp inc;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,299,// if this is greater than x
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,300,if (this.lessThan(x)) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,301,up = true;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,304,if (equals(x)) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,305,return newInstance(x);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,308,if (lessThan(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,309,up = !up;
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,312,if (up) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,313,inc = power10(log10() - getDecimalDigits() + 1);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,314,"inc = copysign(inc, this);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,316,if (this.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,317,inc = power10K(MIN_EXP-mant.length-1);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,320,if (inc.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,321,"result = copysign(newInstance(getZero()), this);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,322,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,323,result = add(inc);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,325,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,326,inc = power10(log10());
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,327,"inc = copysign(inc, this);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,329,if (this.equals(inc)) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,330,inc = inc.divide(power10(getDecimalDigits()));
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,331,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,332,inc = inc.divide(power10(getDecimalDigits() - 1));
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,335,if (this.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,336,inc = power10K(MIN_EXP-mant.length-1);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,339,if (inc.equals(getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,340,"result = copysign(newInstance(getZero()), this);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,341,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,342,result = subtract(inc);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,346,if (result.classify() == INFINITE && this.classify() != INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,347,getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,348,"result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,351,if (result.equals(getZero()) && this.equals(getZero()) == false) {
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,352,getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,353,"result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result);"
True,src/main/java/org/apache/commons/math/dfp/DfpDec.java,src/main/java/org/apache/commons/math/dfp/DfpDec.java,356,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,18,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,20,import org.apache.commons.math.Field;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,22,/** Field for Decimal floating point instances.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,23,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,24,* @since 2.2
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,26,public class DfpField implements Field<Dfp> {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,28,/** Enumerate for rounding modes. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,29,public enum RoundingMode {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,31,/** Rounds toward zero (truncation). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,32,"ROUND_DOWN,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,34,/** Rounds away from zero if discarded digit is non-zero. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,35,"ROUND_UP,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,37,/** Rounds towards nearest unless both are equidistant in which case it rounds away from zero. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,38,"ROUND_HALF_UP,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,40,/** Rounds towards nearest unless both are equidistant in which case it rounds toward zero. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,41,"ROUND_HALF_DOWN,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,43,/** Rounds towards nearest unless both are equidistant in which case it rounds toward the even neighbor.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,44,* This is the default as  specified by IEEE 854-1987
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,46,"ROUND_HALF_EVEN,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,48,/** Rounds towards nearest unless both are equidistant in which case it rounds toward the odd neighbor.  */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,49,"ROUND_HALF_ODD,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,51,/** Rounds towards positive infinity. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,52,"ROUND_CEIL,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,54,/** Rounds towards negative infinity. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,55,ROUND_FLOOR;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,59,/** IEEE 854-1987 flag for invalid operation. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,60,public static final int FLAG_INVALID   =  1;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,62,/** IEEE 854-1987 flag for division by zero. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,63,public static final int FLAG_DIV_ZERO  =  2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,65,/** IEEE 854-1987 flag for overflow. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,66,public static final int FLAG_OVERFLOW  =  4;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,68,/** IEEE 854-1987 flag for underflow. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,69,public static final int FLAG_UNDERFLOW =  8;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,71,/** IEEE 854-1987 flag for inexact result. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,72,public static final int FLAG_INEXACT   = 16;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,74,/** High precision string representation of &radic;2. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,75,private static String sqr2String;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,77,/** High precision string representation of &radic;2 / 2. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,78,private static String sqr2ReciprocalString;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,80,/** High precision string representation of &radic;3. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,81,private static String sqr3String;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,83,/** High precision string representation of &radic;3 / 3. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,84,private static String sqr3ReciprocalString;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,86,/** High precision string representation of &pi;. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,87,private static String piString;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,89,/** High precision string representation of e. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,90,private static String eString;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,92,/** High precision string representation of ln(2). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,93,private static String ln2String;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,95,/** High precision string representation of ln(5). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,96,private static String ln5String;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,98,/** High precision string representation of ln(10). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,99,private static String ln10String;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,101,/** The number of radix digits.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,102,"* Note these depend on the radix which is 10000 digits,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,103,* so each one is equivalent to 4 decimal digits.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,105,private final int radixDigits;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,107,/** A {@link Dfp} with value 0. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,108,private final Dfp zero;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,110,/** A {@link Dfp} with value 1. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,111,private final Dfp one;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,113,/** A {@link Dfp} with value 2. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,114,private final Dfp two;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,116,/** A {@link Dfp} with value &radic;2. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,117,private final Dfp sqr2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,119,/** A two elements {@link Dfp} array with value &radic;2 split in two pieces. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,120,private final Dfp[] sqr2Split;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,122,/** A {@link Dfp} with value &radic;2 / 2. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,123,private final Dfp sqr2Reciprocal;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,125,/** A {@link Dfp} with value &radic;3. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,126,private final Dfp sqr3;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,128,/** A {@link Dfp} with value &radic;3 / 3. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,129,private final Dfp sqr3Reciprocal;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,131,/** A {@link Dfp} with value &pi;. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,132,private final Dfp pi;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,134,/** A two elements {@link Dfp} array with value &pi; split in two pieces. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,135,private final Dfp[] piSplit;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,137,/** A {@link Dfp} with value e. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,138,private final Dfp e;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,140,/** A two elements {@link Dfp} array with value e split in two pieces. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,141,private final Dfp[] eSplit;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,143,/** A {@link Dfp} with value ln(2). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,144,private final Dfp ln2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,146,/** A two elements {@link Dfp} array with value ln(2) split in two pieces. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,147,private final Dfp[] ln2Split;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,149,/** A {@link Dfp} with value ln(5). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,150,private final Dfp ln5;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,152,/** A two elements {@link Dfp} array with value ln(5) split in two pieces. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,153,private final Dfp[] ln5Split;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,155,/** A {@link Dfp} with value ln(10). */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,156,private final Dfp ln10;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,158,/** Current rounding mode. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,159,private RoundingMode rMode;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,161,/** IEEE 854-1987 signals. */
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,162,private int ieeeFlags;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,164,/** Create a factory for the specified number of radix digits.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,165,* <p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,166,"* Note that since the {@link Dfp} class uses 10000 as its radix, each radix"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,167,* digit is equivalent to 4 decimal digits. This implies that asking for
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,168,"* 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,169,* all cases.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,170,* </p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,171,* @param decimalDigits minimal number of decimal digits.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,173,public DfpField(final int decimalDigits) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,174,"this(decimalDigits, true);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,177,/** Create a factory for the specified number of radix digits.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,178,* <p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,179,"* Note that since the {@link Dfp} class uses 10000 as its radix, each radix"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,180,* digit is equivalent to 4 decimal digits. This implies that asking for
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,181,"* 13, 14, 15 or 16 decimal digits will really lead to a 4 radix 10000 digits in"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,182,* all cases.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,183,* </p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,184,* @param decimalDigits minimal number of decimal digits
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,185,"* @param computeConstants if true, the transcendental constants for the given precision"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,186,* must be computed (setting this flag to false is RESERVED for the internal recursive call)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,188,"public DfpField(final int decimalDigits, final boolean computeConstants) {"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,190,this.radixDigits = (decimalDigits + 3) / 4;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,191,this.rMode       = RoundingMode.ROUND_HALF_EVEN;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,192,this.ieeeFlags   = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,193,"this.zero        = new Dfp(this, 0);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,194,"this.one         = new Dfp(this, 1);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,195,"this.two         = new Dfp(this, 2);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,197,if (computeConstants) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,198,// set up transcendental constants
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,199,synchronized (DfpField.class) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,201,"// as a heuristic to circumvent Table-Maker's Dilemma, we set the string"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,202,// representation of the constants to be at least 3 times larger than the
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,203,"// number of decimal digits, also as an attempt to really compute these"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,204,"// constants only once, we set a minimum number of digits"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,205,computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,207,// set up the constants at current field accuracy
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,208,"sqr2           = new Dfp(this, sqr2String);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,209,sqr2Split      = split(sqr2String);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,210,"sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,211,"sqr3           = new Dfp(this, sqr3String);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,212,"sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,213,"pi             = new Dfp(this, piString);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,214,piSplit        = split(piString);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,215,"e              = new Dfp(this, eString);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,216,eSplit         = split(eString);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,217,"ln2            = new Dfp(this, ln2String);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,218,ln2Split       = split(ln2String);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,219,"ln5            = new Dfp(this, ln5String);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,220,ln5Split       = split(ln5String);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,221,"ln10           = new Dfp(this, ln10String);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,224,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,225,// dummy settings for unused constants
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,226,sqr2           = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,227,sqr2Split      = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,228,sqr2Reciprocal = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,229,sqr3           = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,230,sqr3Reciprocal = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,231,pi             = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,232,piSplit        = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,233,e              = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,234,eSplit         = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,235,ln2            = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,236,ln2Split       = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,237,ln5            = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,238,ln5Split       = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,239,ln10           = null;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,244,/** Get the number of radix digits of the {@link Dfp} instances built by this factory.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,245,* @return number of radix digits
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,247,public int getRadixDigits() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,248,return radixDigits;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,251,/** Set the rounding mode.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,252,"*  If not set, the default value is {@link RoundingMode#ROUND_HALF_EVEN}."
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,253,* @param mode desired rounding mode
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,254,* Note that the rounding mode is common to all {@link Dfp} instances
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,255,* belonging to the current {@link DfpField} in the system and will
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,256,* affect all future calculations.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,258,public void setRoundingMode(final RoundingMode mode) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,259,rMode = mode;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,262,/** Get the current rounding mode.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,263,* @return current rounding mode
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,265,public RoundingMode getRoundingMode() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,266,return rMode;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,269,/** Get the IEEE 854 status flags.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,270,* @return IEEE 854 status flags
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,271,* @see #clearIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,272,* @see #setIEEEFlags(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,273,* @see #setIEEEFlagsBits(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,274,* @see #FLAG_INVALID
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,275,* @see #FLAG_DIV_ZERO
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,276,* @see #FLAG_OVERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,277,* @see #FLAG_UNDERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,278,* @see #FLAG_INEXACT
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,280,public int getIEEEFlags() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,281,return ieeeFlags;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,284,/** Clears the IEEE 854 status flags.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,285,* @see #getIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,286,* @see #setIEEEFlags(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,287,* @see #setIEEEFlagsBits(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,288,* @see #FLAG_INVALID
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,289,* @see #FLAG_DIV_ZERO
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,290,* @see #FLAG_OVERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,291,* @see #FLAG_UNDERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,292,* @see #FLAG_INEXACT
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,294,public void clearIEEEFlags() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,295,ieeeFlags = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,298,/** Sets the IEEE 854 status flags.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,299,* @param flags desired value for the flags
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,300,* @see #getIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,301,* @see #clearIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,302,* @see #setIEEEFlagsBits(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,303,* @see #FLAG_INVALID
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,304,* @see #FLAG_DIV_ZERO
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,305,* @see #FLAG_OVERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,306,* @see #FLAG_UNDERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,307,* @see #FLAG_INEXACT
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,309,public void setIEEEFlags(final int flags) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,310,ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,313,"/** Sets some bits in the IEEE 854 status flags, without changing the already set bits."
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,314,* <p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,315,* Calling this method is equivalent to call {@code setIEEEFlags(getIEEEFlags() | bits)}
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,316,* </p>
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,317,* @param bits bits to set
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,318,* @see #getIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,319,* @see #clearIEEEFlags()
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,320,* @see #setIEEEFlags(int)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,321,* @see #FLAG_INVALID
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,322,* @see #FLAG_DIV_ZERO
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,323,* @see #FLAG_OVERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,324,* @see #FLAG_UNDERFLOW
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,325,* @see #FLAG_INEXACT
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,327,public void setIEEEFlagsBits(final int bits) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,328,ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,331,/** Makes a {@link Dfp} with a value of 0.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,332,* @return a new {@link Dfp} with a value of 0
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,334,public Dfp newDfp() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,335,return new Dfp(this);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,338,/** Create an instance from a byte value.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,339,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,340,* @return a new {@link Dfp} with the same value as x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,342,public Dfp newDfp(final byte x) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,343,"return new Dfp(this, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,346,/** Create an instance from an int value.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,347,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,348,* @return a new {@link Dfp} with the same value as x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,350,public Dfp newDfp(final int x) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,351,"return new Dfp(this, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,354,/** Create an instance from a long value.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,355,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,356,* @return a new {@link Dfp} with the same value as x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,358,public Dfp newDfp(final long x) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,359,"return new Dfp(this, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,362,/** Create an instance from a double value.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,363,* @param x value to convert to an instance
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,364,* @return a new {@link Dfp} with the same value as x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,366,public Dfp newDfp(final double x) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,367,"return new Dfp(this, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,370,/** Copy constructor.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,371,* @param d instance to copy
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,372,* @return a new {@link Dfp} with the same value as d
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,374,public Dfp newDfp(Dfp d) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,375,return new Dfp(d);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,378,/** Create a {@link Dfp} given a String representation.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,379,* @param s string representation of the instance
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,380,* @return a new {@link Dfp} parsed from specified string
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,382,public Dfp newDfp(final String s) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,383,"return new Dfp(this, s);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,386,/** Creates a {@link Dfp} with a non-finite value.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,387,* @param sign sign of the Dfp to create
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,388,"* @param nans code of the value, must be one of {@link Dfp#INFINITE},"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,389,"* {@link Dfp#SNAN},  {@link Dfp#QNAN}"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,390,* @return a new {@link Dfp} with a non-finite value
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,392,"public Dfp newDfp(final byte sign, final byte nans) {"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,393,"return new Dfp(this, sign, nans);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,396,/** Get the constant 0.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,397,* @return a {@link Dfp} with value 0
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,399,public Dfp getZero() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,400,return zero;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,403,/** Get the constant 1.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,404,* @return a {@link Dfp} with value 1
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,406,public Dfp getOne() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,407,return one;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,410,/** Get the constant 2.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,411,* @return a {@link Dfp} with value 2
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,413,public Dfp getTwo() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,414,return two;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,417,/** Get the constant &radic;2.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,418,* @return a {@link Dfp} with value &radic;2
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,420,public Dfp getSqr2() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,421,return sqr2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,424,/** Get the constant &radic;2 split in two pieces.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,425,* @return a {@link Dfp} with value &radic;2 split in two pieces
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,427,public Dfp[] getSqr2Split() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,428,return sqr2Split.clone();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,431,/** Get the constant &radic;2 / 2.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,432,* @return a {@link Dfp} with value &radic;2 / 2
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,434,public Dfp getSqr2Reciprocal() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,435,return sqr2Reciprocal;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,438,/** Get the constant &radic;3.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,439,* @return a {@link Dfp} with value &radic;3
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,441,public Dfp getSqr3() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,442,return sqr3;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,445,/** Get the constant &radic;3 / 3.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,446,* @return a {@link Dfp} with value &radic;3 / 3
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,448,public Dfp getSqr3Reciprocal() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,449,return sqr3Reciprocal;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,452,/** Get the constant &pi;.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,453,* @return a {@link Dfp} with value &pi;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,455,public Dfp getPi() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,456,return pi;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,459,/** Get the constant &pi; split in two pieces.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,460,* @return a {@link Dfp} with value &pi; split in two pieces
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,462,public Dfp[] getPiSplit() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,463,return piSplit.clone();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,466,/** Get the constant e.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,467,* @return a {@link Dfp} with value e
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,469,public Dfp getE() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,470,return e;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,473,/** Get the constant e split in two pieces.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,474,* @return a {@link Dfp} with value e split in two pieces
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,476,public Dfp[] getESplit() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,477,return eSplit.clone();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,480,/** Get the constant ln(2).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,481,* @return a {@link Dfp} with value ln(2)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,483,public Dfp getLn2() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,484,return ln2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,487,/** Get the constant ln(2) split in two pieces.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,488,* @return a {@link Dfp} with value ln(2) split in two pieces
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,490,public Dfp[] getLn2Split() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,491,return ln2Split.clone();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,494,/** Get the constant ln(5).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,495,* @return a {@link Dfp} with value ln(5)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,497,public Dfp getLn5() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,498,return ln5;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,501,/** Get the constant ln(5) split in two pieces.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,502,* @return a {@link Dfp} with value ln(5) split in two pieces
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,504,public Dfp[] getLn5Split() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,505,return ln5Split.clone();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,508,/** Get the constant ln(10).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,509,* @return a {@link Dfp} with value ln(10)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,511,public Dfp getLn10() {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,512,return ln10;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,515,/** Breaks a string representation up into two {@link Dfp}'s.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,516,"* The split is such that the sum of them is equivalent to the input string,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,517,* but has higher precision than using a single Dfp.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,518,* @param a string representation of the number to split
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,519,* @return an array of two {@link Dfp Dfp} instances which sum equals a
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,521,private Dfp[] split(final String a) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,522,Dfp result[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,523,boolean leading = true;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,524,int sp = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,525,int sig = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,527,char[] buf = new char[a.length()];
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,529,for (int i = 0; i < buf.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,530,buf[i] = a.charAt(i);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,532,if (buf[i] >= '1' && buf[i] <= '9') {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,533,leading = false;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,536,if (buf[i] == '.') {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,537,sig += (400 - sig) % 4;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,538,leading = false;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,541,if (sig == (radixDigits / 2) * 4) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,542,sp = i;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,543,break;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,546,if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,547,sig ++;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,551,"result[0] = new Dfp(this, new String(buf, 0, sp));"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,553,for (int i = 0; i < buf.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,554,buf[i] = a.charAt(i);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,555,if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,556,buf[i] = '0';
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,560,"result[1] = new Dfp(this, new String(buf));"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,562,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,566,/** Recompute the high precision string constants.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,567,* @param highPrecisionDecimalDigits precision at which the string constants mus be computed
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,569,private static void computeStringConstants(final int highPrecisionDecimalDigits) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,570,if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,572,// recompute the string representation of the transcendental constants
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,573,"final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,574,"final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,575,"final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,576,"final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,578,final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,579,sqr2String           = highPrecisionSqr2.toString();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,580,sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,582,final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,583,sqr3String           = highPrecisionSqr3.toString();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,584,sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,586,"piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,587,"eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,588,"ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,589,"ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,590,"ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,595,/** Compute &pi; by atan(1/&radic;(3)) = &pi;/6.
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,596,* @param one constant with value 1 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,597,* @param two constant with value 2 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,598,* @param three constant with value 3 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,599,* @return &pi;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,601,"private static Dfp computePi(final Dfp one, final Dfp two, final Dfp three) {"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,603,Dfp x = three;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,604,x = x.sqrt();
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,605,x = one.divide(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,607,Dfp denom = one;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,609,Dfp py = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,610,Dfp y  = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,612,for (int i = 1; i < 10000; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,613,x = x.divide(three);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,614,denom = denom.add(two);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,615,if ((i&1) != 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,616,y = y.subtract(x.divide(denom));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,617,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,618,y = y.add(x.divide(denom));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,620,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,621,break;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,623,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,626,"return y.multiply(new Dfp(one.getField(), 6));"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,630,/** Compute exp(a).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,631,* @param a number for which we want the exponential
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,632,* @param one constant with value 1 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,633,* @return exp(a)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,635,"public static Dfp computeExp(final Dfp a, final Dfp one) {"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,637,Dfp y  = new Dfp(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,638,Dfp py = new Dfp(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,639,Dfp f  = new Dfp(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,640,Dfp fi = new Dfp(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,641,Dfp x  = new Dfp(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,643,for (int i = 0; i < 10000; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,644,x = x.multiply(a);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,645,y = y.add(x.divide(f));
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,646,fi = fi.add(one);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,647,f = f.multiply(fi);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,648,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,649,break;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,651,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,654,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,659,/** Compute ln(a).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,661,"*  Let f(x) = ln(x),"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,663,"*  We know that f'(x) = 1/x, thus from Taylor's theorem we have:"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,665,*           -----          n+1         n
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,666,*  f(x) =   \           (-1)    (x - 1)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,667,*           /          ----------------    for 1 <= n <= infinity
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,668,*           -----             n
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,670,*  or
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,671,*                       2        3       4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,672,*                   (x-1)   (x-1)    (x-1)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,673,*  ln(x) =  (x-1) - ----- + ------ - ------ + ...
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,674,*                     2       3        4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,676,"*  alternatively,"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,678,*                  2    3   4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,679,*                 x    x   x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,680,*  ln(x+1) =  x - -  + - - - + ...
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,681,*                 2    3   4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,683,"*  This series can be used to compute ln(x), but it converges too slowly."
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,685,"*  If we substitute -x for x above, we get"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,687,*                   2    3    4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,688,*                  x    x    x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,689,*  ln(1-x) =  -x - -  - -  - - + ...
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,690,*                  2    3    4
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,692,*  Note that all terms are now negative.  Because the even powered ones
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,693,"*  absorbed the sign.  Now, subtract the series above from the previous"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,694,*  one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,695,*  only the odd ones
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,697,*                             3     5      7
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,698,*                           2x    2x     2x
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,699,*  ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ...
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,700,*                            3     5      7
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,702,*  By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have:
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,704,*                                3        5        7
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,705,*      x+1           /          x        x        x          \
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,706,*  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,707,*      x-1           \          3        5        7          /
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,709,"*  But now we want to find ln(a), so we need to find the value of x"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,710,*  such that a = (x+1)/(x-1).   This is easily solved to find that
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,711,*  x = (a-1)/(a+1).
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,712,* @param a number for which we want the exponential
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,713,* @param one constant with value 1 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,714,* @param two constant with value 2 at desired precision
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,715,* @return ln(a)
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,718,"public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two) {"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,720,int den = 1;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,721,"Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));"
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,723,Dfp y = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,724,Dfp num = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,725,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,726,for (int i = 0; i < 10000; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,727,num = num.multiply(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,728,num = num.multiply(x);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,729,den = den + 2;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,730,Dfp t = num.divide(den);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,731,y = y.add(t);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,732,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,733,break;
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,735,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpField.java,src/main/java/org/apache/commons/math/dfp/DfpField.java,738,return y.multiply(two);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,18,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,20,/** Mathematical routines for use with {@link Dfp}.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,21,* The constants are defined in {@link DfpField}
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,22,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,23,* @since 2.2
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,25,public class DfpMath {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,27,/** Name for traps triggered by pow. */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,28,"private static final String POW_TRAP = ""pow"";"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,31,* Private Constructor.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,33,private DfpMath() {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,36,/** Breaks a string representation up into two dfp's.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,37,* <p>The two dfp are such that the sum of them is equivalent
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,38,"* to the input string, but has higher precision than using a"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,39,* single dfp. This is useful for improving accuracy of
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,40,* exponentiation and critical multiplies.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,41,* @param field field to which the Dfp must belong
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,42,* @param a string representation to split
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,43,* @return an array of two {@link Dfp} which sum is a
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,45,"protected static Dfp[] split(final DfpField field, final String a) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,46,Dfp result[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,47,char[] buf;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,48,boolean leading = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,49,int sp = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,50,int sig = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,52,buf = new char[a.length()];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,54,for (int i = 0; i < buf.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,55,buf[i] = a.charAt(i);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,57,if (buf[i] >= '1' && buf[i] <= '9') {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,58,leading = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,61,if (buf[i] == '.') {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,62,sig += (400 - sig) % 4;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,63,leading = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,66,if (sig == (field.getRadixDigits() / 2) * 4) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,67,sp = i;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,68,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,71,if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,72,sig ++;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,76,"result[0] = field.newDfp(new String(buf, 0, sp));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,78,for (int i = 0; i < buf.length; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,79,buf[i] = a.charAt(i);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,80,if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,81,buf[i] = '0';
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,85,result[1] = field.newDfp(new String(buf));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,87,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,90,/** Splits a {@link Dfp} into 2 {@link Dfp}'s such that their sum is equal to the input {@link Dfp}.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,91,* @param a number to split
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,92,* @return two elements array containing the split number
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,94,protected static Dfp[] split(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,95,final Dfp[] result = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,96,final Dfp shift = a.multiply(a.power10K(a.getRadixDigits() / 2));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,97,result[0] = a.add(shift).subtract(shift);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,98,result[1] = a.subtract(result[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,99,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,102,/** Multiply two numbers that are split in to two pieces that are
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,103,*  meant to be added together.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,104,*  Use binomial multiplication so ab = a0 b0 + a0 b1 + a1 b0 + a1 b1
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,105,"*  Store the first term in result0, the rest in result1"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,106,"*  @param a first factor of the multiplication, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,107,"*  @param b second factor of the multiplication, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,108,"*  @return a &times; b, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,110,"protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,111,final Dfp[] result = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,113,result[1] = a[0].getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,114,result[0] = a[0].multiply(b[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,116,"/* If result[0] is infinite or zero, don't compute result[1]."
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,117,* Attempting to do so may produce NaNs.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,120,if (result[0].classify() == Dfp.INFINITE || result[0].equals(result[1])) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,121,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,124,result[1] = a[0].multiply(b[1]).add(a[1].multiply(b[0])).add(a[1].multiply(b[1]));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,126,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,129,/** Divide two numbers that are split in to two pieces that are meant to be added together.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,130,* Inverse of split multiply above:
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,131,*  (a+b) / (c+d) = (a/c) + ( (bc-ad)/(c**2+cd) )
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,132,"*  @param a dividend, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,133,"*  @param b divisor, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,134,"*  @return a / b, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,136,"protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,137,final Dfp[] result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,139,result = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,141,result[0] = a[0].divide(b[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,142,result[1] = a[1].multiply(b[0]).subtract(a[0].multiply(b[1]));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,143,result[1] = result[1].divide(b[0].multiply(b[0]).add(b[0].multiply(b[1])));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,145,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,148,/** Raise a split base to the a power.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,149,* @param base number to raise
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,150,* @param a power
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,151,* @return base<sup>a</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,153,"protected static Dfp splitPow(final Dfp[] base, int a) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,154,boolean invert = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,156,Dfp[] r = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,158,Dfp[] result = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,159,result[0] = base[0].getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,160,result[1] = base[0].getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,162,if (a == 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,163,// Special case a = 0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,164,return result[0].add(result[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,167,if (a < 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,168,// If a is less than zero
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,169,invert = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,170,a = -a;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,173,// Exponentiate by successive squaring
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,174,do {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,175,r[0] = new Dfp(base[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,176,r[1] = new Dfp(base[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,177,int trial = 1;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,179,int prevtrial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,180,while (true) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,181,prevtrial = trial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,182,trial = trial * 2;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,183,if (trial > a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,184,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,186,"r = splitMult(r, r);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,189,trial = prevtrial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,191,a -= trial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,192,"result = splitMult(result, r);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,194,} while (a >= 1);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,196,result[0] = result[0].add(result[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,198,if (invert) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,199,result[0] = base[0].getOne().divide(result[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,202,return result[0];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,206,/** Raises base to the power a by successive squaring.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,207,* @param base number to raise
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,208,* @param a power
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,209,* @return base<sup>a</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,211,"public static Dfp pow(Dfp base, int a)"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,213,boolean invert = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,215,Dfp result = base.getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,217,if (a == 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,218,// Special case
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,219,return result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,222,if (a < 0) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,223,invert = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,224,a = -a;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,227,// Exponentiate by successive squaring
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,228,do {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,229,Dfp r = new Dfp(base);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,230,Dfp prevr;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,231,int trial = 1;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,232,int prevtrial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,234,do {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,235,prevr = new Dfp(r);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,236,prevtrial = trial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,237,r = r.multiply(r);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,238,trial = trial * 2;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,239,} while (a>trial);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,241,r = prevr;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,242,trial = prevtrial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,244,a = a - trial;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,245,result = result.multiply(r);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,247,} while (a >= 1);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,249,if (invert) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,250,result = base.getOne().divide(result);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,253,return base.newInstance(result);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,257,/** Computes e to the given power.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,258,"* a is broken into two parts, such that a = n+m  where n is an integer."
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,259,* We use pow() to compute e<sup>n</sup> and a Taylor series to compute
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,260,* e<sup>m</sup>.  We return e*<sup>n</sup> &times; e<sup>m</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,261,* @param a power at which e should be raised
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,262,* @return e<sup>a</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,264,public static Dfp exp(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,266,final Dfp inta = a.rint();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,267,final Dfp fraca = a.subtract(inta);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,269,final int ia = inta.intValue();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,270,if (ia > 2147483646) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,271,// return +Infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,272,"return a.newInstance((byte)1, (byte) Dfp.INFINITE);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,275,if (ia < -2147483646) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,276,// return 0;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,277,return a.newInstance();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,280,"final Dfp einta = splitPow(a.getField().getESplit(), ia);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,281,final Dfp efraca = expInternal(fraca);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,283,return einta.multiply(efraca);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,286,/** Computes e to the given power.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,287,* Where -1 < a < 1.  Use the classic Taylor series.  1 + x**2/2! + x**3/3! + x**4/4!  ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,288,* @param a power at which e should be raised
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,289,* @return e<sup>a</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,291,protected static Dfp expInternal(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,292,Dfp y = a.getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,293,Dfp x = a.getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,294,Dfp fact = a.getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,295,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,297,for (int i = 1; i < 90; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,298,x = x.multiply(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,299,fact = fact.divide(i);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,300,y = y.add(x.multiply(fact));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,301,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,302,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,304,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,307,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,310,/** Returns the natural logarithm of a.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,311,* a is first split into three parts such that  a = (10000^h)(2^j)k.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,312,* ln(a) is computed by ln(a) = ln(5)*h + ln(2)*(h+j) + ln(k)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,313,* k is in the range 2/3 < k <4/3 and is passed on to a series expansion.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,314,* @param a number from which logarithm is requested
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,315,* @return log(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,317,public static Dfp log(Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,318,int lr;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,319,Dfp x;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,320,int ix;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,321,int p2 = 0;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,323,// Check the arguments somewhat here
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,324,if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || (a.equals(a) == false)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,325,"// negative, zero or NaN"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,326,a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,327,"return a.dotrap(DfpField.FLAG_INVALID, ""ln"", a, a.newInstance((byte)1, (byte) Dfp.QNAN));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,330,if (a.classify() == Dfp.INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,331,return a;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,334,x = new Dfp(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,335,lr = x.log10K();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,337,"x = x.divide(pow(a.newInstance(10000), lr));  /* This puts x in the range 0-10000 */"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,338,ix = x.floor().intValue();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,340,while (ix > 2) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,341,ix >>= 1;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,342,p2++;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,346,Dfp[] spx = split(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,347,Dfp[] spy = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,348,"spy[0] = pow(a.getTwo(), p2);          // use spy[0] temporarily as a divisor"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,349,spx[0] = spx[0].divide(spy[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,350,spx[1] = spx[1].divide(spy[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,352,"spy[0] = a.newInstance(""1.33333"");    // Use spy[0] for comparison"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,353,while (spx[0].add(spx[1]).greaterThan(spy[0])) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,354,spx[0] = spx[0].divide(2);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,355,spx[1] = spx[1].divide(2);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,356,p2++;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,359,// X is now in the range of 2/3 < x < 4/3
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,360,Dfp[] spz = logInternal(spx);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,362,spx[0] = a.newInstance(new StringBuffer().append(p2+4*lr).toString());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,363,spx[1] = a.getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,364,"spy = splitMult(a.getField().getLn2Split(), spx);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,366,spz[0] = spz[0].add(spy[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,367,spz[1] = spz[1].add(spy[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,369,spx[0] = a.newInstance(new StringBuffer().append(4*lr).toString());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,370,spx[1] = a.getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,371,"spy = splitMult(a.getField().getLn5Split(), spx);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,373,spz[0] = spz[0].add(spy[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,374,spz[1] = spz[1].add(spy[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,376,return a.newInstance(spz[0].add(spz[1]));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,380,/** Computes the natural log of a number between 0 and 2.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,381,"*  Let f(x) = ln(x),"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,383,"*  We know that f'(x) = 1/x, thus from Taylor's theorum we have:"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,385,*           -----          n+1         n
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,386,*  f(x) =   \           (-1)    (x - 1)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,387,*           /          ----------------    for 1 <= n <= infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,388,*           -----             n
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,390,*  or
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,391,*                       2        3       4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,392,*                   (x-1)   (x-1)    (x-1)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,393,*  ln(x) =  (x-1) - ----- + ------ - ------ + ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,394,*                     2       3        4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,396,"*  alternatively,"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,398,*                  2    3   4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,399,*                 x    x   x
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,400,*  ln(x+1) =  x - -  + - - - + ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,401,*                 2    3   4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,403,"*  This series can be used to compute ln(x), but it converges too slowly."
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,405,"*  If we substitute -x for x above, we get"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,407,*                   2    3    4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,408,*                  x    x    x
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,409,*  ln(1-x) =  -x - -  - -  - - + ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,410,*                  2    3    4
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,412,*  Note that all terms are now negative.  Because the even powered ones
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,413,"*  absorbed the sign.  Now, subtract the series above from the previous"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,414,*  one to get ln(x+1) - ln(1-x).  Note the even terms cancel out leaving
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,415,*  only the odd ones
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,417,*                             3     5      7
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,418,*                           2x    2x     2x
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,419,*  ln(x+1) - ln(x-1) = 2x + --- + --- + ---- + ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,420,*                            3     5      7
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,422,*  By the property of logarithms that ln(a) - ln(b) = ln (a/b) we have:
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,424,*                                3        5        7
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,425,*      x+1           /          x        x        x          \
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,426,*  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,427,*      x-1           \          3        5        7          /
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,429,"*  But now we want to find ln(a), so we need to find the value of x"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,430,*  such that a = (x+1)/(x-1).   This is easily solved to find that
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,431,*  x = (a-1)/(a+1).
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,432,"* @param a number from which logarithm is requested, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,433,* @return log(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,435,protected static Dfp[] logInternal(final Dfp a[]) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,437,/* Now we want to compute x = (a-1)/(a+1) but this is prone to
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,438,"* loss of precision.  So instead, compute x = (a/4 - 1/4) / (a/4 + 1/4)"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,440,Dfp t = a[0].divide(4).add(a[1].divide(4));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,441,"Dfp x = t.add(a[0].newInstance(""-0.25"")).divide(t.add(a[0].newInstance(""0.25"")));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,443,Dfp y = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,444,Dfp num = new Dfp(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,445,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,446,int den = 1;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,447,for (int i = 0; i < 10000; i++) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,448,num = num.multiply(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,449,num = num.multiply(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,450,den = den + 2;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,451,t = num.divide(den);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,452,y = y.add(t);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,453,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,454,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,456,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,459,y = y.multiply(a[0].getTwo());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,461,return split(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,465,/** Computes x to the y power.<p>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,467,*  Uses the following method:<p>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,469,*  <ol>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,470,"*  <li> Set u = rint(y), v = y-u"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,471,*  <li> Compute a = v * ln(x)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,472,*  <li> Compute b = rint( a/ln(2) )
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,473,*  <li> Compute c = a - b*ln(2)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,474,*  <li> x<sup>y</sup> = x<sup>u</sup>  *   2<sup>b</sup> * e<sup>c</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,475,*  </ol>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,476,"*  if |y| > 1e8, then we compute by exp(y*ln(x))   <p>"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,478,*  <b>Special Cases</b><p>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,479,*  <ul>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,480,*  <li>  if y is 0.0 or -0.0 then result is 1.0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,481,*  <li>  if y is 1.0 then result is x
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,482,*  <li>  if y is NaN then result is NaN
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,483,*  <li>  if x is NaN and y is not zero then result is NaN
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,484,*  <li>  if |x| > 1.0 and y is +Infinity then result is +Infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,485,*  <li>  if |x| < 1.0 and y is -Infinity then result is +Infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,486,*  <li>  if |x| > 1.0 and y is -Infinity then result is +0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,487,*  <li>  if |x| < 1.0 and y is +Infinity then result is +0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,488,*  <li>  if |x| = 1.0 and y is +/-Infinity then result is NaN
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,489,*  <li>  if x = +0 and y > 0 then result is +0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,490,*  <li>  if x = +Inf and y < 0 then result is +0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,491,*  <li>  if x = +0 and y < 0 then result is +Inf
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,492,*  <li>  if x = +Inf and y > 0 then result is +Inf
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,493,"*  <li>  if x = -0 and y > 0, finite, not odd integer then result is +0"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,494,"*  <li>  if x = -0 and y < 0, finite, and odd integer then result is -Inf"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,495,"*  <li>  if x = -Inf and y > 0, finite, and odd integer then result is -Inf"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,496,"*  <li>  if x = -0 and y < 0, not finite odd integer then result is +Inf"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,497,"*  <li>  if x = -Inf and y > 0, not finite odd integer then result is +Inf"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,498,"*  <li>  if x < 0 and y > 0, finite, and odd integer then result is -(|x|<sup>y</sup>)"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,499,"*  <li>  if x < 0 and y > 0, finite, and not integer then result is NaN"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,500,*  </ul>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,501,*  @param x base to be raised
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,502,*  @param y power to which base should be raised
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,503,*  @return x<sup>y</sup>
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,505,"public static Dfp pow(Dfp x, final Dfp y) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,507,// make sure we don't mix number with different precision
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,508,if (x.getField().getRadixDigits() != y.getField().getRadixDigits()) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,509,x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,510,final Dfp result = x.newInstance(x.getZero());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,511,result.nans = Dfp.QNAN;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,512,"return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, result);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,515,final Dfp zero = x.getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,516,final Dfp one  = x.getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,517,final Dfp two  = x.getTwo();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,518,boolean invert = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,519,int ui;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,521,/* Check for special cases */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,522,if (y.equals(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,523,return x.newInstance(one);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,526,if (y.equals(one)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,527,if (!x.equals(x)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,528,// Test for NaNs
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,529,x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,530,"return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,532,return x;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,535,if (!x.equals(x) || !y.equals(y)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,536,// Test for NaNs
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,537,x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,538,"return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,541,// X == 0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,542,if (x.equals(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,543,"if (Dfp.copysign(one, x).greaterThan(zero)) {"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,544,// X == +0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,545,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,546,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,547,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,548,"return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,550,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,551,// X == -0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,552,if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,553,// If y is odd integer
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,554,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,555,return x.newInstance(zero.negate());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,556,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,557,"return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,559,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,560,// Y is not odd integer
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,561,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,562,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,563,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,564,"return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,570,if (x.lessThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,571,"// Make x positive, but keep track of it"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,572,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,573,invert = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,576,if (x.greaterThan(one) && y.classify() == Dfp.INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,577,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,578,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,579,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,580,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,584,if (x.lessThan(one) && y.classify() == Dfp.INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,585,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,586,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,587,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,588,"return x.newInstance(Dfp.copysign(y, one));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,592,if (x.equals(one) && y.classify() == Dfp.INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,593,x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,594,"return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,597,if (x.classify() == Dfp.INFINITE) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,598,// x = +/- inf
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,599,if (invert) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,600,// negative infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,601,if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,602,// If y is odd integer
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,603,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,604,"return x.newInstance(x.newInstance((byte)-1, (byte)Dfp.INFINITE));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,605,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,606,return x.newInstance(zero.negate());
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,608,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,609,// Y is not odd integer
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,610,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,611,"return x.newInstance(x.newInstance((byte)1, (byte)Dfp.INFINITE));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,612,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,613,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,616,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,617,// positive infinity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,618,if (y.greaterThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,619,return x;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,620,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,621,return x.newInstance(zero);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,626,if (invert && !y.rint().equals(y)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,627,x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,628,"return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, (byte) Dfp.QNAN));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,631,// End special cases
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,633,Dfp r;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,634,if (y.lessThan(x.newInstance(100000000)) && y.greaterThan(x.newInstance(-100000000))) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,635,final Dfp u = y.rint();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,636,ui = u.intValue();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,638,final Dfp v = y.subtract(u);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,640,if (v.unequal(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,641,final Dfp a = v.multiply(log(x));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,642,final Dfp b = a.divide(x.getField().getLn2()).rint();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,644,final Dfp c = a.subtract(b.multiply(x.getField().getLn2()));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,645,"r = splitPow(split(x), ui);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,646,"r = r.multiply(pow(two, b.intValue()));"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,647,r = r.multiply(exp(c));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,648,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,649,"r = splitPow(split(x), ui);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,651,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,652,// very large exponent.  |y| > 1e8
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,653,r = exp(log(x).multiply(y));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,656,if (invert) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,657,// if y is odd integer
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,658,if (y.rint().equals(y) && !y.remainder(two).equals(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,659,r = r.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,663,return x.newInstance(r);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,667,/** Computes sin(a)  Used when 0 < a < pi/4.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,668,* Uses the classic Taylor series.  x - x**3/3! + x**5/5!  ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,669,"* @param a number from which sine is desired, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,670,* @return sin(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,672,protected static Dfp sinInternal(Dfp a[]) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,674,Dfp c = a[0].add(a[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,675,Dfp y = c;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,676,c = c.multiply(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,677,Dfp x = y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,678,Dfp fact = a[0].getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,679,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,681,for (int i = 3; i < 90; i += 2) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,682,x = x.multiply(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,683,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,685,fact = fact.divide((i-1)*i);  // 1 over fact
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,686,y = y.add(x.multiply(fact));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,687,if (y.equals(py))
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,688,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,689,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,692,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,696,/** Computes cos(a)  Used when 0 < a < pi/4.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,697,* Uses the classic Taylor series for cosine.  1 - x**2/2! + x**4/4!  ...
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,698,"* @param a number from which cosine is desired, in split form"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,699,* @return cos(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,701,protected static Dfp cosInternal(Dfp a[]) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,702,final Dfp one = a[0].getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,705,Dfp x = one;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,706,Dfp y = one;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,707,Dfp c = a[0].add(a[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,708,c = c.multiply(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,710,Dfp fact = one;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,711,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,713,for (int i = 2; i < 90; i += 2) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,714,x = x.multiply(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,715,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,717,fact = fact.divide((i - 1) * i);  // 1 over fact
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,719,y = y.add(x.multiply(fact));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,720,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,721,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,723,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,726,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,730,/** computes the sine of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,731,* @param a number from which sine is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,732,* @return sin(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,734,public static Dfp sin(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,735,final Dfp pi = a.getField().getPi();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,736,final Dfp zero = a.getField().getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,737,boolean neg = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,739,/* First reduce the argument to the range of +/- PI */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,740,Dfp x = a.remainder(pi.multiply(2));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,742,/* if x < 0 then apply identity sin(-x) = -sin(x) */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,743,/* This puts x in the range 0 < x < PI            */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,744,if (x.lessThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,745,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,746,neg = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,749,/* Since sine(x) = sine(pi - x) we can reduce the range to
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,750,* 0 < x < pi/2
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,753,if (x.greaterThan(pi.divide(2))) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,754,x = pi.subtract(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,757,Dfp y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,758,if (x.lessThan(pi.divide(4))) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,759,Dfp c[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,760,c[0] = x;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,761,c[1] = zero;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,763,//y = sinInternal(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,764,y = sinInternal(split(x));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,765,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,766,final Dfp c[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,767,final Dfp[] piSplit = a.getField().getPiSplit();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,768,c[0] = piSplit[0].divide(2).subtract(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,769,c[1] = piSplit[1].divide(2);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,770,y = cosInternal(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,773,if (neg) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,774,y = y.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,777,return a.newInstance(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,781,/** computes the cosine of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,782,* @param a number from which cosine is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,783,* @return cos(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,785,public static Dfp cos(Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,786,final Dfp pi = a.getField().getPi();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,787,final Dfp zero = a.getField().getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,788,boolean neg = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,790,/* First reduce the argument to the range of +/- PI */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,791,Dfp x = a.remainder(pi.multiply(2));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,793,/* if x < 0 then apply identity cos(-x) = cos(x) */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,794,/* This puts x in the range 0 < x < PI           */
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,795,if (x.lessThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,796,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,799,/* Since cos(x) = -cos(pi - x) we can reduce the range to
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,800,* 0 < x < pi/2
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,803,if (x.greaterThan(pi.divide(2))) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,804,x = pi.subtract(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,805,neg = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,808,Dfp y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,809,if (x.lessThan(pi.divide(4))) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,810,Dfp c[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,811,c[0] = x;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,812,c[1] = zero;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,814,y = cosInternal(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,815,} else {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,816,final Dfp c[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,817,final Dfp[] piSplit = a.getField().getPiSplit();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,818,c[0] = piSplit[0].divide(2).subtract(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,819,c[1] = piSplit[1].divide(2);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,820,y = sinInternal(c);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,823,if (neg) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,824,y = y.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,827,return a.newInstance(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,831,/** computes the tangent of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,832,* @param a number from which tangent is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,833,* @return tan(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,835,public static Dfp tan(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,836,return sin(a).divide(cos(a));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,839,/** computes the arc-tangent of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,840,* @param a number from which arc-tangent is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,841,* @return atan(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,843,protected static Dfp atanInternal(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,845,Dfp y = new Dfp(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,846,Dfp x = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,847,Dfp py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,849,for (int i = 3; i < 90; i += 2) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,850,x = x.multiply(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,851,x = x.multiply(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,852,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,853,y = y.add(x.divide(i));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,854,if (y.equals(py)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,855,break;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,857,py = new Dfp(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,860,return y;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,864,/** computes the arc tangent of the argument
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,866,*  Uses the typical taylor series
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,868,*  but may reduce arguments using the following identity
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,869,* tan(x+y) = (tan(x) + tan(y)) / (1 - tan(x)*tan(y))
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,871,"* since tan(PI/8) = sqrt(2)-1,"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,873,* atan(x) = atan( (x - sqrt(2) + 1) / (1+x*sqrt(2) - x) + PI/8.0
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,874,* @param a number from which arc-tangent is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,875,* @return atan(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,877,public static Dfp atan(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,878,final Dfp   zero      = a.getField().getZero();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,879,final Dfp   one       = a.getField().getOne();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,880,final Dfp[] sqr2Split = a.getField().getSqr2Split();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,881,final Dfp[] piSplit   = a.getField().getPiSplit();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,882,boolean recp = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,883,boolean neg = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,884,boolean sub = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,886,final Dfp ty = sqr2Split[0].subtract(one).add(sqr2Split[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,888,Dfp x = new Dfp(a);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,889,if (x.lessThan(zero)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,890,neg = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,891,x = x.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,894,if (x.greaterThan(one)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,895,recp = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,896,x = one.divide(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,899,if (x.greaterThan(ty)) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,900,Dfp sty[] = new Dfp[2];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,901,sub = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,903,sty[0] = sqr2Split[0].subtract(one);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,904,sty[1] = sqr2Split[1];
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,906,Dfp[] xs = split(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,908,"Dfp[] ds = splitMult(xs, sty);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,909,ds[0] = ds[0].add(one);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,911,xs[0] = xs[0].subtract(sty[0]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,912,xs[1] = xs[1].subtract(sty[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,914,"xs = splitDiv(xs, ds);"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,915,x = xs[0].add(xs[1]);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,917,//x = x.subtract(ty).divide(dfp.one.add(x.multiply(ty)));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,920,Dfp y = atanInternal(x);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,922,if (sub) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,923,y = y.add(piSplit[0].divide(8)).add(piSplit[1].divide(8));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,926,if (recp) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,927,y = piSplit[0].divide(2).subtract(y).add(piSplit[1].divide(2));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,930,if (neg) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,931,y = y.negate();
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,934,return a.newInstance(y);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,938,/** computes the arc-sine of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,939,* @param a number from which arc-sine is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,940,* @return asin(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,942,public static Dfp asin(final Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,943,return atan(a.divide(a.getOne().subtract(a.multiply(a)).sqrt()));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,946,/** computes the arc-cosine of the argument.
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,947,* @param a number from which arc-cosine is desired
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,948,* @return acos(a)
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,950,public static Dfp acos(Dfp a) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,951,Dfp result;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,952,boolean negative = false;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,954,if (a.lessThan(a.getZero())) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,955,negative = true;
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,958,"a = Dfp.copysign(a, a.getOne());  // absolute value"
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,960,result = atan(a.getOne().subtract(a.multiply(a)).sqrt().divide(a));
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,962,if (negative) {
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,963,result = a.getField().getPi().subtract(result);
True,src/main/java/org/apache/commons/math/dfp/DfpMath.java,src/main/java/org/apache/commons/math/dfp/DfpMath.java,966,return a.newInstance(result);
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,18,package org.apache.commons.math.dfp;
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,20,public class Decimal10 extends DfpDec {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,22,Decimal10(final DfpField factory) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,23,super(factory);
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,26,"Decimal10(final DfpField factory, final byte x) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,27,"super(factory, x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,30,"Decimal10(final DfpField factory, final int x) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,31,"super(factory, x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,34,"Decimal10(final DfpField factory, final long x) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,35,"super(factory, x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,38,"Decimal10(final DfpField factory, final double x) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,39,"super(factory, x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,42,public Decimal10(final Dfp d) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,43,super(d);
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,46,"public Decimal10(final DfpField factory, final String s) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,47,"super(factory, s);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,50,"protected Decimal10(final DfpField factory, final byte sign, final byte nans) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,51,"super(factory, sign, nans);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,54,public Dfp newInstance() {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,55,return new Decimal10(getField());
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,58,public Dfp newInstance(final byte x) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,59,"return new Decimal10(getField(), x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,62,public Dfp newInstance(final int x) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,63,"return new Decimal10(getField(), x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,66,public Dfp newInstance(final long x) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,67,"return new Decimal10(getField(), x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,70,public Dfp newInstance(final double x) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,71,"return new Decimal10(getField(), x);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,74,public Dfp newInstance(final Dfp d) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,75,return new Decimal10(d);
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,78,public Dfp newInstance(final String s) {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,79,"return new Decimal10(getField(), s);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,82,"public Dfp newInstance(final byte sign, final byte nans) {"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,83,"return new Decimal10(getField(), sign, nans);"
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,86,protected int getDecimalDigits() {
True,src/test/java/org/apache/commons/math/dfp/Decimal10.java,src/test/java/org/apache/commons/math/dfp/Decimal10.java,87,return 10;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,18,package org.apache.commons.math.dfp;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,20,import org.junit.After;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,22,import org.junit.Before;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,25,public class DfpDecTest {
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,27,private DfpField field;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,28,private Dfp pinf;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,29,private Dfp ninf;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,30,private Dfp nan;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,31,private Dfp snan;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,32,private Dfp qnan;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,34,@Before
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,35,public void setUp() {
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,36,// Some basic setup.  Define some constants and clear the status flags
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,37,field = new DfpField(20);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,38,"pinf = new DfpDec(field, 1).divide(new DfpDec(field, 0));"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,39,"ninf = new DfpDec(field, -1).divide(new DfpDec(field, 0));"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,40,"nan = new DfpDec(field, 0).divide(new DfpDec(field, 0));"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,41,"snan = field.newDfp((byte)1, Dfp.SNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,42,"qnan = field.newDfp((byte)1, Dfp.QNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,43,ninf.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,46,@After
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,47,public void tearDown() {
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,48,field = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,49,pinf    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,50,ninf    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,51,nan     = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,52,snan    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,53,qnan    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,56,// Generic test function.  Takes params x and y and tests them for
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,57,// equality.  Then checks the status flags against the flags argument.
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,58,"// If the test fail, it prints the desc string"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,59,"private void test(Dfp x, Dfp y, int flags, String desc) {"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,60,boolean b = x.equals(y);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,62,if (!x.equals(y) && !x.unequal(y))  // NaNs involved
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,63,b = (x.toString().equals(y.toString()));
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,65,"if (x.equals(new DfpDec(field, 0)))  // distinguish +/- zero"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,66,b = (b && (x.toString().equals(y.toString())));
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,68,b = (b && x.getField().getIEEEFlags() == flags);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,70,if (!b)
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,71,"Assert.assertTrue(""assersion failed ""+desc+"" x = ""+x.toString()+"" flags = ""+x.getField().getIEEEFlags(), b);"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,73,x.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,76,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,77,public void testRound()
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,79,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,81,"test(new DfpDec(field, ""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,82,"new DfpDec(field, ""12345678901234568000""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,83,"DfpField.FLAG_INEXACT, ""Round #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,85,"test(new DfpDec(field, ""0.12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,86,"new DfpDec(field, ""0.12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,87,"DfpField.FLAG_INEXACT, ""Round #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,89,"test(new DfpDec(field, ""0.12345678901234567500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,90,"new DfpDec(field, ""0.12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,91,"DfpField.FLAG_INEXACT, ""Round #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,93,"test(new DfpDec(field, ""0.12345678901234568500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,94,"new DfpDec(field, ""0.12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,95,"DfpField.FLAG_INEXACT, ""Round #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,97,"test(new DfpDec(field, ""0.12345678901234568501""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,98,"new DfpDec(field, ""0.12345678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,99,"DfpField.FLAG_INEXACT, ""Round #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,101,"test(new DfpDec(field, ""0.12345678901234568499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,102,"new DfpDec(field, ""0.12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,103,"DfpField.FLAG_INEXACT, ""Round #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,105,"test(new DfpDec(field, ""1.2345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,106,"new DfpDec(field, ""1.2345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,107,"DfpField.FLAG_INEXACT, ""Round #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,109,"test(new DfpDec(field, ""1.2345678901234567500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,110,"new DfpDec(field, ""1.2345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,111,"DfpField.FLAG_INEXACT, ""Round #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,113,"test(new DfpDec(field, ""1.2345678901234568500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,114,"new DfpDec(field, ""1.2345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,115,"DfpField.FLAG_INEXACT, ""Round #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,117,"test(new DfpDec(field, ""1.2345678901234568000"").add(new DfpDec(field, "".0000000000000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,118,"new DfpDec(field, ""1.2345678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,119,"DfpField.FLAG_INEXACT, ""Round #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,121,"test(new DfpDec(field, ""1.2345678901234568499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,122,"new DfpDec(field, ""1.2345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,123,"DfpField.FLAG_INEXACT, ""Round #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,125,"test(new DfpDec(field, ""12.345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,126,"new DfpDec(field, ""12.345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,127,"DfpField.FLAG_INEXACT, ""Round #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,129,"test(new DfpDec(field, ""12.345678901234567500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,130,"new DfpDec(field, ""12.345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,131,"DfpField.FLAG_INEXACT, ""Round #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,133,"test(new DfpDec(field, ""12.345678901234568500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,134,"new DfpDec(field, ""12.345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,135,"DfpField.FLAG_INEXACT, ""Round #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,137,"test(new DfpDec(field, ""12.345678901234568"").add(new DfpDec(field, "".000000000000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,138,"new DfpDec(field, ""12.345678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,139,"DfpField.FLAG_INEXACT, ""Round #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,141,"test(new DfpDec(field, ""12.345678901234568499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,142,"new DfpDec(field, ""12.345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,143,"DfpField.FLAG_INEXACT, ""Round #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,145,"test(new DfpDec(field, ""123.45678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,146,"new DfpDec(field, ""123.45678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,147,"DfpField.FLAG_INEXACT, ""Round #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,149,"test(new DfpDec(field, ""123.45678901234567500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,150,"new DfpDec(field, ""123.45678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,151,"DfpField.FLAG_INEXACT, ""Round #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,153,"test(new DfpDec(field, ""123.45678901234568500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,154,"new DfpDec(field, ""123.45678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,155,"DfpField.FLAG_INEXACT, ""Round #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,157,"test(new DfpDec(field, ""123.456789012345685"").add(new DfpDec(field, "".00000000000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,158,"new DfpDec(field, ""123.45678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,159,"DfpField.FLAG_INEXACT, ""Round #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,161,"test(new DfpDec(field, ""123.45678901234568499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,162,"new DfpDec(field, ""123.45678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,163,"DfpField.FLAG_INEXACT, ""Round #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,165,field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,167,// Round down
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,168,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.9"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,169,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,170,"DfpField.FLAG_INEXACT, ""Round #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,172,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,173,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,174,"DfpField.FLAG_INEXACT, ""Round #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,176,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,177,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,178,"DfpField.FLAG_INEXACT, ""Round #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,180,field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,182,// Round up
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,183,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,184,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,185,"DfpField.FLAG_INEXACT, ""Round #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,187,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,188,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,189,"DfpField.FLAG_INEXACT, ""Round #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,191,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,192,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,193,"DfpField.FLAG_INEXACT, ""Round #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,195,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,196,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,197,"DfpField.FLAG_INEXACT, ""Round #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,199,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,200,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,201,"0, ""Round #28.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,203,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,205,// Round half up
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,206,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.499999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,207,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,208,"DfpField.FLAG_INEXACT, ""Round #29"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,210,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.50000001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,211,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,212,"DfpField.FLAG_INEXACT, ""Round #30"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,214,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.5"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,215,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,216,"DfpField.FLAG_INEXACT, ""Round #30.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,218,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.499999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,219,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,220,"DfpField.FLAG_INEXACT, ""Round #31"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,222,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.50000001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,223,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,224,"DfpField.FLAG_INEXACT, ""Round #32"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,226,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,228,// Round half down
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,229,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,230,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,231,"DfpField.FLAG_INEXACT, ""Round #33"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,233,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,234,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,235,"DfpField.FLAG_INEXACT, ""Round #34"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,237,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,238,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,239,"DfpField.FLAG_INEXACT, ""Round #35"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,241,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,242,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,243,"DfpField.FLAG_INEXACT, ""Round #35.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,245,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,246,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,247,"DfpField.FLAG_INEXACT, ""Round #36"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,249,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,251,// Round half odd
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,252,"test(new DfpDec(field, ""12345678901234568"").add(new DfpDec(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,253,"new DfpDec(field, ""12345678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,254,"DfpField.FLAG_INEXACT, ""Round #37"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,256,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,257,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,258,"DfpField.FLAG_INEXACT, ""Round #38"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,260,"test(new DfpDec(field, ""-12345678901234568"").add(new DfpDec(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,261,"new DfpDec(field, ""-12345678901234569""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,262,"DfpField.FLAG_INEXACT, ""Round #39"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,264,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,265,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,266,"DfpField.FLAG_INEXACT, ""Round #40"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,268,field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,270,// Round ceil
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,271,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,272,"new DfpDec(field, ""12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,273,"DfpField.FLAG_INEXACT, ""Round #41"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,275,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,276,"new DfpDec(field, ""-12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,277,"DfpField.FLAG_INEXACT, ""Round #42"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,279,field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,281,// Round floor
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,282,"test(new DfpDec(field, ""12345678901234567"").add(new DfpDec(field, ""0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,283,"new DfpDec(field, ""12345678901234567""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,284,"DfpField.FLAG_INEXACT, ""Round #43"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,286,"test(new DfpDec(field, ""-12345678901234567"").add(new DfpDec(field, ""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,287,"new DfpDec(field, ""-12345678901234568""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,288,"DfpField.FLAG_INEXACT, ""Round #44"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,290,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,293,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,294,public void testRoundDecimal10()
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,296,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,298,"test(new Decimal10(field, ""1234567891234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,299,"new Decimal10(field, ""1234567891000000000""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,300,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,302,"test(new Decimal10(field, ""0.1234567891634567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,303,"new Decimal10(field, ""0.1234567892""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,304,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,306,"test(new Decimal10(field, ""0.1234567891500000000""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,307,"new Decimal10(field, ""0.1234567892""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,308,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,310,"test(new Decimal10(field, ""0.1234567890500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,311,"new Decimal10(field, ""0.1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,312,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,314,"test(new Decimal10(field, ""0.1234567890501""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,315,"new Decimal10(field, ""0.1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,316,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,318,"test(new Decimal10(field, ""0.1234567890499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,319,"new Decimal10(field, ""0.1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,320,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,322,"test(new Decimal10(field, ""1.234567890890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,323,"new Decimal10(field, ""1.234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,324,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,326,"test(new Decimal10(field, ""1.234567891500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,327,"new Decimal10(field, ""1.234567892""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,328,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,330,"test(new Decimal10(field, ""1.234567890500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,331,"new Decimal10(field, ""1.234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,332,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,334,"test(new Decimal10(field, ""1.234567890000"").add(new Decimal10(field, "".000000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,335,"new Decimal10(field, ""1.234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,336,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,338,"test(new Decimal10(field, ""1.234567890499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,339,"new Decimal10(field, ""1.234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,340,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,342,"test(new Decimal10(field, ""12.34567890890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,343,"new Decimal10(field, ""12.34567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,344,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,346,"test(new Decimal10(field, ""12.34567891500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,347,"new Decimal10(field, ""12.34567892""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,348,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,350,"test(new Decimal10(field, ""12.34567890500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,351,"new Decimal10(field, ""12.34567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,352,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,354,"test(new Decimal10(field, ""12.34567890"").add(new Decimal10(field, "".00000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,355,"new Decimal10(field, ""12.34567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,356,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,358,"test(new Decimal10(field, ""12.34567890499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,359,"new Decimal10(field, ""12.34567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,360,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,362,"test(new Decimal10(field, ""123.4567890890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,363,"new Decimal10(field, ""123.4567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,364,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,366,"test(new Decimal10(field, ""123.4567891500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,367,"new Decimal10(field, ""123.4567892""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,368,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,370,"test(new Decimal10(field, ""123.4567890500""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,371,"new Decimal10(field, ""123.4567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,372,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,374,"test(new Decimal10(field, ""123.4567890"").add(new Decimal10(field, "".0000000501"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,375,"new Decimal10(field, ""123.4567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,376,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,378,"test(new Decimal10(field, ""123.4567890499""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,379,"new Decimal10(field, ""123.4567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,380,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,382,field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,384,// RoundDecimal10 down
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,385,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.9"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,386,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,387,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,389,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,390,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,391,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,393,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,394,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,395,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,397,field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,399,// RoundDecimal10 up
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,400,"test(new Decimal10(field, 1234567890).add(new Decimal10(field, ""0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,401,"new Decimal10(field, 1234567891l),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,402,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,404,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,405,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,406,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,408,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,409,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,410,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,412,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,413,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,414,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,416,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,417,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,418,"0, ""RoundDecimal10 #28.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,420,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,422,// RoundDecimal10 half up
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,423,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.4999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,424,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,425,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #29"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,427,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.50000001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,428,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,429,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #30"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,431,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.5"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,432,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,433,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #30.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,435,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.4999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,436,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,437,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #31"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,439,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.50000001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,440,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,441,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #32"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,443,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,445,// RoundDecimal10 half down
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,446,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,447,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,448,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #33"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,450,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,451,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,452,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #34"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,454,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,455,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,456,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #35"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,458,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,459,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,460,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #35.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,462,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,463,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,464,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #36"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,466,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,468,// RoundDecimal10 half odd
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,469,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,470,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,471,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #37"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,473,"test(new Decimal10(field, ""1234567891"").add(new Decimal10(field, ""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,474,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,475,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #38"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,477,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,478,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,479,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #39"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,481,"test(new Decimal10(field, ""-1234567891"").add(new Decimal10(field, ""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,482,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,483,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #40"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,485,field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,487,// RoundDecimal10 ceil
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,488,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,489,"new Decimal10(field, ""1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,490,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #41"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,492,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,493,"new Decimal10(field, ""-1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,494,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #42"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,496,field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,498,// RoundDecimal10 floor
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,499,"test(new Decimal10(field, ""1234567890"").add(new Decimal10(field, ""0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,500,"new Decimal10(field, ""1234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,501,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #43"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,503,"test(new Decimal10(field, ""-1234567890"").add(new Decimal10(field, ""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,504,"new Decimal10(field, ""-1234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,505,"DfpField.FLAG_INEXACT, ""RoundDecimal10 #44"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,507,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,510,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,511,public void testNextAfter()
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,513,"test(new DfpDec(field, 1).nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,514,"new DfpDec(field, ""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,515,"0, ""NextAfter #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,517,"test(new DfpDec(field, ""1.0000000000000001"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,518,"new DfpDec(field, 1),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,519,"0, ""NextAfter #1.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,521,"test(new DfpDec(field, 1).nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,522,"new DfpDec(field, ""0.99999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,523,"0, ""NextAfter #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,525,"test(new DfpDec(field, ""0.99999999999999999"").nextAfter(new DfpDec(field, 2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,526,"new DfpDec(field, 1),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,527,"0, ""NextAfter #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,529,"test(new DfpDec(field, -1).nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,530,"new DfpDec(field, ""-1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,531,"0, ""NextAfter #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,533,"test(new DfpDec(field, -1).nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,534,"new DfpDec(field, ""-0.99999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,535,"0, ""NextAfter #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,537,"test(new DfpDec(field, ""-0.99999999999999999"").nextAfter(new DfpDec(field, -2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,538,"new DfpDec(field, (byte) -1),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,539,"0, ""NextAfter #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,541,"test(new DfpDec(field, (byte) 2).nextAfter(new DfpDec(field, 2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,542,"new DfpDec(field, 2l),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,543,"0, ""NextAfter #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,545,"test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 0)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,546,"new DfpDec(field, 0),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,547,"0, ""NextAfter #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,549,"test(new DfpDec(field, -2).nextAfter(new DfpDec(field, -2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,550,"new DfpDec(field, -2),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,551,"0, ""NextAfter #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,553,"test(new DfpDec(field, 0).nextAfter(new DfpDec(field, 1)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,554,"new DfpDec(field, ""1e-131092""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,555,"DfpField.FLAG_UNDERFLOW, ""NextAfter #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,557,"test(new DfpDec(field, 0).nextAfter(new DfpDec(field, -1)),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,558,"new DfpDec(field, ""-1e-131092""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,559,"DfpField.FLAG_UNDERFLOW, ""NextAfter #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,561,"test(new DfpDec(field, ""-1e-131092"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,562,"new DfpDec(field, ""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,563,"DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, ""Next After #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,565,"test(new DfpDec(field, ""1e-131092"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,566,"new DfpDec(field, ""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,567,"DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, ""Next After #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,569,"test(new DfpDec(field, ""9.9999999999999999e131078"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,570,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,src/test/java/org/apache/commons/math/dfp/DfpDecTest.java,571,"DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, ""Next After #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,18,package org.apache.commons.math.dfp;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,20,import org.junit.After;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,22,import org.junit.Before;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,24,public class DfpMathTest {
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,26,private DfpField factory;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,27,private Dfp pinf;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,28,private Dfp ninf;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,29,private Dfp nan;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,30,private Dfp snan;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,31,private Dfp qnan;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,33,@Before
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,34,public void setUp() {
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,35,// Some basic setup.  Define some constants and clear the status flags
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,36,factory = new DfpField(20);
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,37,"pinf = factory.newDfp(""1"").divide(factory.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,38,"ninf = factory.newDfp(""-1"").divide(factory.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,39,"nan = factory.newDfp(""0"").divide(factory.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,40,"snan = factory.newDfp((byte)1, Dfp.SNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,41,"qnan = factory.newDfp((byte)1, Dfp.QNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,42,ninf.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,44,// force loading of dfpmath
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,45,Dfp pi = factory.getPi();
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,46,pi.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,49,@After
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,50,public void tearDown() {
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,51,pinf = null;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,52,ninf = null;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,53,nan  = null;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,54,snan = null;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,55,qnan = null;
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,58,// Generic test function.  Takes params x and y and tests them for
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,59,// equality.  Then checks the status flags against the flags argument.
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,60,"// If the test fail, it prints the desc string"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,61,"private void test(Dfp x, Dfp y, int flags, String desc)"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,63,boolean b = x.equals(y);
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,65,if (!x.equals(y) && !x.unequal(y))  // NaNs involved
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,66,b = (x.toString().equals(y.toString()));
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,68,"if (x.equals(factory.newDfp(""0"")))  // distinguish +/- zero"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,69,b = (b && (x.toString().equals(y.toString())));
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,71,b = (b && x.getField().getIEEEFlags() == flags);
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,73,if (!b)
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,74,"Assert.assertTrue(""assersion failed ""+desc+"" x = ""+x.toString()+"" flags = ""+x.getField().getIEEEFlags(), b);"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,76,x.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,79,public void testPow()
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,81,// Test special cases  exponent of zero
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,82,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,83,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,84,"0, ""pow #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,86,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,87,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,88,"0, ""pow #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,90,"test(DfpMath.pow(factory.newDfp(""2""), factory.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,91,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,92,"0, ""pow #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,94,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,95,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,96,"0, ""pow #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,98,"test(DfpMath.pow(pinf, factory.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,99,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,100,"0, ""pow #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,102,"test(DfpMath.pow(pinf, factory.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,103,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,104,"0, ""pow #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,106,"test(DfpMath.pow(ninf, factory.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,107,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,108,"0, ""pow #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,110,"test(DfpMath.pow(ninf, factory.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,111,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,112,"0, ""pow #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,114,"test(DfpMath.pow(qnan, factory.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,115,"factory.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,116,"0, ""pow #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,118,// exponent of one
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,119,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,120,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,121,"0, ""pow #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,123,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,124,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,125,"0, ""pow #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,127,"test(DfpMath.pow(factory.newDfp(""2""), factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,128,"factory.newDfp(""2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,129,"0, ""pow #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,131,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,132,"factory.newDfp(""-2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,133,"0, ""pow #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,135,"test(DfpMath.pow(pinf, factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,136,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,137,"0, ""pow #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,139,"test(DfpMath.pow(ninf, factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,140,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,141,"0, ""pow #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,143,"test(DfpMath.pow(qnan, factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,144,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,145,"DfpField.FLAG_INVALID, ""pow #14.1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,147,// exponent of NaN
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,148,"test(DfpMath.pow(factory.newDfp(""0""), qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,149,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,150,"DfpField.FLAG_INVALID, ""pow #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,152,"test(DfpMath.pow(factory.newDfp(""-0""), qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,153,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,154,"DfpField.FLAG_INVALID, ""pow #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,156,"test(DfpMath.pow(factory.newDfp(""2""), qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,157,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,158,"DfpField.FLAG_INVALID, ""pow #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,160,"test(DfpMath.pow(factory.newDfp(""-2""), qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,161,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,162,"DfpField.FLAG_INVALID, ""pow #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,164,"test(DfpMath.pow(pinf, qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,165,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,166,"DfpField.FLAG_INVALID, ""pow #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,168,"test(DfpMath.pow(ninf, qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,169,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,170,"DfpField.FLAG_INVALID, ""pow #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,172,"test(DfpMath.pow(qnan, qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,173,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,174,"DfpField.FLAG_INVALID, ""pow #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,176,// radix of NaN
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,177,"test(DfpMath.pow(qnan, factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,178,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,179,"DfpField.FLAG_INVALID, ""pow #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,181,"test(DfpMath.pow(qnan, factory.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,182,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,183,"DfpField.FLAG_INVALID, ""pow #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,185,"test(DfpMath.pow(qnan, pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,186,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,187,"DfpField.FLAG_INVALID, ""pow #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,189,"test(DfpMath.pow(qnan, ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,190,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,191,"DfpField.FLAG_INVALID, ""pow #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,193,"test(DfpMath.pow(qnan, qnan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,194,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,195,"DfpField.FLAG_INVALID, ""pow #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,197,"// (x > 1) ^ pinf = pinf,    (x < -1) ^ pinf = pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,198,"test(DfpMath.pow(factory.newDfp(""2""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,199,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,200,"0, ""pow #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,202,"test(DfpMath.pow(factory.newDfp(""-2""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,203,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,204,"0, ""pow #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,206,"test(DfpMath.pow(pinf, pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,207,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,208,"0, ""pow #29"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,210,"test(DfpMath.pow(ninf, pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,211,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,212,"0, ""pow #30"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,214,"// (x > 1) ^ ninf = +0,    (x < -1) ^ ninf = +0"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,215,"test(DfpMath.pow(factory.newDfp(""2""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,216,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,217,"0, ""pow #31"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,219,"test(DfpMath.pow(factory.newDfp(""-2""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,220,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,221,"0, ""pow #32"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,223,"test(DfpMath.pow(pinf, ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,224,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,225,"0, ""pow #33"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,227,"test(DfpMath.pow(ninf, ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,228,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,229,"0, ""pow #34"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,231,// (-1 < x < 1) ^ pinf = 0
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,232,"test(DfpMath.pow(factory.newDfp(""0.5""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,233,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,234,"0, ""pow #35"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,236,"test(DfpMath.pow(factory.newDfp(""-0.5""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,237,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,238,"0, ""pow #36"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,240,// (-1 < x < 1) ^ ninf = pinf
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,241,"test(DfpMath.pow(factory.newDfp(""0.5""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,242,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,243,"0, ""pow #37"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,245,"test(DfpMath.pow(factory.newDfp(""-0.5""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,246,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,247,"0, ""pow #38"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,249,// +/- 1  ^ +/-inf  = NaN
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,250,"test(DfpMath.pow(factory.getOne(), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,251,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,252,"DfpField.FLAG_INVALID, ""pow #39"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,254,"test(DfpMath.pow(factory.getOne(), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,255,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,256,"DfpField.FLAG_INVALID, ""pow #40"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,258,"test(DfpMath.pow(factory.newDfp(""-1""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,259,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,260,"DfpField.FLAG_INVALID, ""pow #41"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,262,"test(DfpMath.pow(factory.getOne().negate(), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,263,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,264,"DfpField.FLAG_INVALID, ""pow #42"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,266,"// +0  ^ +anything except 0, NAN  = +0"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,268,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,269,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,270,"0, ""pow #43"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,272,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,273,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,274,"0, ""pow #44"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,276,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,277,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,278,"0, ""pow #45"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,280,"test(DfpMath.pow(factory.newDfp(""0""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,281,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,282,"0, ""pow #46"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,284,"// -0  ^ +anything except 0, NAN, odd integer  = +0"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,286,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,287,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,288,"0, ""pow #47"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,290,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,291,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,292,"0, ""pow #48"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,294,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,295,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,296,"DfpField.FLAG_INEXACT, ""pow #49"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,298,"test(DfpMath.pow(factory.newDfp(""-0""), pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,299,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,300,"0, ""pow #50"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,302,"// +0  ^ -anything except 0, NAN  = +INF"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,304,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,305,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,306,"0, ""pow #51"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,308,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,309,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,310,"0, ""pow #52"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,312,"test(DfpMath.pow(factory.newDfp(""0""), factory.newDfp(""-1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,313,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,314,"0, ""pow #53"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,316,"test(DfpMath.pow(factory.newDfp(""0""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,317,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,318,"0, ""pow #54"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,320,"// -0  ^ -anything except 0, NAN, odd integer  = +INF"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,322,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""-2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,323,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,324,"0, ""pow #55"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,326,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""-1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,327,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,328,"0, ""pow #56"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,330,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""-1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,331,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,332,"DfpField.FLAG_INEXACT, ""pow #57"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,334,"test(DfpMath.pow(factory.newDfp(""-0""), ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,335,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,336,"0, ""pow #58"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,338,// -0  ^ -odd integer   =  -INF
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,339,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,340,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,341,"DfpField.FLAG_INEXACT, ""pow #59"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,343,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""-12345"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,344,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,345,"DfpField.FLAG_INEXACT, ""pow #60"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,347,// -0  ^ +odd integer   =  -0
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,348,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,349,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,350,"DfpField.FLAG_INEXACT, ""pow #61"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,352,"test(DfpMath.pow(factory.newDfp(""-0""), factory.newDfp(""12345"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,353,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,354,"DfpField.FLAG_INEXACT, ""pow #62"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,356,// pinf  ^ +anything   = pinf
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,357,"test(DfpMath.pow(pinf, factory.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,358,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,359,"0, ""pow #63"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,361,"test(DfpMath.pow(pinf, factory.newDfp(""1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,362,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,363,"0, ""pow #64"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,365,"test(DfpMath.pow(pinf, factory.newDfp(""1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,366,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,367,"0, ""pow #65"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,369,"test(DfpMath.pow(pinf, pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,370,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,371,"0, ""pow #66"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,373,// pinf  ^ -anything   = +0
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,375,"test(DfpMath.pow(pinf, factory.newDfp(""-3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,376,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,377,"0, ""pow #67"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,379,"test(DfpMath.pow(pinf, factory.newDfp(""-1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,380,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,381,"0, ""pow #68"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,383,"test(DfpMath.pow(pinf, factory.newDfp(""-1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,384,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,385,"0, ""pow #69"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,387,"test(DfpMath.pow(pinf, ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,388,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,389,"0, ""pow #70"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,391,// ninf  ^ anything   = -0 ^ -anything
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,392,"// ninf  ^ -anything except 0, NAN, odd integer  = +0"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,394,"test(DfpMath.pow(ninf, factory.newDfp(""-2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,395,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,396,"0, ""pow #71"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,398,"test(DfpMath.pow(ninf, factory.newDfp(""-1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,399,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,400,"0, ""pow #72"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,402,"test(DfpMath.pow(ninf, factory.newDfp(""-1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,403,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,404,"DfpField.FLAG_INEXACT, ""pow #73"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,406,"test(DfpMath.pow(ninf, ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,407,"factory.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,408,"0, ""pow #74"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,410,"// ninf  ^ +anything except 0, NAN, odd integer  = +INF"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,412,"test(DfpMath.pow(ninf, factory.newDfp(""2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,413,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,414,"0, ""pow #75"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,416,"test(DfpMath.pow(ninf, factory.newDfp(""1e30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,417,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,418,"0, ""pow #76"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,420,"test(DfpMath.pow(ninf, factory.newDfp(""1e-30"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,421,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,422,"DfpField.FLAG_INEXACT, ""pow #77"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,424,"test(DfpMath.pow(ninf, pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,425,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,426,"0, ""pow #78"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,428,// ninf  ^ +odd integer   =  -INF
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,429,"test(DfpMath.pow(ninf, factory.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,430,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,431,"DfpField.FLAG_INEXACT, ""pow #79"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,433,"test(DfpMath.pow(ninf, factory.newDfp(""12345"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,434,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,435,"DfpField.FLAG_INEXACT, ""pow #80"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,437,// ninf  ^ -odd integer   =  -0
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,438,"test(DfpMath.pow(ninf, factory.newDfp(""-3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,439,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,440,"DfpField.FLAG_INEXACT, ""pow #81"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,442,"test(DfpMath.pow(ninf, factory.newDfp(""-12345"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,443,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,444,"DfpField.FLAG_INEXACT, ""pow #82"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,446,// -anything ^ integer
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,447,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,448,"factory.newDfp(""-8""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,449,"DfpField.FLAG_INEXACT, ""pow #83"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,451,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""16"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,452,"factory.newDfp(""65536""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,453,"0, ""pow #84"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,455,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""-3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,456,"factory.newDfp(""-0.125""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,457,"DfpField.FLAG_INEXACT, ""pow #85"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,459,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""-4"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,460,"factory.newDfp(""0.0625""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,461,"0, ""pow #86"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,463,// -anything ^ noninteger = NaN
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,465,"test(DfpMath.pow(factory.newDfp(""-2""), factory.newDfp(""-4.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,466,"qnan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,467,"DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, ""pow #87"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,469,// Some fractional cases.
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,470,"test(DfpMath.pow(factory.newDfp(""2""),factory.newDfp(""1.5"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,471,"factory.newDfp(""2.8284271247461901""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,472,"DfpField.FLAG_INEXACT, ""pow #88"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,475,public void testSin()
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,477,"test(DfpMath.sin(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,478,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,479,"DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, ""sin #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,481,"test(DfpMath.sin(nan),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,482,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,483,"DfpField.FLAG_INVALID|DfpField.FLAG_INEXACT, ""sin #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,485,"test(DfpMath.sin(factory.getZero()),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,486,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,487,"DfpField.FLAG_INEXACT, ""sin #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,489,"test(DfpMath.sin(factory.getPi()),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,490,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,491,"DfpField.FLAG_INEXACT, ""sin #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,493,"test(DfpMath.sin(factory.getPi().negate()),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,494,"factory.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,495,"DfpField.FLAG_INEXACT, ""sin #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,497,"test(DfpMath.sin(factory.getPi().multiply(2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,498,"factory.getZero(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,499,"DfpField.FLAG_INEXACT, ""sin #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,501,"test(DfpMath.sin(factory.getPi().divide(2)),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,502,"factory.getOne(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,503,"DfpField.FLAG_INEXACT, ""sin #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,505,"test(DfpMath.sin(factory.getPi().divide(2).negate()),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,506,"factory.getOne().negate(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,507,"DfpField.FLAG_INEXACT, ""sin #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,509,"test(DfpMath.sin(DfpMath.atan(factory.getOne())),  // pi/4"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,510,"factory.newDfp(""0.5"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,511,"DfpField.FLAG_INEXACT, ""sin #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,513,"test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,514,"factory.newDfp(""0.5"").sqrt().negate(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,515,"DfpField.FLAG_INEXACT, ""sin #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,517,"test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),  // -pi/4"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,518,"factory.newDfp(""0.5"").sqrt().negate(),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,519,"DfpField.FLAG_INEXACT, ""sin #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,521,"test(DfpMath.sin(factory.newDfp(""0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,522,"factory.newDfp(""0.0998334166468281523""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,523,"DfpField.FLAG_INEXACT, ""sin #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,525,"test(DfpMath.sin(factory.newDfp(""0.2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,526,"factory.newDfp(""0.19866933079506121546""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,527,"DfpField.FLAG_INEXACT, ""sin #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,529,"test(DfpMath.sin(factory.newDfp(""0.3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,530,"factory.newDfp(""0.2955202066613395751""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,531,"DfpField.FLAG_INEXACT, ""sin #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,533,"test(DfpMath.sin(factory.newDfp(""0.4"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,534,"factory.newDfp(""0.38941834230865049166""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,535,"DfpField.FLAG_INEXACT, ""sin #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,537,"test(DfpMath.sin(factory.newDfp(""0.5"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,538,"factory.newDfp(""0.47942553860420300026""),  // off by one ULP"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,539,"DfpField.FLAG_INEXACT, ""sin #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,541,"test(DfpMath.sin(factory.newDfp(""0.6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,542,"factory.newDfp(""0.56464247339503535721""),  // off by one ULP"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,543,"DfpField.FLAG_INEXACT, ""sin #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,545,"test(DfpMath.sin(factory.newDfp(""0.7"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,546,"factory.newDfp(""0.64421768723769105367""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,547,"DfpField.FLAG_INEXACT, ""sin #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,549,"test(DfpMath.sin(factory.newDfp(""0.8"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,550,"factory.newDfp(""0.71735609089952276163""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,551,"DfpField.FLAG_INEXACT, ""sin #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,553,"test(DfpMath.sin(factory.newDfp(""0.9"")),        // off by one ULP"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,554,"factory.newDfp(""0.78332690962748338847""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,555,"DfpField.FLAG_INEXACT, ""sin #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,557,"test(DfpMath.sin(factory.newDfp(""1.0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,558,"factory.newDfp(""0.84147098480789650666""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,559,"DfpField.FLAG_INEXACT, ""sin #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,561,"test(DfpMath.sin(factory.newDfp(""1.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,562,"factory.newDfp(""0.89120736006143533995""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,563,"DfpField.FLAG_INEXACT, ""sin #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,565,"test(DfpMath.sin(factory.newDfp(""1.2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,566,"factory.newDfp(""0.93203908596722634968""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,567,"DfpField.FLAG_INEXACT, ""sin #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,569,"test(DfpMath.sin(factory.newDfp(""1.3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,570,"factory.newDfp(""0.9635581854171929647""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,571,"DfpField.FLAG_INEXACT, ""sin #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,573,"test(DfpMath.sin(factory.newDfp(""1.4"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,574,"factory.newDfp(""0.98544972998846018066""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,575,"DfpField.FLAG_INEXACT, ""sin #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,577,"test(DfpMath.sin(factory.newDfp(""1.5"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,578,"factory.newDfp(""0.99749498660405443096""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,579,"DfpField.FLAG_INEXACT, ""sin #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,581,"test(DfpMath.sin(factory.newDfp(""1.6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,582,"factory.newDfp(""0.99957360304150516323""),"
True,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,src/test/java/org/apache/commons/math/dfp/DfpMathTest.java,583,"DfpField.FLAG_INEXACT, ""sin #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,18,package org.apache.commons.math.dfp;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,20,import org.junit.After;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,22,import org.junit.Before;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,25,public class DfpTest {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,27,private DfpField field;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,28,private Dfp pinf;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,29,private Dfp ninf;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,30,private Dfp nan;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,31,private Dfp snan;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,32,private Dfp qnan;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,34,@Before
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,35,public void setUp() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,36,// Some basic setup.  Define some constants and clear the status flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,37,field = new DfpField(20);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,38,"pinf = field.newDfp(""1"").divide(field.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,39,"ninf = field.newDfp(""-1"").divide(field.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,40,"nan = field.newDfp(""0"").divide(field.newDfp(""0""));"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,41,"snan = field.newDfp((byte)1, Dfp.SNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,42,"qnan = field.newDfp((byte)1, Dfp.QNAN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,43,ninf.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,46,@After
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,47,public void tearDown() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,48,field = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,49,pinf    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,50,ninf    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,51,nan     = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,52,snan    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,53,qnan    = null;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,56,// Generic test function.  Takes params x and y and tests them for
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,57,// equality.  Then checks the status flags against the flags argument.
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,58,"// If the test fail, it prints the desc string"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,59,"private void test(Dfp x, Dfp y, int flags, String desc)"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,61,boolean b = x.equals(y);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,63,if (!x.equals(y) && !x.unequal(y))  // NaNs involved
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,64,b = (x.toString().equals(y.toString()));
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,66,"if (x.equals(field.newDfp(""0"")))  // distinguish +/- zero"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,67,b = (b && (x.toString().equals(y.toString())));
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,69,b = (b && x.getField().getIEEEFlags() == flags);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,71,if (!b)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,72,"Assert.assertTrue(""assersion failed ""+desc+"" x = ""+x.toString()+"" flags = ""+x.getField().getIEEEFlags(), b);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,74,x.getField().clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,77,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,78,public void testByteConstructor() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,79,"Assert.assertEquals(""0."", new Dfp(field, (byte) 0).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,80,"Assert.assertEquals(""1."", new Dfp(field, (byte) 1).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,81,"Assert.assertEquals(""-1."", new Dfp(field, (byte) -1).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,82,"Assert.assertEquals(""-128."", new Dfp(field, Byte.MIN_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,83,"Assert.assertEquals(""127."", new Dfp(field, Byte.MAX_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,86,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,87,public void testIntConstructor() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,88,"Assert.assertEquals(""0."", new Dfp(field, 0).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,89,"Assert.assertEquals(""1."", new Dfp(field, 1).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,90,"Assert.assertEquals(""-1."", new Dfp(field, -1).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,91,"Assert.assertEquals(""1234567890."", new Dfp(field, 1234567890).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,92,"Assert.assertEquals(""-1234567890."", new Dfp(field, -1234567890).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,93,"Assert.assertEquals(""-2147483648."", new Dfp(field, Integer.MIN_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,94,"Assert.assertEquals(""2147483647."", new Dfp(field, Integer.MAX_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,97,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,98,public void testLongConstructor() {
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,99,"Assert.assertEquals(""0."", new Dfp(field, 0l).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,100,"Assert.assertEquals(""1."", new Dfp(field, 1l).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,101,"Assert.assertEquals(""-1."", new Dfp(field, -1l).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,102,"Assert.assertEquals(""1234567890."", new Dfp(field, 1234567890l).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,103,"Assert.assertEquals(""-1234567890."", new Dfp(field, -1234567890l).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,104,"Assert.assertEquals(""-9223372036854775808."", new Dfp(field, Long.MIN_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,105,"Assert.assertEquals(""9223372036854775807."", new Dfp(field, Long.MAX_VALUE).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,109,*  Test addition
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,111,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,112,public void testAdd()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,114,"test(field.newDfp(""1"").add(field.newDfp(""1"")),      // Basic tests   1+1 = 2"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,115,"field.newDfp(""2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,116,"0, ""Add #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,118,"test(field.newDfp(""1"").add(field.newDfp(""-1"")),     // 1 + (-1) = 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,119,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,120,"0, ""Add #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,122,"test(field.newDfp(""-1"").add(field.newDfp(""1"")),     // (-1) + 1 = 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,123,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,124,"0, ""Add #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,126,"test(field.newDfp(""-1"").add(field.newDfp(""-1"")),     // (-1) + (-1) = -2"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,127,"field.newDfp(""-2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,128,"0, ""Add #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,130,// rounding mode is round half even
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,132,"test(field.newDfp(""1"").add(field.newDfp(""1e-16"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,133,"field.newDfp(""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,134,"0, ""Add #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,136,"test(field.newDfp(""1"").add(field.newDfp(""1e-17"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,137,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,138,"DfpField.FLAG_INEXACT, ""Add #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,140,"test(field.newDfp(""0.90999999999999999999"").add(field.newDfp(""0.1"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,141,"field.newDfp(""1.01""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,142,"DfpField.FLAG_INEXACT, ""Add #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,144,"test(field.newDfp("".10000000000000005000"").add(field.newDfp("".9"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,145,"field.newDfp(""1.""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,146,"DfpField.FLAG_INEXACT, ""Add #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,148,"test(field.newDfp("".10000000000000015000"").add(field.newDfp("".9"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,149,"field.newDfp(""1.0000000000000002""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,150,"DfpField.FLAG_INEXACT, ""Add #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,152,"test(field.newDfp("".10000000000000014999"").add(field.newDfp("".9"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,153,"field.newDfp(""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,154,"DfpField.FLAG_INEXACT, ""Add #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,156,"test(field.newDfp("".10000000000000015001"").add(field.newDfp("".9"")),     // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,157,"field.newDfp(""1.0000000000000002""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,158,"DfpField.FLAG_INEXACT, ""Add #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,160,"test(field.newDfp("".11111111111111111111"").add(field.newDfp(""11.1111111111111111"")), // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,161,"field.newDfp(""11.22222222222222222222""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,162,"DfpField.FLAG_INEXACT, ""Add #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,164,"test(field.newDfp("".11111111111111111111"").add(field.newDfp(""1111111111111111.1111"")), // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,165,"field.newDfp(""1111111111111111.2222""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,166,"DfpField.FLAG_INEXACT, ""Add #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,168,"test(field.newDfp("".11111111111111111111"").add(field.newDfp(""11111111111111111111"")), // rounding on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,169,"field.newDfp(""11111111111111111111""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,170,"DfpField.FLAG_INEXACT, ""Add #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,172,"test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""-1e131052"")), // overflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,173,"field.newDfp(""9.9999999999999999998e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,174,"0, ""Add #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,176,"test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""1e131052"")), // overflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,177,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,178,"DfpField.FLAG_OVERFLOW, ""Add #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,180,"test(field.newDfp(""-9.9999999999999999999e131071"").add(field.newDfp(""-1e131052"")), // overflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,181,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,182,"DfpField.FLAG_OVERFLOW, ""Add #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,184,"test(field.newDfp(""-9.9999999999999999999e131071"").add(field.newDfp(""1e131052"")), // overflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,185,"field.newDfp(""-9.9999999999999999998e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,186,"0, ""Add #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,188,"test(field.newDfp(""1e-131072"").add(field.newDfp(""1e-131072"")), // underflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,189,"field.newDfp(""2e-131072""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,190,"0, ""Add #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,192,"test(field.newDfp(""1.0000000000000001e-131057"").add(field.newDfp(""-1e-131057"")), // underflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,193,"field.newDfp(""1e-131073""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,194,"DfpField.FLAG_UNDERFLOW, ""Add #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,196,"test(field.newDfp(""1.1e-131072"").add(field.newDfp(""-1e-131072"")), // underflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,197,"field.newDfp(""1e-131073""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,198,"DfpField.FLAG_UNDERFLOW, ""Add #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,200,"test(field.newDfp(""1.0000000000000001e-131072"").add(field.newDfp(""-1e-131072"")), // underflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,201,"field.newDfp(""1e-131088""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,202,"DfpField.FLAG_UNDERFLOW, ""Add #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,204,"test(field.newDfp(""1.0000000000000001e-131078"").add(field.newDfp(""-1e-131078"")), // underflow on add"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,205,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,206,"DfpField.FLAG_UNDERFLOW, ""Add #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,208,"test(field.newDfp(""1.0"").add(field.newDfp(""-1e-20"")), // loss of precision on alignment?"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,209,"field.newDfp(""0.99999999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,210,"0, ""Add #23.1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,212,"test(field.newDfp(""-0.99999999999999999999"").add(field.newDfp(""1"")), // proper normalization?"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,213,"field.newDfp(""0.00000000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,214,"0, ""Add #23.2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,216,"test(field.newDfp(""1"").add(field.newDfp(""0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,217,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,218,"0, ""Add #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,220,"test(field.newDfp(""0"").add(field.newDfp(""0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,221,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,222,"0, ""Add #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,224,"test(field.newDfp(""-0"").add(field.newDfp(""0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,225,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,226,"0, ""Add #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,228,"test(field.newDfp(""0"").add(field.newDfp(""-0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,229,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,230,"0, ""Add #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,232,"test(field.newDfp(""-0"").add(field.newDfp(""-0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,233,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,234,"0, ""Add #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,236,"test(field.newDfp(""1e-20"").add(field.newDfp(""0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,237,"field.newDfp(""1e-20""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,238,"0, ""Add #29"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,240,"test(field.newDfp(""1e-40"").add(field.newDfp(""0"")), // adding zeros"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,241,"field.newDfp(""1e-40""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,242,"0, ""Add #30"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,244,"test(pinf.add(ninf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,245,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,246,"DfpField.FLAG_INVALID, ""Add #31"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,248,"test(ninf.add(pinf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,249,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,250,"DfpField.FLAG_INVALID, ""Add #32"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,252,"test(ninf.add(ninf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,253,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,254,"0, ""Add #33"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,256,"test(pinf.add(pinf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,257,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,258,"0, ""Add #34"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,260,"test(pinf.add(field.newDfp(""0"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,261,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,262,"0, ""Add #35"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,264,"test(pinf.add(field.newDfp(""-1e131071"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,265,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,266,"0, ""Add #36"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,268,"test(pinf.add(field.newDfp(""1e131071"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,269,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,270,"0, ""Add #37"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,272,"test(field.newDfp(""0"").add(pinf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,273,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,274,"0, ""Add #38"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,276,"test(field.newDfp(""-1e131071"").add(pinf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,277,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,278,"0, ""Add #39"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,280,"test(field.newDfp(""1e131071"").add(pinf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,281,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,282,"0, ""Add #40"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,284,"test(ninf.add(field.newDfp(""0"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,285,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,286,"0, ""Add #41"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,288,"test(ninf.add(field.newDfp(""-1e131071"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,289,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,290,"0, ""Add #42"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,292,"test(ninf.add(field.newDfp(""1e131071"")), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,293,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,294,"0, ""Add #43"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,296,"test(field.newDfp(""0"").add(ninf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,297,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,298,"0, ""Add #44"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,300,"test(field.newDfp(""-1e131071"").add(ninf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,301,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,302,"0, ""Add #45"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,304,"test(field.newDfp(""1e131071"").add(ninf), // adding infinities"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,305,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,306,"0, ""Add #46"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,308,"test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""5e131051"")),  // overflow"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,309,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,310,"DfpField.FLAG_OVERFLOW, ""Add #47"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,312,"test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""4.9999999999999999999e131051"")),  // overflow"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,313,"field.newDfp(""9.9999999999999999999e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,314,"DfpField.FLAG_INEXACT, ""Add #48"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,316,"test(nan.add(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,317,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,318,"0, ""Add #49"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,320,"test(field.newDfp(""1"").add(nan),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,321,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,322,"0, ""Add #50"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,324,"test(field.newDfp(""12345678123456781234"").add(field.newDfp(""0.12345678123456781234"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,325,"field.newDfp(""12345678123456781234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,326,"DfpField.FLAG_INEXACT, ""Add #51"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,328,"test(field.newDfp(""12345678123456781234"").add(field.newDfp(""123.45678123456781234"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,329,"field.newDfp(""12345678123456781357""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,330,"DfpField.FLAG_INEXACT, ""Add #52"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,332,"test(field.newDfp(""123.45678123456781234"").add(field.newDfp(""12345678123456781234"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,333,"field.newDfp(""12345678123456781357""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,334,"DfpField.FLAG_INEXACT, ""Add #53"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,336,"test(field.newDfp(""12345678123456781234"").add(field.newDfp("".00001234567812345678"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,337,"field.newDfp(""12345678123456781234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,338,"DfpField.FLAG_INEXACT, ""Add #54"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,340,"test(field.newDfp(""12345678123456781234"").add(field.newDfp("".00000000123456781234"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,341,"field.newDfp(""12345678123456781234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,342,"DfpField.FLAG_INEXACT, ""Add #55"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,344,"test(field.newDfp(""-0"").add(field.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,345,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,346,"0, ""Add #56"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,348,"test(field.newDfp(""0"").add(field.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,349,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,350,"0, ""Add #57"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,352,"test(field.newDfp(""-0"").add(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,353,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,354,"0, ""Add #58"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,356,"test(field.newDfp(""0"").add(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,357,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,358,"0, ""Add #59"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,363,// Test comparisons
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,365,// utility function to help test comparisons
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,366,"private void cmptst(Dfp a, Dfp b, String op, boolean result, double num)"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,368,"if (op == ""equal"")"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,369,if (a.equals(b) != result)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,370,"Assert.fail(""assersion failed.  ""+op+"" compare #""+num);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,372,"if (op == ""unequal"")"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,373,if (a.unequal(b) != result)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,374,"Assert.fail(""assersion failed.  ""+op+"" compare #""+num);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,376,"if (op == ""lessThan"")"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,377,if (a.lessThan(b) != result)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,378,"Assert.fail(""assersion failed.  ""+op+"" compare #""+num);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,380,"if (op == ""greaterThan"")"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,381,if (a.greaterThan(b) != result)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,382,"Assert.fail(""assersion failed.  ""+op+"" compare #""+num);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,385,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,386,public void  testCompare()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,388,// test equal() comparison
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,389,// check zero vs. zero
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,390,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,392,"cmptst(field.newDfp(""0""), field.newDfp(""0""), ""equal"", true, 1);         // 0 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,393,"cmptst(field.newDfp(""0""), field.newDfp(""-0""), ""equal"", true, 2);        // 0 == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,394,"cmptst(field.newDfp(""-0""), field.newDfp(""-0""), ""equal"", true, 3);       // -0 == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,395,"cmptst(field.newDfp(""-0""), field.newDfp(""0""), ""equal"", true, 4);        // -0 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,397,// check zero vs normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,399,"cmptst(field.newDfp(""0""), field.newDfp(""1""), ""equal"", false, 5);         // 0 == 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,400,"cmptst(field.newDfp(""1""), field.newDfp(""0""), ""equal"", false, 6);         // 1 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,401,"cmptst(field.newDfp(""-1""), field.newDfp(""0""), ""equal"", false, 7);        // -1 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,402,"cmptst(field.newDfp(""0""), field.newDfp(""-1""), ""equal"", false, 8);        // 0 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,403,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131072""), ""equal"", false, 9); // 0 == 1e-131072"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,404,// check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,405,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,406,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,408,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131078""), ""equal"", false, 10); // 0 == 1e-131078"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,410,// check flags  -- underflow should be set
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,411,if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,412,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,414,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,416,"cmptst(field.newDfp(""0""), field.newDfp(""1e+131071""), ""equal"", false, 11); // 0 == 1e+131071"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,418,// check zero vs infinities
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,420,"cmptst(field.newDfp(""0""), pinf, ""equal"", false, 12);    // 0 == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,421,"cmptst(field.newDfp(""0""), ninf, ""equal"", false, 13);    // 0 == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,422,"cmptst(field.newDfp(""-0""), pinf, ""equal"", false, 14);   // -0 == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,423,"cmptst(field.newDfp(""-0""), ninf, ""equal"", false, 15);   // -0 == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,424,"cmptst(pinf, field.newDfp(""0""), ""equal"", false, 16);    // pinf == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,425,"cmptst(ninf, field.newDfp(""0""), ""equal"", false, 17);    // ninf == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,426,"cmptst(pinf, field.newDfp(""-0""), ""equal"", false, 18);   // pinf == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,427,"cmptst(ninf, field.newDfp(""-0""), ""equal"", false, 19);   // ninf == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,428,"cmptst(ninf, pinf, ""equal"", false, 19.10);     // ninf == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,429,"cmptst(pinf, ninf, ""equal"", false, 19.11);     // pinf == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,430,"cmptst(pinf, pinf, ""equal"", true, 19.12);     // pinf == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,431,"cmptst(ninf, ninf, ""equal"", true, 19.13);     // ninf == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,433,// check some normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,434,"cmptst(field.newDfp(""1""), field.newDfp(""1""), ""equal"", true, 20);   // 1 == 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,435,"cmptst(field.newDfp(""1""), field.newDfp(""-1""), ""equal"", false, 21);   // 1 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,436,"cmptst(field.newDfp(""-1""), field.newDfp(""-1""), ""equal"", true, 22);   // -1 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,437,"cmptst(field.newDfp(""1""), field.newDfp(""1.0000000000000001""), ""equal"", false, 23);   // 1 == 1.0000000000000001"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,439,// The tests below checks to ensure that comparisons don't set FLAG_INEXACT
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,440,// 100000 == 1.0000000000000001
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,441,"cmptst(field.newDfp(""1e20""), field.newDfp(""1.0000000000000001""), ""equal"", false, 24);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,442,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,443,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,445,"cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""equal"", true, 25);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,447,// check some nans -- nans shouldnt equal anything
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,449,"cmptst(snan, snan, ""equal"", false, 27);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,450,"cmptst(qnan, qnan, ""equal"", false, 28);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,451,"cmptst(snan, qnan, ""equal"", false, 29);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,452,"cmptst(qnan, snan, ""equal"", false, 30);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,453,"cmptst(qnan, field.newDfp(""0""), ""equal"", false, 31);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,454,"cmptst(snan, field.newDfp(""0""), ""equal"", false, 32);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,455,"cmptst(field.newDfp(""0""), snan, ""equal"", false, 33);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,456,"cmptst(field.newDfp(""0""), qnan, ""equal"", false, 34);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,457,"cmptst(qnan, pinf, ""equal"", false, 35);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,458,"cmptst(snan, pinf, ""equal"", false, 36);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,459,"cmptst(pinf, snan, ""equal"", false, 37);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,460,"cmptst(pinf, qnan, ""equal"", false, 38);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,461,"cmptst(qnan, ninf, ""equal"", false, 39);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,462,"cmptst(snan, ninf, ""equal"", false, 40);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,463,"cmptst(ninf, snan, ""equal"", false, 41);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,464,"cmptst(ninf, qnan, ""equal"", false, 42);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,465,"cmptst(qnan, field.newDfp(""-1""), ""equal"", false, 43);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,466,"cmptst(snan, field.newDfp(""-1""), ""equal"", false, 44);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,467,"cmptst(field.newDfp(""-1""), snan, ""equal"", false, 45);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,468,"cmptst(field.newDfp(""-1""), qnan, ""equal"", false, 46);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,469,"cmptst(qnan, field.newDfp(""1""), ""equal"", false, 47);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,470,"cmptst(snan, field.newDfp(""1""), ""equal"", false, 48);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,471,"cmptst(field.newDfp(""1""), snan, ""equal"", false, 49);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,472,"cmptst(field.newDfp(""1""), qnan, ""equal"", false, 50);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,473,"cmptst(snan.negate(), snan, ""equal"", false, 51);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,474,"cmptst(qnan.negate(), qnan, ""equal"", false, 52);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,477,// Tests for un equal  -- do it all over again
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,480,"cmptst(field.newDfp(""0""), field.newDfp(""0""), ""unequal"", false, 1);         // 0 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,481,"cmptst(field.newDfp(""0""), field.newDfp(""-0""), ""unequal"", false, 2);        // 0 == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,482,"cmptst(field.newDfp(""-0""), field.newDfp(""-0""), ""unequal"", false, 3);       // -0 == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,483,"cmptst(field.newDfp(""-0""), field.newDfp(""0""), ""unequal"", false, 4);        // -0 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,485,// check zero vs normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,487,"cmptst(field.newDfp(""0""), field.newDfp(""1""), ""unequal"", true, 5);         // 0 == 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,488,"cmptst(field.newDfp(""1""), field.newDfp(""0""), ""unequal"", true, 6);         // 1 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,489,"cmptst(field.newDfp(""-1""), field.newDfp(""0""), ""unequal"", true, 7);        // -1 == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,490,"cmptst(field.newDfp(""0""), field.newDfp(""-1""), ""unequal"", true, 8);        // 0 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,491,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131072""), ""unequal"", true, 9); // 0 == 1e-131072"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,492,// check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,493,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,494,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,496,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131078""), ""unequal"", true, 10); // 0 == 1e-131078"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,498,// check flags  -- underflow should be set
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,499,if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,500,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,502,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,504,"cmptst(field.newDfp(""0""), field.newDfp(""1e+131071""), ""unequal"", true, 11); // 0 == 1e+131071"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,506,// check zero vs infinities
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,508,"cmptst(field.newDfp(""0""), pinf, ""unequal"", true, 12);    // 0 == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,509,"cmptst(field.newDfp(""0""), ninf, ""unequal"", true, 13);    // 0 == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,510,"cmptst(field.newDfp(""-0""), pinf, ""unequal"", true, 14);   // -0 == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,511,"cmptst(field.newDfp(""-0""), ninf, ""unequal"", true, 15);   // -0 == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,512,"cmptst(pinf, field.newDfp(""0""), ""unequal"", true, 16);    // pinf == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,513,"cmptst(ninf, field.newDfp(""0""), ""unequal"", true, 17);    // ninf == 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,514,"cmptst(pinf, field.newDfp(""-0""), ""unequal"", true, 18);   // pinf == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,515,"cmptst(ninf, field.newDfp(""-0""), ""unequal"", true, 19);   // ninf == -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,516,"cmptst(ninf, pinf, ""unequal"", true, 19.10);     // ninf == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,517,"cmptst(pinf, ninf, ""unequal"", true, 19.11);     // pinf == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,518,"cmptst(pinf, pinf, ""unequal"", false, 19.12);     // pinf == pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,519,"cmptst(ninf, ninf, ""unequal"", false, 19.13);     // ninf == ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,521,// check some normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,522,"cmptst(field.newDfp(""1""), field.newDfp(""1""), ""unequal"", false, 20);   // 1 == 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,523,"cmptst(field.newDfp(""1""), field.newDfp(""-1""), ""unequal"", true, 21);   // 1 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,524,"cmptst(field.newDfp(""-1""), field.newDfp(""-1""), ""unequal"", false, 22);   // -1 == -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,525,"cmptst(field.newDfp(""1""), field.newDfp(""1.0000000000000001""), ""unequal"", true, 23);   // 1 == 1.0000000000000001"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,527,// The tests below checks to ensure that comparisons don't set FLAG_INEXACT
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,528,// 100000 == 1.0000000000000001
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,529,"cmptst(field.newDfp(""1e20""), field.newDfp(""1.0000000000000001""), ""unequal"", true, 24);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,530,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,531,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,533,"cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""unequal"", false, 25);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,535,// check some nans -- nans shouldnt be unequal to anything
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,537,"cmptst(snan, snan, ""unequal"", false, 27);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,538,"cmptst(qnan, qnan, ""unequal"", false, 28);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,539,"cmptst(snan, qnan, ""unequal"", false, 29);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,540,"cmptst(qnan, snan, ""unequal"", false, 30);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,541,"cmptst(qnan, field.newDfp(""0""), ""unequal"", false, 31);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,542,"cmptst(snan, field.newDfp(""0""), ""unequal"", false, 32);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,543,"cmptst(field.newDfp(""0""), snan, ""unequal"", false, 33);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,544,"cmptst(field.newDfp(""0""), qnan, ""unequal"", false, 34);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,545,"cmptst(qnan, pinf, ""unequal"", false, 35);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,546,"cmptst(snan, pinf, ""unequal"", false, 36);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,547,"cmptst(pinf, snan, ""unequal"", false, 37);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,548,"cmptst(pinf, qnan, ""unequal"", false, 38);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,549,"cmptst(qnan, ninf, ""unequal"", false, 39);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,550,"cmptst(snan, ninf, ""unequal"", false, 40);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,551,"cmptst(ninf, snan, ""unequal"", false, 41);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,552,"cmptst(ninf, qnan, ""unequal"", false, 42);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,553,"cmptst(qnan, field.newDfp(""-1""), ""unequal"", false, 43);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,554,"cmptst(snan, field.newDfp(""-1""), ""unequal"", false, 44);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,555,"cmptst(field.newDfp(""-1""), snan, ""unequal"", false, 45);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,556,"cmptst(field.newDfp(""-1""), qnan, ""unequal"", false, 46);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,557,"cmptst(qnan, field.newDfp(""1""), ""unequal"", false, 47);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,558,"cmptst(snan, field.newDfp(""1""), ""unequal"", false, 48);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,559,"cmptst(field.newDfp(""1""), snan, ""unequal"", false, 49);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,560,"cmptst(field.newDfp(""1""), qnan, ""unequal"", false, 50);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,561,"cmptst(snan.negate(), snan, ""unequal"", false, 51);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,562,"cmptst(qnan.negate(), qnan, ""unequal"", false, 52);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,564,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,565,"Assert.fail(""assersion failed.  compare unequal flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,568,// Tests for lessThan  -- do it all over again
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,571,"cmptst(field.newDfp(""0""), field.newDfp(""0""), ""lessThan"", false, 1);         // 0 < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,572,"cmptst(field.newDfp(""0""), field.newDfp(""-0""), ""lessThan"", false, 2);        // 0 < -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,573,"cmptst(field.newDfp(""-0""), field.newDfp(""-0""), ""lessThan"", false, 3);       // -0 < -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,574,"cmptst(field.newDfp(""-0""), field.newDfp(""0""), ""lessThan"", false, 4);        // -0 < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,576,// check zero vs normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,578,"cmptst(field.newDfp(""0""), field.newDfp(""1""), ""lessThan"", true, 5);         // 0 < 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,579,"cmptst(field.newDfp(""1""), field.newDfp(""0""), ""lessThan"", false, 6);         // 1 < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,580,"cmptst(field.newDfp(""-1""), field.newDfp(""0""), ""lessThan"", true, 7);        // -1 < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,581,"cmptst(field.newDfp(""0""), field.newDfp(""-1""), ""lessThan"", false, 8);        // 0 < -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,582,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131072""), ""lessThan"", true, 9); // 0 < 1e-131072"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,583,// check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,584,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,585,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,587,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131078""), ""lessThan"", true, 10); // 0 < 1e-131078"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,589,// check flags  -- underflow should be set
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,590,if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,591,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,592,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,594,"cmptst(field.newDfp(""0""), field.newDfp(""1e+131071""), ""lessThan"", true, 11); // 0 < 1e+131071"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,596,// check zero vs infinities
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,598,"cmptst(field.newDfp(""0""), pinf, ""lessThan"", true, 12);    // 0 < pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,599,"cmptst(field.newDfp(""0""), ninf, ""lessThan"", false, 13);    // 0 < ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,600,"cmptst(field.newDfp(""-0""), pinf, ""lessThan"", true, 14);   // -0 < pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,601,"cmptst(field.newDfp(""-0""), ninf, ""lessThan"", false, 15);   // -0 < ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,602,"cmptst(pinf, field.newDfp(""0""), ""lessThan"", false, 16);    // pinf < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,603,"cmptst(ninf, field.newDfp(""0""), ""lessThan"", true, 17);    // ninf < 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,604,"cmptst(pinf, field.newDfp(""-0""), ""lessThan"", false, 18);   // pinf < -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,605,"cmptst(ninf, field.newDfp(""-0""), ""lessThan"", true, 19);   // ninf < -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,606,"cmptst(ninf, pinf, ""lessThan"", true, 19.10);     // ninf < pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,607,"cmptst(pinf, ninf, ""lessThan"", false, 19.11);     // pinf < ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,608,"cmptst(pinf, pinf, ""lessThan"", false, 19.12);     // pinf < pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,609,"cmptst(ninf, ninf, ""lessThan"", false, 19.13);     // ninf < ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,611,// check some normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,612,"cmptst(field.newDfp(""1""), field.newDfp(""1""), ""lessThan"", false, 20);   // 1 < 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,613,"cmptst(field.newDfp(""1""), field.newDfp(""-1""), ""lessThan"", false, 21);   // 1 < -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,614,"cmptst(field.newDfp(""-1""), field.newDfp(""-1""), ""lessThan"", false, 22);   // -1 < -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,615,"cmptst(field.newDfp(""1""), field.newDfp(""1.0000000000000001""), ""lessThan"", true, 23);   // 1 < 1.0000000000000001"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,617,// The tests below checks to ensure that comparisons don't set FLAG_INEXACT
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,618,// 100000 < 1.0000000000000001
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,619,"cmptst(field.newDfp(""1e20""), field.newDfp(""1.0000000000000001""), ""lessThan"", false, 24);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,620,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,621,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,623,"cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""lessThan"", false, 25);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,625,// check some nans -- nans shouldnt be lessThan to anything
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,626,"cmptst(snan, snan, ""lessThan"", false, 27);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,627,"cmptst(qnan, qnan, ""lessThan"", false, 28);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,628,"cmptst(snan, qnan, ""lessThan"", false, 29);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,629,"cmptst(qnan, snan, ""lessThan"", false, 30);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,630,"cmptst(qnan, field.newDfp(""0""), ""lessThan"", false, 31);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,631,"cmptst(snan, field.newDfp(""0""), ""lessThan"", false, 32);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,632,"cmptst(field.newDfp(""0""), snan, ""lessThan"", false, 33);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,633,"cmptst(field.newDfp(""0""), qnan, ""lessThan"", false, 34);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,634,"cmptst(qnan, pinf, ""lessThan"", false, 35);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,635,"cmptst(snan, pinf, ""lessThan"", false, 36);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,636,"cmptst(pinf, snan, ""lessThan"", false, 37);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,637,"cmptst(pinf, qnan, ""lessThan"", false, 38);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,638,"cmptst(qnan, ninf, ""lessThan"", false, 39);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,639,"cmptst(snan, ninf, ""lessThan"", false, 40);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,640,"cmptst(ninf, snan, ""lessThan"", false, 41);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,641,"cmptst(ninf, qnan, ""lessThan"", false, 42);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,642,"cmptst(qnan, field.newDfp(""-1""), ""lessThan"", false, 43);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,643,"cmptst(snan, field.newDfp(""-1""), ""lessThan"", false, 44);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,644,"cmptst(field.newDfp(""-1""), snan, ""lessThan"", false, 45);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,645,"cmptst(field.newDfp(""-1""), qnan, ""lessThan"", false, 46);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,646,"cmptst(qnan, field.newDfp(""1""), ""lessThan"", false, 47);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,647,"cmptst(snan, field.newDfp(""1""), ""lessThan"", false, 48);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,648,"cmptst(field.newDfp(""1""), snan, ""lessThan"", false, 49);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,649,"cmptst(field.newDfp(""1""), qnan, ""lessThan"", false, 50);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,650,"cmptst(snan.negate(), snan, ""lessThan"", false, 51);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,651,"cmptst(qnan.negate(), qnan, ""lessThan"", false, 52);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,653,//lessThan compares with nans should raise FLAG_INVALID
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,654,if (field.getIEEEFlags() != DfpField.FLAG_INVALID)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,655,"Assert.fail(""assersion failed.  compare lessThan flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,656,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,659,// Tests for greaterThan  -- do it all over again
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,662,"cmptst(field.newDfp(""0""), field.newDfp(""0""), ""greaterThan"", false, 1);         // 0 > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,663,"cmptst(field.newDfp(""0""), field.newDfp(""-0""), ""greaterThan"", false, 2);        // 0 > -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,664,"cmptst(field.newDfp(""-0""), field.newDfp(""-0""), ""greaterThan"", false, 3);       // -0 > -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,665,"cmptst(field.newDfp(""-0""), field.newDfp(""0""), ""greaterThan"", false, 4);        // -0 > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,667,// check zero vs normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,669,"cmptst(field.newDfp(""0""), field.newDfp(""1""), ""greaterThan"", false, 5);         // 0 > 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,670,"cmptst(field.newDfp(""1""), field.newDfp(""0""), ""greaterThan"", true, 6);         // 1 > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,671,"cmptst(field.newDfp(""-1""), field.newDfp(""0""), ""greaterThan"", false, 7);        // -1 > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,672,"cmptst(field.newDfp(""0""), field.newDfp(""-1""), ""greaterThan"", true, 8);        // 0 > -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,673,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131072""), ""greaterThan"", false, 9); // 0 > 1e-131072"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,674,// check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,675,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,676,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,678,"cmptst(field.newDfp(""0""), field.newDfp(""1e-131078""), ""greaterThan"", false, 10); // 0 > 1e-131078"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,680,// check flags  -- underflow should be set
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,681,if (field.getIEEEFlags() != DfpField.FLAG_UNDERFLOW)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,682,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,683,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,685,"cmptst(field.newDfp(""0""), field.newDfp(""1e+131071""), ""greaterThan"", false, 11); // 0 > 1e+131071"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,687,// check zero vs infinities
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,689,"cmptst(field.newDfp(""0""), pinf, ""greaterThan"", false, 12);    // 0 > pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,690,"cmptst(field.newDfp(""0""), ninf, ""greaterThan"", true, 13);    // 0 > ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,691,"cmptst(field.newDfp(""-0""), pinf, ""greaterThan"", false, 14);   // -0 > pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,692,"cmptst(field.newDfp(""-0""), ninf, ""greaterThan"", true, 15);   // -0 > ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,693,"cmptst(pinf, field.newDfp(""0""), ""greaterThan"", true, 16);    // pinf > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,694,"cmptst(ninf, field.newDfp(""0""), ""greaterThan"", false, 17);    // ninf > 0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,695,"cmptst(pinf, field.newDfp(""-0""), ""greaterThan"", true, 18);   // pinf > -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,696,"cmptst(ninf, field.newDfp(""-0""), ""greaterThan"", false, 19);   // ninf > -0"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,697,"cmptst(ninf, pinf, ""greaterThan"", false, 19.10);     // ninf > pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,698,"cmptst(pinf, ninf, ""greaterThan"", true, 19.11);     // pinf > ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,699,"cmptst(pinf, pinf, ""greaterThan"", false, 19.12);     // pinf > pinf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,700,"cmptst(ninf, ninf, ""greaterThan"", false, 19.13);     // ninf > ninf"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,702,// check some normal numbers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,703,"cmptst(field.newDfp(""1""), field.newDfp(""1""), ""greaterThan"", false, 20);   // 1 > 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,704,"cmptst(field.newDfp(""1""), field.newDfp(""-1""), ""greaterThan"", true, 21);   // 1 > -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,705,"cmptst(field.newDfp(""-1""), field.newDfp(""-1""), ""greaterThan"", false, 22);   // -1 > -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,706,"cmptst(field.newDfp(""1""), field.newDfp(""1.0000000000000001""), ""greaterThan"", false, 23);   // 1 > 1.0000000000000001"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,708,// The tests below checks to ensure that comparisons don't set FLAG_INEXACT
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,709,// 100000 > 1.0000000000000001
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,710,"cmptst(field.newDfp(""1e20""), field.newDfp(""1.0000000000000001""), ""greaterThan"", true, 24);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,711,if (field.getIEEEFlags() != 0)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,712,"Assert.fail(""assersion failed.  compare flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,714,"cmptst(field.newDfp(""0.000001""), field.newDfp(""1e-6""), ""greaterThan"", false, 25);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,716,// check some nans -- nans shouldnt be greaterThan to anything
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,717,"cmptst(snan, snan, ""greaterThan"", false, 27);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,718,"cmptst(qnan, qnan, ""greaterThan"", false, 28);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,719,"cmptst(snan, qnan, ""greaterThan"", false, 29);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,720,"cmptst(qnan, snan, ""greaterThan"", false, 30);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,721,"cmptst(qnan, field.newDfp(""0""), ""greaterThan"", false, 31);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,722,"cmptst(snan, field.newDfp(""0""), ""greaterThan"", false, 32);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,723,"cmptst(field.newDfp(""0""), snan, ""greaterThan"", false, 33);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,724,"cmptst(field.newDfp(""0""), qnan, ""greaterThan"", false, 34);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,725,"cmptst(qnan, pinf, ""greaterThan"", false, 35);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,726,"cmptst(snan, pinf, ""greaterThan"", false, 36);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,727,"cmptst(pinf, snan, ""greaterThan"", false, 37);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,728,"cmptst(pinf, qnan, ""greaterThan"", false, 38);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,729,"cmptst(qnan, ninf, ""greaterThan"", false, 39);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,730,"cmptst(snan, ninf, ""greaterThan"", false, 40);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,731,"cmptst(ninf, snan, ""greaterThan"", false, 41);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,732,"cmptst(ninf, qnan, ""greaterThan"", false, 42);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,733,"cmptst(qnan, field.newDfp(""-1""), ""greaterThan"", false, 43);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,734,"cmptst(snan, field.newDfp(""-1""), ""greaterThan"", false, 44);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,735,"cmptst(field.newDfp(""-1""), snan, ""greaterThan"", false, 45);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,736,"cmptst(field.newDfp(""-1""), qnan, ""greaterThan"", false, 46);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,737,"cmptst(qnan, field.newDfp(""1""), ""greaterThan"", false, 47);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,738,"cmptst(snan, field.newDfp(""1""), ""greaterThan"", false, 48);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,739,"cmptst(field.newDfp(""1""), snan, ""greaterThan"", false, 49);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,740,"cmptst(field.newDfp(""1""), qnan, ""greaterThan"", false, 50);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,741,"cmptst(snan.negate(), snan, ""greaterThan"", false, 51);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,742,"cmptst(qnan.negate(), qnan, ""greaterThan"", false, 52);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,744,//greaterThan compares with nans should raise FLAG_INVALID
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,745,if (field.getIEEEFlags() != DfpField.FLAG_INVALID)
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,746,"Assert.fail(""assersion failed.  compare greaterThan flags = ""+field.getIEEEFlags());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,747,field.clearIEEEFlags();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,751,// Test multiplication
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,753,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,754,public void testMultiply()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,756,"test(field.newDfp(""1"").multiply(field.newDfp(""1"")),      // Basic tests   1*1 = 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,757,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,758,"0, ""Multiply #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,760,"test(field.newDfp(""1"").multiply(1),             // Basic tests   1*1 = 1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,761,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,762,"0, ""Multiply #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,764,"test(field.newDfp(""-1"").multiply(field.newDfp(""1"")),     // Basic tests   -1*1 = -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,765,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,766,"0, ""Multiply #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,768,"test(field.newDfp(""-1"").multiply(1),            // Basic tests   -1*1 = -1"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,769,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,770,"0, ""Multiply #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,772,// basic tests with integers
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,773,"test(field.newDfp(""2"").multiply(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,774,"field.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,775,"0, ""Multiply #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,777,"test(field.newDfp(""2"").multiply(3),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,778,"field.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,779,"0, ""Multiply #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,781,"test(field.newDfp(""-2"").multiply(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,782,"field.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,783,"0, ""Multiply #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,785,"test(field.newDfp(""-2"").multiply(3),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,786,"field.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,787,"0, ""Multiply #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,789,"test(field.newDfp(""2"").multiply(field.newDfp(""-3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,790,"field.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,791,"0, ""Multiply #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,793,"test(field.newDfp(""-2"").multiply(field.newDfp(""-3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,794,"field.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,795,"0, ""Multiply #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,797,//multiply by zero
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,799,"test(field.newDfp(""-2"").multiply(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,800,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,801,"0, ""Multiply #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,803,"test(field.newDfp(""-2"").multiply(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,804,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,805,"0, ""Multiply #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,807,"test(field.newDfp(""2"").multiply(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,808,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,809,"0, ""Multiply #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,811,"test(field.newDfp(""2"").multiply(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,812,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,813,"0, ""Multiply #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,815,"test(field.newDfp(""2"").multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,816,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,817,"0, ""Multiply #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,819,"test(field.newDfp(""2"").multiply(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,820,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,821,"0, ""Multiply #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,823,"test(field.newDfp(""-2"").multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,824,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,825,"0, ""Multiply #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,827,"test(field.newDfp(""-2"").multiply(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,828,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,829,"0, ""Multiply #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,831,"test(ninf.multiply(field.newDfp(""-2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,832,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,833,"0, ""Multiply #18.1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,835,"test(field.newDfp(""5e131071"").multiply(2),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,836,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,837,"DfpField.FLAG_OVERFLOW, ""Multiply #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,839,"test(field.newDfp(""5e131071"").multiply(field.newDfp(""1.999999999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,840,"field.newDfp(""9.9999999999999950000e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,841,"0, ""Multiply #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,843,"test(field.newDfp(""-5e131071"").multiply(2),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,844,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,845,"DfpField.FLAG_OVERFLOW, ""Multiply #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,847,"test(field.newDfp(""-5e131071"").multiply(field.newDfp(""1.999999999999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,848,"field.newDfp(""-9.9999999999999950000e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,849,"0, ""Multiply #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,851,"test(field.newDfp(""1e-65539"").multiply(field.newDfp(""1e-65539"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,852,"field.newDfp(""1e-131078""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,853,"DfpField.FLAG_UNDERFLOW, ""Multiply #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,855,"test(field.newDfp(""1"").multiply(nan),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,856,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,857,"0, ""Multiply #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,859,"test(nan.multiply(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,860,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,861,"0, ""Multiply #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,863,"test(nan.multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,864,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,865,"0, ""Multiply #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,867,"test(pinf.multiply(nan),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,868,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,869,"0, ""Multiply #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,871,"test(pinf.multiply(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,872,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,873,"DfpField.FLAG_INVALID, ""Multiply #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,875,"test(field.newDfp(""0"").multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,876,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,877,"DfpField.FLAG_INVALID, ""Multiply #29"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,879,"test(pinf.multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,880,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,881,"0, ""Multiply #30"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,883,"test(ninf.multiply(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,884,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,885,"0, ""Multiply #31"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,887,"test(pinf.multiply(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,888,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,889,"0, ""Multiply #32"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,891,"test(ninf.multiply(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,892,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,893,"0, ""Multiply #33"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,895,"test(pinf.multiply(1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,896,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,897,"0, ""Multiply #34"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,899,"test(pinf.multiply(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,900,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,901,"DfpField.FLAG_INVALID, ""Multiply #35"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,903,"test(nan.multiply(1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,904,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,905,"0, ""Multiply #36"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,907,"test(field.newDfp(""1"").multiply(10000),  // out of range"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,908,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,909,"DfpField.FLAG_INVALID, ""Multiply #37"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,911,"test(field.newDfp(""1"").multiply(-1),  // out of range"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,912,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,913,"DfpField.FLAG_INVALID, ""Multiply #38"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,916,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,917,public void testDivide()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,919,"test(field.newDfp(""1"").divide(nan),      // divide by NaN = NaN"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,920,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,921,"0, ""Divide #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,923,"test(nan.divide(field.newDfp(""1"")),      // NaN / number = NaN"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,924,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,925,"0, ""Divide #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,927,"test(pinf.divide(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,928,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,929,"0, ""Divide #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,931,"test(pinf.divide(field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,932,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,933,"0, ""Divide #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,935,"test(pinf.divide(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,936,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,937,"DfpField.FLAG_INVALID, ""Divide #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,939,"test(ninf.divide(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,940,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,941,"DfpField.FLAG_INVALID, ""Divide #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,943,"test(pinf.divide(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,944,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,945,"DfpField.FLAG_INVALID, ""Divide #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,947,"test(ninf.divide(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,948,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,949,"DfpField.FLAG_INVALID, ""Divide #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,951,"test(field.newDfp(""0"").divide(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,952,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,953,"DfpField.FLAG_DIV_ZERO, ""Divide #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,955,"test(field.newDfp(""1"").divide(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,956,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,957,"DfpField.FLAG_DIV_ZERO, ""Divide #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,959,"test(field.newDfp(""1"").divide(field.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,960,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,961,"DfpField.FLAG_DIV_ZERO, ""Divide #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,963,"test(field.newDfp(""-1"").divide(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,964,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,965,"DfpField.FLAG_DIV_ZERO, ""Divide #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,967,"test(field.newDfp(""-1"").divide(field.newDfp(""-0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,968,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,969,"DfpField.FLAG_DIV_ZERO, ""Divide #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,971,"test(field.newDfp(""1"").divide(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,972,"field.newDfp(""0.33333333333333333333""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,973,"DfpField.FLAG_INEXACT, ""Divide #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,975,"test(field.newDfp(""1"").divide(field.newDfp(""6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,976,"field.newDfp(""0.16666666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,977,"DfpField.FLAG_INEXACT, ""Divide #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,979,"test(field.newDfp(""10"").divide(field.newDfp(""6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,980,"field.newDfp(""1.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,981,"DfpField.FLAG_INEXACT, ""Divide #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,983,"test(field.newDfp(""100"").divide(field.newDfp(""6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,984,"field.newDfp(""16.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,985,"DfpField.FLAG_INEXACT, ""Divide #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,987,"test(field.newDfp(""1000"").divide(field.newDfp(""6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,988,"field.newDfp(""166.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,989,"DfpField.FLAG_INEXACT, ""Divide #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,991,"test(field.newDfp(""10000"").divide(field.newDfp(""6"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,992,"field.newDfp(""1666.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,993,"DfpField.FLAG_INEXACT, ""Divide #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,995,"test(field.newDfp(""1"").divide(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,996,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,997,"0, ""Divide #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,999,"test(field.newDfp(""1"").divide(field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1000,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1001,"0, ""Divide #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1003,"test(field.newDfp(""-1"").divide(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1004,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1005,"0, ""Divide #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1007,"test(field.newDfp(""-1"").divide(field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1008,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1009,"0, ""Divide #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1011,"test(field.newDfp(""1e-65539"").divide(field.newDfp(""1e65539"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1012,"field.newDfp(""1e-131078""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1013,"DfpField.FLAG_UNDERFLOW, ""Divide #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1015,"test(field.newDfp(""1e65539"").divide(field.newDfp(""1e-65539"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1016,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1017,"DfpField.FLAG_OVERFLOW, ""Divide #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1019,"test(field.newDfp(""2"").divide(field.newDfp(""1.5"")),     // test trial-divisor too high"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1020,"field.newDfp(""1.3333333333333333""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1021,"DfpField.FLAG_INEXACT, ""Divide #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1023,"test(field.newDfp(""2"").divide(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1024,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1025,"0, ""Divide #26"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1027,"test(field.newDfp(""2"").divide(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1028,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1029,"0, ""Divide #27"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1031,"test(field.newDfp(""0"").divide(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1032,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1033,"0, ""Divide #28"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1036,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1037,public void testDivideInt()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1039,"test(nan.divide(1),      // NaN / number = NaN"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1040,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1041,"0, ""DivideInt #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1043,"test(pinf.divide(1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1044,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1045,"0, ""DivideInt #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1047,"test(field.newDfp(""0"").divide(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1048,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1049,"DfpField.FLAG_DIV_ZERO, ""DivideInt #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1051,"test(field.newDfp(""1"").divide(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1052,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1053,"DfpField.FLAG_DIV_ZERO, ""DivideInt #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1055,"test(field.newDfp(""-1"").divide(0),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1056,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1057,"DfpField.FLAG_DIV_ZERO, ""DivideInt #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1059,"test(field.newDfp(""1"").divide(3),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1060,"field.newDfp(""0.33333333333333333333""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1061,"DfpField.FLAG_INEXACT, ""DivideInt #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1063,"test(field.newDfp(""1"").divide(6),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1064,"field.newDfp(""0.16666666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1065,"DfpField.FLAG_INEXACT, ""DivideInt #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1067,"test(field.newDfp(""10"").divide(6),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1068,"field.newDfp(""1.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1069,"DfpField.FLAG_INEXACT, ""DivideInt #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1071,"test(field.newDfp(""100"").divide(6),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1072,"field.newDfp(""16.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1073,"DfpField.FLAG_INEXACT, ""DivideInt #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1075,"test(field.newDfp(""1000"").divide(6),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1076,"field.newDfp(""166.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1077,"DfpField.FLAG_INEXACT, ""DivideInt #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1079,"test(field.newDfp(""10000"").divide(6),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1080,"field.newDfp(""1666.6666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1081,"DfpField.FLAG_INEXACT, ""DivideInt #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1083,"test(field.newDfp(""1"").divide(1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1084,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1085,"0, ""DivideInt #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1087,"test(field.newDfp(""1e-131077"").divide(10),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1088,"field.newDfp(""1e-131078""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1089,"DfpField.FLAG_UNDERFLOW, ""DivideInt #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1091,"test(field.newDfp(""0"").divide(1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1092,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1093,"0, ""DivideInt #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1095,"test(field.newDfp(""1"").divide(10000),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1096,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1097,"DfpField.FLAG_INVALID, ""DivideInt #24"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1099,"test(field.newDfp(""1"").divide(-1),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1100,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1101,"DfpField.FLAG_INVALID, ""DivideInt #25"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1104,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1105,public void testNextAfter()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1107,"test(field.newDfp(""1"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1108,"field.newDfp(""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1109,"0, ""NextAfter #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1111,"test(field.newDfp(""1.0000000000000001"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1112,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1113,"0, ""NextAfter #1.5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1115,"test(field.newDfp(""1"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1116,"field.newDfp(""0.99999999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1117,"0, ""NextAfter #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1119,"test(field.newDfp(""0.99999999999999999999"").nextAfter(field.newDfp(""2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1120,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1121,"0, ""NextAfter #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1123,"test(field.newDfp(""-1"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1124,"field.newDfp(""-1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1125,"0, ""NextAfter #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1127,"test(field.newDfp(""-1"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1128,"field.newDfp(""-0.99999999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1129,"0, ""NextAfter #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1131,"test(field.newDfp(""-0.99999999999999999999"").nextAfter(field.newDfp(""-2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1132,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1133,"0, ""NextAfter #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1135,"test(field.newDfp(""2"").nextAfter(field.newDfp(""2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1136,"field.newDfp(""2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1137,"0, ""NextAfter #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1139,"test(field.newDfp(""0"").nextAfter(field.newDfp(""0"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1140,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1141,"0, ""NextAfter #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1143,"test(field.newDfp(""-2"").nextAfter(field.newDfp(""-2"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1144,"field.newDfp(""-2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1145,"0, ""NextAfter #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1147,"test(field.newDfp(""0"").nextAfter(field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1148,"field.newDfp(""1e-131092""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1149,"DfpField.FLAG_UNDERFLOW, ""NextAfter #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1151,"test(field.newDfp(""0"").nextAfter(field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1152,"field.newDfp(""-1e-131092""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1153,"DfpField.FLAG_UNDERFLOW, ""NextAfter #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1155,"test(field.newDfp(""-1e-131092"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1156,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1157,"DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, ""Next After #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1159,"test(field.newDfp(""1e-131092"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1160,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1161,"DfpField.FLAG_UNDERFLOW|DfpField.FLAG_INEXACT, ""Next After #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1163,"test(field.newDfp(""9.9999999999999999999e131078"").nextAfter(pinf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1164,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1165,"DfpField.FLAG_OVERFLOW|DfpField.FLAG_INEXACT, ""Next After #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1168,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1169,public void testToString()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1171,"Assert.assertEquals(""toString #1"", ""Infinity"", pinf.toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1172,"Assert.assertEquals(""toString #2"", ""-Infinity"", ninf.toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1173,"Assert.assertEquals(""toString #3"", ""NaN"", nan.toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1174,"Assert.assertEquals(""toString #4"", ""NaN"", field.newDfp((byte) 1, (byte) Dfp.QNAN).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1175,"Assert.assertEquals(""toString #5"", ""NaN"", field.newDfp((byte) 1, (byte) Dfp.SNAN).toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1176,"Assert.assertEquals(""toString #6"", ""1.2300000000000000e100"", field.newDfp(""1.23e100"").toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1177,"Assert.assertEquals(""toString #7"", ""-1.2300000000000000e100"", field.newDfp(""-1.23e100"").toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1178,"Assert.assertEquals(""toString #8"", ""12345678.1234"", field.newDfp(""12345678.1234"").toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1179,"Assert.assertEquals(""toString #9"", ""0.00001234"", field.newDfp(""0.00001234"").toString());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1182,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1183,public void testRound()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1185,field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1187,// Round down
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1188,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.9"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1189,"field.newDfp(""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1190,"DfpField.FLAG_INEXACT, ""Round #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1192,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1193,"field.newDfp(""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1194,"DfpField.FLAG_INEXACT, ""Round #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1196,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.99999999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1197,"field.newDfp(""-12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1198,"DfpField.FLAG_INEXACT, ""Round #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1200,field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1202,// Round up
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1203,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1204,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1205,"DfpField.FLAG_INEXACT, ""Round #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1207,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1208,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1209,"DfpField.FLAG_INEXACT, ""Round #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1211,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1212,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1213,"DfpField.FLAG_INEXACT, ""Round #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1215,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1216,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1217,"DfpField.FLAG_INEXACT, ""Round #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1219,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1221,// Round half up
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1222,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.4999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1223,"field.newDfp(""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1224,"DfpField.FLAG_INEXACT, ""Round #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1226,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1227,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1228,"DfpField.FLAG_INEXACT, ""Round #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1230,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.4999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1231,"field.newDfp(""-12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1232,"DfpField.FLAG_INEXACT, ""Round #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1234,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1235,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1236,"DfpField.FLAG_INEXACT, ""Round #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1238,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1240,// Round half down
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1241,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1242,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1243,"DfpField.FLAG_INEXACT, ""Round #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1245,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1246,"field.newDfp(""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1247,"DfpField.FLAG_INEXACT, ""Round #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1249,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1250,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1251,"DfpField.FLAG_INEXACT, ""Round #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1253,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1254,"field.newDfp(""-12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1255,"DfpField.FLAG_INEXACT, ""Round #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1257,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1259,// Round half odd
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1260,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1261,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1262,"DfpField.FLAG_INEXACT, ""Round #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1264,"test(field.newDfp(""12345678901234567891"").add(field.newDfp(""0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1265,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1266,"DfpField.FLAG_INEXACT, ""Round #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1268,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1269,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1270,"DfpField.FLAG_INEXACT, ""Round #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1272,"test(field.newDfp(""-12345678901234567891"").add(field.newDfp(""-0.5000"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1273,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1274,"DfpField.FLAG_INEXACT, ""Round #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1276,field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1278,// Round ceil
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1279,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1280,"field.newDfp(""12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1281,"DfpField.FLAG_INEXACT, ""Round #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1283,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1284,"field.newDfp(""-12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1285,"DfpField.FLAG_INEXACT, ""Round #21"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1287,field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1289,// Round floor
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1290,"test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.9999"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1291,"field.newDfp(""12345678901234567890""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1292,"DfpField.FLAG_INEXACT, ""Round #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1294,"test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.0001"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1295,"field.newDfp(""-12345678901234567891""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1296,"DfpField.FLAG_INEXACT, ""Round #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1298,field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);  // reset
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1301,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1302,public void testCeil()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1304,"test(field.newDfp(""1234.0000000000000001"").ceil(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1305,"field.newDfp(""1235""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1306,"DfpField.FLAG_INEXACT, ""Ceil #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1309,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1310,public void testFloor()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1312,"test(field.newDfp(""1234.9999999999999999"").floor(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1313,"field.newDfp(""1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1314,"DfpField.FLAG_INEXACT, ""Floor #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1317,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1318,public void testRint()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1320,"test(field.newDfp(""1234.50000000001"").rint(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1321,"field.newDfp(""1235""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1322,"DfpField.FLAG_INEXACT, ""Rint #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1324,"test(field.newDfp(""1234.5000"").rint(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1325,"field.newDfp(""1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1326,"DfpField.FLAG_INEXACT, ""Rint #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1328,"test(field.newDfp(""1235.5000"").rint(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1329,"field.newDfp(""1236""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1330,"DfpField.FLAG_INEXACT, ""Rint #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1333,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1334,public void testCopySign()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1336,"test(Dfp.copysign(field.newDfp(""1234.""), field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1337,"field.newDfp(""-1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1338,"0, ""CopySign #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1340,"test(Dfp.copysign(field.newDfp(""-1234.""), field.newDfp(""-1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1341,"field.newDfp(""-1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1342,"0, ""CopySign #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1344,"test(Dfp.copysign(field.newDfp(""-1234.""), field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1345,"field.newDfp(""1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1346,"0, ""CopySign #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1348,"test(Dfp.copysign(field.newDfp(""1234.""), field.newDfp(""1"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1349,"field.newDfp(""1234""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1350,"0, ""CopySign #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1353,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1354,public void testIntValue()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1356,"Assert.assertEquals(""intValue #1"", 1234, field.newDfp(""1234"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1357,"Assert.assertEquals(""intValue #2"", -1234, field.newDfp(""-1234"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1358,"Assert.assertEquals(""intValue #3"", 1234, field.newDfp(""1234.5"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1359,"Assert.assertEquals(""intValue #4"", 1235, field.newDfp(""1234.500001"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1360,"Assert.assertEquals(""intValue #5"", 2147483647, field.newDfp(""1e1000"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1361,"Assert.assertEquals(""intValue #6"", -2147483648, field.newDfp(""-1e1000"").intValue());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1364,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1365,public void testLog10K()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1367,"Assert.assertEquals(""log10K #1"", 1, field.newDfp(""123456"").log10K());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1368,"Assert.assertEquals(""log10K #2"", 2, field.newDfp(""123456789"").log10K());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1369,"Assert.assertEquals(""log10K #3"", 0, field.newDfp(""2"").log10K());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1370,"Assert.assertEquals(""log10K #3"", 0, field.newDfp(""1"").log10K());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1371,"Assert.assertEquals(""log10K #4"", -1, field.newDfp(""0.1"").log10K());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1374,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1375,public void testPower10K()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1377,Dfp d = field.newDfp();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1379,"test(d.power10K(0), field.newDfp(""1""), 0, ""Power10 #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1380,"test(d.power10K(1), field.newDfp(""10000""), 0, ""Power10 #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1381,"test(d.power10K(2), field.newDfp(""100000000""), 0, ""Power10 #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1383,"test(d.power10K(-1), field.newDfp(""0.0001""), 0, ""Power10 #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1384,"test(d.power10K(-2), field.newDfp(""0.00000001""), 0, ""Power10 #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1385,"test(d.power10K(-3), field.newDfp(""0.000000000001""), 0, ""Power10 #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1388,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1389,public void testLog10()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1392,"Assert.assertEquals(""log10 #1"", 1, field.newDfp(""12"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1393,"Assert.assertEquals(""log10 #2"", 2, field.newDfp(""123"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1394,"Assert.assertEquals(""log10 #3"", 3, field.newDfp(""1234"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1395,"Assert.assertEquals(""log10 #4"", 4, field.newDfp(""12345"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1396,"Assert.assertEquals(""log10 #5"", 5, field.newDfp(""123456"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1397,"Assert.assertEquals(""log10 #6"", 6, field.newDfp(""1234567"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1398,"Assert.assertEquals(""log10 #6"", 7, field.newDfp(""12345678"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1399,"Assert.assertEquals(""log10 #7"", 8, field.newDfp(""123456789"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1400,"Assert.assertEquals(""log10 #8"", 9, field.newDfp(""1234567890"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1401,"Assert.assertEquals(""log10 #9"", 10, field.newDfp(""12345678901"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1402,"Assert.assertEquals(""log10 #10"", 11, field.newDfp(""123456789012"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1403,"Assert.assertEquals(""log10 #11"", 12, field.newDfp(""1234567890123"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1405,"Assert.assertEquals(""log10 #12"", 0, field.newDfp(""2"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1406,"Assert.assertEquals(""log10 #13"", 0, field.newDfp(""1"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1407,"Assert.assertEquals(""log10 #14"", -1, field.newDfp(""0.12"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1408,"Assert.assertEquals(""log10 #15"", -2, field.newDfp(""0.012"").log10());"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1411,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1412,public void testPower10()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1414,Dfp d = field.newDfp();
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1416,"test(d.power10(0), field.newDfp(""1""), 0, ""Power10 #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1417,"test(d.power10(1), field.newDfp(""10""), 0, ""Power10 #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1418,"test(d.power10(2), field.newDfp(""100""), 0, ""Power10 #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1419,"test(d.power10(3), field.newDfp(""1000""), 0, ""Power10 #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1420,"test(d.power10(4), field.newDfp(""10000""), 0, ""Power10 #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1421,"test(d.power10(5), field.newDfp(""100000""), 0, ""Power10 #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1422,"test(d.power10(6), field.newDfp(""1000000""), 0, ""Power10 #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1423,"test(d.power10(7), field.newDfp(""10000000""), 0, ""Power10 #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1424,"test(d.power10(8), field.newDfp(""100000000""), 0, ""Power10 #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1425,"test(d.power10(9), field.newDfp(""1000000000""), 0, ""Power10 #10"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1427,"test(d.power10(-1), field.newDfp("".1""), 0, ""Power10 #11"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1428,"test(d.power10(-2), field.newDfp("".01""), 0, ""Power10 #12"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1429,"test(d.power10(-3), field.newDfp("".001""), 0, ""Power10 #13"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1430,"test(d.power10(-4), field.newDfp("".0001""), 0, ""Power10 #14"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1431,"test(d.power10(-5), field.newDfp("".00001""), 0, ""Power10 #15"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1432,"test(d.power10(-6), field.newDfp("".000001""), 0, ""Power10 #16"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1433,"test(d.power10(-7), field.newDfp("".0000001""), 0, ""Power10 #17"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1434,"test(d.power10(-8), field.newDfp("".00000001""), 0, ""Power10 #18"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1435,"test(d.power10(-9), field.newDfp("".000000001""), 0, ""Power10 #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1436,"test(d.power10(-10), field.newDfp("".0000000001""), 0, ""Power10 #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1439,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1440,public void testRemainder()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1442,"test(field.newDfp(""10"").remainder(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1443,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1444,"DfpField.FLAG_INEXACT, ""Remainder #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1446,"test(field.newDfp(""9"").remainder(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1447,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1448,"0, ""Remainder #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1450,"test(field.newDfp(""-9"").remainder(field.newDfp(""3"")),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1451,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1452,"0, ""Remainder #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1455,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1456,public void testSqrt()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1458,"test(field.newDfp(""0"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1459,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1460,"0, ""Sqrt #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1462,"test(field.newDfp(""-0"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1463,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1464,"0, ""Sqrt #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1466,"test(field.newDfp(""1"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1467,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1468,"0, ""Sqrt #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1470,"test(field.newDfp(""2"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1471,"field.newDfp(""1.4142135623730950""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1472,"DfpField.FLAG_INEXACT, ""Sqrt #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1474,"test(field.newDfp(""3"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1475,"field.newDfp(""1.7320508075688773""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1476,"DfpField.FLAG_INEXACT, ""Sqrt #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1478,"test(field.newDfp(""5"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1479,"field.newDfp(""2.2360679774997897""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1480,"DfpField.FLAG_INEXACT, ""Sqrt #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1482,"test(field.newDfp(""500"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1483,"field.newDfp(""22.3606797749978970""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1484,"DfpField.FLAG_INEXACT, ""Sqrt #6.2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1486,"test(field.newDfp(""50000"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1487,"field.newDfp(""223.6067977499789696""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1488,"DfpField.FLAG_INEXACT, ""Sqrt #6.3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1490,"test(field.newDfp(""-1"").sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1491,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1492,"DfpField.FLAG_INVALID, ""Sqrt #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1494,"test(pinf.sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1495,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1496,"0, ""Sqrt #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1498,"test(field.newDfp((byte) 1, (byte) Dfp.QNAN).sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1499,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1500,"0, ""Sqrt #9"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1502,"test(field.newDfp((byte) 1, (byte) Dfp.SNAN).sqrt(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1503,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1504,"DfpField.FLAG_INVALID, ""Sqrt #9"");"

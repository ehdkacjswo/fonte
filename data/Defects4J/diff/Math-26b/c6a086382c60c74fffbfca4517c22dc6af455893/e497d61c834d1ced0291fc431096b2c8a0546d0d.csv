is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,94,// org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,95,// org.apache.commons.math.stat.inference.ChiSquareTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,338,// org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,389,// org.apache.commons.math.linear.AbstractRealMatrix
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,390,// org.apache.commons.math.linear.AbstractFieldMatrix
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,391,// org.apache.commons.math.stat.inference.ChiSquareTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,645,// org.apache.commons.math.stat.inference.ChiSquareTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,646,"{ ""expected array length = {0}, must be at least 2"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,647,"""le tableau des valeurs attendues a une longueur de {0}, elle devrait \u00eatre au moins de 2"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,648,"{ ""observed array length = {0}, must be at least 2"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,649,"""le tableau des valeurs observ\u00e9es a une longueur de {0}, elle devrait \u00eatre au moins de 2"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,650,"{ ""observed counts are all 0 in first observed array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,651,"""aucune occurrence dans le premier tableau des observations"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,652,"{ ""observed counts are all 0 in second observed array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,653,"""aucune occurrence dans le second tableau des observations"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,654,"{ ""observed counts are both zero for entry {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,655,"""les occurrences observ\u00e9es sont toutes deux nulles pour l'entr\u00e9e {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,656,"{ ""invalid row dimension: {0} (must be at least 2)"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,657,"""nombre de lignes invalide : {0} (doit \u00eatre au moins de 2)"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,658,"{ ""invalid column dimension: {0} (must be at least 2)"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,659,"""nombre de colonnes invalide : {0} (doit \u00eatre au moins de 2)"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,660,"{ ""element {0} is not positive: {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,661,"""l''\u00e9l\u00e9ment {0} n''est pas positif : {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,662,"{ ""element {0} is negative: {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,663,"""l''\u00e9l\u00e9ment {0} est n\u00e9gatif : {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,664,"{ ""element ({0}, {1}) is negative: {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,665,"""l''\u00e9l\u00e9ment ({0}, {1}) est n\u00e9gatif : {2}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,667,// org.apache.commons.math.stat.inference.OneWayAnovaImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,668,"{ ""two or more categories required, got {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,669,"""deux cat\u00e9gories ou plus sont n\u00e9cessaires, il y en a {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,670,"{ ""two or more values required in each category, one has {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,671,"""deux valeurs ou plus sont n\u00e9cessaires pour chaque cat\u00e9gorie, une cat\u00e9gorie en a {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,673,// org.apache.commons.math.stat.inference.TTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,674,"{ ""insufficient data for t statistic, needs at least 2, got {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,675,"""deux valeurs ou plus sont n\u00e9cessaires pour la statistique t, il y en a {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,677,// org.apache.commons.math.stat.inference.ChiSquareTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,678,// org.apache.commons.math.stat.inference.TTestImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,679,// org.apache.commons.math.stat.inference.OneWayAnovaImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,639," ""out of bounds significance level {0}, must be in (0, 1)"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,640,"niveau de signification {0} hors domaine, doit \u00eatre dans l''intervalle ]0, 1["" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,681,"{ ""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,682,"""niveau de signification {0} hors domaine, doit \u00eatre entre {1} et {2}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,684,// org.apache.commons.math.stat.regression.OLSMultipleLinearRegression
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,685,"{ ""matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,686,"""matrice non triangulaire sup\u00e9rieure, l''\u00e9l\u00e9ment ({0}, {1}) = {2} est trop grand"" },"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,65,f ((expected.length < 2) || (expected.length != observed.length)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,66,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,67,"observed, expected array lengths incorrect"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,66,if (expected.length < 2) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,67,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,68,"""expected array length = {0}, must be at least 2"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,69,expected.length);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,69,f (!isPositive(expected) || !isNonNegative(observed)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,70,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,71,"observed counts must be non-negative and expected counts must be postive"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,71,if (expected.length != observed.length) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,72,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,73,"""dimension mismatch {0} != {1}"", expected.length, observed.length);"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,75,checkPositive(expected);
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,76,checkNonNegative(observed);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,135,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,136,"bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,139,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,140,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,141,"alpha, 0, 0.5);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,202,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,207,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,208,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,209,"alpha, 0.0, 0.5);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,218,f ((observed1.length < 2) || (observed1.length != observed2.length)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,219,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,220,"oberved1, observed2 array lengths incorrect"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,225,if (observed1.length < 2) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,226,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,227,"""observed array length = {0}, must be at least 2"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,228,observed1.length);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,222,/ Ensure non-negative counts
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,223,f (!isNonNegative(observed1) || !isNonNegative(observed2)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,224,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,225,"observed counts must be non-negative"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,230,if (observed1.length != observed2.length) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,231,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,232,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,233,"observed1.length, observed2.length);"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,236,// Ensure non-negative counts
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,237,checkNonNegative(observed1);
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,238,checkNonNegative(observed2);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,237,f (countSum1 * countSum2 == 0) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,238,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,239,"observed counts cannot all be 0"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,250,if (countSum1 == 0) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,251,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,252,"""observed counts are all 0 in first observed array"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,254,if (countSum2 == 0) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,255,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,256,"""observed counts are all 0 in second observed array"");"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,253,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,254,"observed counts must not both be zero"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,270,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,271,"""observed counts are both zero for entry {0}"", i);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,297,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,298,"bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,314,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,315,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,316,"alpha, 0.0, 0.5);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,314,"hrow new IllegalArgumentException(""Input table must have at least two rows"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,332,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,333,"""invalid row dimension: {0} (must be at least 2)"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,334,in.length);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,318,"hrow new IllegalArgumentException(""Input table must have at least two columns"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,338,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,339,"""invalid column dimension: {0} (must be at least 2)"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,340,in[0].length);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,321,f (!isRectangular(in)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,322,"hrow new IllegalArgumentException(""Input table must be rectangular"");"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,325,f (!isNonNegative(in)) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,326,"hrow new IllegalArgumentException(""All entries in input 2-way table must be non-negative"");"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,343,checkRectangular(in);
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,344,checkNonNegative(in);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,341,rivate boolean isRectangular(long[][] in) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,358,private void checkRectangular(long[][] in) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,344,eturn false;
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,361,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,362,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,363,"in[i].length, in[0].length);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,347,eturn true;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,351, Returns true iff all entries of the input array are > 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,352," Returns true if the array is non-null, but empty"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,369,* Check all entries of the input array are > 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,355, @return true if all entries of the array are positive
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,356, @throws NullPointerException if input array is null
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,372,* @exception IllegalArgumentException if one entry is not positive
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,358,rivate boolean isPositive(double[] in) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,359,or (int i = 0; i < in.length; i ++) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,374,private void checkPositive(double[] in) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,375,for (int i = 0; i < in.length; i++) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,361,eturn false;
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,377,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,378,"""element {0} is not positive: {1}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,379,"i, in[i]);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,364,eturn true;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,368, Returns true iff all entries of the input array are >= 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,369," Returns true if the array is non-null, but empty"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,385,* Check all entries of the input array are >= 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,372, @return true if all entries of the array are non-negative
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,373, @throws NullPointerException if input array is null
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,388,* @exception IllegalArgumentException if one entry is negative
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,375,rivate boolean isNonNegative(long[] in) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,376,or (int i = 0; i < in.length; i ++) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,390,private void checkNonNegative(long[] in) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,391,for (int i = 0; i < in.length; i++) {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,378,eturn false;
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,393,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,394,"""element {0} is negative: {1}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,395,"i, in[i]);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,381,eturn true;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,385, Returns true iff all entries of (all subarrays of) the input array are >= 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,386," Returns true if the array is non-null, but empty"
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,401,* Check all entries of the input array are >= 0.
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,389, @return true if all entries of the array are non-negative
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,390, @throws NullPointerException if input array is null
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,404,* @exception IllegalArgumentException if one entry is negative
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,392,rivate boolean isNonNegative(long[][] in) {
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,406,private void checkNonNegative(long[][] in) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,396,eturn false;
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,410,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,411,"""element ({0}, {1}) is negative: {2}"","
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,412,"i, j, in[i][j]);"
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,400,eturn true;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,103,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,104,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,105,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,106,"alpha, 0, 0.5);"
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,124,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,125,"ANOVA: two or more categories required"");"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,127,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,128,"""two or more categories required, got {0}"","
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,129,categoryData.size());
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,131,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,132,"ANOVA: one element of categoryData has fewer than 2 values."");"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,135,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,136,"""two or more values required in each category, one has {0}"","
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,137,array.length);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,78,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,79,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,80,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,79,checkSampleData(sample1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,80,checkSampleData(sample2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,163,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,164,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,162,checkSignificanceLevel(alpha);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,186,f ((observed == null) || (observed.length < 2)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,187,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,183,checkSampleData(observed);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,211,f ((sampleStats == null) || (sampleStats.getN() < 2)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,212,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,206,checkSampleData(sampleStats);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,253,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,254,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,255,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,246,checkSampleData(sample1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,247,checkSampleData(sample2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,292,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,293,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,294,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,283,checkSampleData(sample1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,284,checkSampleData(sample2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,333,tatisticalSummary sampleStats2)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,322,StatisticalSummary sampleStats2)
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,335,f ((sampleStats1 == null) ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,336,sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,337,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,338,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,324,checkSampleData(sampleStats1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,325,checkSampleData(sampleStats2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,383,f ((sampleStats1 == null) ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,384,sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,385,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,386,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,369,checkSampleData(sampleStats1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,370,checkSampleData(sampleStats2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,421,f ((sample == null) || (sample.length < 2)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,422,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,404,checkSampleData(sample);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,465,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,466,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,446,checkSignificanceLevel(alpha);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,501,f ((sampleStats == null) || (sampleStats.getN() < 2)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,502,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,480,checkSampleData(sampleStats);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,547,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,548,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,524,checkSignificanceLevel(alpha);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,591,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,592,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,593,"hrow new IllegalArgumentException(""insufficient data"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,566,checkSampleData(sample1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,567,checkSampleData(sample2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,635,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,636,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,637,"hrow new IllegalArgumentException(""insufficient data"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,608,checkSampleData(sample1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,609,checkSampleData(sample2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,700,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,701,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,671,checkSignificanceLevel(alpha);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,760,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,761,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,729,checkSignificanceLevel(alpha);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,802,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,803,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,804,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,769,checkSampleData(sampleStats1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,770,checkSampleData(sampleStats2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,845,tatisticalSummary sampleStats2)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,810,StatisticalSummary sampleStats2)
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,847,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,848,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,849,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,812,checkSampleData(sampleStats1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,813,checkSampleData(sampleStats2);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,913,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,914,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,876,checkSignificanceLevel(alpha);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1021,/** Check significance level.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1022,* @param alpha significance level
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1023,* @exception IllegalArgumentException if significance level is out of bounds
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1025,private void checkSignificanceLevel(final double alpha)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1026,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1027,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1028,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1029,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1030,"alpha, 0.0, 0.5);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1034,/** Check sample data.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1035,* @param data sample data
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1036,* @exception IllegalArgumentException if there is not enough sample data
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1038,private void checkSampleData(final double[] data)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1039,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1040,if ((data == null) || (data.length < 2)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1041,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1042,"""insufficient data for t statistic, needs at least 2, got {0}"","
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1043,(data == null) ? 0 : data.length);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1047,/** Check sample data.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1048,* @param stat statistical summary
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1049,* @exception IllegalArgumentException if there is not enough sample data
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1051,private void checkSampleData(final StatisticalSummary stat)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1052,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1053,if ((stat == null) || (stat.getN() < 2)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1054,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1055,"""insufficient data for t statistic, needs at least 2, got {0}"","
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1056,(stat == null) ? 0 : stat.getN());
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,19,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,88,f (x == null) {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,89,"hrow new IllegalArgumentException(""The regressors matrix x cannot be null."");"
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,91,f (y == null) {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,92,"hrow new IllegalArgumentException(""The regressand vector y cannot be null."");"
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,94,f (x.length != y.length) {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,95,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,96,"The regressors matrix x columns must have the same length of the regressand vector y"");"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,89,if ((x == null) || (y == null) || (x.length != y.length)) {
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,90,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,91,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,92,"(x == null) ? 0 : x.length,"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,93,(y == null) ? 0 : y.length);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,109,f (covariance == null) {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,110,"hrow new IllegalArgumentException(""Covariance matrix cannot be null."");"
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,113,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,114,"The regressors matrix x columns must have the same length of the covariance matrix columns"");"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,107,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,108,"""dimension mismatch {0} != {1}"", x.length, covariance.length);"
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,117,"hrow new IllegalArgumentException(""The covariance matrix must be square"");"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,111,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,112,"""a {0}x{1} matrix was provided instead of a square matrix"","
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,113,"covariance.length, covariance[0].length);"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,19,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,202,"f (!isUpperTriangular(coefficients, 1E-12)) {"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,203,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,204,"Coefficients is not upper-triangular"");"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,203,"checkUpperTriangular(coefficients, 1E-12);"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,220, <p>Returns true iff m is an upper-triangular matrix.</p>
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,218,* <p>Check if a matrix is upper-triangular.</p>
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,228, @return true if m is upper-triangular; false otherwise
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,229, @throws NullPointerException if m is null
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,226,* @throws IllegalArgumentException if m is not upper-triangular
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,231,"rivate static boolean isUpperTriangular(RealMatrix m, double epsilon) {"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,228,"private static void checkUpperTriangular(RealMatrix m, double epsilon) {"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,238,eturn false;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,235,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,236,"""matrix is not upper-triangular, entry ({0}, {1}) = {2} is too large"","
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,237,"r, c, m.getEntry(r, c));"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,242,eturn true;
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,551,"out of bounds significance level {0}, must be in (0, 1)"","
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,552,lpha);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,551,"""out of bounds significance level {0}, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,552,"alpha, 0.0, 1.0);"

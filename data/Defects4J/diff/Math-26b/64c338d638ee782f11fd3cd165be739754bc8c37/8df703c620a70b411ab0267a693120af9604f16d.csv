is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,2, Copyright 2011 The Apache Software Foundation.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,5, you may not use this file except in compliance with the License.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,6, You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,13, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,14, limitations under the License.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,16,ackage org.apache.commons.math3.linear;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,18,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,19,mport org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,20,mport org.apache.commons.math3.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,21,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,22,mport org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,23,mport org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,27, @author gregsterijevski
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,29,ublic class PivotingQRDecomposition {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,31,rivate double[][] qr;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,32,** The diagonal elements of R. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,33,rivate double[] rDiag;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,34,** Cached value of Q. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,35,rivate RealMatrix cachedQ;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,36,** Cached value of QT. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,37,rivate RealMatrix cachedQT;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,38,** Cached value of R. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,39,rivate RealMatrix cachedR;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,40,** Cached value of H. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,41,rivate RealMatrix cachedH;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,42,** permutation info */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,43,rivate int[] permutation;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,44,** the rank **/
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,45,rivate int rank;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,46,** vector of column multipliers */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,47,rivate double[] beta;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,49,ublic boolean isSingular() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,50,eturn rank != qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,53,ublic int getRank() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,54,eturn rank;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,57,ublic int[] getOrder() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,58,eturn MathArrays.copyOf(permutation);
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,61,ublic PivotingQRDecomposition(RealMatrix matrix) throws ConvergenceException {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,62,"his(matrix, 1.0e-16, true);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,65,"ublic PivotingQRDecomposition(RealMatrix matrix, boolean allowPivot) throws ConvergenceException {"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,66,"his(matrix, 1.0e-16, allowPivot);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,69,"ublic PivotingQRDecomposition(RealMatrix matrix, double qrRankingThreshold,"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,70,oolean allowPivot) throws ConvergenceException {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,71,inal int rows = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,72,inal int cols = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,73,r = matrix.getData();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,74,Diag = new double[cols];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,75,/final double[] norms = new double[cols];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,76,his.beta = new double[cols];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,77,his.permutation = new int[cols];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,78,achedQ = null;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,79,achedQT = null;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,80,achedR = null;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,81,achedH = null;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,83,*- initialize the permutation vector and calculate the norms */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,84,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,85,ermutation[k] = k;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,87,/ transform the matrix column after column
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,88,or (int k = 0; k < cols; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,89,/ select the column with the greatest norm on active components
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,90,nt nextColumn = -1;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,91,ouble ak2 = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,92,f (allowPivot) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,93,or (int i = k; i < cols; ++i) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,94,ouble norm2 = 0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,95,or (int j = k; j < rows; ++j) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,96,inal double aki = qr[j][permutation[i]];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,97,orm2 += aki * aki;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,99,f (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,100,"hrow new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,101,"ows, cols);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,103,f (norm2 > ak2) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,104,extColumn = i;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,105,k2 = norm2;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,108, else {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,109,extColumn = k;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,110,k2 = 0.0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,111,or (int j = k; j < rows; ++j) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,112,inal double aki = qr[j][k];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,113,k2 += aki * aki;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,116,f (ak2 <= qrRankingThreshold) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,117,ank = k;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,118,or (int i = rank; i < rows; i++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,119,or (int j = i + 1; j < cols; j++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,120,r[i][permutation[j]] = 0.0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,123,eturn;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,125,inal int pk = permutation[nextColumn];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,126,ermutation[nextColumn] = permutation[k];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,127,ermutation[k] = pk;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,129,/ choose alpha such that Hk.u = alpha ek
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,130,inal double akk = qr[k][pk];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,131,inal double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,132,inal double betak = 1.0 / (ak2 - akk * alpha);
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,133,eta[pk] = betak;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,135,/ transform the current column
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,136,Diag[pk] = alpha;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,137,r[k][pk] -= alpha;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,139,/ transform the remaining columns
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,140,or (int dk = cols - 1 - k; dk > 0; --dk) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,141,ouble gamma = 0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,142,or (int j = k; j < rows; ++j) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,143,amma += qr[j][pk] * qr[j][permutation[k + dk]];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,145,amma *= betak;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,146,or (int j = k; j < rows; ++j) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,147,r[j][permutation[k + dk]] -= gamma * qr[j][pk];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,151,ank = cols;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,152,eturn;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,156, Returns the matrix Q of the decomposition.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,157, <p>Q is an orthogonal matrix</p>
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,158, @return the Q matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,160,ublic RealMatrix getQ() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,161,f (cachedQ == null) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,162,achedQ = getQT().transpose();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,164,eturn cachedQ;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,168, Returns the transpose of the matrix Q of the decomposition.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,169, <p>Q is an orthogonal matrix</p>
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,170, @return the Q matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,172,ublic RealMatrix getQT() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,173,f (cachedQT == null) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,175,/ QT is supposed to be m x m
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,176,inal int m = qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,177,"achedQT = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,180," Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,181," applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,182, succession to the result
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,184,or (int minor = m - 1; minor >= rank; minor--) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,185,"achedQT.setEntry(minor, minor, 1.0);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,188,or (int minor = rank - 1; minor >= 0; minor--) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,189,/final double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,190,inal int p_minor = permutation[minor];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,191,"achedQT.setEntry(minor, minor, 1.0);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,192,/if (qrtMinor[minor] != 0.0) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,193,or (int col = minor; col < m; col++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,194,ouble alpha = 0.0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,195,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,196,"lpha -= cachedQT.getEntry(col, row) * qr[row][p_minor];"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,198,lpha /= rDiag[p_minor] * qr[minor][p_minor];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,199,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,200,"achedQT.addToEntry(col, row, -alpha * qr[row][p_minor]);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,206,/ return the cached matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,207,eturn cachedQT;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,211, Returns the matrix R of the decomposition.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,212, <p>R is an upper-triangular matrix</p>
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,213, @return the R matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,215,ublic RealMatrix getR() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,216,f (cachedR == null) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,217,/ R is supposed to be m x n
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,218,inal int n = qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,219,inal int m = qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,220,"achedR = MatrixUtils.createRealMatrix(m, n);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,221,/ copy the diagonal from rDiag and the upper triangle of qr
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,222,or (int row = rank - 1; row >= 0; row--) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,223,"achedR.setEntry(row, row, rDiag[permutation[row]]);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,224,or (int col = row + 1; col < n; col++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,225,"achedR.setEntry(row, col, qr[row][permutation[col]]);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,229,/ return the cached matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,230,eturn cachedR;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,233,ublic RealMatrix getH() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,234,f (cachedH == null) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,235,inal int n = qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,236,inal int m = qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,237,"achedH = MatrixUtils.createRealMatrix(m, n);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,238,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,239,"or (int j = 0; j < FastMath.min(i + 1, n); ++j) {"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,240,inal int p_j = permutation[j];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,241,"achedH.setEntry(i, j, qr[i][p_j] / -rDiag[p_j]);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,245,/ return the cached matrix
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,246,eturn cachedH;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,249,ublic RealMatrix getPermutationMatrix() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,250,"ealMatrix rm = MatrixUtils.createRealMatrix(qr[0].length, qr[0].length);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,251,or (int i = 0; i < this.qr[0].length; i++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,252,"m.setEntry(permutation[i], i, 1.0);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,254,eturn rm;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,257,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,258,"eturn new Solver(qr, rDiag, permutation, rank);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,261,** Specialized solver. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,262,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,265, A packed TRANSPOSED representation of the QR decomposition.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,266, <p>The elements BELOW the diagonal are the elements of the UPPER triangular
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,267," matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,268, from which an explicit form of Q can be recomputed if desired.</p>
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,270,rivate final double[][] qr;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,271,** The diagonal elements of R. */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,272,rivate final double[] rDiag;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,273,** The rank of the matrix      */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,274,rivate final int rank;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,275,** The permutation matrix      */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,276,rivate final int[] perm;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,279, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,280, @param qrt packed TRANSPOSED representation of the QR decomposition
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,281, @param rDiag diagonal elements of R
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,283,"rivate Solver(final double[][] qr, final double[] rDiag, int[] perm, int rank) {"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,284,his.qr = qr;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,285,his.rDiag = rDiag;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,286,his.perm = perm;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,287,his.rank = rank;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,290,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,291,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,292,f (qr.length >= qr[0].length) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,293,eturn rank == qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,294, else { //qr.length < qr[0].length
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,295,eturn rank == qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,299,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,300,ublic RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,301,inal int n = qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,302,inal int m = qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,303,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,304,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,306,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,307,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,310,inal double[] x = new double[n];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,311,inal double[] y = b.toArray();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,313,/ apply Householder transforms to solve Q.y = b
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,314,or (int minor = 0; minor < rank; minor++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,315,inal int m_idx = perm[minor];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,316,ouble dotProduct = 0;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,317,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,318,otProduct += y[row] * qr[row][m_idx];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,320,otProduct /= rDiag[m_idx] * qr[minor][m_idx];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,321,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,322,[row] += dotProduct * qr[row][m_idx];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,325,/ solve triangular system R.x = y
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,326,or (int row = rank - 1; row >= 0; --row) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,327,inal int m_row = perm[row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,328,[row] /= rDiag[m_row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,329,inal double yRow = y[row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,330,/final double[] qrtRow = qrt[row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,331,[perm[row]] = yRow;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,332,or (int i = 0; i < row; i++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,333,[i] -= yRow * qr[i][m_row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,336,"eturn new ArrayRealVector(x, false);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,339,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,340,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,341,inal int cols = qr[0].length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,342,inal int rows = qr.length;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,343,f (b.getRowDimension() != rows) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,344,"hrow new DimensionMismatchException(b.getRowDimension(), rows);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,346,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,347,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,350,inal int columns = b.getColumnDimension();
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,351,inal int blockSize = BlockRealMatrix.BLOCK_SIZE;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,352,inal int cBlocks = (columns + blockSize - 1) / blockSize;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,353,"inal double[][] xBlocks = BlockRealMatrix.createBlocksLayout(cols, columns);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,354,inal double[][] y = new double[b.getRowDimension()][blockSize];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,355,inal double[] alpha = new double[blockSize];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,356,"/final BlockRealMatrix result = new BlockRealMatrix(cols, columns, xBlocks, false);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,357,or (int kBlock = 0; kBlock < cBlocks; ++kBlock) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,358,inal int kStart = kBlock * blockSize;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,359,"inal int kEnd = FastMath.min(kStart + blockSize, columns);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,360,inal int kWidth = kEnd - kStart;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,361,/ get the right hand side vector
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,362,".copySubMatrix(0, rows - 1, kStart, kEnd - 1, y);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,364,/ apply Householder transforms to solve Q.y = b
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,365,or (int minor = 0; minor < rank; minor++) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,366,inal int m_idx = perm[minor];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,367,inal double factor = 1.0 / (rDiag[m_idx] * qr[minor][m_idx]);
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,369,"rrays.fill(alpha, 0, kWidth, 0.0);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,370,or (int row = minor; row < rows; ++row) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,371,inal double d = qr[row][m_idx];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,372,inal double[] yRow = y[row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,373,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,374,lpha[k] += d * yRow[k];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,377,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,378,lpha[k] *= factor;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,381,or (int row = minor; row < rows; ++row) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,382,inal double d = qr[row][m_idx];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,383,inal double[] yRow = y[row];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,384,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,385,Row[k] += alpha[k] * d;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,390,/ solve triangular system R.x = y
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,391,or (int j = rank - 1; j >= 0; --j) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,392,inal int jBlock = perm[j] / blockSize; //which block
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,393,inal int jStart = jBlock * blockSize;  // idx of top corner of block in my coord
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,394,inal double factor = 1.0 / rDiag[perm[j]];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,395,inal double[] yJ = y[j];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,396,inal double[] xBlock = xBlocks[jBlock * cBlocks + kBlock];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,397,nt index = (perm[j] - jStart) * kWidth; //to local (block) coordinates
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,398,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,399,J[k] *= factor;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,400,Block[index++] = yJ[k];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,402,or (int i = 0; i < j; ++i) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,403,inal double rIJ = qr[i][perm[j]];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,404,inal double[] yI = y[i];
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,405,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,406,I[k] -= yJ[k] * rIJ;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,411,/return result;
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,412,"eturn new BlockRealMatrix(cols, columns, xBlocks, false);"
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,415,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,416,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/PivotingQRDecomposition.java,417,eturn solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,18,ackage org.apache.commons.math3.linear;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,20,mport java.util.Random;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,23,mport org.apache.commons.math3.exception.ConvergenceException;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,24,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,25,mport org.junit.Test;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,28,ublic class PivotingQRDecompositionTest {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,29,ouble[][] testData3x3NonSingular = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,30," 12, -51, 4 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,31," 6, 167, -68 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,32," -4, 24, -41 }, };"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,34,ouble[][] testData3x3Singular = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,35," 1, 4, 7, },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,36," 2, 5, 8, },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,37," 3, 6, 9, }, };"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,39,ouble[][] testData3x4 = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,40," 12, -51, 4, 1 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,41," 6, 167, -68, 2 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,42," -4, 24, -41, 3 }, };"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,44,ouble[][] testData4x3 = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,45," 12, -51, 4, },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,46," 6, 167, -68, },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,47," -4, 24, -41, },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,48," -5, 34, 7, }, };"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,50,rivate static final double entryTolerance = 10e-16;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,52,rivate static final double normTolerance = 10e-14;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,54,** test dimensions */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,55,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,56,ublic void testDimensions() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,57,heckDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,59,heckDimension(MatrixUtils.createRealMatrix(testData4x3));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,61,heckDimension(MatrixUtils.createRealMatrix(testData3x4));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,63,andom r = new Random(643895747384642l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,64,nt    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,65,nt    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,66,"heckDimension(createTestMatrix(r, p, q));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,67,"heckDimension(createTestMatrix(r, q, p));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,71,rivate void checkDimension(RealMatrix m) throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,72,nt rows = m.getRowDimension();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,73,nt columns = m.getColumnDimension();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,74,ivotingQRDecomposition qr = new PivotingQRDecomposition(m);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,75,"ssert.assertEquals(rows,    qr.getQ().getRowDimension());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,76,"ssert.assertEquals(rows,    qr.getQ().getColumnDimension());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,77,"ssert.assertEquals(rows,    qr.getR().getRowDimension());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,78,"ssert.assertEquals(columns, qr.getR().getColumnDimension());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,81,** test A = QR */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,82,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,83,ublic void testAEqualQR() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,84,heckAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,86,heckAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,88,heckAEqualQR(MatrixUtils.createRealMatrix(testData3x4));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,90,heckAEqualQR(MatrixUtils.createRealMatrix(testData4x3));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,92,andom r = new Random(643895747384642l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,93,nt    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,94,nt    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,95,"heckAEqualQR(createTestMatrix(r, p, q));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,97,"heckAEqualQR(createTestMatrix(r, q, p));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,101,rivate void checkAEqualQR(RealMatrix m) throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,102,ivotingQRDecomposition qr = new PivotingQRDecomposition(m);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,103,ealMatrix prod =  qr.getQ().multiply(qr.getR()).multiply(qr.getPermutationMatrix().transpose());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,104,ouble norm = prod.subtract(m).getNorm();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,105,"ssert.assertEquals(0, norm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,108,** test the orthogonality of Q */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,109,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,110,ublic void testQOrthogonal() throws ConvergenceException{
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,111,heckQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,113,heckQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,115,heckQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,117,heckQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,119,andom r = new Random(643895747384642l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,120,nt    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,121,nt    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,122,"heckQOrthogonal(createTestMatrix(r, p, q));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,124,"heckQOrthogonal(createTestMatrix(r, q, p));"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,128,rivate void checkQOrthogonal(RealMatrix m) throws ConvergenceException{
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,129,ivotingQRDecomposition qr = new PivotingQRDecomposition(m);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,130,ealMatrix eye = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,131,ouble norm = qr.getQT().multiply(qr.getQ()).subtract(eye).getNorm();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,132,"ssert.assertEquals(0, norm, normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,135,** test that R is upper triangular */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,136,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,137,ublic void testRUpperTriangular() throws ConvergenceException{
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,138,ealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,139,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,141,atrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,142,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,144,atrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,145,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,147,atrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,148,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,150,andom r = new Random(643895747384642l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,151,nt    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,152,nt    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,153,"atrix = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,154,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,156,"atrix = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,157,heckUpperTriangular(new PivotingQRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,161,rivate void checkUpperTriangular(RealMatrix m) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,162,.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,163,Override
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,164,"ublic void visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,165,f (column < row) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,166,"ssert.assertEquals(0.0, value, entryTolerance);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,172,** test that H is trapezoidal */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,173,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,174,ublic void testHTrapezoidal() throws ConvergenceException{
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,175,ealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,176,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,178,atrix = MatrixUtils.createRealMatrix(testData3x3Singular);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,179,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,181,atrix = MatrixUtils.createRealMatrix(testData3x4);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,182,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,184,atrix = MatrixUtils.createRealMatrix(testData4x3);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,185,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,187,andom r = new Random(643895747384642l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,188,nt    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,189,nt    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,190,"atrix = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,191,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,193,"atrix = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,194,heckTrapezoidal(new PivotingQRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,198,rivate void checkTrapezoidal(RealMatrix m) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,199,.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,200,Override
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,201,"ublic void visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,202,f (column > row) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,203,"ssert.assertEquals(0.0, value, entryTolerance);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,208,** test matrices values */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,209,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,210,ublic void testMatricesValues() throws ConvergenceException{
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,211,ivotingQRDecomposition qr =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,212,"ew PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular),false);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,213,ealMatrix qRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,214," -12.0 / 14.0,   69.0 / 175.0,  -58.0 / 175.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,215,"  -6.0 / 14.0, -158.0 / 175.0,    6.0 / 175.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,216,"   4.0 / 14.0,  -30.0 / 175.0, -165.0 / 175.0 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,218,ealMatrix rRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,219," -14.0,  -21.0, 14.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,220,"   0.0, -175.0, 70.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,221,"   0.0,    0.0, 35.0 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,223,ealMatrix hRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,224," 26.0 / 14.0, 0.0, 0.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,225,"  6.0 / 14.0, 648.0 / 325.0, 0.0 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,226," -4.0 / 14.0,  36.0 / 325.0, 2.0 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,229,/ check values against known references
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,230,ealMatrix q = qr.getQ();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,231,"ssert.assertEquals(0, q.subtract(qRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,232,ealMatrix qT = qr.getQT();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,233,"ssert.assertEquals(0, qT.subtract(qRef.transpose()).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,234,ealMatrix r = qr.getR();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,235,"ssert.assertEquals(0, r.subtract(rRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,236,ealMatrix h = qr.getH();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,237,"ssert.assertEquals(0, h.subtract(hRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,239,/ check the same cached instance is returned the second time
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,240,ssert.assertTrue(q == qr.getQ());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,241,ssert.assertTrue(r == qr.getR());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,242,ssert.assertTrue(h == qr.getH());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,246,"rivate RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,247,"ealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,248,.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,249,Override
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,250,"ublic double visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,251,eturn 2.0 * r.nextDouble() - 1.0;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRDecompositionTest.java,254,eturn m;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,18,ackage org.apache.commons.math3.linear;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,20,mport java.util.Random;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,22,mport org.apache.commons.math3.exception.ConvergenceException;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,23,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,25,mport org.junit.Test;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,26,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,28,ublic class PivotingQRSolverTest {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,29,ouble[][] testData3x3NonSingular = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,30," 12, -51,   4 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,31,"  6, 167, -68 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,32," -4,  24, -41 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,35,ouble[][] testData3x3Singular = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,36," 1, 2,  2 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,37," 2, 4,  6 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,38," 4, 8, 12 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,41,ouble[][] testData3x4 = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,42," 12, -51,   4, 1 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,43,"  6, 167, -68, 2 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,44," -4,  24, -41, 3 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,47,ouble[][] testData4x3 = {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,48," 12, -51,   4 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,49,"  6, 167, -68 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,50," -4,  24, -41 },"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,51," -5,  34,   7 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,54,** test rank */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,55,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,56,ublic void testRank() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,57,ecompositionSolver solver =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,58,ew PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,59,ssert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,61,olver = new PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,62,ssert.assertFalse(solver.isNonSingular());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,64,olver = new PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x4)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,65,ssert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,67,olver = new PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData4x3)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,68,ssert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,72,** test solve dimension errors */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,73,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,74,ublic void testSolveDimensionErrors() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,75,ecompositionSolver solver =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,76,ew PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,77,ealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,78,ry {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,79,olver.solve(b);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,80,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,81, catch (MathIllegalArgumentException iae) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,82,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,84,ry {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,85,olver.solve(b.getColumnVector(0));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,86,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,87, catch (MathIllegalArgumentException iae) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,88,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,92,** test solve rank errors */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,93,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,94,ublic void testSolveRankErrors() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,95,ecompositionSolver solver =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,96,ew PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,97,ealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,98,ry {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,99,olver.solve(b);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,100,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,101, catch (SingularMatrixException iae) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,102,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,104,ry {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,105,olver.solve(b.getColumnVector(0));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,106,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,107, catch (SingularMatrixException iae) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,108,/ expected behavior
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,112,** test solve */
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,113,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,114,ublic void testSolve() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,115,ivotingQRDecomposition decomposition =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,116,ew PivotingQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,117,ecompositionSolver solver = decomposition.getSolver();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,118,ealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,119," -102, 12250 }, { 544, 24500 }, { 167, -36750 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,122,ealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,123," 1, 2515 }, { 2, 422 }, { -3, 898 }"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,126,/ using RealMatrix
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,127,"ssert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 2.0e-14 * xRef.getNorm());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,129,/ using ArrayRealVector
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,130,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,131,inal RealVector x = solver.solve(b.getColumnVector(i));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,132,inal double error = x.subtract(xRef.getColumnVector(i)).getNorm();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,133,"ssert.assertEquals(0, error, 3.0e-14 * xRef.getColumnVector(i).getNorm());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,136,/ using RealVector with an alternate implementation
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,137,or (int i = 0; i < b.getColumnDimension(); ++i) {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,138,rrayRealVectorTest.RealVectorTestImpl v =
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,139,ew ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,140,inal RealVector x = solver.solve(v);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,141,inal double error = x.subtract(xRef.getColumnVector(i)).getNorm();
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,142,"ssert.assertEquals(0, error, 3.0e-14 * xRef.getColumnVector(i).getNorm());"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,147,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,148,ublic void testOverdetermined() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,149,inal Random r    = new Random(5559252868205245l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,150,nt          p    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,151,nt          q    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,152,"ealMatrix   a    = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,153,"ealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,155,/ build a perturbed system: A.X + noise = B
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,156,ealMatrix b = a.multiply(xRef);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,157,inal double noise = 0.001;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,158,.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,159,Override
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,160,"ublic double visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,161,eturn value * (1.0 + noise * (2 * r.nextDouble() - 1));
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,165,"/ despite perturbation, the least square solution should be pretty good"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,166,ealMatrix x = new PivotingQRDecomposition(a).getSolver().solve(b);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,167,"ssert.assertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,171,Test
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,172,ublic void testUnderdetermined() throws ConvergenceException {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,173,inal Random r    = new Random(42185006424567123l);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,174,nt          p    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,175,nt          q    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,176,"ealMatrix   a    = createTestMatrix(r, p, q);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,177,"ealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,178,ealMatrix   b    = a.multiply(xRef);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,179,ivotingQRDecomposition pqr = new PivotingQRDecomposition(a);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,180,ealMatrix   x = pqr.getSolver().solve(b);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,181,ssert.assertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01);
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,182,nt count=0;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,183,or( int i = 0 ; i < q; i++){
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,184,f(  x.getRowVector(i).getNorm() == 0.0 ){
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,185,+count;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,188,"ssert.assertEquals(""Zeroed rows"", q-p, count);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,191,"rivate RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,192,"ealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,193,.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,194,Override
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,195,"ublic double visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,196,eturn 2.0 * r.nextDouble() - 1.0;
False,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/PivotingQRSolverTest.java,199,eturn m;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,2, Copyright 2011 The Apache Software Foundation.
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,5, you may not use this file except in compliance with the License.
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,6, You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,13, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,14, limitations under the License.
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,16,ackage org.apache.commons.math3.optimization;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,18,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,19,mport org.apache.commons.math3.TestUtils;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,20,mport org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,21,mport org.apache.commons.math3.analysis.MultivariateFunction;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,22,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,23,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,24,mport org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,25,mport org.apache.commons.math3.optimization.direct.BOBYQAOptimizer;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,26,mport org.apache.commons.math3.optimization.direct.PowellOptimizer;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,27,mport org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,28,mport org.apache.commons.math3.optimization.general.ConjugateGradientFormula;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,29,mport org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,30,mport org.apache.commons.math3.util.FastMath;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,31,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,32,mport org.junit.Test;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,35, an ever growing set of tests from NIST
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,36, http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,37, @author gregs
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,39,ublic class BatteryNISTTest {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,41,ublic static double[] lanczosNIST = {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,42,".5134, 0.00000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,43,".0443, 5.00000e-2,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,44,".6684, 1.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,45,".3664, 1.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,46,".1232, 2.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,47,".9269, 2.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,48,".7679, 3.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,49,".6389, 3.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,50,".5338, 4.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,51,".4479, 4.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,52,".3776, 5.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,53,".3197, 5.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,54,".2720, 6.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,55,".2325, 6.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,56,".1997, 7.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,57,".1723, 7.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,58,".1493, 8.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,59,".1301, 8.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,60,".1138, 9.00000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,61,".1000, 9.50000e-1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,62,".0883, 1.00000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,63,".0783, 1.05000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,64,".0698, 1.10000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,65,".0624, 1.15000};"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,66,* the lanzcos objective function -------------------------------*/
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,67,"rivate final nistMVRF lanczosObjectFunc = new nistMVRF(lanczosNIST, 1, 24, 6) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,69,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,70,"rotected double partialDeriv(double[] point, int idx) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,71,"ouble cy, cx, r, ret = 0.0, d;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,72,"nt ptr = 0, ptr1;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,73,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,74,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,75,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,76,tr1 = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,77, = 0.0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,78,or (int j = 0; j < 3; j++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,79, += point[ptr1++] * FastMath.exp(-cx * point[ptr1++]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,81, = cy - d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,82,f (idx == 0) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,83,et -= (2.0 * r) * FastMath.exp(-cx * point[1]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,84, else if (idx == 1) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,85,et += (2.0 * r) * FastMath.exp(-cx * point[1]) * cx * point[0];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,86, else if (idx == 2) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,87,et -= (2.0 * r) * FastMath.exp(-cx * point[3]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,88, else if (idx == 3) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,89,et += (2.0 * r) * FastMath.exp(-cx * point[3]) * cx * point[2];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,90, else if (idx == 4) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,91,et -= (2.0 * r) * FastMath.exp(-cx * point[5]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,92, else {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,93,et += (2.0 * r) * FastMath.exp(-cx * point[5]) * cx * point[4];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,96,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,99,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,100,"ouble ret = 0.0, err, d, cx, cy;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,101,"nt ptr = 0, ptr1 = 0;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,102,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,103,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,104,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,105, = 0.0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,106,tr1 = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,107,or (int j = 0; j < 3; j++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,108, += point[ptr1++] * FastMath.exp(-cx * point[ptr1++]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,110,rr = cy - d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,111,et += err * err;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,113,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,116,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,117,rotected double[] getGradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,118,"rrays.fill(gradient, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,119,"ouble cy, cx, r, d = 0;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,120,"nt ptr = 0, ptr1;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,121,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,122,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,123,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,124,tr1 = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,125, = 0.0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,126,or (int j = 0; j < 3; j++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,127, += point[ptr1++] * FastMath.exp(-cx * point[ptr1++]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,129, = cy - d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,130,radient[0] -= (2.0 * r) * FastMath.exp(-cx * point[1]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,131,radient[1] += (2.0 * r) * FastMath.exp(-cx * point[1]) * cx * point[0];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,133,radient[2] -= (2.0 * r) * FastMath.exp(-cx * point[3]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,134,radient[3] += (2.0 * r) * FastMath.exp(-cx * point[3]) * cx * point[2];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,136,radient[4] -= (2.0 * r) * FastMath.exp(-cx * point[5]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,137,radient[5] += (2.0 * r) * FastMath.exp(-cx * point[5]) * cx * point[4];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,139,eturn this.gradient;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,143,* chwirut1 data ------------------------*/
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,144,ublic static double[] chwirut1NIST = {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,145,"2.9000, 0.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,146,"8.7000, 0.6250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,147,"4.2000, 0.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,148,"4.9000, 0.8750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,149,"7.1000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,150,"3.3000, 1.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,151,"1.1000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,152,"3.6000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,153,"1.0500, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,154,"3.7750, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,155,"7.7375, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,156,"3.8000, 3.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,157,"1.5875, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,158,".4125, 4.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,159,".7250, 4.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,160,".3500, 5.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,161,".0250, 5.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,162,"0.6000, 0.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,163,"6.9000, 0.6250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,164,"1.6000, 0.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,165,"3.6000, 0.8750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,166,"4.0000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,167,"9.2000, 1.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,168,"9.3000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,169,"1.4000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,170,"9.1750, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,171,"2.1250, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,172,"7.5125, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,173,"4.2500, 3.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,174,".4500, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,175,".1500, 4.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,176,".9125, 4.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,177,".4750, 5.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,178,".1125, 5.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,179,"0.0000, 0.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,180,"9.0000, 0.6250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,181,"3.8000, 0.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,182,"7.2000, 0.8750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,183,"3.2000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,184,"2.5000, 1.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,185,"6.8000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,186,"0.4000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,187,"6.8500, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,188,"1.0000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,189,"6.4625, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,190,"2.5250, 3.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,191,"0.5375, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,192,".5875, 4.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,193,".1250, 4.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,194,".1125, 5.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,195,".9625, 5.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,196,"4.1000, 0.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,197,"7.3000, 0.6250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,198,"0.8000, 0.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,199,"5.5000, 0.8750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,200,"0.3000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,201,"1.0000, 1.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,202,"9.4000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,203,"0.4000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,204,"9.3625, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,205,"1.1500, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,206,"6.7625, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,207,"3.2000, 3.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,208,"0.8750, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,209,".1750, 4.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,210,".3500, 4.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,211,".9625, 5.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,212,".6250, 5.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,213,"1.5000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,214,"2.4000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,215,"2.5000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,216,"2.4100, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,217,"3.1200, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,218,"5.5600, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,219,".6300, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,220,"8.0000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,221,"9.9000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,222,"3.2000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,223,"3.8400, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,224,"2.7500, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,225,"4.6200, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,226,".9400, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,227,"6.8000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,228,"1.0000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,229,"2.9000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,230,"3.8700, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,231,"1.8100, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,232,"3.3100, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,233,".4400, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,234,"8.0000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,235,"3.5000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,236,"3.8000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,237,"2.5600, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,238,".6300, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,239,"2.7500, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,240,"3.1200, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,241,".4400, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,242,"6.8000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,243,"0.0000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,244,"7.8000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,245,"2.0000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,246,"2.2000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,247,"2.5700, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,248,"8.8200, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,249,"3.9500, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,250,"1.2500, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,251,".0000, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,252,".6700, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,253,"5.8000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,254,"2.0000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,255,"8.8000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,256,"5.2000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,257,"0.0000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,258,"0.3200, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,259,"9.3100, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,260,"2.7500, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,261,"0.4200, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,262,".3100, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,263,".4200, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,264,"0.5000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,265,"9.5000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,266,"8.5000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,267,"5.8000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,268,"1.0000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,269,"1.6700, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,270,"1.0000, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,271,"5.6400, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,272,".1700, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,273,".5500, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,274,"0.1200, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,275,"8.0000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,276,"6.0000, .6250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,277,"2.0000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,278,"8.0000, .8750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,279,"7.7000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,280,"7.8000, 1.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,281,"0.2000, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,282,"1.0700, 2.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,283,"3.8700, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,284,".6700, 3.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,285,".7600, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,286,".4400, 4.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,287,".8700, 4.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,288,".0100, 5.2500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,289,".7500, 5.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,290,"4.1900, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,291,"5.7600, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,292,"8.0700, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,293,"1.8100, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,294,"2.0700, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,295,"6.1200, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,296,"0.8000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,297,"4.7000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,298,"8.0000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,299,"9.8000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,300,"9.8000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,301,"3.7000, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,302,"9.6200, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,303,"3.8100, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,304,"7.7000, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,305,"1.5500, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,306,"2.0700, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,307,".7400, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,308,"0.7000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,309,"1.3000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,310,"7.5000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,311,"9.0000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,312,"4.0000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,313,"7.7000, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,314,"4.5600, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,315,"8.6700, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,316,"6.2400, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,317,".7400, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,318,".8700, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,319,".5100, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,320,"6.7000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,321,"9.2000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,322,"0.8000, 1.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,323,"0.7000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,324,"5.7000, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,325,"6.3000, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,326,"5.9900, 2.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,327,"6.9500, 2.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,328,"3.3500, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,329,".6200, 4.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,330,".2000, 5.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,331,".6400, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,332,"3.6900, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,333,"1.0000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,334,"4.5000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,335,"5.5000, 1.5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,336,"3.3100, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,337,".8700, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,338,"2.9400, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,339,".0600, 6.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,340,"5.1900, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,341,"4.6200, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,342,"5.6400, 3.0000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,343,"5.5000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,344,"5.9500, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,345,"1.7000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,346,"1.6000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,347,"9.8000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,348,"9.8100, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,349,"7.1700, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,350,"0.3900, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,351,"8.4000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,352,"8.6900, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,353,"1.3000, .5000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,354,"0.9000, .7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,355,"6.6500, 2.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,356,"0.0500, 3.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,357,"8.9000, 1.7500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,358,"8.9500, 1.7500"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,361,* the chwirut1 objective function */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,362,"rivate final nistMVRF chwirut1ObjectFunc = new chwirut(chwirut1NIST, 1, 214, 3);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,364,/http://www.itl.nist.gov/div898/strd/nls/data/LINKS/DATA/Chwirut2.dat
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,365,ublic static double[] chwirut2NIST = {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,366,"2.9000, 0.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,367,"7.1000, 1.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,368,"1.0500, 1.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,369,"1.5875, 3.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,370,".0250, 5.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,371,"3.6000, 0.875,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,372,"1.4000, 2.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,373,"4.2500, 3.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,374,".4750, 5.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,375,"3.8000, 0.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,376,"6.8000, 1.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,377,"6.4625, 2.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,378,".1250, 4.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,379,"7.3000, 0.625,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,380,"1.0000, 1.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,381,"1.1500, 2.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,382,".1750, 4.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,383,"1.5000, .500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,384,"3.1200, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,385,"9.9000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,386,"4.6200, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,387,"2.9000, 1.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,388,".4400, 6.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,389,"2.5600, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,390,".4400, 6.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,391,"2.0000, 1.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,392,"3.9500, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,393,"5.8000, .500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,394,"0.0000, 2.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,395,"0.4200, 4.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,396,"9.5000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,397,"1.6700, 2.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,398,".5500, 5.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,399,"2.0000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,400,"0.2000, 2.250,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,401,".7600, 3.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,402,".7500, 5.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,403,"1.8100, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,404,"4.7000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,405,"3.7000, 2.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,406,"1.5500, 4.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,407,"1.3000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,408,"7.7000, 2.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,409,".7400, 4.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,410,"9.2000, .750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,411,"6.3000, 2.500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,412,".6200, 4.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,413,"1.0000, .500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,414,".8700, 6.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,415,"4.6200, 3.000,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,416,"1.7000, .500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,417,"7.1700, 2.750,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,418,"1.3000, .500,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,419,"8.9000, 1.750"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,422,* the chwirut 2 objective --------------------------------------------------*/
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,423,"rivate final nistMVRF chwirut2ObjectFunc = new chwirut(chwirut2NIST, 1, 54, 3);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,425,/http://www.itl.nist.gov/div898/strd/nls/data/LINKS/DATA/Misra1a.dat
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,426,/y               x
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,427,rivate static double[] misra1aNIST = {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,428,"0.07, 77.6,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,429,"4.73, 114.9,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,430,"7.94, 141.1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,431,"3.93, 190.8,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,432,"9.61, 239.9,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,433,"5.18, 289.0,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,434,"0.02, 332.8,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,435,"4.82, 378.4,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,436,"0.76, 434.8,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,437,"5.05, 477.3,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,438,"1.01, 536.8,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,439,"6.40, 593.1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,440,"5.47, 689.1,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,441,"1.78, 760.0"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,444,* the misra1a objective function */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,445,"rivate final nistMVRF misra1aObjectFunc = new nistMVRF(misra1aNIST, 1, 14, 2) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,447,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,448,"rotected double partialDeriv(double[] point, int idx) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,449,"ouble cy, cx, r, ret = 0.0;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,450,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,451,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,452,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,453,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,454, = cy - point[0] * (1.0 - FastMath.exp(-cx * point[1]));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,455,f (idx == 0) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,456,et -= (2.0 * r) * (1.0 - FastMath.exp(-cx * point[1]));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,457, else {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,458,et -= (2.0 * r) * cx * point[0] * FastMath.exp(-cx * point[1]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,461,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,464,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,465,"ouble ret = 0.0, err;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,466,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,467,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,468,rr = data[ptr++] - point[0] * (1.0 - FastMath.exp(-data[ptr++] * point[1]));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,469,et += err * err;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,471,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,474,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,475,rotected double[] getGradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,476,"rrays.fill(gradient, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,477,"ouble cy, cx, r;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,478,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,479,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,480,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,481,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,482, = cy - point[0] * (1.0 - FastMath.exp(-cx * point[1]));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,483,radient[0] -= (2.0 * r) * (1.0 - FastMath.exp(-cx * point[1]));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,484,radient[1] -= (2.0 * r) * cx * point[0] * FastMath.exp(-cx * point[1]);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,486,eturn this.gradient;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,489,"rivate static double[] correctParamMisra1a = {2.3894212918e2, 5.5015643181E-4};"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,490,"rivate static double[] correctParamChwirut2 = {1.6657666537e-1, 5.1653291286e-3, 1.2150007096e-2};"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,491,"rivate static double[] correctParamChwirut1 = {1.9027818370e-1, 6.1314004477e-3, 1.0530908399e-2};"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,492,"rivate static double[] correctParamLanczos = {8.6816414977e-2, 9.5498101505e-01, 8.4400777463E-01, 2.9515951832, 1.5825685901, 4.9863565084};"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,494,Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,495,ublic void lanczosTest() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,496,/first check to see that the NIST Object function is being replicated correctly
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,497,ouble obj = this.lanczosObjectFunc.value(correctParamLanczos);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,498,"ssert.assertEquals(1.6117193594E-08, obj, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,500,ouble[] grad = this.lanczosObjectFunc.getGradient(correctParamLanczos);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,501,ouble[] grad2 = new double[6];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,502,"rad2[0] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,503,"rad2[1] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 1);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,504,"rad2[2] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 2);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,505,"rad2[3] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 3);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,506,"rad2[4] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 4);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,507,"rad2[5] = this.lanczosObjectFunc.partialDeriv(correctParamLanczos, 5);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,508,"estUtils.assertEquals(""Grads..."", grad, grad2, 1.0e-12);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,510,"ouble[] n_grad = this.getGradient(lanczosObjectFunc, correctParamLanczos, 1.0e-5);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,511,"/System.out.println(""g = "" + grad[0] + "" ng = "" + n_grad[0]);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,512,"/System.out.println(""g = "" + grad[1] + "" ng = "" + n_grad[1]);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,513,"f (FastMath.abs(grad[0] - n_grad[0]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[0] + n_grad[0]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,514,"ssert.fail(""Check gradient at 1"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,516,"f (FastMath.abs(grad[1] - n_grad[1]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[1] + n_grad[1]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,517,"ssert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,519,"f (FastMath.abs(grad[2] - n_grad[2]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[2] + n_grad[2]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,520,"ssert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,522,"f (FastMath.abs(grad[3] - n_grad[3]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[3] + n_grad[3]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,523,"ssert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,525,"f (FastMath.abs(grad[4] - n_grad[4]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[4] + n_grad[4]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,526,"ssert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,528,"f (FastMath.abs(grad[5] - n_grad[5]) > FastMath.max(1.0e-6, 1.0e-6 * (grad[5] + n_grad[5]) / 2.0)) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,529,"ssert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,531,eturn;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,534,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,535,ublic void lanczos_BOBYQA() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,536,"ouble[] bobyqa = run(new BOBYQAOptimizer(10),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,537,"anczosObjectFunc, new double[]{1.2,0.3,5.6,5.5,6.5,7.6});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,538,"estUtils.assertEquals(correctParamLanczos, bobyqa, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,541,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,542,ublic void lanczosTest_cgPolakRibiere() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,543,"ouble[] cgPolakRibiere = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,544,"anczosObjectFunc, new double[]{1.2,0.3,5.6,5.5,6.5,7.6});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,545,"estUtils.assertEquals(correctParamLanczos, cgPolakRibiere, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,548,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,549,ublic void lanczosTest_cgPolakRibiere2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,550,"ouble[] cgPolakRibiere2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,551,"anczosObjectFunc, new double[]{0.5,0.7,3.6,4.2,4,6.3});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,552,"estUtils.assertEquals(correctParamLanczos, cgPolakRibiere2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,555,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,556,ublic void lanczosTest_cgFletcherReeves() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,557,"ouble[] cgFletcherReeves = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,558,"anczosObjectFunc, new double[]{1.2,0.3,5.6,5.5,6.5,7.6});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,559,"estUtils.assertEquals(correctParamLanczos, cgFletcherReeves, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,562,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,563,ublic void lanczosTest_cgFletcherReeves2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,564,"ouble[] cgFletcherReeves2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,565,"anczosObjectFunc, new double[]{0.5,0.7,3.6,4.2,4,6.3});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,566,"estUtils.assertEquals(correctParamLanczos, cgFletcherReeves2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,569,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,570,ublic void lanczosTest_powell() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,571,"ouble[] resPowell = run(new PowellOptimizer(1.0e-8, 1.0e-8), lanczosObjectFunc,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,572,"ew double[]{1.2,0.3,5.6,5.5,6.5,7.6});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,573,"estUtils.assertEquals(correctParamLanczos, resPowell, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,576,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,577,ublic void lanczosTest_powell2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,578,"ouble[] resPowell2 = run(new PowellOptimizer(1.0e-8, 1.0e-8), lanczosObjectFunc,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,579,"ew double[]{0.5,0.7,3.6,4.2,4,6.3});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,580,"estUtils.assertEquals(correctParamLanczos, resPowell2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,583,Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,584,ublic void chwirut1Test() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,585,/first check to see that the NIST Object function is being replicated correctly
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,586,ouble obj = this.chwirut1ObjectFunc.value(correctParamChwirut1);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,587,"ssert.assertEquals(2.3844771393e3, obj, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,589,ouble[] grad = this.chwirut1ObjectFunc.getGradient(correctParamChwirut1);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,590,ouble[] grad2 = new double[3];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,591,"rad2[0] = this.chwirut1ObjectFunc.partialDeriv(correctParamChwirut1, 0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,592,"rad2[1] = this.chwirut1ObjectFunc.partialDeriv(correctParamChwirut1, 1);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,593,"rad2[2] = this.chwirut1ObjectFunc.partialDeriv(correctParamChwirut1, 2);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,594,"estUtils.assertEquals(""Grads..."", grad, grad2, 1.0e-12);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,595,eturn;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,598,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,599,ublic void chwirut1_BOBYQA() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,600,"ouble[] bobyqa = run(new BOBYQAOptimizer(5),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,601,"hwirut1ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,602,"estUtils.assertEquals(correctParamChwirut1, bobyqa, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,605,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,606,ublic void chwirut1Test_cgPolakRibiere() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,607,"ouble[] cgPolakRibiere = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,608,"hwirut1ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,609,"estUtils.assertEquals(correctParamChwirut1, cgPolakRibiere, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,612,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,613,ublic void chwirut1Test_cgPolakRibiere2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,614,"ouble[] cgPolakRibiere2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,615,"hwirut1ObjectFunc, new double[]{0.15, 0.008, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,616,"estUtils.assertEquals(correctParamChwirut1, cgPolakRibiere2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,619,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,620,ublic void chwirut1Test_cgFletcherReeves() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,621,"ouble[] cgFletcherReeves = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,622,"hwirut1ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,623,"estUtils.assertEquals(correctParamChwirut1, cgFletcherReeves, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,626,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,627,ublic void chwirut1Test_cgFletcherReeves2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,628,"ouble[] cgFletcherReeves2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,629,"hwirut1ObjectFunc, new double[]{0.15, 0.008, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,630,"estUtils.assertEquals(correctParamChwirut1, cgFletcherReeves2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,633,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,634,ublic void chwirut1Test_powell() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,635,"ouble[] resPowell = run(new PowellOptimizer(1.0e-8, 1.0e-8), chwirut1ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,636,"estUtils.assertEquals(correctParamChwirut1, resPowell, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,639,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,640,ublic void chwirut1Test_powell2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,641,"ouble[] resPowell2 = run(new PowellOptimizer(1.0e-8, 1.0e-8), chwirut1ObjectFunc, new double[]{0.15, 0.08, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,642,"estUtils.assertEquals(correctParamChwirut1, resPowell2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,645,Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,646,ublic void chwirut2Test() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,647,/first check to see that the NIST Object function is being replicated correctly
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,648,ouble obj = this.chwirut2ObjectFunc.value(correctParamChwirut2);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,649,"ssert.assertEquals(5.1304802941e02, obj, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,651,ouble[] grad = this.chwirut2ObjectFunc.getGradient(correctParamChwirut2);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,652,ouble[] grad2 = new double[3];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,653,"rad2[0] = this.chwirut2ObjectFunc.partialDeriv(correctParamChwirut2, 0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,654,"rad2[1] = this.chwirut2ObjectFunc.partialDeriv(correctParamChwirut2, 1);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,655,"rad2[2] = this.chwirut2ObjectFunc.partialDeriv(correctParamChwirut2, 2);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,656,"estUtils.assertEquals(""Grads..."", grad, grad2, 1.0e-12);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,657,eturn;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,660,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,661,ublic void chwirut2_BOBYQA() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,662,"ouble[] bobyqa = run(new BOBYQAOptimizer(5),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,663,"hwirut2ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,664,"estUtils.assertEquals(correctParamChwirut2, bobyqa, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,667,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,668,ublic void chwirut2Test_cgPolakRibiere() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,669,"ouble[] cgPolakRibiere = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,670,"hwirut2ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,671,"estUtils.assertEquals(correctParamChwirut2, cgPolakRibiere, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,674,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,675,ublic void chwirut2Test_cgPolakRibiere2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,676,"ouble[] cgPolakRibiere2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,677,"hwirut2ObjectFunc, new double[]{0.15, 0.008, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,678,"estUtils.assertEquals(correctParamChwirut2, cgPolakRibiere2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,681,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,682,ublic void chwirut2Test_cgFletcherReeves() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,683,"ouble[] cgFletcherReeves = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,684,"hwirut2ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,685,"estUtils.assertEquals(correctParamChwirut2, cgFletcherReeves, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,688,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,689,ublic void chwirut2Test_cgFletcherReeves2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,690,"ouble[] cgFletcherReeves2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,691,"hwirut2ObjectFunc, new double[]{0.15, 0.008, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,692,"estUtils.assertEquals(correctParamChwirut2, cgFletcherReeves2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,695,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,696,ublic void chwirut2Test_powell() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,697,"ouble[] resPowell = run(new PowellOptimizer(1.0e-8, 1.0e-8), chwirut2ObjectFunc, new double[]{0.1, 0.01, 0.02});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,698,"estUtils.assertEquals(correctParamChwirut2, resPowell, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,701,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,702,ublic void chwirut2Test_powell2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,703,"ouble[] resPowell2 = run(new PowellOptimizer(1.0e-8, 1.0e-8), chwirut2ObjectFunc, new double[]{0.15, 0.08, 0.01});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,704,"estUtils.assertEquals(correctParamChwirut2, resPowell2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,707,Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,708,ublic void misra1aTest() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,709,/first check to see that the NIST Object function is being replicated correctly
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,710,ouble obj = this.misra1aObjectFunc.value(correctParamMisra1a);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,711,"ssert.assertEquals(1.2455138894e-01, obj, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,713,ouble[] grad = this.misra1aObjectFunc.getGradient(correctParamMisra1a);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,714,ouble[] grad2 = new double[2];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,715,"rad2[0] = this.misra1aObjectFunc.partialDeriv(correctParamMisra1a, 0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,716,"rad2[1] = this.misra1aObjectFunc.partialDeriv(correctParamMisra1a, 1);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,718,"estUtils.assertEquals(""Grads..."", grad, grad2, 1.0e-12);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,720,"/        double[] n_grad = this.getGradient(misra1aObjectFunc, correctParamMisra1a, 1.0e-5);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,721,"/        System.out.println(""g = "" + grad[0] + "" ng = "" + n_grad[0]);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,722,"/        System.out.println(""g = "" + grad[1] + "" ng = "" + n_grad[1]);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,723,"/        if( FastMath.abs(grad[0] - n_grad[0] ) > FastMath.max(1.0e-6, 1.0e-6 * (grad[0]+n_grad[0])/2.0) ){"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,724,"/            Assert.fail(""Check gradient at 1"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,726,"/        if( FastMath.abs(grad[1] - n_grad[1] ) > FastMath.max(1.0e-6, 1.0e-6 * (grad[1]+n_grad[1])/2.0) ){"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,727,"/            Assert.fail(""Check gradient at 2"");"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,729,eturn;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,732,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,733,ublic void misra1a_BOBYQA() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,734,"ouble[] bobyqa = run(new BOBYQAOptimizer(4),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,735,"isra1aObjectFunc, new double[]{500.0, 0.0001});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,736,"estUtils.assertEquals(correctParamMisra1a, bobyqa, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,739,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,740,ublic void misra1aTest_cgPolakRibiere() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,741,"ouble[] cgPolakRibiere = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,742,"isra1aObjectFunc, new double[]{500.0, 0.0001});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,743,"estUtils.assertEquals(correctParamMisra1a, cgPolakRibiere, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,746,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,747,ublic void misra1aTest_cgPolakRibiere2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,748,"ouble[] cgPolakRibiere2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,749,"isra1aObjectFunc, new double[]{250.0, 0.0005});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,750,"estUtils.assertEquals(correctParamMisra1a, cgPolakRibiere2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,753,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,754,ublic void misra1aTest_cgFletcherReeves() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,755,"ouble[] cgFletcherReeves = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,756,"isra1aObjectFunc, new double[]{500.0, 0.0001});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,757,"estUtils.assertEquals(correctParamMisra1a, cgFletcherReeves, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,760,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,761,ublic void misra1aTest_cgFletcherReeves2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,762,"ouble[] cgFletcherReeves2 = run(new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.FLETCHER_REEVES),"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,763,"isra1aObjectFunc, new double[]{250.0, 0.0005});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,764,"estUtils.assertEquals(correctParamMisra1a, cgFletcherReeves2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,767,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,768,ublic void misra1aTest_powell() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,769,"ouble[] resPowell = run(new PowellOptimizer(1.0e-8, 1.0e-8), misra1aObjectFunc, new double[]{500.0, 0.0001});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,770,"estUtils.assertEquals(correctParamMisra1a, resPowell, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,773,/@Test
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,774,ublic void misra1aTest_powell2() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,775,"ouble[] resPowell2 = run(new PowellOptimizer(1.0e-8, 1.0e-8), misra1aObjectFunc, new double[]{250.0, 0.0005});"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,776,"estUtils.assertEquals(correctParamMisra1a, resPowell2, 1.0e-8);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,779,* numerical gradients */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,780,"rivate double[] getGradient(nistMVRF func, double[] xo, double eps) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,781,ouble[] ret = new double[func.getNumberOfParameters()];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,782,or (int i = 0; i < ret.length; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,783,inal double tmp = xo[i];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,784,o[i] += eps;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,785,et[i] = func.value(xo);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,786,o[i] = tmp - eps;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,787,et[i] -= func.value(xo);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,788,et[i] /= (2.0 * eps);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,789,o[i] = tmp;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,791,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,794,* generic test runner */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,795,"rivate double[] run(MultivariateOptimizer optim, DifferentiableMultivariateFunction func, double[] start) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,796,"eturn (optim.optimize(1000000, func, GoalType.MINIMIZE, start).getPointRef());"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,798,* generic test runner for AbstractScalarDifferentiableOptimizer */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,799,"rivate double[] run(AbstractScalarDifferentiableOptimizer optim, DifferentiableMultivariateFunction func, double[] start) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,800,"eturn (optim.optimize(1000000, func, GoalType.MINIMIZE, start).getPointRef());"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,803,* base objective function class for these tests */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,804,rivate abstract static class nistMVRF implements DifferentiableMultivariateFunction {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,805,rotected final MultivariateFunction[] mrf;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,806,rotected final MultivariateVectorFunction mvf = new MultivariateVectorFunction() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,808,ublic double[] value(double[] point) throws IllegalArgumentException {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,809,eturn getGradient(point);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,812,rotected double[] gradient;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,813,rotected double[] data;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,814,rotected int nvars;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,815,rotected int nobs;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,816,rotected int nparams;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,818,ublic int getNumberOfParameters() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,819,eturn nparams;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,822,"ublic nistMVRF(double[] data, int nvars, int nobs, int nparams) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,823,f ((nvars + 1) * nobs != data.length) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,824,"hrow new MathIllegalArgumentException(LocalizedFormats.INVALID_REGRESSION_ARRAY,"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,825,"ata.length, nobs, nvars);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,827,his.nobs = nobs;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,828,his.nvars = nvars;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,829,his.gradient = new double[nparams];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,830,his.nparams = nparams;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,831,his.data = data;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,832,rf = new MultivariateFunction[nvars];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,833,or (int i = 0; i < nvars; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,834,inal int idx = i;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,835,rf[i] = new MultivariateFunction() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,837,rivate int myIdx = idx;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,839,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,840,"eturn partialDeriv(point, myIdx);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,846,ublic MultivariateVectorFunction gradient() {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,847,eturn mvf;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,850,ublic MultivariateFunction partialDerivative(int k) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,851,eturn mrf[k];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,854,"rotected abstract double partialDeriv(double[] point, int idx);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,856,rotected abstract double[] getGradient(double[] point);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,859,* since there are multiple chwirut tests create an object       */
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,860,rivate static class chwirut extends nistMVRF {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,862,"ublic chwirut(double[] data, int nvars, int nobs, int nparams) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,863,"uper(data, nvars, nobs, nparams);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,866,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,867,"rotected double partialDeriv(double[] point, int idx) {"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,868,"ouble cy, cx, r, ret = 0.0, d;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,869,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,870,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,871,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,872,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,873, = (point[1] + point[2] * cx);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,874, = cy - FastMath.exp(-cx * point[0]) / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,875,f (idx == 0) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,876,et -= (2.0 * r * r) * cx;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,877, else if (idx == 1) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,878,et += (2.0 * r * r) / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,879, else {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,880,et += (2.0 * r * r) * cx / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,883,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,886,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,887,"ouble ret = 0.0, err, cx, cy;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,888,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,889,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,890,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,891,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,892,rr = cy - (FastMath.exp(-cx * point[0]) / (point[1] + point[2] * cx));
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,893,et += err * err;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,895,eturn (ret);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,898,Override
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,899,rotected double[] getGradient(double[] point) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,900,"rrays.fill(gradient, 0.0);"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,901,"ouble cy, cx, r, d;"
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,902,nt ptr = 0;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,903,or (int i = 0; i < this.nobs; i++) {
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,904,y = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,905,x = data[ptr++];
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,906, = (point[1] + point[2] * cx);
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,907, = cy - FastMath.exp(-cx * point[0]) / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,908,radient[0] -= (2.0 * r * r) * cx;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,909,radient[1] += (2.0 * r * r) / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,910,radient[2] += (2.0 * r * r) * cx / d;
False,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,src/test/java/org/apache/commons/math3/optimization/BatteryNISTTest.java,912,eturn this.gradient;

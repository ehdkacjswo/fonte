is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,20,mport org.apache.commons.math.util.ContractableDoubleArray;
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,20,import org.apache.commons.math.util.ResizableDoubleArray;
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,26, @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,26,* @version $Revision: 1.7 $ $Date: 2004/06/14 21:41:33 $
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,39,rotected ContractableDoubleArray eDA;
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,39,protected ResizableDoubleArray eDA;
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,54,DA = new ContractableDoubleArray();
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,54,eDA = new ResizableDoubleArray();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,14, limitations under the License.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,16,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,21, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,22, A variable length double array implementation and extension of
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,23, ExpandableDoubleArray which automatically handles expanding and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,24, contracting double arrays.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,25, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,27, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,28, This class extends the functionality of ExpandableDoubleArray and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,29, inherits the expansion parameters from that class.  If a developer
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,30, instantiates a ContractableDoubleArray and only adds values to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,31," that instance, the behavior of this class is no different from"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,32," the behavior of the super-class ExpandableDoubleArray.  If, on the"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,33," other hand, elements are removed from the array, this implementation"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,34, tests an additional parameter <code>contractionCriteria</code>.  The
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,35, <code>contractionCriteria</code> dictates when this implementation
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,36, will contract the size of the internal storage array to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,37, the number of elements + 1.  This check is performed after every
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,38, operation that alters the number of elements in the array.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,39, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,41, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,42, Note that the contractionCriteria must always be greater than the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,43, expansionFactor.  If this were not the case (assume a
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,44, contractionCriteria of 1.5f and a expansionFactor of 2.0f) an
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,45, endless series of expansions and contractions would occur.  If the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,46, length of this array is highly varied over time it is a good idea
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,47, to trade efficient memory usage for performance.  Each time an array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,48, is expanded or contracted the meaningful portions of the internal
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,49, storage array are copied to a new array and the reference to the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,50, internal storage array is swapped.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,51, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,53, @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:32 $
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,55,ublic class ContractableDoubleArray extends ExpandableDoubleArray implements Serializable {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,57,** Serializable version identifier */
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,58,tatic final long serialVersionUID = -3485529955529426875L;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,60,** The contraction criteria defines the conditions under which this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,61," object will ""resize"" the internal array to the number of elements"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,62, contained in the element array + 1
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,64,rivate float contractionCriteria = 2.5f;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,67, Create an expandable double array with the default initial capacity of
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,68," 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,70,ublic ContractableDoubleArray() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,71,uper();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,75," Create an expandable double array with the specified initial capacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,76," the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,78, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,80,ublic ContractableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,81,uper(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,85, Create an expandable double array with the specificed initial capacity
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,86," and expand factor, with a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,88, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,89, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,90,                        parameter
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,92,ublic ContractableDoubleArray(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,93,"nt initialCapacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,94,loat expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,95,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,96,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,97,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,98,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,102, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,103," specificed initial capacity, expand factor, and contractionCriteria"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,105, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,106, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,107,                        parameter
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,108, @param contractionCriteria The contraction Criteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,110,ublic ContractableDoubleArray(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,111,"nt initialCapacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,112,"loat expansionFactor,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,113,loat contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,114,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,115,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,116,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,117,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,118,"heckContractExpand(contractionCriteria, expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,122, Contracts the storage array to the (size of the element set) + 1 - to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,123, avoid a zero length array. This function also resets the startIndex to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,124, zero.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,126,ublic synchronized void contract() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,127,ouble[] tempArray = new double[numElements + 1];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,129,/ Copy and swap - copy only the element array from the src array.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,130,"ystem.arraycopy(internalArray, startIndex, tempArray, 0, numElements);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,131,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,133,/ Reset the start index to zero
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,134,tartIndex = 0;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,138, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,140, @param value to be added to end of array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,142,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,143,uper.addElement(value);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,144,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,145,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,150, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,151, Adds an element to the end of this expandable array and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,152, discards a value from the front of the array.  This method
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,153, has the effect of adding a value to the end of the list
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,154, and discarded an element from the front of the list.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,155, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,157, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,158," When an array rolls it actually ""scrolls"" the element array in"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,159, the internal storage array.  An element is added to the end of the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,160," array, and the first element of the array is discard by incrementing"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,161, the starting index of the element array within the internal
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,162, storage array.  Over time this will create an orphaned prefix
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,163, to the element array within the internal storage array.  If this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,164," function is called frequently, this orphaned prefix list will"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,165, gradually push the internal storage vs. element storage to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,166, the contractionCriteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,167, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,168, @param value to be added to end of array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,169, @return value added
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,171,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,172,ouble discarded = super.addElementRolling(value);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,173,/ Check the contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,174,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,175,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,177,eturn discarded;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,181, Should contract returns true if the ratio of (internal storage length)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,182, to (number of elements) is larger than the contractionCriteria value.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,183," In other words, using the default value of 2.5, if the internal storage"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,184," array provides more than 2.5x the space needed to store numElements,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,185, then this function returns true
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,187, @return true if array satisfies the contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,189,rivate synchronized boolean shouldContract() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,190,oolean shouldContract = false;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,191,f ((internalArray.length / numElements) > contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,192,houldContract = true;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,194,eturn shouldContract;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,198," @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,200,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,201,"uper.setElement(index, value);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,202,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,203,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,208, Method invokes the super class' setExpansionFactor but first it
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,209, must validate the combination of expansionFactor and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,210, contractionCriteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,212, @see org.apache.commons.math.util.ExpandableDoubleArray#setExpansionFactor(float)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,214,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,215,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,216,uper.setExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,220, The contraction criteria defines when the internal array will contract
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,221, to store only the number of elements in the element array.  This
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,222, contractionCriteria gaurantees that the internal storage array will
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,223, never exceed this factor more than the space needed to store
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,224, numElements.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,226, @return the contraction criteria used to reclaim memory when array is
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,227,         empty
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,229,ublic float getContractionCriteria() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,230,eturn contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,234, Sets the contraction criteria for this ExpandContractDoubleArray.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,236, @param contractionCriteria contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,238,ublic void setContractionCriteria(float contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,239,"heckContractExpand(contractionCriteria, getExpansionFactor());"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,241,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,245, Checks the expansion factor and the contraction criteria and throws an
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,246, IllegalArgumentException if the contractionCriteria is less than the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,247, expansionCriteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,249, @param expansionFactor factor to be checked
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,250, @param contractionCritera critera to be checked
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,251, @throws IllegalArgumentException if the contractionCriteria is less than
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,252,         the expansionCriteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,254,rotected void checkContractExpand(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,255,"loat contractionCritera,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,256,loat expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,258,f (contractionCritera < expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,259,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,260,"Contraction criteria can never be smaller than "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,261,"the expansion factor.  This would lead to a never "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,262,"ending loop of expansion and contraction as a newly "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,263,"expanded internal storage array would immediately "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,264,"satisfy the criteria for contraction"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,265,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,268,f (contractionCriteria <= 1.0) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,269,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,270,"The contraction criteria must be a number larger "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,271,"than one.  If the contractionCriteria is less than or "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,272,"equal to one an endless loop of contraction and "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,273,"expansion would ensue as an internalArray.length "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,274,"== numElements would satisfy the contraction criteria"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,275,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,278,f (expansionFactor < 1.0) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,279,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,280,"The expansion factor must be a number greater than 1.0"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,281,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,286, @see org.apache.commons.math.util.ExpandableDoubleArray#discardFrontElements(int)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,288,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,289,uper.discardFrontElements(i);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,290,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,291,ontract();
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,20, Provides a single interface for dealing with various flavors
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,21, of double arrays.  This arrays framework follows the model of the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,22, Collections API by allowing a user to select from a number of
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,23, array implementations with support for various storage mechanisms
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,20,* Provides a standard interface for double arrays.  Allows different
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,21,* array implementations to support various storage mechanisms
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,26, @version $Revision: 1.11 $ $Date: 2004/06/08 14:19:40 $
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24,* @version $Revision: 1.12 $ $Date: 2004/06/14 21:41:33 $
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,32, that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,30,* that this may be different from the length of the internal storage array.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,50, Sets the element at the specified index.  This method may expand the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,51, internal storage array to accomodate the insertion of a value at an
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,52, index beyond the current capacity.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,49,* Sets the element at the specified index.  If the specified index is greater than
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,50,"* <code>getNumElements() - 1</code>, the <code>numElements</code> property"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,51,* is increased to <code>index +1</code> and additional storage is allocated
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,52,* (if necessary) for the new element and all  (uninitialized) elements
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,53,* between the new element and the previous end of the array).
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,69, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,70," has the effect of a FIFO.  when you ""roll"" the array an element may be"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,71," removed from the array.  In this case, the return value of this function is the"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,72," discarded double.  In some implementations, removal will only occur when"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,73, the array has reached a capacity threshold.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,75," When removal does occur, the effect is to add an element to the end of the"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,76, array and to discard the element at the beginning of the array.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,71,* Adds an element to the end of the array and removes the first
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,72,* element in the array.  Returns the discarded first element.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,73,* The effect is similar to a push operation in a FIFO queue.
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,74,* </p>
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,75,* <p>
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,76,"* Example: If the array contains the elements 1, 2, 3, 4 (in that order)"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,77,"* and addElementRolling(5) is invoked, the result is an array containing"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,78,"* the entries 2, 3, 4, 5 and the value returned is 1."
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,79,* </p>
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,80,         by this rolling insert or null if no value has been discarded
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,83,*         by this rolling insert
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,85, Returns a double[] of elements
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,88,* Returns a double[] array containing the elements of this
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,89,* <code>DoubleArray</code>.  If the underlying implementation is
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,90,"* array-based, this method should always return a copy, rather than a"
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,91,* reference to the underlying array so that changes made to the returned
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,92,*  array have no effect on the <code>DoubleArray.</code>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,14, limitations under the License.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,16,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,21, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,22, A DoubleArray implementation which automatically expands
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,23, an internal double array to handle an array of arbitrary length.  This
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,24, implementation of DoubleArray is provided to support scenarios in
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,25," which the ultimate length of an array is unknown, and the"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,26, developer can control the expansion process through the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,27, <code>initialCapacity</code> and <code>expansionFactor</code>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,28, parameters.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,29, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,31, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,32, This implementation also allows a developer to:
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,33, <ul>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,34,  <li>Resize an array via <code>setNumElements(int)</code></li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,35,  <li>Discard elements from the front of an array via
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,36,      <code>discardFrontElements(int)</code></li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,37,  <li>Find the minimum and maximum values stored in this array</li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,38, </ul>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,39, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,41, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,42, The initialCapacity parameter sets the capacity of the initial
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,43," storage array, and the expansionFactor is the factor by which"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,44, the current storage capacity is multiplied each time the internal
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,45, array needs to be expanded.  <b>Please note</b> that the length of the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,46, internal storage array has nothing to do with the number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,47, currently stored in this array.  If one creates an instance of this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,48," class with an initialCapacity of ""2"" and an expansion factor of ""2"", and"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,49," then adds 3546 elements to the array, this implementation will need to"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,50," expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,51, and so on until we reach 4096 which is sufficient to hold 3546 elements.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,52, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,53, @version $Revision: 1.15 $ $Date: 2004/05/19 14:16:32 $
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,55,"ublic class ExpandableDoubleArray implements Serializable, DoubleArray {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,57,** Serializable version identifier */
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,58,tatic final long serialVersionUID = -5697417774251632284L;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,60,"/ TODO: expansionFactor is valuable, by if I only need storage"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,61,"/ for 1025 items and I use the default settings, I'll end up"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,62,/ with enough storage for 2048 elements.  Maybe this implementation
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,63,"/ should have flags for incremental growth - (i.e. when expanding, only"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,64,"/ increase storage by a constant size - 100, 200 ) ?"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,67, This is the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,69,rotected double[] internalArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,72, Number of elements in the array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,74,rotected int numElements = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,77, Keeps track of a starting index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,79,rotected int startIndex = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,81,**The initial capacity of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,82, Initial capacity is not exposed as a property as it is only meaningful
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,83, when passed to a constructor.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,85,rotected int initialCapacity = 16;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,87,"** The expand factor of the array.  When the array need to be expanded,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,88, the new array size will be internalArray.length * expandFactor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,90,rotected float expansionFactor = 2.0f;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,93, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,94, default initial capactiy of 16 and an expansion factor of 2.00
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,96,ublic ExpandableDoubleArray() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,97,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,101, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,102, specified initial capacity and the defult expansion factor of 2.00
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,104, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,106,ublic ExpandableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,107,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,108,nternalArray = new double[this.initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,112, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,113, specificed initial capacity and expand factor.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,115, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,116, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,117,                        parameter
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,119,"ublic ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,120,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,121,etExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,122,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,123,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,127, The expansion factor controls the size of a new aray when an array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,128," needs to be expanded. When a value is inserted into a full array, the"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,129, new array size is calculated as the current array size times this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,130, expansion factor.  The default expansion factor is 2.0
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,132, @return the expansion factor of this expandable double array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,134,ublic float getExpansionFactor() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,135,eturn expansionFactor;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,139, Sets the expansion factor for this expandable double array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,140, The expansion factor will affect the next expansion of this array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,142, @param expansionFactor the expansion factor of this array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,143, @throws IllegalArgumentException if <code>expansionFactor</code> is less
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,144,         than or equal to 1.0
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,146,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,148,"/ The expansion factor *must* be larger than 1.0, otherwise we'll"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,149,/ have an inconsistency upon expansion we'll start shrinking which
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,150,/ will lead to ArrayIndexOutOfBound exceptions.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,151,f (expansionFactor > 1.0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,152,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,153, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,154,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,155,"The expansion factor must be a number greater "" + ""than 1.0"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,156,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,161, Sets the initial capacity
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,162, @param initialCapacity of the array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,163, @throws IllegalArgumentException if <code>initialCapacity</code> is not
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,164,         positive.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,166,ublic void setInitialCapacity(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,167,f (initialCapacity > 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,168,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,169, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,170,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,171,"The initial capacity supplied: "" + initialCapacity +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,172,"must be a positive integer"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,173,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,178, Returns the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,180, @return the internal storage array used by this object
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,182,ublic double[] getValues() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,183,eturn (internalArray);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,187, Returns the starting index of the internal array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,188, @return starting index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,190,ublic int start() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,191,eturn startIndex;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,195, Returns the number of elements currently in the array.  Please note
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,196, that this is different from the length of the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,197, @return number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,199,ublic int getNumElements() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,200,eturn (numElements);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,204, This function allows you to control the number of elements contained
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,205," in this array, and can be used to ""throw"" out the last n values in an"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,206, array.  This feature is mainly targetted at the subclasses of this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,207, array class.  Note that this function will also expand the internal
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,208, array as needed.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,210, @param i a new number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,211, @throws IllegalArgumentException if <code>i</code> is negative.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,213,ublic synchronized void setNumElements(int i) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,215,/ If index is negative thrown an error
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,216,f (i < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,217,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,218,"Number of elements must be zero or a positive "" + ""integer"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,219,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,222,"/ Test the new num elements, check to see if the array needs to be"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,223,/ expanded to accomodate this new number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,224,f ((startIndex + i) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,225,xpandTo(startIndex + i);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,228,/ Set the new number of elements to new value
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,229,umElements = i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,233, Returns the element at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,235, @param index index to fetch a value from
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,236, @return value stored at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,237, @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,238,         zero or is greater than <code>getNumElements() - 1</code>.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,240,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,241,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,242,f (index >= numElements) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,243,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,244,"The index specified: "" + index +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,245," is larger than the current number of elements"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,246,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,247, else if (index >= 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,248,alue = internalArray[startIndex + index];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,249, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,250,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,251,"Elements cannot be retrieved from a negative array index"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,252,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,254,eturn value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,258, Sets the element at the specified index.  This method will expand the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,259, internal storage array to accomodate the insertion of a value at an
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,260, index beyond the current capacity.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,262, @param index index to store a value in
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,263, @param value value to store at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,264, @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,265,         zero.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,267,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,269,f (index < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,270,"tring msg = ""Cannot set an element at a negative index"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,271,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,274,f ((startIndex + index) >= internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,275,xpandTo(startIndex + (index + 1));
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,276,umElements = index + 1;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,278,nternalArray[startIndex + index] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,282, Expands the internal storage array to the specified size.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,284, @param size Size of the new internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,286,rivate synchronized void expandTo(int size) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,287,ouble[] tempArray = new double[size];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,288,/ Copy and swap
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,289,"ystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,290,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,294, Expands the internal storage array using the expansion factor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,296,rotected synchronized void expand() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,298,"/ notice the use of Math.ceil(), this gaurantees that we will always"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,299,/ have an array of at least currentSize + 1.   Assume that the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,300,/ current initial capacity is 1 and the expansion factor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,301,/ is 1.000000000000000001.  The newly calculated size will be
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,302,/ rounded up to 2 after the multiplication is performed.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,303,nt newSize = (int) Math.ceil(internalArray.length * expansionFactor);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,304,ouble[] tempArray = new double[newSize];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,306,/ Copy and swap
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,307,"ystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,308,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,312, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,314, @param value value to be added to end of array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,316,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,317,umElements++;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,318,f ((startIndex + numElements) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,319,xpand();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,321,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,325, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,326," has the effect of a FIFO.  when you ""roll"" the array an element is"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,327, removed from the array.  The return value of this function is the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,328, discarded double.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,329, @param value the value to add
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,330," @return the value which has been discarded or ""pushed"" out of the array"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,331, by this rolling insert.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,333,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,334,ouble discarded = internalArray[startIndex];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,336,f ((startIndex + (numElements + 1)) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,337,xpand();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,339,/ Increment the start index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,340,tartIndex += 1;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,342,/ Add the new value
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,343,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,345,eturn discarded;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,349, Notice the package scope on this method.   This method is simply here
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,350," for the JUnit test, it allows us check if the expansion is working"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,351, properly after a number of expansions.  This is not meant to be a part
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,352, of the public interface of this class.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,354, @return the length of the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,356,nt getInternalLength() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,357,eturn (internalArray.length);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,361," Clear the array, reset the size to the initialCapacity and the number"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,362, of elements to zero.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,364,ublic synchronized void clear() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,365,umElements = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,366,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,370, Discards values from the front of the list.  This function removes n
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,371, elements from the front of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,373, @param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,374, @throws IllegalArgumentException if <code>i</code> is negative of is
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,375,         greater than <code>getNumElements()</code>.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,377,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,379,f (i > numElements) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,380,"tring msg = ""Cannot discard more elements than are"" +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,381,"contained in this array."";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,382,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,383, else if (i < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,384,"tring msg = ""Cannot discard a negative number of elements."";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,385,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,386, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,387,"/ ""Subtract"" this number of discarded from numElements"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,388,umElements -= i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,389,tartIndex += i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,394, @see org.apache.commons.math.util.DoubleArray#getElements()
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,396,ublic double[] getElements() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,397,ouble[] elementArray = new double[numElements];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,398,ystem.arraycopy(
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,399,"nternalArray,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,400,"tartIndex,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,401,"lementArray,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,402,","
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,403,umElements);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,404,eturn elementArray;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,14, limitations under the License.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,16,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,21, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,22, Provides an implementation of the DoubleArray with a maximum number of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,23, elements.  Creating an array implementation with an upper limit on the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,24," number of elements allows us to support a more efficient ""rolling"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,25, mechanism to support addElementRoling(double). Please note that this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,26, implementation will not preserve the order of the values supplied to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,27," this array, calling getValues() will return an array of indeterminate"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,28, order.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,29, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,31, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,32, Values are added to this array by calling addElement(double) or
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,33, addElementRolling(double).  If addElement(double) is called on
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,34," an array that already contains the maximum number of elements, an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,35, ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,36, add a value beyond the boundaries of the fixed length array - in this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,37," respect a FixedDoubleArray can be considered ""full"".  Calling"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,38, addElementRolling(double) on an array which contains the maximum
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,39," number of elements will cause the array to overwrite the ""oldest"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,40, value in the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,41, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,43, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,44, This class is called FixedDoubleArray not because it is of a fixed size.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,45, The name is appropriate because the internal storage array remains
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,46," ""fixed"" in memory, this implementation will never allocate, or copy"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,47, the internal storage array to a new array instance.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,48, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49, @version $Revision: 1.16 $ $Date: 2004/05/19 14:16:32 $
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,51,"ublic class FixedDoubleArray implements DoubleArray, Serializable {"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,53,** Serializable version identifier */
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,54,tatic final long serialVersionUID = 1247853239629842963L;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,57, This is the internal storage array.  This array is assigned
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,58, a known fixed size in the constructor
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,60,rivate double[] internalArray;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,63, Size determined the number of elements in the array at
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,64, any given time. When an array is created is maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,65," of 100, it is of size 0, and size increases as values are"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,66, added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,68,rivate int size = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,71, This index points to the location of the next update.  Next
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,72," add, cycles from 0 to (maxElement-1)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,74,rivate int nextAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,77, The maximum number of elements in the FixedDoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,79,rivate int maxElements = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,82, Create a fixed array for double primitives which can hold up to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,83, <code>maxElements</codec> doubles.  This implementation of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,84," DoubleArray was created to provide a more ""performance-oriented"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85, in-place rolling mechanism for calculations which need to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,86, operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,88, @param maxElements the maximum number of elements this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,89,        FixeddoubleArray may contain.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,91,ublic FixedDoubleArray(int maxElements) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,92,his.maxElements = maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,93,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,97, Create a fixed array backed by the provided double[] implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,98, the array should have all the elements occupied. the size and maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,99, are drawn from the array's length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,101, This implementation of DoubleArray was created to provide a more
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,102," ""performance-oriented"" in-place rolling mechanism for calculations"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,103, which need to operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,104, @param array the backing array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,106,ublic FixedDoubleArray(double[] array) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,107,his.maxElements = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,108,his.size = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,109,nternalArray = array;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,113, Retrieves the current size of the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,114, @see org.apache.commons.math.util.DoubleArray#getNumElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,116,ublic int getNumElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,117,eturn size;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,121, Returns the element value at the specified index.  Please note that
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,122, the size of the element array is not directly related to the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,123, maximum number of elements which this array can contain.  One can
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,124, create an instance of FixedDoubleArray with a maximum of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,125," ten elements, add three items, and get any items from index 0 to index"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,126, 2 - trying to retrieve an element outside of the current element
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,127, array will throw an ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,129, @see org.apache.commons.math.util.DoubleArray#getElement(int)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,130, @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,131,         zero or is greater than <code>getNumElements() - 1</code>.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,133,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,134,f (index > (size - 1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,135,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,136,"Attempted to retrieve an element outside of "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,137,"the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,138,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,139, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,140,"/ Return the element requested, if the index supplied"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,141,/ is negative this statement may also throw an
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,142,/ ArrayIndexOutOfBoundException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,143,eturn internalArray[index];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,148, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,149, Sets the element at the specified index to the value supplied.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,150, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,152, <p>Implementation Notes:
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,153, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,154,  This implementation will not expand the array to the specified
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,155,  size.  Unlike the expandable double array implementation calling
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,156,"  setElement(10, 3.0) on an array with 5 elements will throw an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,157,  ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,158, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,159, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,160,  The number of elements in an array corresponds to the number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,161,  of elements that have been added to this FixedDoubleArray.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,162,  is not the same as the maximum number of elements which can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,163,  contained in this array.  A FixedDoubleArray instance can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,164,"  created with a maximum upper limit of 10 elements, until 10"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,165,"  elements have been added to this array, the size of the array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,166,  reflects the number of elements added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,168, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,170," @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,171, @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,172,         zero or is greater than <code>getNumElements() - 1</code>.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,174,"ublic void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,175,f (index > (size - 1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,176,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,177,"Attempted to set an element outside of"" + ""the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,178,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,179, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,180,nternalArray[index] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,185," Add an element to the current array, testing to see if"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,186, this array has already met or exceeded the maximum number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,187, of elements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,189, @see org.apache.commons.math.util.DoubleArray#addElement(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,190, @throws ArrayIndexOutOfBoundsException if array is already at capacity.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,192,ublic void addElement(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,193,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,194,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,196,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,198,/ Incremenet nextAdd and then modulo it against maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,199,"/ this has the effect of repeatedly ""cycling"" nextAdd"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,200,/ between 0 and (maxElements-1) endlessly.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,201,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,202,extAdd = nextAdd % (maxElements);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,204, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,205,"/ If the array has ALREADY reached the maximum size allowable,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,206,/ we throw an ArrayIndexOutOfBoundsException - the end-user
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,207,/ is trying to add an element beyond the boundaries of the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,208,/ fixed array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,209,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,210,"Attempted to add a value to an array of fixed "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,211,"size, please use addElementRolling "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,212,"to avoid this exception"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,213,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,218, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,219," Adds an element by ""rolling"" the new value into the current array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,220, while discarding the element which was added <code>maxElement</code>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,221, add operations ago.  The value replaced is returned from this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,222," method.  Until an array contains the maximum number of element, this"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,223, method has the same result as the addElement(double) operation.  Once
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,224, the maximum number of elements has been reached this implementation
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,225, inserts the new values starting at index 0 of the internal storage
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,226," array.  This allows for efficient rolling, but prevents us from"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,227, preserving the order of the added values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,228, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,230, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,231, <b>Note:</b> This function will return <code>Double.NaN</code> if
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,232, no value has been discarded in this roll.  This can happen when
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,233, the array has not met the size limitation introduced in the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,234, constructor.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,235, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,236, @param value the value to be added to the array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,237," @return Returns the value which a has been ""removed"" from the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238,         database.  <b>Important:</b> If the element array has
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239,"         not reached the maximum size, then it is possible that"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240,         no element will be discarded from a given roll.  In this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,241,         case this method will return a <code>Double.NaN</code> value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,243, @see org.apache.commons.math.util.DoubleArray#addElementRolling(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,245,ublic double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,247,/ Create the discarded primitive.  If no element is
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,248,"/ discarded by this roll, this method will return a"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,249,/ Double.NaN value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,250,ouble discarded = Double.NaN;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,252,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,253,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,254, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,255,/ If we've reached the length of the internal
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,256,"/ storage array, we have to start ""discarding"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,257,/ values from the original array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,259,/ Obtain the value discarded by this overwrite
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,260,iscarded = internalArray[nextAdd];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,263,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,265,/ nextAdd cycles between 0 and (maxElements-1).
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,266,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,267,extAdd = nextAdd % maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,269,"/ but we return the value which was ""replaced"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,270,eturn (discarded);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,274, Provides an array of double[] which contain the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,275, number of elements added to this array.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,276, method will return an array from zero to maxElements in length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,278, @return The array of elements added to this DoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,279,         implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,280, @see org.apache.commons.math.util.DoubleArray#getElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,282,ublic double[] getElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,283,ouble[] copy = new double[size];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,284,"ystem.arraycopy(internalArray, 0, copy, 0, size);"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,285,eturn copy;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,289, Returns the internal storage array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,291, @return the internal storage array used by this object
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,293,ublic double[] getValues() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,294,eturn (internalArray);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,298, The starting index in the InternalArray.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,299, @return starting index.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,301,ublic int start() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,302,eturn 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,306, Clear the array - drop all the data and start with a blank
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,307, internal array.  This implementation takes care of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,308," setting the size of the array back to zero, and reinitializing"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,309, the internal storage array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,311, @see org.apache.commons.math.util.DoubleArray#clear()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,313,ublic void clear() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,314,ize = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,315,extAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,316,nternalArray = new double[maxElements];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,16,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,21,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,22,* A variable length {@link DoubleArray} implementation that automatically
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,23,* handles expanding and contracting its internal storage array as elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,24,* are added and removed.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,25,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,26,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,27,*  The internal storage array starts with capacity determined by the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,28,"* <code>initialCapacity</code> property, which can be set by the constructor."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,29,* The default initial capacity is 16.  Adding elements using
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,30,* {@link #addElement(double)} appends elements to the end of the array.  When
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,31,"* there are no open entries at the end of the internal storage array, the"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,32,* array is expanded.  The size of the expanded array depends on the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,33,* <code>expansionMode</code> and <code>expansionFactor</code> properties.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,34,* The <code>expansionMode</code> determines whether the size of the array is
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,35,* multiplied by the <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,36,* the expansion is additive (ADDITIVE_MODE -- <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,37,* storage locations added).  The default <code>expansionMode</code> is
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,38,* MULTIPLICATIVE_MODE and the default <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,39,* is 2.0.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,40,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,41,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,42,* The {@link #addElementRolling(double)} method adds a new element to the end
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,43,"* of the internal storage array and adjusts the ""usable window"" of the"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,44,* internal array forward by one position (effectively making what was the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,45,"* second element the first, and so on).  Repeated activations of this method"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,46,* (or activation of {@link #discardFrontElements(int)}) will effectively orphan
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,47,* the storage locations at the beginning of the internal storage array.  To
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,48,"* reclaim this storage, each time one of these methods is activated, the size"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,49,* of the internal storage array is compared to the number of addressable
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,50,* elements (the <code>numElements</code> property) and if the difference
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,51,"* is too large, the internal array is contracted to size"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,52,* <code>numElements + 1.</code>  The determination of when the internal
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,53,"* storage array is ""too large"" depends on the <code>expansionMode</code> and"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,54,* <code>contractionFactor</code> properties.  If  the <code>expansionMode</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,55,"* is <code>MULTIPLICATIVE_MODE</code>, contraction is triggered when the"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,56,* ratio between storage array length and <code>numElements</code> exceeds
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,57,* <code>contractionFactor.</code>  If the <code>expansionMode</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,58,"* is <code>ADDITIVE_MODE,</code> the number of excess storage locations"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,59,* is compared to <code>contractionFactor.</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,60,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,61,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,62,"* To avoid cycles of expansions and contractions, the"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,63,* <code>expansionFactor</code> must not exceed the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,64,* <code>contractionFactor.</code> Constructors and mutators for both of these
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,65,"* properties enforce this requirement, throwing IllegalArgumentException if it"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,66,* is violated.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,67,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,68,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,69,* @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,71,"public class ResizableDoubleArray implements DoubleArray, Serializable {"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,73,/** Serializable version identifier */
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,74,static final long serialVersionUID = -3485529955529426875L;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,76,/** additive expansion mode */
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,77,public static final int ADDITIVE_MODE = 1;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,79,/** multiplicative expansion mode */
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,80,public static final int MULTIPLICATIVE_MODE = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,83,* The contraction criteria determines when the internal array will be
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,84,* contracted to fit the number of elements contained in the element
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,85,*  array + 1.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,87,protected float contractionCriteria = 2.5f;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,90,"* The expansion factor of the array.  When the array needs to be expanded,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,91,* the new array size will be
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,92,* <code>internalArray.length * expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,93,"* if <code>expansionMode</code> is set to MULTIPLICATIVE_MODE, or"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,94,* <code>internalArray.length + expansionFactor</code> if
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,95,* <code>expansionMode</code> is set to ADDITIVE_MODE.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,97,protected float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,100,* Determines whether array expansion by <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,101,* is additive or multiplicative.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,103,protected int expansionMode = MULTIPLICATIVE_MODE;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,106,* The initial capacity of the array.  Initial capacity is not exposed as a
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,107,* property as it is only meaningful when passed to a constructor.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,109,protected int initialCapacity = 16;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,112,* The internal storage array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,114,protected double[] internalArray;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,117,* The number of addressable elements in the array.  Note that this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,118,* has nothing to do with the length of the internal storage array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,120,protected int numElements = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,123,* The position of the first addressable element in the internal storage
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,124,* array.  The addressable elements in the array are <code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,125,"* internalArray[startIndex],...,internalArray[startIndex + numElements -1]"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,126,* </code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,128,protected int startIndex = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,131,* Create a ResizableArray with default properties.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,132,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,133,* <li><code>initialCapacity = 16</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,134,* <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,135,* <li><code>expansionFactor = 2.5</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,136,* <li><code>contractionFactor = 2.0</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,137,* </ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,139,public ResizableDoubleArray() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,140,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,144,* Create a ResizableArray with the specified initial capacity.  Other
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,145,* properties take default values:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,146,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,147,* <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,148,* <li><code>expansionFactor = 2.5</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,149,* <li><code>contractionFactor = 2.0</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,150,* </ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,151,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,152,* @throws IllegalArgumentException if initialCapacity is not > 0
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,154,public ResizableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,155,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,156,internalArray = new double[this.initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,160,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,161,* Create a ResizableArray with the specified initial capacity
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,162,* and expansion factor.  The remaining properties take default
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,163,* values:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,164,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,165,* <li><code>expansionMode = MULTIPLICATIVE_MODE</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,166,* <li><code>contractionFactor = 0.5 + expansionFactor</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,167,* </ul></p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,168,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,169,* Throws IllegalArgumentException if the following conditions are
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,170,* not met:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,171,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,172,* <li><code>initialCapacity > 0</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,173,* <li><code>expansionFactor > 1</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,174,* </ul></p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,176,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,177,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,178,*                        parameter
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,179,* @throws IllegalArgumentException if parameters are not valid
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,181,"public ResizableDoubleArray(int initialCapacity, float expansionFactor) {"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,182,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,183,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,184,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,185,setContractionCriteria(expansionFactor +0.5f);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,189,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,190,"* Create a ResizableArray with the specified initialCapacity,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,191,"* expansionFactor, and contractionCriteria. The <code>expansionMode</code>"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,192,* will default to <code>MULTIPLICATIVE_MODE.</code></p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,193,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,194,* Throws IllegalArgumentException if the following conditions are
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,195,* not met:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,196,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,197,* <li><code>initialCapacity > 0</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,198,* <li><code>expansionFactor > 1</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,199,* <li><code>contractionFactor >= expansionFactor</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,200,* </ul></p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,201,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,202,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,203,*                        parameter
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,204,* @param contractionCriteria The contraction Criteria.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,205,* @throws IllegalArgumentException if parameters are not valid
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,207,"public ResizableDoubleArray(int initialCapacity, float expansionFactor,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,208,float contractionCriteria) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,209,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,210,setContractionCriteria(contractionCriteria);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,211,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,212,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,216,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,217,* Create a ResizableArray with the specified properties.</p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,218,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,219,* Throws IllegalArgumentException if the following conditions are
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,220,* not met:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,221,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,222,* <li><code>initialCapacity > 0</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,223,* <li><code>expansionFactor > 1</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,224,* <li><code>contractionFactor >= expansionFactor</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,225,"* <li><code>expansionMode in {MULTIPLICATIVE_MODE, ADDITIVE_MODE}</code>"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,226,* </li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,227,* </ul></p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,229,* @param initialCapacity the initial size of the internal storage array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,230,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,231,*                        parameter
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,232,* @param contractionCriteria the contraction Criteria
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,233,* @param expansionMode  the expansion mode
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,234,* @throws IllegalArgumentException if parameters are not valid
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,236,"public ResizableDoubleArray(int initialCapacity, float expansionFactor,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,237,"float contractionCriteria, int expansionMode) {"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,238,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,239,setContractionCriteria(contractionCriteria);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,240,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,241,setExpansionMode(expansionMode);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,242,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,246,* Adds an element to the end of this expandable array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,248,* @param value to be added to end of array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,250,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,251,numElements++;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,252,if ((startIndex + numElements) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,253,expand();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,255,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,256,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,257,contract();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,262,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,263,* Adds an element to the end of the array and removes the first
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,264,* element in the array.  Returns the discarded first element.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,265,* The effect is similar to a push operation in a FIFO queue.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,266,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,267,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,268,"* Example: If the array contains the elements 1, 2, 3, 4 (in that order)"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,269,"* and addElementRolling(5) is invoked, the result is an array containing"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,270,"* the entries 2, 3, 4, 5 and the value returned is 1."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,271,* </p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,273,* @param value the value to be added to the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,274,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,275,*         by this rolling insert
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,277,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,278,double discarded = internalArray[startIndex];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,280,if ((startIndex + (numElements + 1)) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,281,expand();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,283,// Increment the start index
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,284,startIndex += 1;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,286,// Add the new value
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,287,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,289,// Check the contraction criteria
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,290,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,291,contract();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,293,return discarded;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,297,* Checks the expansion factor and the contraction criteria and throws an
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,298,* IllegalArgumentException if the contractionCriteria is less than the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,299,* expansionCriteria
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,301,* @param expansionFactor factor to be checked
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,302,* @param contractionCritera critera to be checked
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,303,* @throws IllegalArgumentException if the contractionCriteria is less than
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,304,*         the expansionCriteria.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,306,protected void checkContractExpand(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,307,"float contractionCritera,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,308,float expansionFactor) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,310,if (contractionCritera < expansionFactor) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,311,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,312,"""Contraction criteria can never be smaller than "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,313,"""the expansion factor.  This would lead to a never "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,314,"""ending loop of expansion and contraction as a newly "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,315,"""expanded internal storage array would immediately "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,316,"""satisfy the criteria for contraction"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,317,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,320,if (contractionCriteria <= 1.0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,321,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,322,"""The contraction criteria must be a number larger "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,323,"""than one.  If the contractionCriteria is less than or "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,324,"""equal to one an endless loop of contraction and "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,325,"""expansion would ensue as an internalArray.length "" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,326,"""== numElements would satisfy the contraction criteria"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,327,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,330,if (expansionFactor <= 1.0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,331,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,332,"""The expansion factor must be a number greater than 1.0"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,333,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,338,"* Clear the array, reset the size to the initialCapacity and the number"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,339,* of elements to zero.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,341,public synchronized void clear() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,342,numElements = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,343,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,347,* Contracts the storage array to the (size of the element set) + 1 - to
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,348,* avoid a zero length array. This function also resets the startIndex to
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,349,* zero.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,351,public synchronized void contract() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,352,double[] tempArray = new double[numElements + 1];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,// Copy and swap - copy only the element array from the src array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,355,"System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,356,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,358,// Reset the start index to zero
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,359,startIndex = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,363,"* Discards the <code>i<code> initial elements of the array.  For example,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,364,"* if the array contains the elements 1,2,3,4, invoking"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,365,* <code>discardFrontElements(2)</code> will cause the first two elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,366,"* to be discarded, leaving 3,4 in the array.  Throws illegalArgumentException"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,367,* if i exceeds numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,369,* @param i  the number of elements to discard from the front of the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,370,* @throws IllegalArgumentException if i is greater than numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,372,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,373,if (i > numElements) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,374,"String msg = ""Cannot discard more elements than are"" +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,375,"""contained in this array."";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,376,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,377,} else if (i < 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,378,"String msg = ""Cannot discard a negative number of elements."";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,379,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,380,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,381,"// ""Subtract"" this number of discarded from numElements"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,382,numElements -= i;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,383,startIndex += i;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,385,if (shouldContract()) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,386,contract();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,391,* Expands the internal storage array using the expansion factor.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,392,* <p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,393,"* if <code>expansionMode</code> is set to MULTIPLICATIVE_MODE,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,394,* the new array size will be <code>internalArray.length * expansionFactor.</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,395,"* If <code>expansionMode</code> is set to ADDITIVE_MODE,  the length"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,396,* after expansion will be <code>internalArray.length + expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,398,protected synchronized void expand() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,400,"// notice the use of Math.ceil(), this gaurantees that we will always"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,401,// have an array of at least currentSize + 1.   Assume that the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,402,// current initial capacity is 1 and the expansion factor
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,403,// is 1.000000000000000001.  The newly calculated size will be
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,404,// rounded up to 2 after the multiplication is performed.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,405,int newSize = 0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,406,if (expansionMode == MULTIPLICATIVE_MODE) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,407,newSize = (int) Math.ceil(internalArray.length * expansionFactor);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,408,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,409,newSize = internalArray.length + Math.round(expansionFactor);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,411,double[] tempArray = new double[newSize];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,413,// Copy and swap
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,414,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,415,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,419,* Expands the internal storage array to the specified size.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,421,* @param size Size of the new internal storage array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,423,private synchronized void expandTo(int size) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,424,double[] tempArray = new double[size];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,425,// Copy and swap
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,426,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,427,internalArray = tempArray;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,431,* The contraction criteria defines when the internal array will contract
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,432,* to store only the number of elements in the element array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,433,"* If  the <code>expansionMode</code> is <code>MULTIPLICATIVE_MODE</code>,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,434,* contraction is triggered when the ratio between storage array length
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,435,* and <code>numElements</code> exceeds <code>contractionFactor</code>.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,436,"* If the <code>expansionMode</code> is <code>ADDITIVE_MODE</code>, the"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,437,* number of excess storage locations is compared to
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,438,* <code>contractionFactor.</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,440,* @return the contraction criteria used to reclaim memory.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,442,public float getContractionCriteria() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,443,return contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,447,* Returns the element at the specified index
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,449,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,450,* @return value stored at the specified index
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,451,* @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,452,*         zero or is greater than <code>getNumElements() - 1</code>.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,454,public double getElement(int index) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,455,double value = Double.NaN;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,456,if (index >= numElements) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,457,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,458,"""The index specified: "" + index +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,459,""" is larger than the current number of elements"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,460,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,461,} else if (index >= 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,462,value = internalArray[startIndex + index];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,463,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,464,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,465,"""Elements cannot be retrieved from a negative array index"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,466,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,468,return value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,472,* Returns a double[] array containing the elements of this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,473,"* <code>ResizableArray</code>.  This method returns a copy, not a"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,474,"* reference to the underlying array, so that changes made to the returned"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,475,*  array have no effect on this <code>ResizableArray.</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,477,public double[] getElements() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,478,double[] elementArray = new double[numElements];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,479,"System.arraycopy( internalArray, startIndex, elementArray, 0,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,480,numElements);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,481,return elementArray;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,485,* The expansion factor controls the size of a new aray when an array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,486,* needs to be expanded.  The <code>expansionMode</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,487,* determines whether the size of the array is multiplied by the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,488,* <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,489,* the expansion is additive (ADDITIVE_MODE -- <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,490,* storage locations added).  The default <code>expansionMode</code> is
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,491,* MULTIPLICATIVE_MODE and the default <code>expansionFactor</code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,492,* is 2.0.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,494,* @return the expansion factor of this expandable double array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,496,public float getExpansionFactor() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,497,return expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,501,* The <code>expansionMode</code> determines whether the internal storage
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,502,* array grows additively (ADDITIVE_MODE) or multiplicatively
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,503,* (MULTIPLICATIVE_MODE) when it is expanded.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,505,* @return Returns the expansionMode.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,507,public int getExpansionMode() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,508,return expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,512,* Notice the package scope on this method.   This method is simply here
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,513,"* for the JUnit test, it allows us check if the expansion is working"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,514,* properly after a number of expansions.  This is not meant to be a part
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,515,* of the public interface of this class.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,517,* @return the length of the internal storage array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,519,int getInternalLength() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,520,return (internalArray.length);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,524,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,525,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,527,* @return number of elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,529,public int getNumElements() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,530,return (numElements);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,534,* Returns the internal storage array.  Note that this method returns
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,535,"* a reference to the internal storage array, not a copy, and to correctly"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,536,"* address elements of the array, the <code>startIndex</code> is"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,537,* required (available via the {@link #start} method).  This method should
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,538,* only be used in cases where copying the internal array is not practical.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,539,* The {@link #getElements} method should be used in all other cases.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,542,* @return the internal storage array used by this object
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,544,public double[] getValues() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,545,return (internalArray);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,549,* Sets the contraction criteria for this ExpandContractDoubleArray.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,551,* @param contractionCriteria contraction criteria
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,553,public void setContractionCriteria(float contractionCriteria) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,554,"checkContractExpand(contractionCriteria, getExpansionFactor());"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,555,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,560,* Sets the element at the specified index.  If the specified index is greater than
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,561,"* <code>getNumElements() - 1</code>, the <code>numElements</code> property"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,562,* is increased to <code>index +1</code> and additional storage is allocated
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,563,* (if necessary) for the new element and all  (uninitialized) elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,564,* between the new element and the previous end of the array).
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,566,* @param index index to store a value in
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,567,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,568,* @throws ArrayIndexOutOfBoundsException if <code>index</code> is less than
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,569,*         zero.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,571,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,572,if (index < 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,573,"String msg = ""Cannot set an element at a negative index"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,574,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,576,if (index + 1 > numElements) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,577,numElements = index + 1;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,579,if ((startIndex + index) >= internalArray.length) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,580,expandTo(startIndex + (index + 1));
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,582,internalArray[startIndex + index] = value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,586,* Sets the expansionFactor.  Throws IllegalArgumentException if the
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,587,* the following conditions are not met:
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,588,* <ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,589,* <li><code>expansionFactor > 1</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,590,* <li><code>contractionFactor >= expansionFactor</code></li>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,591,* </ul>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,593,* @throws IllegalArgumentException if expansionFactor is <= 1 or greater
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,594,* than contractionFactor
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,596,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,597,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,598,// The check above verifies that the expansion factor is > 1.0;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,599,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,603,* Sets the <code>expansionMode</code>. The specified value must be one of
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,604,"* ADDITIVE_MODE, MULTIPLICATIVE_MODE."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,606,* @param expansionMode The expansionMode to set.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,607,* @throws IllegalArgumentException if the specified mode value is not valid
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,609,public void setExpansionMode(int expansionMode) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,610,if (expansionMode != MULTIPLICATIVE_MODE &&
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,611,expansionMode != ADDITIVE_MODE) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,612,"throw new IllegalArgumentException(""Illegal expansionMode setting."");"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,614,this.expansionMode = expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,618,* Sets the initial capacity.  Should only be invoked by constructors.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,620,* @param initialCapacity of the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,621,* @throws IllegalArgumentException if <code>initialCapacity</code> is not
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,622,*         positive.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,624,protected void setInitialCapacity(int initialCapacity) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,625,if (initialCapacity > 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,626,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,627,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,628,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,629,"""The initial capacity supplied: "" + initialCapacity +"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,630,"""must be a positive integer"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,631,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,636,* This function allows you to control the number of elements contained
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,637,"* in this array, and can be used to ""throw out"" the last n values in an"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,638,* array. This function will also expand the internal array as needed.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,640,* @param i a new number of elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,641,* @throws IllegalArgumentException if <code>i</code> is negative.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,643,public synchronized void setNumElements(int i) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,645,// If index is negative thrown an error
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,646,if (i < 0) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,647,String msg =
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,648,"""Number of elements must be zero or a positive "" + ""integer"";"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,649,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,652,"// Test the new num elements, check to see if the array needs to be"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,653,// expanded to accomodate this new number of elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,654,if ((startIndex + i) > internalArray.length) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,655,expandTo(startIndex + i);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,658,// Set the new number of elements to new value
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,659,numElements = i;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,663,* Returns true if the internal storage array has too many unused
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,664,* storage positions.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,666,* @return true if array satisfies the contraction criteria
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,668,private synchronized boolean shouldContract() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,669,if (expansionMode == MULTIPLICATIVE_MODE) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,670,return (internalArray.length / numElements) > contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,671,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,672,return (internalArray.length - numElements) > contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,677,* Returns the starting index of the internal array.  The starting index is
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,678,* the position of the first addressable element in the internal storage
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,679,* array.  The addressable elements in the array are <code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,680,"* internalArray[startIndex],...,internalArray[startIndex + numElements -1]"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,681,* </code>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,683,* @return starting index
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,685,public int start() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,686,return startIndex;
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,16,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,20, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,22, @version $Revision: 1.9 $ $Date: 2004/05/04 13:15:47 $
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,24,ublic class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,26,ublic ContractableDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,27,uper( name );
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,30,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,31, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,33,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,34,a = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,35,a = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,38,rotected ExpandableDoubleArray newInstance(int initialCapacity) {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,39,eturn new ContractableDoubleArray(initialCapacity);
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,42,rotected ExpandableDoubleArray newInstance() {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,43,eturn new ContractableDoubleArray();
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,46,"rotected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,47,f (expansionFactor < 2.5f) {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,48,"eturn new ContractableDoubleArray(initialCapacity, expansionFactor);"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,49, else {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,50,"eturn newInstance(initialCapacity, expansionFactor, expansionFactor + 1.0f);"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,54,"rotected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor, float contractionFactor) {"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,55,"eturn new ContractableDoubleArray(initialCapacity, expansionFactor, contractionFactor);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,16,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,20, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,22, @version $Revision: 1.10 $ $Date: 2004/05/04 13:15:47 $
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,24,ublic class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,26,ublic ExpandableDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,27,uper( name );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,30,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,31, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,33,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,34,a = newInstance();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,35,a = newInstance();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,38,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,39, @see junit.framework.TestCase#tearDown()
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,41,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,42,a = null;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,43,a = null;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,47,** TEST NORMAL OPERATIONS - calling super class test and then checking internal
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,48,   storage **/
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,51,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,52,"ouble[] controlArray = {2.0, 4.0, 6.0};"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,54,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,55,a.addElement(4.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,56,a.addElement(6.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,57,"a.setElement(1, 3.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,59,/ Expand the array arbitrarily to 1000 items
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,60,"a.setElement(1000, 3.4);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,62,"ssertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,64,"ssertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,65,"a.getElement( 760 ), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,67,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,68,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,72,ublic void testAdd1000() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,73,uper.testAdd1000();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,74,"ssertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,75,"16 and an expansion factor of 2.0"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,76,"024, ((ExpandableDoubleArray) da).getInternalLength());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,79,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,80,uper.testAddElementRolling();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,83,ublic void testSetNumberOfElements() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,84,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,85,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,86,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,87,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,88,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,89,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,90,"ssertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,92,(ExpandableDoubleArray) da).setNumElements( 3 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,93,"ssertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,95,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,96,(ExpandableDoubleArray) da).setNumElements( -3 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,97,"ail( ""Setting number of elements to negative should've thrown an exception"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,98, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,101,(ExpandableDoubleArray) da).setNumElements(1024);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,102,"ssertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,103,"ssertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,107,** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,109,ublic void testWithInitialCapacity() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,111,xpandableDoubleArray eDA2 = newInstance(2);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,112,"ssertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,114,"nt iterations = (int) Math.pow(2.0, 15.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,116,or( int i = 0; i < iterations; i++) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,117,DA2.addElement( i );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,120,"ssertEquals(""Number of elements should be equal to 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,122,DA2.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,124,"ssertEquals(""Number of elements should be equals to 2^15 + 1"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,125," (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,128,ublic void testWithInitialCapacityAndExpansionFactor() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,130,"xpandableDoubleArray eDA3 = newInstance(3, 3.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,131,"ssertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,133,"nt iterations = (int) Math.pow(3.0, 7.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,135,or( int i = 0; i < iterations; i++) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,136,DA3.addElement( i );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,139,"ssertEquals(""Number of elements should be equal to 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,141,DA3.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,143,"ssertEquals(""Number of elements should be equals to 3^7 + 1"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,144," (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,146,"ssertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,149,ublic void testDiscard() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,150,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,151,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,152,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,153,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,154,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,155,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,156,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,157,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,158,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,159,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,160,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,161,"ssertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,163,(ExpandableDoubleArray)da).discardFrontElements(5);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,164,"ssertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,166,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,167,(ExpandableDoubleArray)da).discardFrontElements(-1);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,168,"ail( ""Trying to discard a negative number of element is not allowed"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,169, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,172,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,173,(ExpandableDoubleArray)da).discardFrontElements( 10000 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,174,"ail( ""You can't discard more elements than the array contains"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,175, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,180,** TEST ERROR CONDITIONS **/
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,182,ublic void testIllegalInitialCapacity() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,183,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,184,"xpandableDoubleArray eDA = newInstance(-3, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,185,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,188, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,190,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,191,"xpandableDoubleArray eDA = newInstance(0, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,192,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,193,"the initialCapacity was ZERO if it didn't then"" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,194," the range checking of initialCapacity is not working properly"" );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,195, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,199,ublic void testIllegalExpansionFactor() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,200,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,201,"xpandableDoubleArray eDA = newInstance(3, 0.66f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,202,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,204, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,206,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,207,"xpandableDoubleArray eDA = newInstance(3, 0.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,208,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,209,"the expansionFactor for 0.0"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,210, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,213,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,214,"xpandableDoubleArray eDA = newInstance(3, -4.35f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,215,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,216,"the expansionFactor for -4.35"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,217, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,221,ublic void testSetOutOfBounds() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,222,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,223,"a.setElement( -1, 2.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,224,"ail( ""Cannot set a negative index"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,225, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,229,ublic void testGetOutOfBounds() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,230,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,231,a.getElement(10000);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,232,"ail( ""Cannot get an element that is larger than the number of elements"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,233, catch( Exception e ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,236,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,237,a.getElement(-3);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,238,"ail(""Cannot get a negative index"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,239, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,243,rotected ExpandableDoubleArray newInstance(int initialCapacity) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,244,eturn new ExpandableDoubleArray(initialCapacity);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,247,rotected ExpandableDoubleArray newInstance() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,248,eturn new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,251,"rotected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,252,"eturn new ExpandableDoubleArray(initialCapacity, expansionFactor);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,2, Copyright 2003-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,16,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,20, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,22, @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:18 $
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,24,ublic class FixedDoubleArrayTest extends DoubleArrayAbstractTest {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,26,ublic FixedDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,27,uper( name );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,30,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,31, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,33,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,34,a = new FixedDoubleArray(4000);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,37,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,38, @see junit.framework.TestCase#tearDown()
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,40,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,41,a = null;
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,45,** TEST NORMAL OPERATIONS - calling super class test and then checking internal
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,46,   storage **/
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,48,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,49,a = new FixedDoubleArray(6);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,51,uper.testAddElementRolling();
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,53,"ssertEquals( ""FixedDoubleArray should have 6 size internal storage"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,54,", ((FixedDoubleArray) ra).getValues().length);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,57,ublic void testExceedingElements() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,59,or( int i = 0; i < 3999; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,60,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,63,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,65,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,66,a.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,67,"ail( "" Adding more than 4000 elements should cause an exception "");"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,68, catch( Exception e ) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,71,a.addElementRolling(2.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,72,"ssertEquals( ""This is the first rolling add, the first element should be 2.0"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,73,".0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,76,ublic void testGetExceeding() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,77,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,78,a.getElement(100);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,79,"ail( ""I haven't added 100 elements to the list yet, trying to getElement(100) should "" +"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,81, catch (Exception e ){
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,86,ublic void testSetElement() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,87,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,88,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,89,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,90,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,91,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,92,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,93,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,95,"a.setElement( 2, 4.0 );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,96,"ssertEquals( ""Index 2 should be 4.0"", 4.0, da.getElement(2), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,98,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,99,"a.setElement(2000, 45.0);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,100,"ail( ""The array does not contain 2000 elements yet, setting this element should"" +"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,102, catch(Exception e) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,107,ublic void testOnlyRolling() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,108,or( int i = 0; i < 8000; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,109,a.addElementRolling( i );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,112,"ssertEquals( ""The 2000th element should equal 6000"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,113,"000.0, da.getElement(2000), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,116,ublic void testClear() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,117,or( int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,118,a.addElementRolling(1.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,121,"ssertEquals( ""There should be ten elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,122,"0, da.getNumElements() );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,124,a.clear();
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,126,"ssertEquals( ""There should be zero elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,127,", da.getNumElements() );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,129,or( int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,130,a.addElementRolling(1.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,133,"ssertEquals( ""There should be ten elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,134,"0, da.getNumElements() );"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,16,package org.apache.commons.math.util;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,17,import org.apache.commons.math.random.RandomDataImpl;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,18,import org.apache.commons.math.random.RandomData;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,22,* This class contains test cases for the ResizableDoubleArray.
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,24,* @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,26,public class ResizableDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,28,public ResizableDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,29,super( name );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,32,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,33,da = null;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,34,ra = null;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,37,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,38,da = new ResizableDoubleArray();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,39,ra = new ResizableDoubleArray();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,42,public void testConstructors() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,43,float defaultExpansionFactor = 2.0f;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,44,float defaultContractionCriteria = 2.5f;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,45,int defaultMode = ResizableDoubleArray.MULTIPLICATIVE_MODE;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,47,ResizableDoubleArray testDa = new ResizableDoubleArray(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,48,"assertEquals(0, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,49,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,50,"assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,51,"assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,52,"assertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,53,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,54,da = new ResizableDoubleArray(-1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,55,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,56,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,57,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,60,"testDa = new ResizableDoubleArray(2, 2.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,61,"assertEquals(0, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,62,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,63,"assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,64,"assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,65,"assertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,67,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,68,"da = new ResizableDoubleArray(2, 0.5f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,69,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,70,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,71,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,74,"testDa = new ResizableDoubleArray(2, 3.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,75,"assertEquals(3.0f, testDa.getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,76,"assertEquals(3.5f, testDa.getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,78,"testDa = new ResizableDoubleArray(2, 2.0f, 3.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,79,"assertEquals(0, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,80,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,81,"assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,82,"assertEquals(3.0f, testDa.getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,83,"assertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,85,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,86,"da = new ResizableDoubleArray(2, 2.0f, 1.5f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,87,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,88,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,89,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,92,"testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,93,ResizableDoubleArray.ADDITIVE_MODE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,94,"assertEquals(0, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,95,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,96,"assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,97,"assertEquals(3.0f, testDa.getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,98,"assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,99,testDa.getExpansionMode());
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,101,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,102,"da = new ResizableDoubleArray(2, 2.0f, 2.5f, -1);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,103,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,104,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,105,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,111,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,113,// MULTIPLICATIVE_MODE
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,114,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,115,da.addElement(4.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,116,da.addElement(6.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,117,"da.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,119,// Expand the array arbitrarily to 1000 items
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,120,"da.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,122,"assertEquals( ""The number of elements should now be 1001, it isn't"","
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,123,"da.getNumElements(), 1001);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,125,"assertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,126,"da.getElement( 760 ), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,128,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000),"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,129,Double.MIN_VALUE );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,130,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0),"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,131,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,133,// Make sure numElements and expansion work correctly for expansion boundary cases
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,134,da.clear();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,135,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,136,da.addElement(4.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,137,da.addElement(6.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,138,"assertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,139,"assertEquals(3, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,140,"da.setElement(3, 7.0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,141,"assertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,142,"assertEquals(4, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,143,"da.setElement(10, 10.0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,144,"assertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,145,"assertEquals(11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,146,"da.setElement(9, 10.0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,147,"assertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,148,"assertEquals(11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,150,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,151,"da.setElement(-2, 3);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,152,"fail(""Expecting ArrayIndexOutOfBoundsException for negative index"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,153,} catch (ArrayIndexOutOfBoundsException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,154,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,157,// ADDITIVE_MODE
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,159,"ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,160,ResizableDoubleArray.ADDITIVE_MODE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,161,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,162,testDa.addElement(1d);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,163,testDa.addElement(1d);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,164,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,165,testDa.addElement(1d);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,166,"assertEquals(4, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,169,public void testAdd1000() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,170,super.testAdd1000();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,171,"assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,172,"""16 and an expansion factor of 2.0"","
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,173,"1024, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,176,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,177,super.testAddElementRolling();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,179,// MULTIPLICATIVE_MODE
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,180,da.clear();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,181,da.addElement(1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,182,da.addElement(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,183,da.addElementRolling(3);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,184,"assertEquals(3, da.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,185,da.addElementRolling(4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,186,"assertEquals(3, da.getElement(0), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,187,"assertEquals(4, da.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,188,da.addElement(5);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,189,"assertEquals(5, da.getElement(2), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,190,da.addElementRolling(6);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,191,"assertEquals(4, da.getElement(0), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,192,"assertEquals(5, da.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,193,"assertEquals(6, da.getElement(2), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,195,"// ADDITIVE_MODE  (x's are occupied storage locations, 0's are open)"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,196,"ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,197,ResizableDoubleArray.ADDITIVE_MODE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,198,"assertEquals(2, testDa.getInternalLength());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,199,"testDa.addElement(1d); // x,0"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,200,"testDa.addElement(2d); // x,x"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,201,"testDa.addElement(3d); // x,x,x,0 -- expanded"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,202,"assertEquals(1d, testDa.getElement(0), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,203,"assertEquals(2d, testDa.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,204,"assertEquals(3d, testDa.getElement(2), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,205,"assertEquals(4, testDa.getInternalLength());  // x,x,x,0"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,206,"assertEquals(3, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,207,testDa.addElementRolling(4d);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,208,"assertEquals(2d, testDa.getElement(0), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,209,"assertEquals(3d, testDa.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,210,"assertEquals(4d, testDa.getElement(2), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,211,"assertEquals(4, testDa.getInternalLength());  // 0,x,x,x"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,212,"assertEquals(3, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,213,"testDa.addElementRolling(5d);   // 0,0,x,x,x,0 -- time to contract"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,214,"assertEquals(3d, testDa.getElement(0), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,215,"assertEquals(4d, testDa.getElement(1), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,216,"assertEquals(5d, testDa.getElement(2), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,217,"assertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,218,"assertEquals(3, testDa.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,219,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,220,testDa.getElement(4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,221,"fail(""Expecting ArrayIndexOutOfBoundsException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,222,} catch (ArrayIndexOutOfBoundsException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,223,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,225,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,226,testDa.getElement(-1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,227,"fail(""Expecting ArrayIndexOutOfBoundsException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,228,} catch (ArrayIndexOutOfBoundsException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,229,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,233,public void testSetNumberOfElements() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,234,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,235,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,236,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,237,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,238,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,239,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,240,"assertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,242,((ResizableDoubleArray) da).setNumElements( 3 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,243,"assertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,245,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,246,((ResizableDoubleArray) da).setNumElements( -3 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,247,"fail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,248,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,251,((ResizableDoubleArray) da).setNumElements(1024);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,252,"assertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,253,"assertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,257,public void testWithInitialCapacity() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,259,ResizableDoubleArray eDA2 = new ResizableDoubleArray(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,260,"assertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,262,RandomData randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,263,"int iterations = randomData.nextInt(100, 1000);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,265,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,266,eDA2.addElement( i );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,269,"assertEquals(""Number of elements should be equal to "" + iterations, iterations, eDA2.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,271,eDA2.addElement( 2.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,273,"assertEquals(""Number of elements should be equals to "" + (iterations +1),"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,274,"iterations + 1 , eDA2.getNumElements() );"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,277,public void testWithInitialCapacityAndExpansionFactor() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,279,"ResizableDoubleArray eDA3 = new ResizableDoubleArray(3, 3.0f, 3.5f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,280,"assertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,282,RandomData randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,283,"int iterations = randomData.nextInt(100, 3000);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,285,for( int i = 0; i < iterations; i++) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,286,eDA3.addElement( i );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,289,"assertEquals(""Number of elements should be equal to "" + iterations, iterations,eDA3.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,291,eDA3.addElement( 2.0 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,293,"assertEquals(""Number of elements should be equals to "" + (iterations +1),"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,294,"iterations +1, eDA3.getNumElements() );"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,296,"assertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,299,public void testDiscard() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,300,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,301,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,302,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,303,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,304,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,305,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,306,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,307,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,308,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,309,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,310,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,311,"assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,313,((ResizableDoubleArray)da).discardFrontElements(5);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,314,"assertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,316,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,317,((ResizableDoubleArray)da).discardFrontElements(-1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,318,"fail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,319,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,322,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,323,((ResizableDoubleArray)da).discardFrontElements( 10000 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,324,"fail( ""You can't discard more elements than the array contains"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,325,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,329,public void testMutators() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,330,((ResizableDoubleArray)da).setContractionCriteria(10f);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,331,"assertEquals(10f, ((ResizableDoubleArray)da).getContractionCriteria(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,332,((ResizableDoubleArray)da).setExpansionFactor(8f);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,333,"assertEquals(8f, ((ResizableDoubleArray)da).getExpansionFactor(), 0);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,334,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,335,((ResizableDoubleArray)da).setExpansionFactor(11f);  // greater than contractionCriteria
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,336,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,337,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,338,// expected
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,340,((ResizableDoubleArray)da).setExpansionMode(
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,341,ResizableDoubleArray.ADDITIVE_MODE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,342,"assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,343,((ResizableDoubleArray)da).getExpansionMode());
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,344,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,345,((ResizableDoubleArray)da).setExpansionMode(-1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,346,"fail (""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,347,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,348,// expected

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,26,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,42,* RandomData instance used to generate samples from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,43,"* @deprecated As of 3.1, to be removed in 4.0. Please use the"
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,44,* {@link #random} instance variable instead.
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,46,protected final RandomDataImpl randomData = new RandomDataImpl();
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,47,/** RNG instance used to generate samples from the distribution. */
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,48,protected final RandomGenerator random;
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,42, RandomData instance used to generate samples from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,51,"* @deprecated As of 3.1, to be removed in 4.0. Please use"
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,52,* {@link #AbstractIntegerDistribution(RandomGenerator)} instead.
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,44,rotected final RandomDataImpl randomData = new RandomDataImpl();
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,46,** Default constructor. */
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,47,rotected AbstractIntegerDistribution() { }
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,54,@Deprecated
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,55,protected AbstractIntegerDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,56,"// Legacy users are only allowed to access the deprecated ""randomData""."
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,57,// New users are forbidden to use this constructor.
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,58,random = null;
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,61,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,63,protected AbstractIntegerDistribution(RandomGenerator rng) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,64,random = rng;
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,155,andomData.reSeed(seed);
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,173,random.setSeed(seed);
False,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,166,eturn randomData.nextInversionDeviate(this);
True,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java,184,return inverseCumulativeProbability(random.nextDouble());
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,27,import org.apache.commons.math3.random.RandomGenerator;
False,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,46,** RandomData instance used to generate samples from the distribution. */
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,46,* RandomData instance used to generate samples from the distribution.
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,47,"* @deprecated As of 3.1, to be removed in 4.0. Please use the"
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,48,* {@link #random} instance variable instead.
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,51,/** RNG instance used to generate samples from the distribution. */
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,52,protected final RandomGenerator random;
False,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,52,** Default constructor. */
False,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,53,rotected AbstractRealDistribution() { }
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,57,"* @deprecated As of 3.1, to be removed in 4.0. Please use"
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,58,* {@link #AbstractRealDistribution(RandomGenerator)} instead.
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,60,@Deprecated
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,61,protected AbstractRealDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,62,"// Legacy users are only allowed to access the deprecated ""randomData""."
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,63,// New users are forbidden to use this constructor.
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,64,random = null;
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,67,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,69,protected AbstractRealDistribution(RandomGenerator rng) {
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,70,random = rng;
False,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,196,andomData.reSeed(seed);
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,214,random.setSeed(seed);
False,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,208,eturn randomData.nextInversionDeviate(this);
True,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java,226,return inverseCumulativeProbability(random.nextDouble());
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,24,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,25,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,54,* Build a new instance.
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,56,* @param alpha First shape parameter (must be positive).
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,57,* @param beta Second shape parameter (must be positive).
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,59,"public BetaDistribution(double alpha, double beta) {"
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,60,"this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,62,his.alpha = alpha;
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,63,his.beta = beta;
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,64, = Double.NaN;
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,65,olverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,74,"this(new Well19937c(), alpha, beta, inverseCumAccuracy);"
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,69, Build a new instance.
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,78,* Creates a &beta; distribution.
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,80,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,83,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,84,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,85,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,86,* @since 3.1
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,74,"ublic BetaDistribution(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,75,"his(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,88,"public BetaDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,89,"double alpha,"
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,90,"double beta,"
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,91,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,92,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,94,this.alpha = alpha;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,95,this.beta = beta;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,96,z = Double.NaN;
True,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java,97,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,24,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,25,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,52,"this(new Well19937c(), trials, p);"
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,56,* Creates a binomial distribution.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,58,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,59,* @param trials Number of trials.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,60,* @param p Probability of success.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,61,* @throws NotPositiveException if {@code trials < 0}.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,62,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,63,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,65,"public BinomialDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,66,"int trials,"
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,67,double p) {
True,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java,68,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,23,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,24,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,77,ouble inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,79,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,80,"this(new Well19937c(), median, scale, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,84,* Creates a Cauchy distribution.
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,86,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,87,* @param median Median for this distribution.
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,88,* @param scale Scale parameter for this distribution.
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,89,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,90,* cumulative probability estimates
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,91,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,92,* @throws NotStrictlyPositiveException if {@code scale <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,93,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,95,"public CauchyDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,96,"double median,"
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,97,"double scale,"
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,98,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java,99,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,19,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,20,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,59,ouble inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,62,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,63,"this(new Well19937c(), degreesOfFreedom, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,67,* Create a Chi-Squared distribution with the given degrees of freedom and
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,68,* inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,70,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,71,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,72,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,73,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,74,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,75,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,77,"public ChiSquaredDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,78,"double degreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,79,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,80,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,78, @return 0
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,100,* @return zero.
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,81,eturn 0.0;
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,103,return 0;
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,112," For {@code k} degrees of freedom, the variance is {@code 2 * k}."
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,114, @return {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,134,"* @return {@code 2 * k}, where {@code k} is the number of degrees of freedom."
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,126, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,146,* @return zero.
False,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,138, @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java,158,* @return {@code Double.POSITIVE_INFINITY}.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,23,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,24,import org.apache.commons.math3.util.ResizableDoubleArray;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,44,* Used when generating Exponential samples.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,45,* Table containing the constants
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,46,* q_i = sum_{j=1}^i (ln 2)^j/j! = ln 2 + (ln 2)^2/2 + ... + (ln 2)^i/i!
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,47,* until the largest representable fraction below 1 is exceeded.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,49,* Note that
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,50,* 1 = 2 - 1 = exp(ln 2) - 1 = sum_{n=1}^infty (ln 2)^n / n!
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,51,"* thus q_i -> 1 as i -> +inf,"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,52,"* so the higher i, the closer to one we get (the series is not alternating)."
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,54,"* By trying, n = 16 in Java is enough to reach 1.0."
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,56,private static final double[] EXPONENTIAL_SA_QI;
False,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,45, Create a exponential distribution with the given mean.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,63,* Initialize tables.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,65,static {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,67,* Filling EXPONENTIAL_SA_QI table.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,68,* Note that we don't want qi = 0 in the table.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,70,final double LN2 = FastMath.log(2);
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,71,double qi = 0;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,72,int i = 1;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,75,"* ArithmeticUtils provides factorials up to 20, so let's use that"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,76,* limit together with Precision.EPSILON to generate the following
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,77,"* code (a priori, we know that there will be 16 elements, but it is"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,78,* better to not hardcode it).
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,80,final ResizableDoubleArray ra = new ResizableDoubleArray(20);
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,82,while (qi < 1) {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,83,"qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,84,ra.addElement(qi);
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,85,++i;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,88,EXPONENTIAL_SA_QI = ra.getElements();
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,92,* Create an exponential distribution with the given mean.
False,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,53, Create a exponential distribution with the given mean.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,100,* Create an exponential distribution with the given mean.
False,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,62,"ublic ExponentialDistribution(double mean, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,109,"public ExponentialDistribution(double mean, double inverseCumAccuracy) {"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,110,"this(new Well19937c(), mean, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,114,* Creates an exponential distribution.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,116,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,117,* @param mean Mean of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,118,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,119,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,120,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,121,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,122,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,124,"public ExponentialDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,125,"double mean,"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,126,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,128,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,153,eturn randomData.nextExponential(mean);
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,219,// Step 1:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,220,double a = 0;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,221,double u = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,223,// Step 2 and 3:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,224,while (u < 0.5) {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,225,a += EXPONENTIAL_SA_QI[0];
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,226,u *= 2;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,229,// Step 4 (now u >= 0.5):
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,230,u += u - 1;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,232,// Step 5:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,233,if (u <= EXPONENTIAL_SA_QI[0]) {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,234,return mean * (a + u);
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,237,// Step 6:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,238,"int i = 0; // Should be 1, be we iterate before it in while using 0"
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,239,double u2 = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,240,double umin = u2;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,242,// Step 7 and 8:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,243,do {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,244,++i;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,245,u2 = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,247,if (u2 < umin) {
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,248,umin = u2;
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,251,// Step 8:
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,252,} while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1
True,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java,254,return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,24,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,25,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,58, Create a F distribution using the given degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,54,* Creates an F distribution using the given degrees of freedom.
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,66,ouble denominatorDegreesOfFreedom)
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,63,double denominatorDegreesOfFreedom)
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,73, Create an F distribution using the given degrees of freedom
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,70,* Creates an F distribution using the given degrees of freedom
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,79, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,86,"ouble denominatorDegreesOfFreedom,"
False,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,87,ouble inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,83,"double denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,84,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,85,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,86,"this(new Well19937c(), numeratorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,87,"denominatorDegreesOfFreedom, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,91,* Creates an F distribution.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,93,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,94,* @param numeratorDegreesOfFreedom Numerator degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,95,* @param denominatorDegreesOfFreedom Denominator degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,96,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,97,* cumulative probability estimates.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,98,* @throws NotStrictlyPositiveException if
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,99,* {@code numeratorDegreesOfFreedom <= 0} or
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,100,* {@code denominatorDegreesOfFreedom <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,101,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,103,"public FDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,104,"double numeratorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,105,"double denominatorDegreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,106,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,src/main/java/org/apache/commons/math3/distribution/FDistribution.java,108,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,23,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,24,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,109,"this(new Well19937c(), shape, scale, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,113,* Creates a Gamma distribution.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,115,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,116,* @param shape the shape parameter
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,117,* @param scale the scale parameter
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,118,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,119,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,120,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,121,* @throws NotStrictlyPositiveException if {@code shape <= 0} or
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,122,* {@code scale <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,123,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,125,"public GammaDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,126,"double shape,"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,127,"double scale,"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,128,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,129,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,130,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,363,"eturn randomData.nextGamma(shape, scale);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,379,if (shape < 1) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,380,"// [1]: p. 228, Algorithm GS"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,382,while (true) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,383,// Step 1:
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,384,final double u = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,385,final double bGS = 1 + shape / FastMath.E;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,386,final double p = bGS * u;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,388,if (p <= 1) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,389,// Step 2:
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,391,"final double x = FastMath.pow(p, 1 / shape);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,392,final double u2 = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,394,if (u2 > FastMath.exp(-x)) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,395,// Reject
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,396,continue;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,397,} else {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,398,return scale * x;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,400,} else {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,401,// Step 3:
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,403,final double x = -1 * FastMath.log((bGS - p) / shape);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,404,final double u2 = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,406,"if (u2 > FastMath.pow(x, shape - 1)) {"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,407,// Reject
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,408,continue;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,409,} else {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,410,return scale * x;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,416,// Now shape >= 1
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,418,final double d = shape - 0.333333333333333333;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,419,final double c = 1 / (3 * FastMath.sqrt(d));
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,421,while (true) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,422,final double x = random.nextGaussian();
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,423,final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,425,if (v <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,426,continue;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,429,final double x2 = x * x;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,430,final double u = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,432,// Squeeze
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,433,if (u < 1 - 0.0331 * x2 * x2) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,434,return scale * d * v;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,437,if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,438,return scale * d * v;
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,63,"this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,67,* Creates a new hypergeometric distribution.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,69,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,70,* @param populationSize Population size.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,71,* @param numberOfSuccesses Number of successes in the population.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,72,* @param sampleSize Sample size.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,73,* @throws NotPositiveException if {@code numberOfSuccesses < 0}.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,74,* @throws NotStrictlyPositiveException if {@code populationSize <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,75,"* @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,76,* or {@code sampleSize > populationSize}.
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,77,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,79,"public HypergeometricDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,80,"int populationSize,"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,81,"int numberOfSuccesses,"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,82,int sampleSize)
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,83,"throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,84,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,275,eturn ( n * m * (N - n) * (N - m) ) / ( (N * N * (N - 1)) );
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,295,return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
False,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,289,etSampleSize() + getNumberOfSuccesses() - getPopulationSize());
True,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java,309,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,79,"* Create a log-normal distribution, where the mean and standard deviation"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,80,* of the {@link NormalDistribution normally distributed} natural
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,81,* logarithm of the log-normal distribution are equal to zero and one
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,82,"* respectively. In other words, the scale of the returned distribution is"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,83,"* {@code 0}, while its shape is {@code 1}."
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,85,public LogNormalDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,86,"this(0, 1);"
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,97,"ublic LogNormalDistribution(double scale, double shape,"
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,98,ouble inverseCumAccuracy) throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,110,"public LogNormalDistribution(double scale, double shape, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,111,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,112,"this(new Well19937c(), scale, shape, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,116,* Creates a log-normal distribution.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,118,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,119,* @param scale Scale parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,120,* @param shape Shape parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,121,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,122,* @throws NotStrictlyPositiveException if {@code shape <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,124,"public LogNormalDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,125,"double scale,"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,126,"double shape,"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,127,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,128,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,129,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,109," Create a log-normal distribution, where the mean and standard deviation"
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,110, of the {@link NormalDistribution normally distributed} natural
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,111, logarithm of the log-normal distribution are equal to zero and one
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,112," respectively. In other words, the scale of the returned distribution is"
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,113," {@code 0}, while its shape is {@code 1}."
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,115,ublic LogNormalDistribution() {
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,116,"his(0, 1);"
False,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,288,"ouble n = randomData.nextGaussian(0, 1);"
True,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java,309,final double n = random.nextGaussian();
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,55,* Create a normal distribution with mean equal to zero and standard
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,56,* deviation equal to one.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,58,public NormalDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,59,"this(0, 1);"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,86,"this(new Well19937c(), mean, sd, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,90,* Creates a normal distribution.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,92,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,93,* @param mean Mean for this distribution.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,94,* @param sd Standard deviation for this distribution.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,95,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,96,* @throws NotStrictlyPositiveException if {@code sd <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,97,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,99,"public NormalDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,100,"double mean,"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,101,"double sd,"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,102,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,103,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,104,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,86, Create a normal distribution with mean equal to zero and standard
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,87, deviation equal to one.
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,89,ublic NormalDistribution() {
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,90,"his(0, 1);"
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,116, @return 0
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,138,* @return zero.
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,119,eturn 0.0;
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,141,return 0;
False,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,233,"eturn randomData.nextGaussian(mean, standardDeviation);"
True,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java,255,return standardDeviation * random.nextGaussian() + mean;
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,78," range [0, 1]"
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,80,"* range {@code [0, 1]}."
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,84,"this(new Well19937c(), r, p);"
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,88,* Create a Pascal distribution with the given number of successes and
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,89,* probability of success.
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,91,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,92,* @param r Number of successes.
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,93,* @param p Probability of success.
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,94,* @throws NotStrictlyPositiveException if the number of successes is not positive
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,95,* @throws OutOfRangeException if the probability of success is not in the
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,96,"* range {@code [0, 1]}."
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,97,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,99,"public PascalDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,100,"int r,"
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,101,double p)
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,102,"throws NotStrictlyPositiveException, OutOfRangeException {"
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,103,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,84,);
True,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java,107,r);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,23,import org.apache.commons.math3.util.ArithmeticUtils;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,50,/** Distribution needed for the {@link #sample()} method. */
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,51,private final ExponentialDistribution exponential;
False,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,56, probabilities are estimated using either Lanczos series approximation of
False,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,57," {@link Gamma#regularizedGammaP(double, double, double, int)}"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,57,* probabilities are estimated using either Lanczos series approximation
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,58,"* of {@link Gamma#regularizedGammaP(double, double, double, int)}"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,90,"this(new Well19937c(), p, epsilon, maxIterations);"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,94,"* Creates a new Poisson distribution with specified mean, convergence"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,95,* criterion and maximum number of iterations.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,97,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,98,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,99,* @param epsilon Convergence criterion for cumulative probabilities.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,100,* @param maxIterations the maximum number of iterations for cumulative
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,101,* probabilities.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,102,* @throws NotStrictlyPositiveException if {@code p <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,103,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,105,"public PoissonDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,106,"double p,"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,107,"double epsilon,"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,108,int maxIterations)
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,109,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,110,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,93,"ormal = new NormalDistribution(p, FastMath.sqrt(p));"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,119,// Use the same RNG instance as the parent class.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,120,"normal = new NormalDistribution(rng, p, FastMath.sqrt(p),"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,121,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,122,"exponential = new ExponentialDistribution(rng, 1,"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,123,ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,255,"eturn (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,283,"return (int) FastMath.min(nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,287,* @param meanPoisson Mean of the Poisson distribution.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,288,* @return the next sample.
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,290,private long nextPoisson(double meanPoisson) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,291,final double pivot = 40.0d;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,292,if (meanPoisson < pivot) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,293,double p = FastMath.exp(-meanPoisson);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,294,long n = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,295,double r = 1.0d;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,296,double rnd = 1.0d;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,298,while (n < 1000 * meanPoisson) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,299,rnd = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,300,r = r * rnd;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,301,if (r >= p) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,302,n++;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,303,} else {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,304,return n;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,307,return n;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,308,} else {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,309,final double lambda = FastMath.floor(meanPoisson);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,310,final double lambdaFractional = meanPoisson - lambda;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,311,final double logLambda = FastMath.log(lambda);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,312,final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,313,final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,314,final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,315,final double halfDelta = delta / 2;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,316,final double twolpd = 2 * lambda + delta;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,317,final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,318,final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,319,final double aSum = a1 + a2 + 1;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,320,final double p1 = a1 / aSum;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,321,final double p2 = a2 / aSum;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,322,final double c1 = 1 / (8 * lambda);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,324,double x = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,325,double y = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,326,double v = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,327,int a = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,328,double t = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,329,double qr = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,330,double qa = 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,331,for (;;) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,332,final double u = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,333,if (u <= p1) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,334,final double n = random.nextGaussian();
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,335,x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,336,if (x > delta || x < -lambda) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,337,continue;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,339,y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,340,final double e = exponential.sample();
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,341,v = -e - (n * n / 2) + c1;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,342,} else {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,343,if (u > p1 + p2) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,344,y = lambda;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,345,break;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,346,} else {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,347,x = delta + (twolpd / delta) * exponential.sample();
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,348,y = FastMath.ceil(x);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,349,v = -exponential.sample() - delta * (x + 1) / twolpd;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,352,a = x < 0 ? 1 : 0;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,353,t = y * (y + 1) / (2 * lambda);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,354,if (v < -t && a == 0) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,355,y = lambda + y;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,356,break;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,358,qr = t * ((2 * y + 1) / (6 * lambda) - 1);
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,359,qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,360,if (v < qa) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,361,y = lambda + y;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,362,break;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,364,if (v > qr) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,365,continue;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,367,if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,368,y = lambda + y;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,369,break;
True,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java,372,return y2 + (long) y;
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,24,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,25,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,48,* Create a t distribution using the given degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,50,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,51,* @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,53,public TDistribution(double degreesOfFreedom)
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,54,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,55,"this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,58,f (degreesOfFreedom <= 0) {
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,59,"hrow new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,60,egreesOfFreedom);
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,62,his.degreesOfFreedom = degreesOfFreedom;
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,63,olverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,71,"this(new Well19937c(), degreesOfFreedom, inverseCumAccuracy);"
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,67, Create a t distribution using the given degrees of freedom.
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,75,* Creates a t distribution.
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,77,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,79,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,80,* cumulative probability estimates
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,81,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,83,* @since 3.1
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,72,ublic TDistribution(double degreesOfFreedom)
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,85,"public TDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,86,"double degreesOfFreedom,"
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,87,double inverseCumAccuracy)
False,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,74,"his(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,89,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,91,if (degreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,92,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,93,degreesOfFreedom);
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,95,this.degreesOfFreedom = degreesOfFreedom;
True,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,src/main/java/org/apache/commons/math3/distribution/TDistribution.java,96,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,52," Create a triangular real distribution using the given lower limit,"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,50,"* Creates a triangular real distribution using the given lower limit,"
False,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,58, @throws NumberIsTooLargeException if {@code a >= b} or if {@code c > b}
False,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,59, @throws NumberIsTooSmallException if {@code c < a}
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,56,* @throws NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,57,* @throws NumberIsTooSmallException if {@code c < a}.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,61,"this(new Well19937c(), a, c, b);"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,65,* Creates a triangular distribution.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,67,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,68,* @param a Lower limit of this distribution (inclusive).
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,69,* @param b Upper limit of this distribution (inclusive).
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,70,* @param c Mode of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,71,* @throws NumberIsTooLargeException if {@code a >= b} or if {@code c > b}.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,72,* @throws NumberIsTooSmallException if {@code c < a}.
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,73,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,75,"public TriangularDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,76,"double a,"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,77,"double c,"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,78,double b)
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,79,"throws NumberIsTooLargeException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java,80,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,22,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,23,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,24,import org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,50,"ublic UniformIntegerDistribution(int lower, int upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,51,"public UniformIntegerDistribution(int lower, int upper)"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,52,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,53,"this(new Well19937c(), lower, upper);"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,57,* Creates a new uniform integer distribution using the given lower and
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,58,* upper bounds (both inclusive).
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,60,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,61,* @param lower Lower bound (inclusive) of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,62,* @param upper Upper bound (inclusive) of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,63,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,64,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,66,"public UniformIntegerDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,67,"int lower,"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,68,int upper)
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,69,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,70,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,138,"eturn randomData.nextInt(lower, upper);"
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,159,final double r = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,160,final double scaled = r * upper + (1 - r) * lower + r;
True,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java,161,return (int) FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,22,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,23,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,47,* Create a standard uniform real distribution with lower bound (inclusive)
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,48,* equal to zero and upper bound (exclusive) equal to one.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,50,public UniformRealDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,51,"this(0, 1);"
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,62," Create a normal distribution using the given mean, standard deviation and"
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,63, inverse cumulative distribution accuracy.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,68,* Create a uniform distribution.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,77,"this(new  Well19937c(), lower, upper, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,81,* Creates a uniform distribution.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,83,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,84,* @param lower Lower bound of this distribution (inclusive).
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,85,* @param upper Upper bound of this distribution (exclusive).
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,86,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,87,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,88,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,90,"public UniformRealDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,91,"double lower,"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,92,"double upper,"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,93,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,94,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,95,super(rng);
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,84, Create a standard uniform real distribution with lower bound (inclusive)
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,85, equal to zero and upper bound (exclusive) equal to one.
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,87,ublic UniformRealDistribution() {
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,88,"his(0, 1);"
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,196,"eturn randomData.nextUniform(lower, upper, true);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,212,final double u = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,213,return u * upper + (1 - u) * lower;
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,96,ouble inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,90,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,91,"this(new Well19937c(), alpha, beta, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,95,* Creates a Weibull distribution.
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,97,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,98,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,99,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,100,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,101,* cumulative probability estimates
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,102,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,103,* @throws NotStrictlyPositiveException if {@code alpha <= 0} or
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,104,* {@code beta <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,105,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,107,"public WeibullDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,108,"double alpha,"
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,109,"double beta,"
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,110,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java,112,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,23,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,24,import org.apache.commons.math3.random.Well19937c;
False,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,61,"ublic ZipfDistribution(final int numberOfElements, final double exponent)"
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,57,"public ZipfDistribution(final int numberOfElements, final double exponent) {"
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,58,"this(new Well19937c(), numberOfElements, exponent);"
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,62,* Creates a Zipf distribution.
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,64,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,65,* @param numberOfElements Number of elements.
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,66,* @param exponent Exponent.
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,67,* @exception NotStrictlyPositiveException if {@code numberOfElements <= 0}
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,68,* or {@code exponent <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,69,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,71,"public ZipfDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,72,"int numberOfElements,"
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,73,double exponent)
True,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java,75,super(rng);
True,src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java,67,public DiceDistribution() {
True,src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java,68,super(null);
False,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,37,istribution = new AbstractRealDistribution() {
True,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,37,distribution = new AbstractRealDistribution(null) {
False,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,121,istribution = new AbstractRealDistribution() {
True,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java,121,distribution = new AbstractRealDistribution(null) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,29, @deprecated in 2.2 (to be removed in 3.0). Please use
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,30, {@link IterativeAlgorithm} instead.
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,29,* @deprecated in 2.2 (to be removed in 3.0).
True,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,23,* Utility class for trensforming the list of arguments passed to
True,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,24,* constructors of exceptions.
True,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,30,* Class contains only static methods.
True,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,src/main/java/org/apache/commons/math/exception/util/ArgUtils.java,32,private ArgUtils() {}
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,54, @exception IllegalArgumentException if the dimension is
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,54,* @throws DimensionMismatchException if the dimension is
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,25," <PAIR> Type of (point, value) pair."
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,25,"* @param <PAIR> Type of (point, value) pair."
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,134, @param f Function to optimize.
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,135, @param goal Goal type ({@link GoalType#MINIMIZE} or
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,136, {@link GoalType#MAXIMIZE}).
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,137, @param startPoint Start point.
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,134,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,150,i == 0 ? startPoint :
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,151,enerator.nextVector()));
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,147,i == 0 ? startPoint : generator.nextVector());
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,149,i == 0 ? startPoint :
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,150,enerator.nextVector()));
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java,149,i == 0 ? startPoint : generator.nextVector());
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48, @throws FunctionEvaluationException if the objective function throws one
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,49, during the search.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,50, @throws DimensionMismatchException if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,51, @throws TooManyEvaluationsException if the maximal number of evaluations is
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,52, exceeded.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,53, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,48,* @throws org.apache.commons.math.FunctionEvaluationException if the
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,49,* objective function throws one during the search.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,50,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,51,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,52,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,53,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,54,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,55,* any argument is {@code null}.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,52, @throws DimensionMismatchException if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,53, @throws TooManyEvaluationsException if the maximal number of evaluations is
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,54, exceeded.
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,55, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,52,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,53,* if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,54,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,55,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,56,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java,57,* any argument is {@code null}.
False,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java,21,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,21,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,23,mport org.apache.commons.math.FunctionEvaluationException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,24,mport org.apache.commons.math.exception.MathIllegalStateException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,25,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,27,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,79,eturn (difference <= size * getRelativeThreshold() ||
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,80,ifference <= getAbsoluteThreshold());
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,78,return difference <= size * getRelativeThreshold() ||
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,79,difference <= getAbsoluteThreshold();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,21,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,25,mport org.apache.commons.math.util.Incrementor;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,26,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,28,mport org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,33,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,inal boolean isMinim = (getGoalType() == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211,final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259, @throws TooManyEvaluationsException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260, @throws DimensionMismatchException if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,254,* @throws org.apache.commons.math.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,255,* the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,256,* @throws org.apache.commons.math.exception.DimensionMismatchException if
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,* the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,299, @throws TooManyEvaluationsException if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,* if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113, @exception FunctionEvaluationException if the function cannot be
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,* @throws FunctionEvaluationException if the function cannot be
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115, @exception TooManyEvaluationsException if the maximal number of
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116, evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116,* if the maximal number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,119,"inal double coeff,"
False,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120,inal Comparator<RealPointValuePair> comparator)
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,119,"final double coeff,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120,final Comparator<RealPointValuePair> comparator)
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,122, @exception ConvergenceException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,123, @exception IllegalArgumentException if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,122,* @exception org.apache.commons.math.exception.ConvergenceException
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,123,* if the algorithm failed to converge.
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,124,* @exception org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,125,* if the start point dimension is wrong.
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java,23,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java,23,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,24,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,42,** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,40,* Simple constructor.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,53,"** Add an observed weighted (x,y) point to the sample."
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,53,"* Add an observed weighted (x,y) point to the sample."
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,70,"** Get the polynomial fitting the weighted (x, y) points."
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,72,"* Get the polynomial fitting the weighted (x, y) points."
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,72, @exception ConvergenceException if the algorithm failed to converge
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,75,* @throws org.apache.commons.math.exception.ConvergenceException
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,76,* if the algorithm failed to converge.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,83,** Dedicated parametric polynomial class. */
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,88,* Dedicated parametric polynomial class.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,29,mport org.apache.commons.math.optimization.SimpleVectorialValueChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67, @throws TooManyEvaluationsException if the allowed number of evaluations
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68, is exceeded.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68,* if the allowed number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,28,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,110, @throws TooManyEvaluationsException if the maximal number of evaluations is
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,111, exceeded.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,109,* @throws TooManyEvaluationsException if the maximal number of
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,110,* evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,28,mport org.apache.commons.math.optimization.GoalType;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,29,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,123,"ouble[] target, double[] weight,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,121,"double[] t, double[] w,"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,130,f (target == null) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,128,if (t == null) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,133,f (weight == null) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,131,if (w == null) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,139,f (target.length != weight.length) {
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,140,"hrow new DimensionMismatchException(target.length, weight.length);"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,137,if (t.length != w.length) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,138,"throw new DimensionMismatchException(t.length, w.length);"
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,148,his.target = target.clone();
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,149,his.weight = weight.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,146,target = t.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java,147,weight = w.clone();
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,30,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,68,final ConvergenceChecker<VectorialPointValuePair> checker
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,69,= getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,124,f (previous != null) {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,125,"onverged = getConvergenceChecker().converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,128,if (checker != null) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,129,if (previous != null) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,130,"converged = checker.converged(iter, previous, current);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,412,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,413,eturn current;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,412,"if (checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,413,return current;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,30,mport org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,103,/ search optimizer. Because the line search inner class will call
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,102,// search optimizer. Because the line search inner class will call
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,156,oolean stop = 2 * (fX - fVal) <= (relativeThreshold * (FastMath.abs(fX)
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,157, FastMath.abs(fVal))
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,158, absoluteThreshold);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,155,boolean stop = 2 * (fX - fVal) <=
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,156,(relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) +
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,157,absoluteThreshold);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,248, @param rel Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,247,* @param abs Absolute threshold.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,263, @throws TooManyEvaluationsException if the number of evaluations is
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,264, exceeded.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,262,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,263,* if the number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,141,"oalType goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,141,"GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,144,"eturn optimize(f, goal, min, max, min + 0.5 * (max - min));"
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,144,"return optimize(f, goalType, min, max, min + 0.5 * (max - min));"
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,150,ublic void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,151,his.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,150,public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> c) {
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,151,checker = c;
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,22,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,52, @throws {@link org.apache.commons.math.exception.TooManyEvaluationsException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,51,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,54, @throws {@link org.apache.commons.math.exception.ConvergenceException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,53,* @throws org.apache.commons.math.exception.ConvergenceException
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,76, @throws {@link org.apache.commons.math.exception.TooManyEvaluationsException}
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,75,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,78, @throws {@link org.apache.commons.math.exception.ConvergenceException}
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,79, if the optimizer detects a convergence problem.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,77,* @throws org.apache.commons.math.exception.ConvergenceException if the
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,78,* optimizer detects a convergence problem.
False,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,84, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,83,* @throws org.apache.commons.math.exception.NullArgumentException if any
True,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java,84,* argument is {@code null}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,24,mport org.apache.commons.math.exception.MathUnsupportedOperationException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,26,mport org.apache.commons.math.optimization.AbstractConvergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,92,inal boolean isMinim = (getGoalType() == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,125," new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,122,"= new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,237,"urrent = new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,234,"current = new UnivariateRealPointValuePair(x, isMinim ? fx : -fx);"
False,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,27,ublic interface UnivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java,27,public interface UnivariateRealOptimizer
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,191, @param values the input array
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,192, @param weights the weights array
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,193, @param begin index of the first array element to include
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,194, @param length the number of elements to include
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,195, @param allowEmpty if <code>true</code> than allow zero length arrays to pass
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,196, @return true if the parameters are valid
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,197, @throws IllegalArgumentException if the indices are invalid or the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,191,* @param values the input array.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,192,* @param weights the weights array.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,193,* @param begin index of the first array element to include.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,194,* @param length the number of elements to include.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,195,* @param allowEmpty if {@code true} than allow zero length arrays to pass.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,196,* @return {@code true} if the parameters are valid.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,197,* @throws IllegalArgumentException if the indices are invalid or the array
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,198,* is {@code null}.
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,27," If there are no values in the dataset, then 0 is returned."
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,27,"* If there are no values in the dataset, then 0 is returned."
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,41, @param count Upper limit of the counter.
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,41,* @param max Upper limit of the counter.
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,43,ublic void setMaximalCount(int count) {
False,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,44,aximalCount = count;
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,43,public void setMaximalCount(int max) {
True,src/main/java/org/apache/commons/math/util/Incrementor.java,src/main/java/org/apache/commons/math/util/Incrementor.java,44,maximalCount = max;

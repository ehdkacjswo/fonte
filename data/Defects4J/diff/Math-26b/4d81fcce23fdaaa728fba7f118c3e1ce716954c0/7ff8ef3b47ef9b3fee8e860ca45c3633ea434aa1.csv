is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,30,import org.apache.commons.math.util.ArithmeticUtils;
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,959,"eturn new BigFraction(MathUtils.pow(denominator, -exponent),"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,960,"athUtils.pow(numerator,   -exponent));"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,960,"return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,961,"ArithmeticUtils.pow(numerator,   -exponent));"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,962,"eturn new BigFraction(MathUtils.pow(numerator,   exponent),"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,963,"athUtils.pow(denominator, exponent));"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,963,"return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,964,"ArithmeticUtils.pow(denominator, exponent));"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,979,"eturn new BigFraction(MathUtils.pow(denominator, eNeg),"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,980,"athUtils.pow(numerator,   eNeg));"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,980,"return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,981,"ArithmeticUtils.pow(numerator,   eNeg));"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,982,"eturn new BigFraction(MathUtils.pow(numerator,   exponent),"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,983,"athUtils.pow(denominator, exponent));"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,983,"return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,984,"ArithmeticUtils.pow(denominator, exponent));"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,19,import java.math.BigInteger;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,711,* Raise an int to an int power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,713,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,714,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,715,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,716,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,718,"public static int pow(final int k, int e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,719,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,720,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,723,int result = 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,724,int k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,725,while (e != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,726,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,727,result *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,729,k2p *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,730,e = e >> 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,733,return result;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,737,* Raise an int to a long power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,739,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,740,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,741,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,742,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,744,"public static int pow(final int k, long e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,745,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,746,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,749,int result = 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,750,int k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,751,while (e != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,752,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,753,result *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,755,k2p *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,756,e = e >> 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,759,return result;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,763,* Raise a long to an int power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,765,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,766,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,767,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,768,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,770,"public static long pow(final long k, int e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,771,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,772,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,775,long result = 1l;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,776,long k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,777,while (e != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,778,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,779,result *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,781,k2p *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,782,e = e >> 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,785,return result;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,789,* Raise a long to a long power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,791,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,792,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,793,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,794,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,796,"public static long pow(final long k, long e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,797,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,798,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,801,long result = 1l;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,802,long k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,803,while (e != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,804,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,805,result *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,807,k2p *= k2p;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,808,e = e >> 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,811,return result;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,815,* Raise a BigInteger to an int power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,817,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,818,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,819,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,820,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,822,"public static BigInteger pow(final BigInteger k, int e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,823,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,824,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,827,return k.pow(e);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,831,* Raise a BigInteger to a long power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,833,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,834,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,835,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,836,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,838,"public static BigInteger pow(final BigInteger k, long e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,839,if (e < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,840,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,843,BigInteger result = BigInteger.ONE;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,844,BigInteger k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,845,while (e != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,846,if ((e & 0x1) != 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,847,result = result.multiply(k2p);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,849,k2p = k2p.multiply(k2p);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,850,e = e >> 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,853,return result;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,858,* Raise a BigInteger to a BigInteger power.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,860,* @param k Number to raise.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,861,* @param e Exponent (must be positive or zero).
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,862,* @return k<sup>e</sup>
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,863,* @throws NotPositiveException if {@code e < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,865,"public static BigInteger pow(final BigInteger k, BigInteger e) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,866,if (e.compareTo(BigInteger.ZERO) < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,867,"throw new NotPositiveException(LocalizedFormats.EXPONENT, e);"
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,870,BigInteger result = BigInteger.ONE;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,871,BigInteger k2p    = k;
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,872,while (!BigInteger.ZERO.equals(e)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,873,if (e.testBit(0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,874,result = result.multiply(k2p);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,876,k2p = k2p.multiply(k2p);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,877,e = e.shiftRight(1);
True,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticUtils.java,880,return result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,20,mport java.math.BigInteger;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,25,mport org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,280, Raise an int to an int power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,282, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,283, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,284, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,285, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,287,"ublic static int pow(final int k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,288,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,289,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,292,nt result = 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,293,nt k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,294,hile (e != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,295,f ((e & 0x1) != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,296,esult *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,298,2p *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,299, = e >> 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,302,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,306, Raise an int to a long power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,308, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,309, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,310, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,311, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,313,"ublic static int pow(final int k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,314,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,315,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,318,nt result = 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,319,nt k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,320,hile (e != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,321,f ((e & 0x1) != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,322,esult *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,324,2p *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,325, = e >> 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,328,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,332, Raise a long to an int power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,334, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,335, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,336, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,337, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,339,"ublic static long pow(final long k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,340,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,341,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,344,ong result = 1l;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,345,ong k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,346,hile (e != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,347,f ((e & 0x1) != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,348,esult *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,350,2p *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,351, = e >> 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,354,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,358, Raise a long to a long power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,360, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,361, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,362, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,363, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,365,"ublic static long pow(final long k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,366,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,367,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,370,ong result = 1l;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,371,ong k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,372,hile (e != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,373,f ((e & 0x1) != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,374,esult *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,376,2p *= k2p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,377, = e >> 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,380,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,384, Raise a BigInteger to an int power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,386, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,387, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,388, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,389, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,391,"ublic static BigInteger pow(final BigInteger k, int e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,393,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396,eturn k.pow(e);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,400, Raise a BigInteger to a long power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,402, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,403, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,404, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407,"ublic static BigInteger pow(final BigInteger k, long e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,408,f (e < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,409,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412,igInteger result = BigInteger.ONE;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413,igInteger k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414,hile (e != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,415,f ((e & 0x1) != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416,esult = result.multiply(k2p);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,418,2p = k2p.multiply(k2p);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,419, = e >> 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427, Raise a BigInteger to a BigInteger power.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,429, @param k Number to raise.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430, @param e Exponent (must be positive or zero).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431, @return k<sup>e</sup>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,432, @throws NotPositiveException if {@code e < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434,"ublic static BigInteger pow(final BigInteger k, BigInteger e) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,435,f (e.compareTo(BigInteger.ZERO) < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,436,"hrow new NotPositiveException(LocalizedFormats.EXPONENT, e);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,439,igInteger result = BigInteger.ONE;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,440,igInteger k2p    = k;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,441,hile (!BigInteger.ZERO.equals(e)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442,f (e.testBit(0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,443,esult = result.multiply(k2p);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,445,2p = k2p.multiply(k2p);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,446, = e.shiftRight(1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449,eturn result;
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,23,import java.math.BigInteger;
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,604,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,605,public void testPow() {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,607,"Assert.assertEquals(1801088541, ArithmeticUtils.pow(21, 7));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,608,"Assert.assertEquals(1, ArithmeticUtils.pow(21, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,609,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,610,"ArithmeticUtils.pow(21, -7);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,611,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,612,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,613,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,616,"Assert.assertEquals(1801088541, ArithmeticUtils.pow(21, 7l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,617,"Assert.assertEquals(1, ArithmeticUtils.pow(21, 0l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,618,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,619,"ArithmeticUtils.pow(21, -7l);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,620,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,621,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,622,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,625,"Assert.assertEquals(1801088541l, ArithmeticUtils.pow(21l, 7));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,626,"Assert.assertEquals(1l, ArithmeticUtils.pow(21l, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,627,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,628,"ArithmeticUtils.pow(21l, -7);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,629,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,630,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,631,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,634,"Assert.assertEquals(1801088541l, ArithmeticUtils.pow(21l, 7l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,635,"Assert.assertEquals(1l, ArithmeticUtils.pow(21l, 0l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,636,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,637,"ArithmeticUtils.pow(21l, -7l);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,638,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,639,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,640,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,643,BigInteger twentyOne = BigInteger.valueOf(21l);
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,644,"Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, 7));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,645,"Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,646,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,647,"ArithmeticUtils.pow(twentyOne, -7);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,648,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,649,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,650,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,653,"Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, 7l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,654,"Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, 0l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,655,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,656,"ArithmeticUtils.pow(twentyOne, -7l);"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,657,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,658,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,659,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,662,"Assert.assertEquals(BigInteger.valueOf(1801088541l), ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(7l)));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,663,"Assert.assertEquals(BigInteger.ONE, ArithmeticUtils.pow(twentyOne, BigInteger.ZERO));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,664,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,665,"ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(-7l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,666,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,667,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,668,// expected behavior
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,671,BigInteger bigOne =
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,672,"new BigInteger(""1543786922199448028351389769265814882661837148"" +"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,673,"""4763915343722775611762713982220306372888519211"" +"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,674,"""560905579993523402015636025177602059044911261"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,675,"Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, 103));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,676,"Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, 103l));"
True,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticUtilsTest.java,677,"Assert.assertEquals(bigOne, ArithmeticUtils.pow(twentyOne, BigInteger.valueOf(103l)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,16,mport java.math.BigInteger;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,259,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,260,ublic void testPow() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,262,"ssert.assertEquals(1801088541, MathUtils.pow(21, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,263,"ssert.assertEquals(1, MathUtils.pow(21, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,264,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,265,"athUtils.pow(21, -7);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,266,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,267, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,268,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,271,"ssert.assertEquals(1801088541, MathUtils.pow(21, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,272,"ssert.assertEquals(1, MathUtils.pow(21, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,273,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,274,"athUtils.pow(21, -7l);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,275,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,276, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,277,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,280,"ssert.assertEquals(1801088541l, MathUtils.pow(21l, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,281,"ssert.assertEquals(1l, MathUtils.pow(21l, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,282,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,283,"athUtils.pow(21l, -7);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,284,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,285, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,286,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,289,"ssert.assertEquals(1801088541l, MathUtils.pow(21l, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,290,"ssert.assertEquals(1l, MathUtils.pow(21l, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,291,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,292,"athUtils.pow(21l, -7l);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,293,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,294, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,295,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,298,igInteger twentyOne = BigInteger.valueOf(21l);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,299,"ssert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,300,"ssert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,301,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,302,"athUtils.pow(twentyOne, -7);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,303,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,304, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,305,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,308,"ssert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,309,"ssert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,310,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,311,"athUtils.pow(twentyOne, -7l);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,312,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,313, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,314,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,"ssert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,318,"ssert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,319,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,320,"athUtils.pow(twentyOne, BigInteger.valueOf(-7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,321,"ssert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,322, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,323,/ expected behavior
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,326,igInteger bigOne =
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,327,"ew BigInteger(""1543786922199448028351389769265814882661837148"" +"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,328,"4763915343722775611762713982220306372888519211"" +"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,329,"560905579993523402015636025177602059044911261"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,330,"ssert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,331,"ssert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,332,"ssert.assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));"

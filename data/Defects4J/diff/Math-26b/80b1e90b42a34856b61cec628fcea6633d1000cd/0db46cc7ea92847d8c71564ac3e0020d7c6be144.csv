is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,68,** The {@code Math.pow} method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,69,/** The {@code FastMath.pow} method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,73,"eturn Math.pow(x, y);"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,74,"return FastMath.pow(x, y);"
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,77,** The {@code Math.atan2} method wrapped as a {@link BinaryFunction}. */
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,78,/** The {@code FastMath.atan2} method wrapped as a {@link BinaryFunction}. */
False,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,82,"eturn Math.atan2(x, y);"
True,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,src/main/java/org/apache/commons/math/analysis/BinaryFunction.java,83,"return FastMath.atan2(x, y);"
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,58,** The {@code Math.abs} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,59,/** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,63,eturn Math.abs(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,64,return FastMath.abs(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,85,** The {@code Math.sin} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,86,/** The {@code FastMath.sin} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,90,eturn Math.sin(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,91,return FastMath.sin(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,94,** The {@code Math.sqrt} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,95,/** The {@code FastMath.sqrt} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,99,eturn Math.sqrt(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,100,return FastMath.sqrt(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,103,** The {@code Math.sinh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,104,/** The {@code FastMath.sinh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,108,eturn Math.sinh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,109,return FastMath.sinh(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,112,** The {@code Math.exp} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,113,/** The {@code FastMath.exp} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,117,eturn Math.exp(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,118,return FastMath.exp(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,121,** The {@code Math.expm1} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,122,/** The {@code FastMath.expm1} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,126,eturn Math.expm1(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,127,return FastMath.expm1(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,130,** The {@code Math.asin} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,131,/** The {@code FastMath.asin} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,135,eturn Math.asin(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,136,return FastMath.asin(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,139,** The {@code Math.atan} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,140,/** The {@code FastMath.atan} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,144,eturn Math.atan(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,145,return FastMath.atan(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,148,** The {@code Math.tan} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,149,/** The {@code FastMath.tan} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,153,eturn Math.tan(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,154,return FastMath.tan(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,157,** The {@code Math.tanh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,158,/** The {@code FastMath.tanh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,162,eturn Math.tanh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,163,return FastMath.tanh(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,166,** The {@code Math.cbrt} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,167,/** The {@code FastMath.cbrt} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,171,eturn Math.cbrt(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,172,return FastMath.cbrt(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,175,** The {@code Math.ceil} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,176,/** The {@code FastMath.ceil} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,180,eturn Math.ceil(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,181,return FastMath.ceil(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,184,** The {@code Math.floor} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,185,/** The {@code FastMath.floor} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,189,eturn Math.floor(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,190,return FastMath.floor(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,193,** The {@code Math.log} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,194,/** The {@code FastMath.log} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,198,eturn Math.log(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,199,return FastMath.log(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,202,** The {@code Math.log10} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,203,/** The {@code FastMath.log10} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,207,eturn Math.log10(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,208,return FastMath.log10(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,211,** The {@code Math.log1p} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,212,/** The {@code FastMath.log1p} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,215,eturn Math.log1p(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,216,return FastMath.log1p(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,219,** The {@code Math.cos} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,220,/** The {@code FastMath.cos} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,224,eturn Math.cos(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,225,return FastMath.cos(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,228,** The {@code Math.abs} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,229,/** The {@code FastMath.abs} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,233,eturn Math.acos(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,234,return FastMath.acos(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,237,** The {@code Math.cosh} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,238,/** The {@code FastMath.cosh} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,242,eturn Math.cosh(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,243,return FastMath.cosh(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,246,** The {@code Math.rint} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,247,/** The {@code FastMath.rint} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,251,eturn Math.rint(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,252,return FastMath.rint(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,255,** The {@code Math.signum} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,256,/** The {@code FastMath.signum} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,260,eturn Math.signum(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,261,return FastMath.signum(d);
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,264,** The {@code Math.ulp} method wrapped as a {@link ComposableFunction}. */
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,265,/** The {@code FastMath.ulp} method wrapped as a {@link ComposableFunction}. */
False,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,269,eturn Math.ulp(d);
True,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,src/main/java/org/apache/commons/math/analysis/ComposableFunction.java,270,return FastMath.ulp(d);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,57,"1.0 / Math.sqrt(3.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,58,.0 / Math.sqrt(3.0)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,58,"-1.0 / FastMath.sqrt(3.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,59,1.0 / FastMath.sqrt(3.0)
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,69,"Math.sqrt(0.6),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,70,"-FastMath.sqrt(0.6),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,71,ath.sqrt(0.6)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,72,FastMath.sqrt(0.6)
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,83,"Math.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,84,"Math.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,85,"ath.sqrt((15.0 - 2.0 * Math.sqrt(30.0)) / 35.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,86,ath.sqrt((15.0 + 2.0 * Math.sqrt(30.0)) / 35.0)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,84,"-FastMath.sqrt((15.0 + 2.0 * FastMath.sqrt(30.0)) / 35.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,85,"-FastMath.sqrt((15.0 - 2.0 * FastMath.sqrt(30.0)) / 35.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,86,"FastMath.sqrt((15.0 - 2.0 * FastMath.sqrt(30.0)) / 35.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,87,FastMath.sqrt((15.0 + 2.0 * FastMath.sqrt(30.0)) / 35.0)
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,91,"90.0 - 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,92,"90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,93,"90.0 + 5.0 * Math.sqrt(30.0)) / 180.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,94,90.0 - 5.0 * Math.sqrt(30.0)) / 180.0
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,92,"(90.0 - 5.0 * FastMath.sqrt(30.0)) / 180.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,93,"(90.0 + 5.0 * FastMath.sqrt(30.0)) / 180.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,94,"(90.0 + 5.0 * FastMath.sqrt(30.0)) / 180.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,95,(90.0 - 5.0 * FastMath.sqrt(30.0)) / 180.0
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,99,"Math.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,100,"Math.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,100,"-FastMath.sqrt((35.0 + 2.0 * FastMath.sqrt(70.0)) / 63.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,101,"-FastMath.sqrt((35.0 - 2.0 * FastMath.sqrt(70.0)) / 63.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,102,"ath.sqrt((35.0 - 2.0 * Math.sqrt(70.0)) / 63.0),"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,103,ath.sqrt((35.0 + 2.0 * Math.sqrt(70.0)) / 63.0)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,103,"FastMath.sqrt((35.0 - 2.0 * FastMath.sqrt(70.0)) / 63.0),"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,104,FastMath.sqrt((35.0 + 2.0 * FastMath.sqrt(70.0)) / 63.0)
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,108,"322.0 - 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,109,"322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,109,"(322.0 - 13.0 * FastMath.sqrt(70.0)) / 900.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,110,"(322.0 + 13.0 * FastMath.sqrt(70.0)) / 900.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,111,"322.0 + 13.0 * Math.sqrt(70.0)) / 900.0,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,112,322.0 - 13.0 * Math.sqrt(70.0)) / 900.0
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,112,"(322.0 + 13.0 * FastMath.sqrt(70.0)) / 900.0,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,113,(322.0 - 13.0 * FastMath.sqrt(70.0)) / 900.0
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,181,inal double delta = Math.abs(t - oldt);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,182,final double delta = FastMath.abs(t - oldt);
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,183,"ath.max(absoluteAccuracy,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,184,elativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,184,"FastMath.max(absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,185,relativeAccuracy * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5);
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,193,"ouble ratio = Math.min(4, Math.pow(delta / limit, 0.5 / abscissas.length));"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,194," = Math.max((int) (ratio * n), n + 1);"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,194,"double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / abscissas.length));"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,195,"n = FastMath.max((int) (ratio * n), n + 1);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,98,inal double delta  = Math.abs(s - olds);
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,99,inal double rLimit = relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,99,final double delta  = FastMath.abs(s - olds);
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,100,final double rLimit = relativeAccuracy * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,87,inal double delta = Math.abs(s - olds);
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,88,final double delta = FastMath.abs(s - olds);
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,89,elativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,90,relativeAccuracy * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,119,inal double delta = Math.abs(t - oldt);
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,120,final double delta = FastMath.abs(t - oldt);
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,121,elativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,122,relativeAccuracy * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,280,ouble denom = Math.abs(1.0 / (xval[edge] - x));
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,281,double denom = FastMath.abs(1.0 / (xval[edge] - x));
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,300,f (Math.sqrt(Math.abs(meanXSquared - meanX * meanX)) < accuracy) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,301,if (FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < accuracy) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,309,esiduals[i] = Math.abs(yval[i] - res[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,310,residuals[i] = FastMath.abs(yval[i] - res[i]);
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,327,f (Math.abs(medianResidual) < accuracy) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,328,if (FastMath.abs(medianResidual) < accuracy) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,30,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,203,f (Math.abs(diffNorm) < Math.ulp(1d)) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,204,if (FastMath.abs(diffNorm) < FastMath.ulp(1d)) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,210,"inal double w = Math.pow(diffNorm, -brightnessExponent);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,211,"final double w = FastMath.pow(diffNorm, -brightnessExponent);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,143,"inal int lowLength  = Math.min(coefficients.length, p.coefficients.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,144,"inal int highLength = Math.max(coefficients.length, p.coefficients.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,144,"final int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,145,"final int highLength = FastMath.max(coefficients.length, p.coefficients.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,169,"nt lowLength  = Math.min(coefficients.length, p.coefficients.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,170,"nt highLength = Math.max(coefficients.length, p.coefficients.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,170,"int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,171,"int highLength = FastMath.max(coefficients.length, p.coefficients.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,213,"or (int j = Math.max(0, i + 1 - p.coefficients.length);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,214," < Math.min(coefficients.length, i + 1);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,214,"for (int j = FastMath.max(0, i + 1 - p.coefficients.length);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,215,"j < FastMath.min(coefficients.length, i + 1);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,308,ouble absAi = Math.abs(coefficients[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,309,double absAi = FastMath.abs(coefficients[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,182,inal double dist = Math.abs(z - x[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,183,final double dist = FastMath.abs(z - x[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,196,inal int maxDegree = (int) Math.floor(Math.sqrt(2 * coefficients.size())) - 1;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,197,final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,99,f (Math.abs(max - min) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,100,if (FastMath.abs(max - min) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,139,f (Math.abs(yInitial) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,140,if (FastMath.abs(yInitial) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,146,f (Math.abs(yMin) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,147,if (FastMath.abs(yMin) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,158,f (Math.abs(yMax) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,159,if (FastMath.abs(yMax) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,207,f (Math.abs(yMin) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,208,if (FastMath.abs(yMin) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,210, else if (Math.abs(yMax) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,211,} else if (FastMath.abs(yMax) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,261,f (Math.abs(y2) < Math.abs(y1)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,262,if (FastMath.abs(y2) < FastMath.abs(y1)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,270,f (Math.abs(y1) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,271,if (FastMath.abs(y1) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,279,"ath.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,280,f (Math.abs(dx) <= tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,280,"FastMath.max(relativeAccuracy * FastMath.abs(x1), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,281,if (FastMath.abs(dx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,284,f ((Math.abs(oldDelta) < tolerance) ||
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,285,Math.abs(y0) <= Math.abs(y1))) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,285,if ((FastMath.abs(oldDelta) < tolerance) ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,286,(FastMath.abs(y0) <= FastMath.abs(y1))) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,312,f (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,313, >= Math.abs(0.5 * oldDelta * p1)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,313,if (2.0 * p >= 1.5 * dx * p1 - FastMath.abs(tolerance * p1) ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,314,p >= FastMath.abs(0.5 * oldDelta * p1)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,328,f (Math.abs(delta) > tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,329,if (FastMath.abs(delta) > tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,211,"ouble tolerance = Math.max(relativeAccuracy * z.abs(), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,212,"double tolerance = FastMath.max(relativeAccuracy * z.abs(), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,213,Math.abs(z.getImaginary()) <= tolerance ||
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,214,(FastMath.abs(z.getImaginary()) <= tolerance ||
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,339,"ouble tolerance = Math.max(relativeAccuracy * z.abs(),"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,340,"double tolerance = FastMath.max(relativeAccuracy * z.abs(),"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,170,inal double xplus = x1 + (-2.0 * y1) / (c1 + Math.sqrt(delta));
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,171,inal double xminus = x1 + (-2.0 * y1) / (c1 - Math.sqrt(delta));
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,171,final double xplus = x1 + (-2.0 * y1) / (c1 + FastMath.sqrt(delta));
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,172,final double xminus = x1 + (-2.0 * y1) / (c1 - FastMath.sqrt(delta));
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,178,"inal double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,179,f (Math.abs(x - oldx) <= tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,179,"final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,180,if (FastMath.abs(x - oldx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,183,f (Math.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,184,if (FastMath.abs(y) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,310,ouble dplus = b + Math.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,311,ouble dminus = b - Math.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,312,enominator = Math.abs(dplus) > Math.abs(dminus) ? dplus : dminus;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,311,double dplus = b + FastMath.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,312,double dminus = b - FastMath.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,313,denominator = FastMath.abs(dplus) > FastMath.abs(dminus) ? dplus : dminus;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,314,/ take the modulus of (B +/- Math.sqrt(delta))
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,315,enominator = Math.sqrt(b * b - delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,315,// take the modulus of (B +/- FastMath.sqrt(delta))
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,316,denominator = FastMath.sqrt(b * b - delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,326, = min + Math.random() * (max - min);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,327,x = min + FastMath.random() * (max - min);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,332,"inal double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,333,f (Math.abs(x - oldx) <= tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,333,"final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,334,if (FastMath.abs(x - oldx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,337,f (Math.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,338,if (FastMath.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,122,f (Math.abs(x1 - x0) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,123,if (FastMath.abs(x1 - x0) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,148,f (Math.abs(y3) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,149,if (FastMath.abs(y3) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,154,x3 - x1) / Math.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,155,(x3 - x1) / FastMath.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,159,"inal double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,160,f (Math.abs(x - oldx) <= tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,160,"final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,161,if (FastMath.abs(x - oldx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,164,f (Math.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,165,if (FastMath.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,139,f (Math.abs(y2) < Math.abs(y1)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,140,if (FastMath.abs(y2) < FastMath.abs(y1)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,147,f (Math.abs(y1) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,148,if (FastMath.abs(y1) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,151,f (Math.abs(oldDelta) <
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,152,"ath.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,152,if (FastMath.abs(oldDelta) <
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,153,"FastMath.max(relativeAccuracy * FastMath.abs(x1), absoluteAccuracy)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,157,f (Math.abs(y1) > Math.abs(y0)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,158,if (FastMath.abs(y1) > FastMath.abs(y0)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,192," = Math.max(a - 1.0, lowerBound);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,193," = Math.min(b + 1.0, upperBound);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,193,"a = FastMath.max(a - 1.0, lowerBound);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,194,"b = FastMath.min(b + 1.0, upperBound);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,28,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,116,f (Math.abs(real) < Math.abs(imaginary)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,117,if (FastMath.abs(real) < FastMath.abs(imaginary)) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,118,eturn Math.abs(real);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,119,return FastMath.abs(real);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,121,eturn Math.abs(imaginary) * Math.sqrt(1 + q * q);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,122,return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,124,eturn Math.abs(imaginary);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,125,return FastMath.abs(imaginary);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,127,eturn Math.abs(real) * Math.sqrt(1 + q * q);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,128,return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,224,f (Math.abs(c) < Math.abs(d)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,225,if (FastMath.abs(c) < FastMath.abs(d)) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,550,"eturn createComplex(Math.cos(real) * MathUtils.cosh(imaginary),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,551,Math.sin(real) * MathUtils.sinh(imaginary));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,551,"return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,552,-FastMath.sin(real) * MathUtils.sinh(imaginary));
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,584,"eturn createComplex(MathUtils.cosh(real) * Math.cos(imaginary),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,585,athUtils.sinh(real) * Math.sin(imaginary));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,585,"return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,586,MathUtils.sinh(real) * FastMath.sin(imaginary));
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,619,ouble expReal = Math.exp(real);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,620,"eturn createComplex(expReal *  Math.cos(imaginary), expReal * Math.sin(imaginary));"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,620,double expReal = FastMath.exp(real);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,621,"return createComplex(expReal *  FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,657,"eturn createComplex(Math.log(abs()),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,658,"ath.atan2(imaginary, real));"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,658,"return createComplex(FastMath.log(abs()),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,659,"FastMath.atan2(imaginary, real));"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,716,"eturn createComplex(Math.sin(real) * MathUtils.cosh(imaginary),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,717,ath.cos(real) * MathUtils.sinh(imaginary));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,717,"return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,718,FastMath.cos(real) * MathUtils.sinh(imaginary));
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,750,"eturn createComplex(MathUtils.sinh(real) * Math.cos(imaginary),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,751,athUtils.cosh(real) * Math.sin(imaginary));
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,751,"return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,752,MathUtils.cosh(real) * FastMath.sin(imaginary));
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,796,ouble t = Math.sqrt((Math.abs(real) + abs()) / 2.0);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,797,double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,800,"eturn createComplex(Math.abs(imaginary) / (2.0 * t),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,801,"return createComplex(FastMath.abs(imaginary) / (2.0 * t),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,860,ouble d = Math.cos(real2) + MathUtils.cosh(imaginary2);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,861,double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,862,"eturn createComplex(Math.sin(real2) / d, MathUtils.sinh(imaginary2) / d);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,863,"return createComplex(FastMath.sin(real2) / d, MathUtils.sinh(imaginary2) / d);"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,898,ouble d = MathUtils.cosh(real2) + Math.cos(imaginary2);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,899,double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,900,"eturn createComplex(MathUtils.sinh(real2) / d, Math.sin(imaginary2) / d);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,901,"return createComplex(MathUtils.sinh(real2) / d, FastMath.sin(imaginary2) / d);"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,920,"eturn Math.atan2(getImaginary(), getReal());"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,921,"return FastMath.atan2(getImaginary(), getReal());"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,962,"inal double nthRootOfAbs = Math.pow(abs(), 1.0 / n);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,963,"final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,966,inal double slice = 2 * Math.PI / n;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,967,final double slice = 2 * FastMath.PI / n;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,970,inal double realPart      = nthRootOfAbs *  Math.cos(innerPart);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,971,inal double imaginaryPart = nthRootOfAbs *  Math.sin(innerPart);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,971,final double realPart      = nthRootOfAbs *  FastMath.cos(innerPart);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,972,final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,68,"eturn new Complex(r * Math.cos(theta), r * Math.sin(theta));"
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,69,"return new Complex(r * FastMath.cos(theta), r * FastMath.sin(theta));"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,30,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,127,f (Math.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,130,f (Math.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,131,if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70,eturn cumulativeProbability((int) Math.floor(x));
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71,return cumulativeProbability((int) FastMath.floor(x));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,93,f (Math.floor(x0) < x0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,94,"eturn cumulativeProbability(((int) Math.floor(x0)) + 1,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,95,int) Math.floor(x1)); // don't want to count mass below x0
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,94,if (FastMath.floor(x0) < x0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,95,"return cumulativeProbability(((int) FastMath.floor(x0)) + 1,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,96,(int) FastMath.floor(x1)); // don't want to count mass below x0
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,97,"eturn cumulativeProbability((int) Math.floor(x0),"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,98,int) Math.floor(x1));
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,98,"return cumulativeProbability((int) FastMath.floor(x0),"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,99,(int) FastMath.floor(x1));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,126,ouble fl = Math.floor(x);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,127,double fl = FastMath.floor(x);
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,159,ouble logX = Math.log(x);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,160,ouble log1mX = Math.log1p(-x);
False,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,161,eturn Math.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,160,double logX = FastMath.log(x);
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,161,double log1mX = FastMath.log1p(-x);
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,162,return FastMath.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,187,"et = Math.exp(SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,188,"ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,91,eturn 0.5 + (Math.atan((x - median) / scale) / Math.PI);
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,92,return 0.5 + (FastMath.atan((x - median) / scale) / FastMath.PI);
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,120,eturn (1 / Math.PI) * (scale / (dev * dev + scale * scale));
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,121,return (1 / FastMath.PI) * (scale / (dev * dev + scale * scale));
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,146,et = median + scale * Math.tan(Math.PI * (p - .5));
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,147,ret = median + scale * FastMath.tan(FastMath.PI * (p - .5));
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,eturn Math.exp(-x / mean) / mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,124,return FastMath.exp(-x / mean) / mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,146,et = 1.0 - Math.exp(-x / mean);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,147,ret = 1.0 - FastMath.exp(-x / mean);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,173,et = -mean * Math.log(1.0 - p);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,174,ret = -mean * FastMath.log(1.0 - p);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,91,inal double logx = Math.log(x);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,inal double logn = Math.log(numeratorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,inal double logm = Math.log(denominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,inal double lognxm = Math.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,eturn Math.exp(nhalf*logn + nhalf*logx - logx + mhalf*logm - nhalf*lognxm -
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,final double logx = FastMath.log(x);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,final double logn = FastMath.log(numeratorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,final double logm = FastMath.log(denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,return FastMath.exp(nhalf*logn + nhalf*logx - logx + mhalf*logm - nhalf*lognxm -
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,205,"eturn Math.pow(x / beta, alpha - 1) / beta * Math.exp(-x / beta) / Math.exp(Gamma.logGamma(alpha));"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,206,"return FastMath.pow(x / beta, alpha - 1) / beta * FastMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,147,"eturn Math.max(0, m - (n - k));"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,148,"return FastMath.max(0, m - (n - k));"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,186,"eturn Math.min(k, m);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,187,"return FastMath.min(k, m);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,211,et = Math.exp(p1 + p2 - p3);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,212,ret = FastMath.exp(p1 + p2 - p3);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,228,"eturn Math.exp(MathUtils.binomialCoefficientLog(m, x) +"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,229,"return FastMath.exp(MathUtils.binomialCoefficientLog(m, x) +"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,rivate static final double SQRT2PI = Math.sqrt(2 * Math.PI);
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168,eturn Math.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,169,return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182,standardDeviation * Math.sqrt(2.0))));
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,183,(standardDeviation * FastMath.sqrt(2.0))));
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,179,"ath.pow(probabilityOfSuccess, numberOfSuccesses) *"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,180,"ath.pow(1.0 - probabilityOfSuccess, x);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,180,"FastMath.pow(probabilityOfSuccess, numberOfSuccesses) *"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,181,"FastMath.pow(1.0 - probabilityOfSuccess, x);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,177,ormal.setStandardDeviation(Math.sqrt(p));
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,178,normal.setStandardDeviation(FastMath.sqrt(p));
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,192,et = Math.exp(-mean);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,193,ret = FastMath.exp(-mean);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,194,et = Math.exp(-SaddlePointExpansion.getStirlingError(x) -
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,195,ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,196,ath.sqrt(MathUtils.TWO_PI * x);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,197,FastMath.sqrt(MathUtils.TWO_PI * x);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,260,"eturn (int) Math.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,261,"return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,48,rivate static final double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,49,private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(MathUtils.TWO_PI);
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,110,f (Math.floor(z2) == z2) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,111,if (FastMath.floor(z2) == z2) {
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,113,et = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) +
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,114,ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * FastMath.log(z) +
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,146,f (Math.abs(x - mu) < 0.1 * (x + mu)) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,147,if (FastMath.abs(x - mu) < 0.1 * (x + mu)) {
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,162,et = x * Math.log(x / mu) + mu - x;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,163,ret = x * FastMath.log(x / mu) + mu - x;
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,183,et = n * Math.log(q);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,184,ret = n * FastMath.log(q);
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,189,et = n * Math.log(p);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,190,ret = n * FastMath.log(p);
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,196,et = -0.5 * Math.log(f) + ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,197,ret = -0.5 * FastMath.log(f) + ret;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,116,eturn Math.exp(Gamma.logGamma(nPlus1Over2) - 0.5 * (Math.log(Math.PI) + Math.log(n)) -
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,amma.logGamma(n/2) - nPlus1Over2 * Math.log(1 + x * x /n));
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,return FastMath.exp(Gamma.logGamma(nPlus1Over2) - 0.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) -
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,Gamma.logGamma(n/2) - nPlus1Over2 * FastMath.log(1 + x * x /n));
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,89,"et = 1.0 - Math.exp(-Math.pow(x / scale, shape));"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,90,"ret = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape));"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,124,"inal double xscalepow = Math.pow(xscale, shape - 1);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,125,"final double xscalepow = FastMath.pow(xscale, shape - 1);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,127," Math.pow(x / scale, shape) ="
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,128," Math.pow(xscale, shape) ="
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,129," Math.pow(xscale, shape - 1) * xscale"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,128,"* FastMath.pow(x / scale, shape) ="
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,129,"* FastMath.pow(xscale, shape) ="
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,130,"* FastMath.pow(xscale, shape - 1) * xscale"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,133,eturn (shape / scale) * xscalepow * Math.exp(-xscalepowshape);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,134,return (shape / scale) * xscalepow * FastMath.exp(-xscalepowshape);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,159,"et = scale * Math.pow(-Math.log(1.0 - p), 1.0 / shape);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,160,"ret = scale * FastMath.pow(-FastMath.log(1.0 - p), 1.0 / shape);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,247,"eturn Math.pow(scale * Math.log(2.0), 1.0 / shape);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,248,"return FastMath.pow(scale * FastMath.log(2.0), 1.0 / shape);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,147,"eturn (1.0 / Math.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,148,"return (1.0 / FastMath.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,208,"alue += 1.0 / Math.pow(k, m);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,209,"value += 1.0 / FastMath.pow(k, m);"
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,131,ouble factor = -Math.sqrt(wm.getWeight());
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,132,double factor = -FastMath.sqrt(wm.getWeight());
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,163,esiduals[i] = Math.sqrt(wm.getWeight()) * residual;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,164,residuals[i] = FastMath.sqrt(wm.getWeight()) * residual;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,166,ost = Math.sqrt(cost);
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,167,cost = FastMath.sqrt(cost);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,188,eturn Math.sqrt(criterion / wm.length);
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,189,return FastMath.sqrt(criterion / wm.length);
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,265,inal double c = Math.sqrt(getChiSquare(problem) / (m - p));
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,266,final double c = FastMath.sqrt(getChiSquare(problem) / (m - p));
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,268,rrors[i] = Math.sqrt(covar[i][i]) * c;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,269,errors[i] = FastMath.sqrt(covar[i][i]) * c;
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,100, <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,101,* <code>FastMath.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,125, <code>Math.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,126,* <code>FastMath.abs(J<sub>n</sub> - J<sub>n-1</sub>) &lt;
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,225,Math.abs(previous - cost) > (cost * steadyStateThreshold) &&
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,226,Math.abs(cost) > convergence)));
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,226,(FastMath.abs(previous - cost) > (cost * steadyStateThreshold) &&
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,227,(FastMath.abs(cost) > convergence)));
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,253,"olvedCols  = Math.min(rows, cols);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,254,"solvedCols  = FastMath.min(rows, cols);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,306,Norm = Math.sqrt(xNorm);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,307,xNorm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,326,"axCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,327,"maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,336,"iag[j] = Math.max(diag[j], jacNorm[j]);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,337,"diag[j] = FastMath.max(diag[j], jacNorm[j]);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,364,mNorm = Math.sqrt(lmNorm);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,365,lmNorm = FastMath.sqrt(lmNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,368,"elta = Math.min(delta, lmNorm);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,369,"delta = FastMath.min(delta, lmNorm);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,413,"elta = tmp * Math.min(delta, 10.0 * lmNorm);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,414,"delta = tmp * FastMath.min(delta, 10.0 * lmNorm);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,429,Norm = Math.sqrt(xNorm);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,430,xNorm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,443,f (((Math.abs(actRed) <= costRelativeTolerance) &&
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,444,if (((FastMath.abs(actRed) <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,452,f ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,453,if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,527,xNorm = Math.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,528,dxNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,573,ouble gNorm = Math.sqrt(sum2);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,574,double gNorm = FastMath.sqrt(sum2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,577,"aru = 2.2251e-308 / Math.min(delta, 0.1);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,578,"paru = 2.2251e-308 / FastMath.min(delta, 0.1);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,582,"mPar = Math.min(paru, Math.max(lmPar, parl));"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,583,"lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,591,"mPar = Math.max(2.2251e-308, 0.001 * paru);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,592,"lmPar = FastMath.max(2.2251e-308, 0.001 * paru);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,593,ouble sPar = Math.sqrt(lmPar);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,594,double sPar = FastMath.sqrt(lmPar);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,607,xNorm = Math.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,608,dxNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,613,f ((Math.abs(fp) <= 0.1 * delta) ||
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,614,if ((FastMath.abs(fp) <= 0.1 * delta) ||
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,640,"arl = Math.max(parl, lmPar);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,641,"parl = FastMath.max(parl, lmPar);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,642,"aru = Math.min(paru, lmPar);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,643,"paru = FastMath.min(paru, lmPar);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,646,"mPar = Math.max(parl, lmPar + correction);"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,647,"lmPar = FastMath.max(parl, lmPar + correction);"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,711,f (Math.abs(rkk) < Math.abs(lmDiag[k])) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,712,if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,713,in   = 1.0 / Math.sqrt(1.0 + cotan * cotan);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,714,sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,717,os = 1.0 / Math.sqrt(1.0 + tan * tan);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,718,cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,808,acNorm[k] = Math.sqrt(norm2);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,809,jacNorm[k] = FastMath.sqrt(norm2);
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,845,ouble alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,846,double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,28,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,273,ong a0 = (long) Math.floor(r0);
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,274,long a0 = (long) FastMath.floor(r0);
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,280,f (Math.abs(a0 - value) < epsilon) {
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,281,if (FastMath.abs(a0 - value) < epsilon) {
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,299,inal long a1 = (long) Math.floor(r1);
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,300,final long a1 = (long) FastMath.floor(r1);
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,308,Math.abs(convergent - value) > epsilon) &&
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,309,(FastMath.abs(convergent - value) > epsilon) &&
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,997,"eturn Math.pow(numerator.doubleValue(),   exponent) /"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,998,"ath.pow(denominator.doubleValue(), exponent);"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,998,"return FastMath.pow(numerator.doubleValue(),   exponent) /"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,999,"FastMath.pow(denominator.doubleValue(), exponent);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,179,ong a0 = (long)Math.floor(r0);
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,180,long a0 = (long)FastMath.floor(r0);
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,186,f (Math.abs(a0 - value) < epsilon) {
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,187,if (FastMath.abs(a0 - value) < epsilon) {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,205,ong a1 = (long)Math.floor(r1);
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,206,long a1 = (long)FastMath.floor(r1);
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,213,f (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,214,if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,79,nt boundIndex = (int) Math.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,81,int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,137,ouble inv = 1.0 / Math.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,138,double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,180,ouble coeff = Math.sin(halfAngle) / norm;
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,181,double coeff = FastMath.sin(halfAngle) / norm;
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,182,0 = Math.cos (halfAngle);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,183,q0 = FastMath.cos (halfAngle);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,257,0 = 0.5 * Math.sqrt(s + 1.0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,258,q0 = 0.5 * FastMath.sqrt(s + 1.0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,266,1 = 0.5 * Math.sqrt(s + 1.0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,267,q1 = 0.5 * FastMath.sqrt(s + 1.0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,275,2 = 0.5 * Math.sqrt(s + 1.0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,276,q2 = 0.5 * FastMath.sqrt(s + 1.0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,283,3 = 0.5 * Math.sqrt(s + 1.0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,284,q3 = 0.5 * FastMath.sqrt(s + 1.0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,332,ouble coeff = Math.sqrt (u1u1 / v1v1);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,333,double coeff = FastMath.sqrt (u1u1 / v1v1);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,343,ouble beta   = Math.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,344,double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,419, = Math.sqrt(c);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,420,c = FastMath.sqrt(c);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,467,0 = Math.sqrt(0.5 * (1.0 + dot / normProduct));
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,468,q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,555,ouble inverse = 1 / Math.sqrt(squaredSine);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,556,double inverse = 1 / FastMath.sqrt(squaredSine);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,558,ouble inverse = -1 / Math.sqrt(squaredSine);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,559,double inverse = -1 / FastMath.sqrt(squaredSine);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,568,eturn 2 * Math.asin(Math.sqrt(q1 * q1 + q2 * q2 + q3 * q3));
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,569,return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 * q2 + q3 * q3));
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,570,eturn 2 * Math.acos(-q0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,571,return 2 * FastMath.acos(-q0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,572,eturn 2 * Math.acos(q0);
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,573,return 2 * FastMath.acos(q0);
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,626,"ath.atan2(-(v1.getY()), v1.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,627,"ath.asin(v2.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,628,"ath.atan2(-(v2.getY()), v2.getX())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,627,"FastMath.atan2(-(v1.getY()), v1.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,628,"FastMath.asin(v2.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,629,"FastMath.atan2(-(v2.getY()), v2.getX())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,644,"ath.atan2(v1.getZ(), v1.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,645,"Math.asin(v2.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,646,"ath.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,645,"FastMath.atan2(v1.getZ(), v1.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,646,"-FastMath.asin(v2.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,647,"FastMath.atan2(v2.getZ(), v2.getX())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,662,"ath.atan2(v1.getX(), v1.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,663,"Math.asin(v2.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,664,"ath.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,663,"FastMath.atan2(v1.getX(), v1.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,664,"-FastMath.asin(v2.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,665,"FastMath.atan2(v2.getX(), v2.getY())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,680,"ath.atan2(-(v1.getZ()), v1.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,681,"ath.asin(v2.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,682,"ath.atan2(-(v2.getZ()), v2.getY())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,681,"FastMath.atan2(-(v1.getZ()), v1.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,682,"FastMath.asin(v2.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,683,"FastMath.atan2(-(v2.getZ()), v2.getY())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,698,"ath.atan2(-(v1.getX()), v1.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,699,"ath.asin(v2.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,700,"ath.atan2(-(v2.getX()), v2.getZ())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,699,"FastMath.atan2(-(v1.getX()), v1.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,700,"FastMath.asin(v2.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,701,"FastMath.atan2(-(v2.getX()), v2.getZ())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,716,"ath.atan2(v1.getY(), v1.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,717,"Math.asin(v2.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,718,"ath.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,717,"FastMath.atan2(v1.getY(), v1.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,718,"-FastMath.asin(v2.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,719,"FastMath.atan2(v2.getY(), v2.getZ())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,734,"ath.atan2(v1.getY(), -v1.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,735,"ath.acos(v2.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,736,"ath.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,735,"FastMath.atan2(v1.getY(), -v1.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,736,"FastMath.acos(v2.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,737,"FastMath.atan2(v2.getY(), v2.getZ())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,752,"ath.atan2(v1.getZ(), v1.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,753,"ath.acos(v2.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,754,"ath.atan2(v2.getZ(), -v2.getY())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,753,"FastMath.atan2(v1.getZ(), v1.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,754,"FastMath.acos(v2.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,755,"FastMath.atan2(v2.getZ(), -v2.getY())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,770,"ath.atan2(v1.getX(), v1.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,771,"ath.acos(v2.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,772,"ath.atan2(v2.getX(), -v2.getZ())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,771,"FastMath.atan2(v1.getX(), v1.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,772,"FastMath.acos(v2.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,773,"FastMath.atan2(v2.getX(), -v2.getZ())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,788,"ath.atan2(v1.getZ(), -v1.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,789,"ath.acos(v2.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,790,"ath.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,789,"FastMath.atan2(v1.getZ(), -v1.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,790,"FastMath.acos(v2.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,791,"FastMath.atan2(v2.getZ(), v2.getX())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,806,"ath.atan2(v1.getX(), -v1.getY()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,807,"ath.acos(v2.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,808,"ath.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,807,"FastMath.atan2(v1.getX(), -v1.getY()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,808,"FastMath.acos(v2.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,809,"FastMath.atan2(v2.getX(), v2.getY())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,824,"ath.atan2(v1.getY(), v1.getX()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,825,"ath.acos(v2.getZ()),"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,826,"ath.atan2(v2.getY(), -v2.getX())"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,825,"FastMath.atan2(v1.getY(), v1.getX()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,826,"FastMath.acos(v2.getZ()),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,827,"FastMath.atan2(v2.getY(), -v2.getX())"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,1020,f (Math.abs(fn1 - fn) <= threshold)
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,1021,if (FastMath.abs(fn1 - fn) <= threshold)
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,110,ouble cosDelta = Math.cos(delta);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,111,his.x = Math.cos(alpha) * cosDelta;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,112,his.y = Math.sin(alpha) * cosDelta;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,113,his.z = Math.sin(delta);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,111,double cosDelta = FastMath.cos(delta);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,112,this.x = FastMath.cos(alpha) * cosDelta;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,113,this.y = FastMath.sin(alpha) * cosDelta;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,114,this.z = FastMath.sin(delta);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,206,eturn Math.abs(x) + Math.abs(y) + Math.abs(z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,207,return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,213,eturn Math.sqrt (x * x + y * y + z * z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,214,return FastMath.sqrt (x * x + y * y + z * z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,227,"eturn Math.max(Math.max(Math.abs(x), Math.abs(y)), Math.abs(z));"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,228,"return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));"
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,235,"eturn Math.atan2(y, x);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,236,"return FastMath.atan2(y, x);"
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,243,eturn Math.asin(z / getNorm());
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,244,return FastMath.asin(z / getNorm());
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,315,ouble inverse  = 1 / Math.sqrt(y * y + z * z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,316,double inverse  = 1 / FastMath.sqrt(y * y + z * z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,318,ouble inverse  = 1 / Math.sqrt(x * x + z * z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,319,double inverse  = 1 / FastMath.sqrt(x * x + z * z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,321,ouble inverse  = 1 / Math.sqrt(x * x + y * y);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,322,double inverse  = 1 / FastMath.sqrt(x * x + y * y);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,350,eturn Math.asin(v3.getNorm() / normProduct);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,351,return FastMath.asin(v3.getNorm() / normProduct);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,352,eturn Math.PI - Math.asin(v3.getNorm() / normProduct);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,353,return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,356,eturn Math.acos(dot / normProduct);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,357,return FastMath.acos(dot / normProduct);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,474,inal double dx = Math.abs(v2.x - v1.x);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,475,inal double dy = Math.abs(v2.y - v1.y);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,476,inal double dz = Math.abs(v2.z - v1.z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,475,final double dx = FastMath.abs(v2.x - v1.x);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,476,final double dy = FastMath.abs(v2.y - v1.y);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,477,final double dz = FastMath.abs(v2.z - v1.z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,492,eturn Math.sqrt(dx * dx + dy * dy + dz * dz);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,493,return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,504,inal double dx = Math.abs(v2.x - v1.x);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,505,inal double dy = Math.abs(v2.y - v1.y);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,506,inal double dz = Math.abs(v2.z - v1.z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,507,"eturn Math.max(Math.max(dx, dy), dz);"
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,505,final double dx = FastMath.abs(v2.x - v1.x);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,506,final double dy = FastMath.abs(v2.y - v1.y);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,507,final double dz = FastMath.abs(v2.z - v1.z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,508,"return FastMath.max(FastMath.max(dx, dy), dz);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,216,olumnSum += Math.abs(value);
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,217,columnSum += FastMath.abs(value);
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,218,"axColSum = Math.max(maxColSum, columnSum);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,219,"maxColSum = FastMath.max(maxColSum, columnSum);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,252,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,253,return FastMath.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,30,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,205,eturn Math.sqrt(d);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,206,return FastMath.sqrt(d);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,217,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,218,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,226,orm += Math.abs(e.getValue());
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,227,norm += FastMath.abs(e.getValue());
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,237,"orm = Math.max(norm, Math.abs(e.getValue()));"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,238,"norm = FastMath.max(norm, FastMath.abs(e.getValue()));"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,254, += Math.abs(e.getValue() - v.getEntry(e.getIndex()));
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,255,d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,266, += Math.abs(e.getValue() - v[e.getIndex()]);
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,267,d += FastMath.abs(e.getValue() - v[e.getIndex()]);
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,278," = Math.max(Math.abs(e.getValue() - v.getEntry(e.getIndex())), d);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,279,"d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,290," = Math.max(Math.abs(e.getValue() - v[e.getIndex()]), d);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,src/main/java/org/apache/commons/math/linear/AbstractRealVector.java,291,"d = FastMath.max(FastMath.abs(e.getValue() - v[e.getIndex()]), d);"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,387,"ata[i] = Math.pow(data[i], d);"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,388,"data[i] = FastMath.pow(data[i], d);"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,396,ata[i] = Math.exp(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,397,data[i] = FastMath.exp(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,405,ata[i] = Math.expm1(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,406,data[i] = FastMath.expm1(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,414,ata[i] = Math.log(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,415,data[i] = FastMath.log(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,423,ata[i] = Math.log10(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,424,data[i] = FastMath.log10(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,432,ata[i] = Math.log1p(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,433,data[i] = FastMath.log1p(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,441,ata[i] = Math.cosh(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,442,data[i] = FastMath.cosh(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,450,ata[i] = Math.sinh(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,451,data[i] = FastMath.sinh(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,459,ata[i] = Math.tanh(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,460,data[i] = FastMath.tanh(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,468,ata[i] = Math.cos(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,469,data[i] = FastMath.cos(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,477,ata[i] = Math.sin(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,478,data[i] = FastMath.sin(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,486,ata[i] = Math.tan(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,487,data[i] = FastMath.tan(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,495,ata[i] = Math.acos(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,496,data[i] = FastMath.acos(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,504,ata[i] = Math.asin(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,505,data[i] = FastMath.asin(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,513,ata[i] = Math.atan(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,514,data[i] = FastMath.atan(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,531,ata[i] = Math.abs(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,532,data[i] = FastMath.abs(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,540,ata[i] = Math.sqrt(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,541,data[i] = FastMath.sqrt(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,549,ata[i] = Math.cbrt(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,550,data[i] = FastMath.cbrt(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,558,ata[i] = Math.ceil(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,559,data[i] = FastMath.ceil(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,567,ata[i] = Math.floor(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,568,data[i] = FastMath.floor(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,576,ata[i] = Math.rint(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,577,data[i] = FastMath.rint(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,585,ata[i] = Math.signum(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,586,data[i] = FastMath.signum(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,594,ata[i] = Math.ulp(data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,595,data[i] = FastMath.ulp(data[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,738,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,739,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,746,um += Math.abs(a);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,747,sum += FastMath.abs(a);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,756,"ax = Math.max(max, Math.abs(a));"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,757,"max = FastMath.max(max, FastMath.abs(a));"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,774,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,775,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,788,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,789,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,820,um += Math.abs(delta);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,821,sum += FastMath.abs(delta);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,834,um += Math.abs(delta);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,835,sum += FastMath.abs(delta);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,868,"ax = Math.max(max, Math.abs(delta));"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,869,"max = FastMath.max(max, FastMath.abs(delta));"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,882,"ax = Math.max(max, Math.abs(delta));"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,883,"max = FastMath.max(max, FastMath.abs(delta));"
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,64,"inal int p = Math.min(m, n);"
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,66,"final int p = FastMath.min(m, n);"
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,268,inal double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,270,final double a = (hK[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,293,inal double b = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,295,final double b = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,332,inal double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,334,final double a = (hK[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,357,inal double b = (hKp1[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,359,final double b = (hKp1[k] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,233,"inal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,234,"final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,237,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,238,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,285,"inal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,286,"final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,289,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,290,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,345,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,346,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,347,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,348,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,418,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,419,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,420,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,421,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,528,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,529,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,533,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,534,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,592,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,593,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,654,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,655,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,836,"inal int iStart   = Math.max(row,    firstRow);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,837,"inal int iEnd     = Math.min(endRow + 1, firstRow + iHeight);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,837,"final int iStart   = FastMath.max(row,    firstRow);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,838,"final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,842,"inal int jStart      = Math.max(column,    firstColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,843,"inal int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,843,"final int jStart      = FastMath.max(column,    firstColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,844,"final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1295,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1296,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1297,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1298,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1347,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1348,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1351,"inal int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1352,"final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1397,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1398,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1401,"inal int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1402,"final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1435,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1436,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1440,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1441,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1460,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1461,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1465,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1466,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1488,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1489,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1489,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1490,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1494,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1495,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1495,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1496,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1518,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1519,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1519,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1520,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1524,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1525,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1525,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1526,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1546,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1547,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1549,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1550,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1572,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1573,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1575,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1576,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1600,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1601,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1601,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1602,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1605,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1606,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1606,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1607,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1630,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1631,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1631,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1632,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1635,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1636,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1636,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1637,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,227,"inal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,228,"final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,231,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,232,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,275,"inal int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,276,"final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,279,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,280,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,335,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,336,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,337,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,338,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,408,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,409,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,410,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,411,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,517,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,518,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,522,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,523,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,580,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,581,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,641,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,642,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,676,um += Math.abs(block[i * jWidth + j]);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,677,sum += FastMath.abs(block[i * jWidth + j]);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,682,"axColSum = Math.max(maxColSum, colSums[j]);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,683,"maxColSum = FastMath.max(maxColSum, colSums[j]);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,697,eturn Math.sqrt(sum2);
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,698,return FastMath.sqrt(sum2);
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,862,"inal int iStart   = Math.max(row,    firstRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,863,"inal int iEnd     = Math.min(endRow + 1, firstRow + iHeight);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,863,"final int iStart   = FastMath.max(row,    firstRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,864,"final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,868,"inal int jStart      = Math.max(column,    firstColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,869,"inal int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,869,"final int jStart      = FastMath.max(column,    firstColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,870,"final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1319,"inal int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1320,"final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1321,"inal int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1322,"final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1370,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1371,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1374,"inal int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1375,"final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1418,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1419,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1422,"inal int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1423,"final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1455,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1456,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1460,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1461,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1480,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1481,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1485,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1486,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1508,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1509,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1509,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1510,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1514,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1515,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1515,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1516,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1538,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1539,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1539,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1540,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1544,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1545,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1545,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1546,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1566,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1567,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1569,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1570,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1592,"inal int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1593,"final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1595,"inal int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1596,"final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1620,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1621,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1621,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1622,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1625,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1626,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1626,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1627,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1650,"inal int pStart = Math.max(startRow, p0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1651,"inal int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1651,"final int pStart = FastMath.max(startRow, p0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1652,"final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1655,"inal int qStart = Math.max(startColumn, q0);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1656,"inal int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1656,"final int qStart = FastMath.max(startColumn, q0);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1657,"final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,121,"elativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,122,f (Math.abs(lIJ - lJI) > maxDelta) {
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,122,"relativeSymmetryThreshold * FastMath.max(FastMath.abs(lIJ), FastMath.abs(lJI));"
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,123,if (FastMath.abs(lIJ - lJI) > maxDelta) {
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,139,tI[i] = Math.sqrt(ltI[i]);
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,140,ltI[i] = FastMath.sqrt(ltI[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,148,"f (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,149,"if (FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), Math"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,487,f (Math.abs(realEigenvalues[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,488,axAbsoluteValue=Math.abs(realEigenvalues[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,488,if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,489,maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,490,f (Math.abs(e[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,491,axAbsoluteValue=Math.abs(e[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,491,if (FastMath.abs(e[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,492,maxAbsoluteValue=FastMath.abs(e[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,f (Math.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,498,if (FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,500,f (Math.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,501,if (FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,511,ouble delta = Math.abs(realEigenvalues[m]) + Math.abs(realEigenvalues[m + 1]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,512,f (Math.abs(e[m]) + delta == delta) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,512,double delta = FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,513,if (FastMath.abs(e[m]) + delta == delta) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,522,ouble t = Math.sqrt(1 + q * q);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,523,double t = FastMath.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,535,f (Math.abs(p) >= Math.abs(q)) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,536,if (FastMath.abs(p) >= FastMath.abs(q)) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,537, = Math.sqrt(c * c + 1.0);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,538,t = FastMath.sqrt(c * c + 1.0);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,543, = Math.sqrt(s * s + 1.0);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,544,t = FastMath.sqrt(s * s + 1.0);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,597,f (Math.abs(realEigenvalues[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,598,axAbsoluteValue=Math.abs(realEigenvalues[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,598,if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,599,maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,604,f (Math.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,605,if (FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,126,f (Math.abs(sum) > largest) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,127,argest = Math.abs(sum);
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,127,if (FastMath.abs(sum) > largest) {
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,128,largest = FastMath.abs(sum);
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,133,f (Math.abs(lu[max][col]) < singularityThreshold) {
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,134,if (FastMath.abs(lu[max][col]) < singularityThreshold) {
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,207,eturn Math.abs(value) < epsilon;
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,208,return FastMath.abs(value) < epsilon;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,432,eturn Math.sqrt(res);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,433,return FastMath.sqrt(res);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,454,eturn Math.sqrt(res);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,455,return FastMath.sqrt(res);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,476,ouble delta = Math.abs(iter.value() - v.getEntry(iter.key()));
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,477,double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,484,ouble delta = Math.abs(iter.value());
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,485,ax +=  Math.abs(delta);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,485,double delta = FastMath.abs(iter.value());
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,486,max +=  FastMath.abs(delta);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,507,ouble delta = Math.abs(getEntry(i) - v[i]);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,508,double delta = FastMath.abs(getEntry(i) - v[i]);
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,523,ouble delta = Math.abs(iter.value() - v.getEntry(iter.key()));
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,524,double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,557,ouble delta = Math.abs(getEntry(i) - v[i]);
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,558,double delta = FastMath.abs(getEntry(i) - v[i]);
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,76,"Diag = new double[Math.min(m, n)];"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,77,"rDiag = new double[FastMath.min(m, n)];"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,87,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,88,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,103,inal double a = (qrtMinor[minor] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,104,final double a = (qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,158,"or (int row = Math.min(m, n) - 1; row >= 0; row--) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,159,"for (int row = FastMath.min(m, n) - 1; row >= 0; row--) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,195,"or (int minor = m - 1; minor >= Math.min(m, n); minor--) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,196,"for (int minor = m - 1; minor >= FastMath.min(m, n); minor--) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,199,"or (int minor = Math.min(m, n)-1; minor >= 0; minor--){"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,200,"for (int minor = FastMath.min(m, n)-1; minor >= 0; minor--){"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,233,"or (int j = 0; j < Math.min(i + 1, n); ++j) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,234,"for (int j = 0; j < FastMath.min(i + 1, n); ++j) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,305,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,306,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,381,"inal int kEnd   = Math.min(kStart + blockSize, columns);"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,382,"final int kEnd   = FastMath.min(kStart + blockSize, columns);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,388,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,140,ingularValues[i] = Math.sqrt(Math.abs(singularValues[i]));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,141,singularValues[i] = FastMath.sqrt(FastMath.abs(singularValues[i]));
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,254,"inal double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,255,"final double threshold = FastMath.max(m, n) * FastMath.ulp(singularValues[0]);"
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,216,inal double a = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,218,final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,30,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,209,"f (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,"if (FastMath.abs(t - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs(t))) {"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,212,ath.abs(t - t0));
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,FastMath.abs(t - t0));
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,239,"ath.ulp(Math.max(Math.abs(startTime), Math.abs(endTime))),"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,240,"FastMath.ulp(FastMath.max(FastMath.abs(startTime), FastMath.abs(endTime))),"
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,28,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,152,f (Math.abs(gap) > 1.0e-3 * Math.abs(step)) {
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,153,if (FastMath.abs(gap) > 1.0e-3 * FastMath.abs(step)) {
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,154,"ocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, Math.abs(gap));"
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,155,"LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES, FastMath.abs(gap));"
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,300,f ((Math.abs(tMed - tMin) < 1e-6) || (Math.abs(tMax - tMed) < 1e-6)) {
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,301,if ((FastMath.abs(tMed - tMin) < 1e-6) || (FastMath.abs(tMax - tMed) < 1e-6)) {
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,317,ndex = (int) Math.rint(iLagrange);
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,318,index = (int) FastMath.rint(iLagrange);
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,321,"inal int low  = Math.max(iMin + 1, (9 * iMin + iMax) / 10);"
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,322,"inal int high = Math.min(iMax - 1, (iMin + 9 * iMax) / 10);"
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,322,"final int low  = FastMath.max(iMin + 1, (9 * iMin + iMax) / 10);"
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,323,"final int high = FastMath.min(iMax - 1, (iMin + 9 * iMax) / 10);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,28,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,131,"etMaxGrowth(Math.pow(2.0, -exp));"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,132,"setMaxGrowth(FastMath.pow(2.0, -exp));"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,170,"etMaxGrowth(Math.pow(2.0, -exp));"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,171,"setMaxGrowth(FastMath.pow(2.0, -exp));"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,294,"eturn Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,295,"return FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,98,his.convergence       = Math.abs(convergence);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,99,this.convergence       = FastMath.abs(convergence);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,174,"inal int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,175,"final int    n  = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(t1 - t0) / maxCheckInterval));"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,230,f ((Math.abs(root - ta) <= convergence) &&
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,231,Math.abs(root - previousEventTime) <= convergence)) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,231,if ((FastMath.abs(root - ta) <= convergence) &&
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,232,(FastMath.abs(root - previousEventTime) <= convergence)) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,236,Math.abs(previousEventTime - root) > convergence)) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,237,(FastMath.abs(previousEventTime - root) > convergence)) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,238,f (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,239,if (pendingEvent && (FastMath.abs(t1 - pendingEventTime) <= convergence)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,242,inal double yScale = Math.abs(y[i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,243,final double yScale = FastMath.abs(y[i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,249,rror = Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,250,error = FastMath.sqrt(error / mainSetDimension);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,276,f (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,277,if (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,31,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,294,f (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,295,if (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,439,"inal double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,440,"final double yScale = FastMath.max(FastMath.abs(previous[i]), FastMath.abs(after[i]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,448,eturn Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,449,return FastMath.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,108,his.minStep     = Math.abs(minStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,109,his.maxStep     = Math.abs(maxStep);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,109,this.minStep     = FastMath.abs(minStep);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,110,this.maxStep     = FastMath.abs(maxStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,242,.0e-6 : (0.01 * Math.sqrt(yOnScale2 / yDotOnScale2));
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,243,1.0e-6 : (0.01 * FastMath.sqrt(yOnScale2 / yDotOnScale2));
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,259,DDotOnScale = Math.sqrt(yDDotOnScale) / h;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,260,yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,263,"inal double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,264,"final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,265,"ath.max(1.0e-6, 0.001 * Math.abs(h)) :"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,266,"ath.pow(0.01 / maxInv2, 1.0 / order);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,267," = Math.min(100.0 * Math.abs(h), h1);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,268," = Math.max(h, 1.0e-12 * Math.abs(t0));  // avoids cancellation when computing t1 - t0"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,266,"FastMath.max(1.0e-6, 0.001 * FastMath.abs(h)) :"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,267,"FastMath.pow(0.01 / maxInv2, 1.0 / order);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,268,"h = FastMath.min(100.0 * FastMath.abs(h), h1);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,269,"h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,296,f (Math.abs(h) < minStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,297,if (FastMath.abs(h) < minStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,302,"inStep, Math.abs(h));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,303,"minStep, FastMath.abs(h));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,331,tepSize  = Math.sqrt(minStep * maxStep);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,332,stepSize  = FastMath.sqrt(minStep * maxStep);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,143,"inal double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,145,"final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,152,eturn Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,154,return FastMath.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,62,"12.0 - 2.0 * Math.sqrt(6.0)) / 135.0, (6.0 - Math.sqrt(6.0)) / 45.0, (6.0 - Math.sqrt(6.0)) / 30.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,63,"6.0 + Math.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,64,"(12.0 - 2.0 * FastMath.sqrt(6.0)) / 135.0, (6.0 - FastMath.sqrt(6.0)) / 45.0, (6.0 - FastMath.sqrt(6.0)) / 30.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,65,"(6.0 + FastMath.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,71,"(12.0 - 2.0 * Math.sqrt(6.0)) / 135.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,73,"{(12.0 - 2.0 * FastMath.sqrt(6.0)) / 135.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,74,"(6.0 - Math.sqrt(6.0)) / 180.0, (6.0 - Math.sqrt(6.0)) / 60.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,76,"{(6.0 - FastMath.sqrt(6.0)) / 180.0, (6.0 - FastMath.sqrt(6.0)) / 60.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,77,"(6.0 - Math.sqrt(6.0)) / 120.0, 0.0, (6.0 - Math.sqrt(6.0)) / 40.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,79,"{(6.0 - FastMath.sqrt(6.0)) / 120.0, 0.0, (6.0 - FastMath.sqrt(6.0)) / 40.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,80,"(462.0 + 107.0 * Math.sqrt(6.0)) / 3000.0, 0.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,81,"-402.0 - 197.0 * Math.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * Math.sqrt(6.0)) / 375.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,82,"{(462.0 + 107.0 * FastMath.sqrt(6.0)) / 3000.0, 0.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,83,"(-402.0 - 197.0 * FastMath.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * FastMath.sqrt(6.0)) / 375.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,84,"1.0 / 27.0, 0.0, 0.0, (16.0 + Math.sqrt(6.0)) / 108.0, (16.0 - Math.sqrt(6.0)) / 108.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,86,"{1.0 / 27.0, 0.0, 0.0, (16.0 + FastMath.sqrt(6.0)) / 108.0, (16.0 - FastMath.sqrt(6.0)) / 108.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,87,"19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * Math.sqrt(6.0)) / 1024.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,88,"118.0 - 23.0 * Math.sqrt(6.0)) / 1024.0, -9.0 / 512.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,89,"{19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * FastMath.sqrt(6.0)) / 1024.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,90,"(118.0 - 23.0 * FastMath.sqrt(6.0)) / 1024.0, -9.0 / 512.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,91,"13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * Math.sqrt(6.0)) / 371293.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,92,"51544.0 - 4784.0 * Math.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,93,"{13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * FastMath.sqrt(6.0)) / 371293.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,94,"(51544.0 - 4784.0 * FastMath.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,96,"-1324889724104.0 - 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,97,"-1324889724104.0 + 318801444819.0 * Math.sqrt(6.0)) / 626556937500.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,98,"(-1324889724104.0 - 318801444819.0 * FastMath.sqrt(6.0)) / 626556937500.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,99,"(-1324889724104.0 + 318801444819.0 * FastMath.sqrt(6.0)) / 626556937500.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,103,"-4521408.0 - 1137963.0 * Math.sqrt(6.0)) / 2937500.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,104,"-4521408.0 + 1137963.0 * Math.sqrt(6.0)) / 2937500.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,105,"(-4521408.0 - 1137963.0 * FastMath.sqrt(6.0)) / 2937500.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,106,"(-4521408.0 + 1137963.0 * FastMath.sqrt(6.0)) / 2937500.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,110,"354216.0 + 94326.0 * Math.sqrt(6.0)) / 112847.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,111,"354216.0 - 94326.0 * Math.sqrt(6.0)) / 112847.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,112,"(354216.0 + 94326.0 * FastMath.sqrt(6.0)) / 112847.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,113,"(354216.0 - 94326.0 * FastMath.sqrt(6.0)) / 112847.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,118,"-3457480.0 - 960905.0 * Math.sqrt(6.0)) / 551636.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,119,"-3457480.0 + 960905.0 * Math.sqrt(6.0)) / 551636.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,120,"(-3457480.0 - 960905.0 * FastMath.sqrt(6.0)) / 551636.0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,121,"(-3457480.0 + 960905.0 * FastMath.sqrt(6.0)) / 551636.0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,262,"inal double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,264,"final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,277,eturn Math.abs(h) * error1 / Math.sqrt(mainSetDimension * den);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,279,return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,248,cale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,249,scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,252,cale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,253,scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,294,f (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,295,if (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,317,"ath.min(maxGrowth,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,318,"ath.max(minReduction, safety * Math.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,318,"FastMath.min(maxGrowth,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,319,"FastMath.max(minReduction, safety * FastMath.pow(error, exp)));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,355,"inal double factor = Math.min(maxGrowth,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,356,"ath.max(minReduction,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,357,"afety * Math.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,356,"final double factor = FastMath.min(maxGrowth,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,357,"FastMath.max(minReduction,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,358,"safety * FastMath.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,55," (Math.sqrt(2.0) - 1.0) / 2.0, (2.0 - Math.sqrt(2.0)) / 2.0 },"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,56," 0.0, -Math.sqrt(2.0) / 2.0, (2.0 + Math.sqrt(2.0)) / 2.0 }"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,57,"{ (FastMath.sqrt(2.0) - 1.0) / 2.0, (2.0 - FastMath.sqrt(2.0)) / 2.0 },"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,58,"{ 0.0, -FastMath.sqrt(2.0) / 2.0, (2.0 + FastMath.sqrt(2.0)) / 2.0 }"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,61,".0 / 6.0, (2.0 - Math.sqrt(2.0)) / 6.0, (2.0 + Math.sqrt(2.0)) / 6.0, 1.0 / 6.0"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java,63,"1.0 / 6.0, (2.0 - FastMath.sqrt(2.0)) / 6.0, (2.0 + FastMath.sqrt(2.0)) / 6.0, 1.0 / 6.0"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,51,rivate static final double TWO_MINUS_SQRT_2 = 2 - Math.sqrt(2.0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,52,private static final double TWO_MINUS_SQRT_2 = 2 - FastMath.sqrt(2.0);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,54,rivate static final double TWO_PLUS_SQRT_2 = 2 + Math.sqrt(2.0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java,55,private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,437,"inal double yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,438,"final double yi = FastMath.max(FastMath.abs(y1[i]), FastMath.abs(y2[i]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,442,"inal double yi = Math.max(Math.abs(y1[i]), Math.abs(y2[i]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,443,"final double yi = FastMath.max(FastMath.abs(y1[i]), FastMath.abs(y2[i]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,512,"f (deltaNorm > 4 * Math.max(1.0e-15, initialNorm)) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,513,"if (deltaNorm > 4 * FastMath.max(1.0e-15, initialNorm)) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,616,"inal double log10R = Math.log(Math.max(1.0e-10, tol)) / Math.log(10.0);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,617,"nt targetIter = Math.max(1,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,618,"ath.min(sequence.length - 2,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,619,int) Math.floor(0.5 - 0.6 * log10R)));
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,617,"final double log10R = FastMath.log(FastMath.max(1.0e-10, tol)) / FastMath.log(10.0);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,618,"int targetIter = FastMath.max(1,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,619,"FastMath.min(sequence.length - 2,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,620,(int) FastMath.floor(0.5 - 0.6 * log10R)));
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,696,"New   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,697,"hNew   = FastMath.abs(filterStep(stepSize * stabilityReduction, forward, false));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,713,inal double e = Math.abs(y1[j] - y1Diag[0][j]) / scale[j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,714,final double e = FastMath.abs(y1[j] - y1Diag[0][j]) / scale[j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,716,rror = Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,717,error = FastMath.sqrt(error / mainSetDimension);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,720,"New   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,721,"hNew   = FastMath.abs(filterStep(stepSize * stabilityReduction, forward, false));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,725,"axError = Math.max(4 * error, 1.0);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,726,"maxError = FastMath.max(4 * error, 1.0);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,729,"ouble fac = stepControl2 / Math.pow(error / stepControl1, exp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,730,"inal double pow = Math.pow(stepControl3, exp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,731,"ac = Math.max(pow / stepControl4, Math.min(1 / pow, fac));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,732,"ptimalStep[k]     = Math.abs(filterStep(stepSize * fac, forward, true));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,730,"double fac = stepControl2 / FastMath.pow(error / stepControl1, exp);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,731,"final double pow = FastMath.pow(stepControl3, exp);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,732,"fac = FastMath.max(pow / stepControl4, FastMath.min(1 / pow, fac));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,733,"optimalStep[k]     = FastMath.abs(filterStep(stepSize * fac, forward, true));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,836,"ouble factor = Math.pow(0.5 * sequence[l2], l);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,837,"double factor = FastMath.pow(0.5 * sequence[l2], l);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,842,"actor = Math.pow(0.5 * sequence[j + l2], l);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,843,"factor = FastMath.pow(0.5 * sequence[j + l2], l);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,874,"Int = Math.abs(stepSize / Math.max(Math.pow(interpError, 1.0 / (mu+4)),"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,875,"hInt = FastMath.abs(stepSize / FastMath.max(FastMath.pow(interpError, 1.0 / (mu+4)),"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,887,f (Math.abs(dt) > Math.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,888,if (FastMath.abs(dt) > FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,889,New = Math.abs(dt);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,890,hNew = FastMath.abs(dt);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,940,"ptimalIter = Math.min(k+1, sequence.length - 2);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,941,"optimalIter = FastMath.min(k+1, sequence.length - 2);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,949,"ptimalIter = Math.min(k, sequence.length - 2);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,950,"optimalIter = FastMath.min(k, sequence.length - 2);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,956,"argetIter = Math.min(optimalIter, k);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,957,"New = Math.min(Math.abs(stepSize), optimalStep[targetIter]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,957,"targetIter = FastMath.min(optimalIter, k);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,958,"hNew = FastMath.min(FastMath.abs(stepSize), optimalStep[targetIter]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,981,"New = Math.min(hNew, hInt);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,982,"hNew = FastMath.min(hNew, hInt);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,214,inal double e = 0.5 * Math.sqrt (((double) (i + 1)) / ip5);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,215,final double e = 0.5 * FastMath.sqrt (((double) (i + 1)) / ip5);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,304,rror = Math.sqrt(error / scale.length) * errfac[currentDegree - 5];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,305,error = FastMath.sqrt(error / scale.length) * errfac[currentDegree - 5];
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,117,"inal double yScale = Math.max(Math.abs(y0[j]), Math.abs(y1[j]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,119,"final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,126,eturn Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,128,return FastMath.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,91,his.step       = Math.abs(step);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,92,this.step       = FastMath.abs(step);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,174,f (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,175,if (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,200,"inal double power = Math.pow(normalizedAbscissa, order);"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,201,"final double power = FastMath.pow(normalizedAbscissa, order);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,75,his.h       = Math.abs(h);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,76,this.h       = FastMath.abs(h);
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,27, Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,27,* Commons-FastMath. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,245,"ath.min(bound1, bound2),"
False,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,246,"ath.max(bound1, bound2));"
True,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,246,"FastMath.min(bound1, bound2),"
True,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java,247,"FastMath.max(bound1, bound2));"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,77,inal double difference = Math.abs(p[i] - c[i]);
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,78,"inal double size       = Math.max(Math.abs(p[i]), Math.abs(c[i]));"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,78,final double difference = FastMath.abs(p[i] - c[i]);
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,79,"final double size       = FastMath.max(FastMath.abs(p[i]), FastMath.abs(c[i]));"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,inal double difference = Math.abs(p - c);
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,77,"inal double size       = Math.max(Math.abs(p), Math.abs(c));"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,77,final double difference = FastMath.abs(p - c);
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,78,"final double size       = FastMath.max(FastMath.abs(p), FastMath.abs(c));"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,79,inal double difference = Math.abs(pi - ci);
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,"inal double size       = Math.max(Math.abs(pi), Math.abs(ci));"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,final double difference = FastMath.abs(pi - ci);
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,"final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,79,inal double difference = Math.abs(pi - ci);
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,80,"inal double size       = Math.max(Math.abs(pi), Math.abs(ci));"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,80,final double difference = FastMath.abs(pi - ci);
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,81,"final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,244,     = Math.sqrt(c1 / c2);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,245,mega = Math.sqrt(c2 / c3);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,245,a     = FastMath.sqrt(c1 / c2);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,246,omega = FastMath.sqrt(c2 / c3);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,269,ouble   cosine = Math.cos(omegaX);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,270,ouble   sine   = Math.sin(omegaX);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,270,double   cosine = FastMath.cos(omegaX);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,271,double   sine   = FastMath.sin(omegaX);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,276,"hi = Math.atan2(-fsMean, fcMean);"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java,277,"phi = FastMath.atan2(-fsMean, fcMean);"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,117,eturn a * Math.cos(omega * x + phi);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,118,return a * FastMath.cos(omega * x + phi);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,126,inal double cosAlpha = Math.cos(alpha);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,127,inal double sinAlpha = Math.sin(alpha);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,127,final double cosAlpha = FastMath.cos(alpha);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,128,final double sinAlpha = FastMath.sin(alpha);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,50,eturn a * Math.cos(omega * x + phi);
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,51,return a * FastMath.cos(omega * x + phi);
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,55,"eturn new HarmonicFunction(a * omega, omega, phi + Math.PI / 2);"
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java,56,"return new HarmonicFunction(a * omega, omega, phi + FastMath.PI / 2);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,35,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,192,ouble wi = Math.sqrt(residualsWeights[i]);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,193,double wi = FastMath.sqrt(residualsWeights[i]);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,222,eightedResiduals[i]= residual*Math.sqrt(residualsWeights[i]);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,223,weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,226,ost = Math.sqrt(cost);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,227,cost = FastMath.sqrt(cost);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,241,eturn Math.sqrt(getChiSquare() / rows);
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,242,return FastMath.sqrt(getChiSquare() / rows);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,309,inal double c = Math.sqrt(getChiSquare() / (rows - cols));
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,310,final double c = FastMath.sqrt(getChiSquare() / (rows - cols));
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,312,rrors[i] = Math.sqrt(covar[i][i]) * c;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,313,errors[i] = FastMath.sqrt(covar[i][i]) * c;
False,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,36, Commons-Math.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,36,* Commons-FastMath.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,245,"olvedCols  = Math.min(rows, cols);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,246,"solvedCols  = FastMath.min(rows, cols);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,305,Norm = Math.sqrt(xNorm);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,306,xNorm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,323,"axCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,324,"maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,336,"iag[j] = Math.max(diag[j], jacNorm[j]);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,337,"diag[j] = FastMath.max(diag[j], jacNorm[j]);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,367,mNorm = Math.sqrt(lmNorm);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,368,lmNorm = FastMath.sqrt(lmNorm);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,370,"elta = Math.min(delta, lmNorm);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,371,"delta = FastMath.min(delta, lmNorm);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,413,"elta = tmp * Math.min(delta, 10.0 * lmNorm);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,414,"delta = tmp * FastMath.min(delta, 10.0 * lmNorm);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,429,Norm = Math.sqrt(xNorm);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,430,xNorm = FastMath.sqrt(xNorm);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,454,f (((Math.abs(actRed) <= costRelativeTolerance) &&
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,455,if (((FastMath.abs(actRed) <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,463,f ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,464,if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,531,xNorm = Math.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,532,dxNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,573,ouble gNorm = Math.sqrt(sum2);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,574,double gNorm = FastMath.sqrt(sum2);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,577,"aru = 2.2251e-308 / Math.min(delta, 0.1);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,578,"paru = 2.2251e-308 / FastMath.min(delta, 0.1);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,582,"mPar = Math.min(paru, Math.max(lmPar, parl));"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,583,"lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,591,"mPar = Math.max(2.2251e-308, 0.001 * paru);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,592,"lmPar = FastMath.max(2.2251e-308, 0.001 * paru);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,593,ouble sPar = Math.sqrt(lmPar);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,594,double sPar = FastMath.sqrt(lmPar);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,607,xNorm = Math.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,608,dxNorm = FastMath.sqrt(dxNorm);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,613,f ((Math.abs(fp) <= 0.1 * delta) ||
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,614,if ((FastMath.abs(fp) <= 0.1 * delta) ||
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,640,"arl = Math.max(parl, lmPar);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,641,"parl = FastMath.max(parl, lmPar);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,642,"aru = Math.min(paru, lmPar);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,643,"paru = FastMath.min(paru, lmPar);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,646,"mPar = Math.max(parl, lmPar + correction);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,647,"lmPar = FastMath.max(parl, lmPar + correction);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,711,f (Math.abs(rkk) < Math.abs(lmDiag[k])) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,712,if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,713,in   = 1.0 / Math.sqrt(1.0 + cotan * cotan);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,714,sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,717,os = 1.0 / Math.sqrt(1.0 + tan * tan);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,718,cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,807,acNorm[k] = Math.sqrt(norm2);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,808,jacNorm[k] = FastMath.sqrt(norm2);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,841,ouble alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,842,double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,227,"or (double step = h; step < Double.MAX_VALUE; step *= Math.max(2, yA / yB)) {"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,228,"for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB)) {"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,37,rivate static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,38,private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,115,inal double tol1 = eps * Math.abs(x) + t;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,116,final double tol1 = eps * FastMath.abs(x) + t;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,119,f (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,120,if (FastMath.abs(x - m) > tol2 - 0.5 * (b - a)) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,125,f (Math.abs(e) > tol1) { // Fit parabola.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,126,if (FastMath.abs(e) > tol1) { // Fit parabola.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,142,ath.abs(p) < Math.abs(0.5 * q * r)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,143,FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,175,f (Math.abs(d) < tol1) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,176,if (FastMath.abs(d) < tol1) {
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,266, = Math.sqrt(-2 * Math.log(s) / s);
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,267,s = FastMath.sqrt(-2 * FastMath.log(s) / s);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,102,inal double alpha = 2 * Math.PI * x;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,103,inal double r      = Math.sqrt(-2 * Math.log(y));
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,104,andom       = r * Math.cos(alpha);
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,105,extGaussian = r * Math.sin(alpha);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,103,final double alpha = 2 * FastMath.PI * x;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,104,final double r      = FastMath.sqrt(-2 * FastMath.log(y));
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,105,random       = r * FastMath.cos(alpha);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,106,nextGaussian = r * FastMath.sin(alpha);
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,246,ouble sqrt = Math.sqrt(c[ir][ir]);
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,247,double sqrt = FastMath.sqrt(c[ir][ir]);
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,34,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,359,eturn Math.min(
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,360,"ath.max((int) Math.ceil((value- min) / delta) - 1, 0),"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,360,return FastMath.min(
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,361,"FastMath.max((int) FastMath.ceil((value- min) / delta) - 1, 0),"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,377,ouble x = Math.random();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,378,double x = FastMath.random();
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,170,"or (int k = Math.max(N, seed.length); k != 0; k--) {"
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,172,"for (int k = FastMath.max(N, seed.length); k != 0; k--) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,46,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,365,ouble p = Math.exp(-mean);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,366,double p = FastMath.exp(-mean);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,381,inal double lambda = Math.floor(mean);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,382,final double lambda = FastMath.floor(mean);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,383,inal double logLambda = Math.log(lambda);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,384,final double logLambda = FastMath.log(lambda);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,386,inal double delta = Math.sqrt(lambda * Math.log(32 * lambda / Math.PI + 1));
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,387,final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,389,inal double a1 = Math.sqrt(Math.PI * twolpd) * Math.exp(1 / 8 * lambda);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,390,inal double a2 = (twolpd / delta) * Math.exp(-delta * (1 + delta) / twolpd);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,390,final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,391,final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,407, = n * Math.sqrt(lambda + halfDelta) - 0.5d;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,408,x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,411, = x < 0 ? Math.floor(x) : Math.ceil(x);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,412,y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,420, = Math.ceil(x);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,421,y = FastMath.ceil(x);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,490,eturn -mean * Math.log(unif);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,491,return -mean * FastMath.log(unif);
True,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,38,rivate static final double SQRT3 = Math.sqrt(3.0);
True,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,40,private static final double SQRT3 = FastMath.sqrt(3.0);
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,73,inal double f = 1 / Math.sqrt(normSq);
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,75,final double f = 1 / FastMath.sqrt(normSq);
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,151,et = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,152,"ath.log(a) - logBeta(a, b, epsilon, maxIterations)) *"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,152,ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,153,"FastMath.log(a) - logBeta(a, b, epsilon, maxIterations)) *"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,61,rivate static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,62,private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,109,et = ((x + .5) * Math.log(tmp)) - tmp +
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,110,ALF_LOG_2_PI + Math.log(sum / x);
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,110,ret = ((x + .5) * FastMath.log(tmp)) - tmp +
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,111,HALF_LOG_2_PI + FastMath.log(sum / x);
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,178,hile (Math.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,179,while (FastMath.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,191,et = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,192,ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,266,et = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,267,ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,306,eturn Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,307,return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,144,ut[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,145,out[i][j] = FastMath.sqrt((1 - r * r) /(nObs - 2));
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,173,ouble t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,174,double t = FastMath.abs(r * FastMath.sqrt((nObs - 2)/(1 - r * r)));
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,257,"ouble sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));"
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,258,"double sigma = FastMath.sqrt(covarianceMatrix.getEntry(i, i));"
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,261,"sigma * Math.sqrt(covarianceMatrix.getEntry(j, j)));"
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,262,"(sigma * FastMath.sqrt(covarianceMatrix.getEntry(j, j)));"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,36,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,210,tdDev = Math.sqrt(getVariance());
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,211,stdDev = FastMath.sqrt(getVariance());
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,35,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,251,"tdDev[i] = Math.sqrt(matrix.getEntry(i, i));"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,252,"stdDev[i] = FastMath.sqrt(matrix.getEntry(i, i));"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,111,eturn Math.sqrt(variance);
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,113,return FastMath.sqrt(variance);
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,33,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,220,tdDev = Math.sqrt(getVariance());
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,221,stdDev = FastMath.sqrt(getVariance());
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,109,eturn Math.exp(sumOfLogs.getResult() / sumOfLogs.getN());
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,110,return FastMath.exp(sumOfLogs.getResult() / sumOfLogs.getN());
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,142,eturn Math.exp(
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,143,return FastMath.exp(
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,173,ouble stdDev = Math.sqrt(variance.getResult());
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,174,double stdDev = FastMath.sqrt(variance.getResult());
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,179,"ccum3 += Math.pow(values[i] - mean, 4.0);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,180,"accum3 += FastMath.pow(values[i] - mean, 4.0);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,181,"ccum3 /= Math.pow(stdDev, 4.0d);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,182,"accum3 /= FastMath.pow(stdDev, 4.0d);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,189,"3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,190,"(3 * FastMath.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,112,(n0 - 1) * (n0 -2) * Math.sqrt(variance) * variance);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,113,((n0 - 1) * (n0 -2) * FastMath.sqrt(variance) * variance);
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,178,ccum3 /= variance * Math.sqrt(variance);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,179,accum3 /= variance * FastMath.sqrt(variance);
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,125,eturn Math.sqrt(variance.getResult());
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,126,return FastMath.sqrt(variance.getResult());
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,152,eturn Math.sqrt(variance.evaluate(values));
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,153,return FastMath.sqrt(variance.evaluate(values));
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,175,"eturn Math.sqrt(variance.evaluate(values, begin, length));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,176,"return FastMath.sqrt(variance.evaluate(values, begin, length));"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,204,"eturn Math.sqrt(variance.evaluate(values, mean, begin, length));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,205,"return FastMath.sqrt(variance.evaluate(values, mean, begin, length));"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,229,"eturn Math.sqrt(variance.evaluate(values, mean));"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,230,"return FastMath.sqrt(variance.evaluate(values, mean));"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,213,ouble fpos = Math.floor(pos);
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,214,double fpos = FastMath.floor(pos);
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,165,"roduct *= Math.pow(values[i], weights[i]);"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,166,"product *= FastMath.pow(values[i], weights[i]);"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,22,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,80,alue += Math.log(d);
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,81,value += FastMath.log(d);
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,135,umLog += Math.log(values[i]);
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,136,sumLog += FastMath.log(values[i]);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,85,f (Math.abs(sumExpected - sumObserved) > 10E-6) {
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,86,if (FastMath.abs(sumExpected - sumObserved) > 10E-6) {
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,259,eight = Math.sqrt((double) countSum1 / (double) countSum2);
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,260,weight = FastMath.sqrt((double) countSum1 / (double) countSum2);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,908,eturn (m - mu) / Math.sqrt(v / n);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,909,return (m - mu) / FastMath.sqrt(v / n);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,926,eturn (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,927,return (m1 - m2) / FastMath.sqrt((v1 / n1) + (v2 / n2));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,944,eturn (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,945,return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2));
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,959,"ouble t = Math.abs(t(m, mu, v, n));"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,960,"double t = FastMath.abs(t(m, mu, v, n));"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,982,"ouble t = Math.abs(t(m1, m2, v1, v2, n1, n2));"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,983,"double t = FastMath.abs(t(m1, m2, v1, v2, n1, n2));"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1007,"ouble t = Math.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,1008,"double t = FastMath.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));"
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,345,ong f = Math.round(c);
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,346,long f = FastMath.round(c);
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,354, = Math.round(c);
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,355,f = FastMath.round(c);
True,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,156,esult[i] = Math.sqrt(sigma * betaVariance[i][i]);
True,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,157,result[i] = FastMath.sqrt(sigma * betaVariance[i][i]);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,302,f (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,303,if (FastMath.abs(sumXX) < 10 * Double.MIN_VALUE) {
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,338,"eturn Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,339,"return FastMath.max(0d, sumYY - sumXY * sumXY / sumXX);"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,434,ouble result = Math.sqrt(getRSquare());
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,435,double result = FastMath.sqrt(getRSquare());
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,472,eturn Math.sqrt(
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,473,return FastMath.sqrt(
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,488,eturn Math.sqrt(getMeanSquareError() / sumXX);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,489,return FastMath.sqrt(getMeanSquareError() / sumXX);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,582,ath.abs(getSlope()) / getSlopeStdErr()));
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,583,FastMath.abs(getSlope()) / getSlopeStdErr()));
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,102,ouble scaling_coefficient = Math.sqrt(2.0 / (f.length-1));
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,103,double scaling_coefficient = FastMath.sqrt(2.0 / (f.length-1));
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,128,ouble scaling_coefficient = Math.sqrt(2.0 / (n-1));
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,129,double scaling_coefficient = FastMath.sqrt(2.0 / (n-1));
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,243,inal double b = Math.sin(i * Math.PI / n) * (f[i] - f[n-i]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,244,inal double c = Math.cos(i * Math.PI / n) * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,244,final double b = FastMath.sin(i * FastMath.PI / n) * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,245,final double c = FastMath.cos(i * FastMath.PI / n) * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,128,ouble scaling_coefficient = 1.0 / Math.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,129,double scaling_coefficient = 1.0 / FastMath.sqrt(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,152,ouble scaling_coefficient = 1.0 / Math.sqrt(n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,153,double scaling_coefficient = 1.0 / FastMath.sqrt(n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,170,ouble scaling_coefficient = 1.0 / Math.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,171,double scaling_coefficient = 1.0 / FastMath.sqrt(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,246,ouble scaling_coefficient = 1.0 / Math.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,247,double scaling_coefficient = 1.0 / FastMath.sqrt(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,270,ouble scaling_coefficient = 1.0 / Math.sqrt(n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,271,double scaling_coefficient = 1.0 / FastMath.sqrt(n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,288,ouble scaling_coefficient = 1.0 / Math.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,289,double scaling_coefficient = 1.0 / FastMath.sqrt(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,840,inal int absN = Math.abs(n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,841,final int absN = FastMath.abs(n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,847,inal double t    = 2.0 * Math.PI / absN;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,848,inal double cosT = Math.cos(t);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,849,inal double sinT = Math.sin(t);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,848,final double t    = 2.0 * FastMath.PI / absN;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,849,final double cosT = FastMath.cos(t);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,850,final double sinT = FastMath.sin(t);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,102,ouble scaling_coefficient = Math.sqrt(2.0 / f.length);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,103,double scaling_coefficient = FastMath.sqrt(2.0 / f.length);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,127,ouble scaling_coefficient = Math.sqrt(2.0 / n);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,128,double scaling_coefficient = FastMath.sqrt(2.0 / n);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,235,inal double a = Math.sin(i * Math.PI / n) * (f[i] + f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,236,final double a = FastMath.sin(i * FastMath.PI / n) * (f[i] + f[n-i]);
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,152,"inal double scale = Math.max(a,b);"
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,152,"final double scale = FastMath.max(a,b);"
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,190,elativeError = Math.abs(r / c - 1.0);
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,190,relativeError = FastMath.abs(r / c - 1.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,17,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,20,"* Faster, more accurate, portable alternative to StrictMath."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,21,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,22,* @since 2.2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,24,public class FastMath {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,26,"/** Archimede's constant PI, ratio of circle circumference to diameter. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,27,public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,29,"/** Napier's constant e, base of the natural logarithm. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,30,public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,32,"/** Exponential evaluated at integer values,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,33,* exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,35,private static final double EXP_INT_TABLE_A[] = new double[1500];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,37,"/** Exponential evaluated at integer values,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,38,* exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,40,private static final double EXP_INT_TABLE_B[] = new double[1500];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,42,/** Exponential over the range of 0 - 1 in increments of 2^-10
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,43,* exp(x/1024) =  expFracTableA[x] + expFracTableB[x].
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,45,private static final double EXP_FRAC_TABLE_A[] = new double[1025];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,47,/** Exponential over the range of 0 - 1 in increments of 2^-10
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,48,* exp(x/1024) =  expFracTableA[x] + expFracTableB[x].
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,50,private static final double EXP_FRAC_TABLE_B[] = new double[1025];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,52,"/** Factorial table, for Taylor series expansions. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,53,private static final double FACT[] = new double[20];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,55,/** Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,56,private static final double LN_MANT[][] = new double[1024][];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,58,/** log(2) (high bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,59,private static final double LN_2_A = 0.693147063255310059;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,61,/** log(2) (low bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,62,private static final double LN_2_B = 1.17304635250823482e-7;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,64,/** Coefficients for slowLog. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,65,private static final double LN_SPLIT_COEF[][] = {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,66,"{2.0, 0.0},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,67,"{0.6666666269302368, 3.9736429850260626E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,68,"{0.3999999761581421, 2.3841857910019882E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,69,"{0.2857142686843872, 1.7029898543501842E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,70,"{0.2222222089767456, 1.3245471311735498E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,71,"{0.1818181574344635, 2.4384203044354907E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,72,"{0.1538461446762085, 9.140260083262505E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,73,"{0.13333332538604736, 9.220590270857665E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,74,"{0.11764700710773468, 1.2393345855018391E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,75,"{0.10526403784751892, 8.251545029714408E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,76,"{0.0952233225107193, 1.2675934823758863E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,77,"{0.08713622391223907, 1.1430250008909141E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,78,"{0.07842259109020233, 2.404307984052299E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,79,"{0.08371849358081818, 1.176342548272881E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,80,"{0.030589580535888672, 1.2958646899018938E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,81,"{0.14982303977012634, 1.225743062930824E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,84,"/** Coefficients for log, when input 0.99 < x < 1.01. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,85,private static final double LN_QUICK_COEF[][] = {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,86,"{1.0, 5.669184079525E-24},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,87,"{-0.25, -0.25},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,88,"{0.3333333134651184, 1.986821492305628E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,89,"{-0.25, -6.663542893624021E-14},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,90,"{0.19999998807907104, 1.1921056801463227E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,91,"{-0.1666666567325592, -7.800414592973399E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,92,"{0.1428571343421936, 5.650007086920087E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,93,"{-0.12502530217170715, -7.44321345601866E-11},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,94,"{0.11113807559013367, 9.219544613762692E-9},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,97,/** Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,98,private static final double LN_HI_PREC_COEF[][] = {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,99,"{1.0, -6.032174644509064E-23},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,100,"{-0.25, -0.25},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,101,"{0.3333333134651184, 1.9868161777724352E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,102,"{-0.2499999701976776, -2.957007209750105E-8},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,103,"{0.19999954104423523, 1.5830993332061267E-10},"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,104,"{-0.16624879837036133, -2.6033824355191673E-8}"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,107,/** Sine table (high bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,108,private static final double SINE_TABLE_A[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,110,/** Sine table (low bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,111,private static final double SINE_TABLE_B[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,113,/** Cosine table (high bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,114,private static final double COSINE_TABLE_A[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,116,/** Cosine table (low bits). */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,117,private static final double COSINE_TABLE_B[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,119,"/** Tangent table, used by atan() (high bits). */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,120,private static final double TANGENT_TABLE_A[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,122,"/** Tangent table, used by atan() (low bits). */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,123,private static final double TANGENT_TABLE_B[] = new double[14];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,125,"/** Bits of 1/(2*pi), need for reducePayneHanek(). */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,126,private static long RECIP_2PI[] = new long[] {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,127,"(0x28be60dbL << 32) | 0x9391054aL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,128,"(0x7f09d5f4L << 32) | 0x7d4d3770L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,129,"(0x36d8a566L << 32) | 0x4f10e410L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,130,"(0x7f9458eaL << 32) | 0xf7aef158L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,131,"(0x6dc91b8eL << 32) | 0x909374b8L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,132,"(0x01924bbaL << 32) | 0x82746487L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,133,"(0x3f877ac7L << 32) | 0x2c4a69cfL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,134,"(0xba208d7dL << 32) | 0x4baed121L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,135,"(0x3a671c09L << 32) | 0xad17df90L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,136,"(0x4e64758eL << 32) | 0x60d4ce7dL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,137,"(0x272117e2L << 32) | 0xef7e4a0eL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,138,"(0xc7fe25ffL << 32) | 0xf7816603L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,139,"(0xfbcbc462L << 32) | 0xd6829b47L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,140,"(0xdb4d9fb3L << 32) | 0xc9f2c26dL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,141,"(0xd3d18fd9L << 32) | 0xa797fa8bL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,142,"(0x5d49eeb1L << 32) | 0xfaf97c5eL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,143,"(0xcf41ce7dL << 32) | 0xe294a4baL,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,144,0x9afed7ecL << 32  };
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,146,"/** Bits of pi/4, need for reducePayneHanek(). */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,147,private static long PI_O_4_BITS[] = new long[] {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,148,"(0xc90fdaa2L << 32) | 0x2168c234L,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,149,(0xc4c6628bL << 32) | 0x80dc1cd1L };
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,151,/** Eighthes.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,152,"* This is used by sinQ, because its faster to do a table lookup than"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,153,* a multiply in this time-critical routine
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,155,"private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,157,// Initialize tables
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,158,static {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,159,int i;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,161,// Generate an array of factorials
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,162,FACT[0] = 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,163,for (i = 1; i < 20; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,164,FACT[i] = FACT[i-1] * i;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,167,double tmp[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,168,double recip[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,170,// Populate expIntTable
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,171,for (i = 0; i < 750; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,172,"expint(i, tmp);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,173,EXP_INT_TABLE_A[i+750] = tmp[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,174,EXP_INT_TABLE_B[i+750] = tmp[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,176,if (i != 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,177,// Negative integer powers
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,178,"splitReciprocal(tmp, recip);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,179,EXP_INT_TABLE_A[750-i] = recip[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,180,EXP_INT_TABLE_B[750-i] = recip[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,184,// Populate expFracTable
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,185,for (i = 0; i < 1025; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,186,"slowexp(i/1024.0, tmp);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,187,EXP_FRAC_TABLE_A[i] = tmp[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,188,EXP_FRAC_TABLE_B[i] = tmp[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,191,// Populate lnMant table
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,192,for (i = 0; i < 1024; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,193,double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,194,LN_MANT[i] = slowLog(d);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,197,// Build the sine and cosine tables
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,198,buildSinCosTables();
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,202,* Private Constructor
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,204,private FastMath() {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,207,/** Compute the arc cosine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,208,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,209,* @return arc cosine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,211,public static double acos(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,212,return Math.acos(a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,215,/** Compute the arc sine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,216,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,217,* @return arc sine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,219,public static double asin(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,220,return Math.asin(a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,223,/** Compute the square root of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,224,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,225,* @return square root of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,227,public static double sqrt(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,228,return Math.sqrt(a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,231,/** Compute the cubic root of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,232,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,233,* @return cubic root of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,235,public static double cbrt(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,236,return Math.cbrt(a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,239,/** Compute the hyperbolic cosine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,240,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,241,* @return hyperbolic cosine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,243,public static double cosh(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,244,return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,247,/** Compute the hyperbolic sine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,248,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,249,* @return hyperbolic sine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,251,public static double sinh(double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,253,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,254,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,255,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,256,a = -a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,259,double absSinh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,260,if (a > 0.3) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,261,absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,262,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,263,final double a2 = a * a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,264,if (a > 0.05) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,265,absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,266,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,267,absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,271,return negative ? -absSinh : absSinh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,275,/** Compute the hyperbolic tangent of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,276,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,277,* @return hyperbolic tangent of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,279,public static double tanh(double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,281,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,282,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,283,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,284,a = -a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,287,double absTanh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,288,if (a > 0.074) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,289,final double twoA = 2 * a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,290,absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,291,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,292,final double a2 = a * a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,293,if (a > 0.016) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,294,absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,295,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,296,absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,300,return negative ? -absTanh : absTanh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,304,/** Compute the inverse hyperbolic cosine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,305,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,306,* @return inverse hyperbolic cosine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,308,public static double acosh(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,309,return FastMath.log(a + FastMath.sqrt(a * a - 1));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,312,/** Compute the inverse hyperbolic sine of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,313,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,314,* @return inverse hyperbolic sine of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,316,public static double asinh(double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,318,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,319,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,320,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,321,a = -a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,324,double absAsinh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,325,if (a > 0.167) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,326,absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,327,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,328,final double a2 = a * a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,329,if (a > 0.097) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,330,absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,331,} else if (a > 0.036) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,332,absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,333,} else if (a > 0.0036) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,334,absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,335,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,336,absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,340,return negative ? -absAsinh : absAsinh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,344,/** Compute the inverse hyperbolic tangent of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,345,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,346,* @return inverse hyperbolic tangent of a
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,348,public static double atanh(double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,350,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,351,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,352,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,353,a = -a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,356,double absAtanh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,357,if (a > 0.15) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,358,absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,359,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,360,final double a2 = a * a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,361,if (a > 0.087) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,362,absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,363,} else if (a > 0.031) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,364,absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,365,} else if (a > 0.003) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,366,absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,367,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,368,absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,372,return negative ? -absAtanh : absAtanh;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,376,/** Compute the signum of a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,377,"* The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,378,* @param a number on which evaluation is done
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,379,"* @return -1, 0, +1 or NaN depending on sign of a"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,381,public static double signum(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,382,return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,385,/** Compute next number towards positive infinity.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,386,* @param a number to which neighbor should be computed
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,387,* @return neighbor of a towards positive infinity
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,389,public static double nextUp(final double a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,390,"return nextAfter(a, Double.POSITIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,393,/** Returns a pseudo-random number between 0.0 and 1.0.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,394,* @return a random number between 0.0 and 1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,396,public static double random() {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,397,return Math.random();
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,401,* Exponential function.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,403,"* Computes exp(x), function result is nearly rounded.   It will be correctly"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,404,"* rounded to the theoretical value for 99.9% of input values, otherwise it will"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,405,* have a 1 UPL error.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,407,* Method:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,408,*    Lookup intVal = exp(int(x))
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,409,*    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,410,*    Compute z as the exponential of the remaining bits by a polynomial minus one
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,411,*    exp(x) = intVal * fracVal * (1 + z)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,413,* Accuracy:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,414,"*    Calculation is done with 63 bits of precision, so result should be correctly"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,415,"*    rounded for 99.9% of input values, with less than 1 ULP error otherwise."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,417,* @param x   a double
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,418,* @return double e<sup>x</sup>
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,420,public static double exp(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,421,"return exp(x, 0.0, null);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,425,* Internal helper method for exponential function.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,426,* @param x original argument of the exponential function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,427,* @param extra extra bits of precision on input (To Be Confirmed)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,428,* @param hiPrec extra bits of precision on output (To Be Confirmed)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,429,* @return exp(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,431,"private static double exp(double x, double extra, double[] hiPrec) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,432,double intPartA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,433,double intPartB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,434,int intVal;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,436,/* Lookup exp(floor(x)).
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,437,"* intPartA will have the upper 22 bits, intPartB will have the lower"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,438,* 52 bits.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,440,if (x < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,441,intVal = (int) -x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,443,if (intVal > 746) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,444,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,447,if (intVal > 709) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,448,/* This will produce a subnormal output */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,449,"final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,450,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,451,hiPrec[0] /= 285040095144011776.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,452,hiPrec[1] /= 285040095144011776.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,454,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,457,if (intVal == 709) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,458,/* exp(1.494140625) is nearly a machine number... */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,459,"final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,460,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,461,hiPrec[0] /= 4.455505956692756620;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,462,hiPrec[1] /= 4.455505956692756620;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,464,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,467,intVal++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,469,intPartA = EXP_INT_TABLE_A[750-intVal];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,470,intPartB = EXP_INT_TABLE_B[750-intVal];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,472,intVal = -intVal;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,473,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,474,intVal = (int) x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,476,if (intVal > 709) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,477,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,480,intPartA = EXP_INT_TABLE_A[750+intVal];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,481,intPartB = EXP_INT_TABLE_B[750+intVal];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,484,"/* Get the fractional part of x, find the greatest multiple of 2^-10 less than"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,485,* x and look up the exp function of it.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,486,"* fracPartA will have the upper 22 bits, fracPartB the lower 52 bits."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,488,final int intFrac = (int) ((x - intVal) * 1024.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,489,final double fracPartA = EXP_FRAC_TABLE_A[intFrac];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,490,final double fracPartB = EXP_FRAC_TABLE_B[intFrac];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,492,/* epsilon is the difference in x from the nearest multiple of 2^-10.  It
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,493,* has a value in the range 0 <= epsilon < 2^-10.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,494,* Do the subtraction from x as the last step to avoid possible loss of percison.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,496,final double epsilon = x - (intVal + intFrac / 1024.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,498,/* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,499,"full double precision (52 bits).  Since z < 2^-10, we will have"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,500,62 bits of precision when combined with the contant 1.  This will be
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,501,used in the last addition below to get proper rounding. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,503,"/* Remez generated polynomial.  Converges on the interval [0, 2^-10], error"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,504,is less than 0.5 ULP */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,505,double z = 0.04168701738764507;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,506,z = z * epsilon + 0.1666666505023083;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,507,z = z * epsilon + 0.5000000000042687;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,508,z = z * epsilon + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,509,z = z * epsilon + -3.940510424527919E-20;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,511,/* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,512,expansion.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,513,tempA is exact since intPartA and intPartB only have 22 bits each.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,514,tempB will have 52 bits of precision.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,516,double tempA = intPartA * fracPartA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,517,double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,519,/* Compute the result.  (1+z)(tempA+tempB).  Order of operations is
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,520,important.  For accuracy add by increasing size.  tempA is exact and
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,521,much larger than the others.  If there are extra bits specified from the
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,522,"pow() function, use them. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,523,final double tempC = tempB + tempA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,524,final double result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,525,if (extra != 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,526,result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,527,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,528,result = tempC*z + tempB + tempA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,531,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,532,// If requesting high precision
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,533,hiPrec[0] = tempA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,534,hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,537,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,540,/** Compute exp(x) - 1
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,541,* @param x number to compute shifted exponential
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,542,* @return exp(x) - 1
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,544,public static double expm1(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,545,if (x != x || x == 0.0) { // NaN or zero
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,546,return x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,549,if (x <= -1.0 || x >= 1.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,550,// If not between +/- 1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,551,//return exp(x) - 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,552,double hiPrec[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,553,"exp(x, 0.0, hiPrec);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,554,if (x > 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,555,return -1.0 + hiPrec[0] + hiPrec[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,556,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,557,final double ra = -1.0 + hiPrec[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,558,double rb = -(ra + 1.0 - hiPrec[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,559,rb += hiPrec[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,560,return ra + rb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,564,double baseA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,565,double baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,566,double epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,567,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,569,if (x < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,570,x = -x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,571,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,575,int intFrac = (int) (x * 1024.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,576,double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,577,double tempB = EXP_FRAC_TABLE_B[intFrac];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,579,double temp = tempA + tempB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,580,tempB = -(temp - tempA - tempB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,581,tempA = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,583,temp = tempA * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,584,baseA = tempA + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,585,baseB = tempB + (tempA - baseA);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,587,epsilon = x - intFrac/1024.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,591,/* Compute expm1(epsilon) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,592,double zb = 0.008336750013465571;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,593,zb = zb * epsilon + 0.041666663879186654;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,594,zb = zb * epsilon + 0.16666666666745392;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,595,zb = zb * epsilon + 0.49999999999999994;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,596,zb = zb * epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,597,zb = zb * epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,599,double za = epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,600,double temp = za + zb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,601,zb = -(temp - za - zb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,602,za = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,604,temp = za * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,605,temp = za + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,606,zb += za - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,607,za = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,609,/* Combine the parts.   expm1(a+b) = expm1(a) + expm1(b) + expm1(a)*expm1(b) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,610,double ya = za * baseA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,611,//double yb = za*baseB + zb*baseA + zb*baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,612,temp = ya + za * baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,613,double yb = -(temp - ya - za * baseB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,614,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,616,temp = ya + zb * baseA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,617,yb += -(temp - ya - zb * baseA);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,618,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,620,temp = ya + zb * baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,621,yb += -(temp - ya - zb*baseB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,622,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,624,//ya = ya + za + baseA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,625,//yb = yb + zb + baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,626,temp = ya + baseA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,627,yb += -(temp - baseA - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,628,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,630,temp = ya + za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,631,//yb += (ya > za) ? -(temp - ya - za) : -(temp - za - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,632,yb += -(temp - ya - za);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,633,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,635,temp = ya + baseB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,636,//yb += (ya > baseB) ? -(temp - ya - baseB) : -(temp - baseB - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,637,yb += -(temp - ya - baseB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,638,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,640,temp = ya + zb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,641,//yb += (ya > zb) ? -(temp - ya - zb) : -(temp - zb - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,642,yb += -(temp - ya - zb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,643,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,645,if (negative) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,646,/* Compute expm1(-x) = -expm1(x) / (expm1(x) + 1) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,647,double denom = 1.0 + ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,648,double denomr = 1.0 / denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,649,double denomb = -(denom - 1.0 - ya) + yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,650,double ratio = ya * denomr;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,651,temp = ratio * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,652,final double ra = ratio + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,653,double rb = ratio - ra;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,655,temp = denom * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,656,za = denom + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,657,zb = denom - za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,659,rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,661,// f(x) = x/1+x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,662,// Compute f'(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,663,// Product rule:  d(uv) = du*v + u*dv
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,664,// Chain rule:  d(f(g(x)) = f'(g(x))*f(g'(x))
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,665,// d(1/x) = -1/(x*x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,666,// d(1/1+x) = -1/( (1+x)^2) *  1 =  -1/((1+x)*(1+x))
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,667,// d(x/1+x) = -x/((1+x)(1+x)) + 1/1+x = 1 / ((1+x)(1+x))
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,669,// Adjust for yb
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,670,rb += yb * denomr;                      // numerator
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,671,rb += -ya * denomb * denomr * denomr;   // denominator
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,673,// negate
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,674,ya = -ra;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,675,yb = -rb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,678,return ya + yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,682,"*  For x between 0 and 1, returns exp(x), uses extended precision"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,683,*  @param x argument of exponential
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,684,*  @param result placeholder where to place exp(x) split in two terms
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,685,*  for extra precision (i.e. exp(x) = result[0] ° result[1]
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,686,*  @return exp(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,688,"private static double slowexp(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,689,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,690,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,691,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,692,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,693,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,694,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,696,for (int i = 19; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,697,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,698,ys[0] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,699,ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,701,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,702,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,704,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,705,ys[0] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,706,ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,709,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,710,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,711,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,714,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,717,"/** Compute split[0], split[1] such that their sum is equal to d,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,718,* and split[0] has its 30 least significant bits as zero.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,719,* @param d number to split
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,720,* @param split placeholder where to place the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,722,"private static void split(final double d, final double split[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,723,if (d < 8e298 && d > -8e298) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,724,final double a = d * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,725,split[0] = (d + a) - a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,726,split[1] = d - split[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,727,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,728,final double a = d * 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,729,split[0] = (d + a - d) * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,730,split[1] = d - split[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,734,/** Recompute a split.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,735,"* @param a input/out array containing the split, changed"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,736,* on output
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,738,private static void resplit(final double a[]) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,739,final double c = a[0] + a[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,740,final double d = -(c - a[0] - a[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,742,if (c < 8e298 && c > -8e298) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,743,double z = c * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,744,a[0] = (c + z) - z;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,745,a[1] = c - a[0] + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,746,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,747,double z = c * 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,748,a[0] = (c + z - c) * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,749,a[1] = c - a[0] + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,753,/** Multiply two numbers in split form.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,754,* @param a first term of multiplication
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,755,* @param b second term of multiplication
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,756,* @param ans placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,758,"private static void splitMult(double a[], double b[], double ans[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,759,ans[0] = a[0] * b[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,760,ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,762,/* Resplit */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,763,resplit(ans);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,766,/** Add two numbers in split form.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,767,* @param a first term of addition
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,768,* @param b second term of addition
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,769,* @param ans placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,771,"private static void splitAdd(final double a[], final double b[], final double ans[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,772,ans[0] = a[0] + b[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,773,ans[1] = a[1] + b[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,775,resplit(ans);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,778,/** Compute the reciprocal of in.  Use the following algorithm.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,779,*  in = c + d.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,780,*  want to find x + y such that x+y = 1/(c+d) and x is much
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,781,*  larger than y and x has several zero bits on the right.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,783,"*  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,784,*  Use following identity to compute (a+b)/(c+d)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,786,*  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,787,*  set x = a/c  and y = (bc - ad) / (c^2 + cd)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,788,"*  This will be close to the right answer, but there will be"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,789,*  some rounding in the calculation of X.  So by carefully
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,790,*  computing 1 - (c+d)(x+y) we can compute an error and
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,791,*  add that back in.   This is done carefully so that terms
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,792,*  of similar size are subtracted first.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,793,"*  @param in initial number, in split form"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,794,*  @param result placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,796,"private static void splitReciprocal(final double in[], final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,797,final double b = 1.0/4194304.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,798,final double a = 1.0 - b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,800,if (in[0] == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,801,in[0] = in[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,802,in[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,805,result[0] = a / in[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,806,result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,808,if (result[1] != result[1]) { // can happen if result[1] is NAN
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,809,result[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,812,/* Resplit */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,813,resplit(result);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,815,for (int i = 0; i < 2; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,816,"/* this may be overkill, probably once is enough */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,817,double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,818,result[1] * in[0] - result[1] * in[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,819,/*err = 1.0 - err; */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,820,err = err * (result[0] + result[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,821,"/*printf(""err = %16e\n"", err); */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,822,result[1] += err;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,826,/** Compute (a[0] + a[1]) * (b[0] + b[1]) in extended precision.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,827,* @param a first term of the multiplication
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,828,* @param b second term of the multiplication
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,829,* @param result placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,831,"private static void quadMult(final double a[], final double b[], final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,832,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,833,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,834,final double zs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,836,/* a[0] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,837,"split(a[0], xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,838,"split(b[0], ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,839,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,841,result[0] = zs[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,842,result[1] = zs[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,844,/* a[0] * b[1] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,845,"split(b[1], ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,846,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,848,double tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,849,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,850,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,851,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,852,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,853,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,855,/* a[1] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,856,"split(a[1], xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,857,"split(b[0], ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,858,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,860,tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,861,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,862,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,863,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,864,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,865,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,867,/* a[1] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,868,"split(a[1], xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,869,"split(b[1], ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,870,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,872,tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,873,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,874,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,875,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,876,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,877,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,880,/** Compute exp(p) for a integer p in extended precision.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,881,* @param p integer whose exponential is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,882,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,883,* @return exp(p) in standard precision (equal to result[0] + result[1])
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,885,"private static double expint(int p, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,886,//double x = M_E;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,887,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,888,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,889,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,890,"//split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,891,//xs[1] = (double)(2.7182818284590452353602874713526625L - xs[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,892,//xs[0] = 2.71827697753906250000;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,893,//xs[1] = 4.85091998273542816811e-06;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,894,//xs[0] = Double.longBitsToDouble(0x4005bf0800000000L);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,895,//xs[1] = Double.longBitsToDouble(0x3ed458a2bb4a9b00L);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,897,/* E */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,898,xs[0] = 2.718281828459045;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,899,xs[1] = 1.4456468917292502E-16;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,901,"split(1.0, ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,903,while (p > 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,904,if ((p & 1) != 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,905,"quadMult(ys, xs, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,906,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,909,"quadMult(xs, xs, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,910,xs[0] = as[0]; xs[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,912,p >>= 1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,915,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,916,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,917,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,919,resplit(result);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,922,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,927,* Natural logarithm.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,929,* @param x   a double
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,930,* @return log(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,932,public static double log(final double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,933,"return log(x, null);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,937,* Internal helper method for natural logarithm function.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,938,* @param x original argument of the natural logarithm function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,939,* @param hiPrec extra bits of precision on output (To Be Confirmed)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,940,* @return log(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,942,"private static double log(final double x, final double[] hiPrec) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,943,long bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,945,"/* Handle special cases of negative input, and NaN */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,946,if ((bits & 0x8000000000000000L) != 0 || x != x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,947,if (x != 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,948,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,949,hiPrec[0] = Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,952,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,956,/* Handle special cases of Positive infinity. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,957,if (x == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,958,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,959,hiPrec[0] = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,962,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,965,/* Extract the exponent */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,966,int exp = (int)(bits >> 52)-1023;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,968,if ((bits & 0x7ff0000000000000L) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,969,// Subnormal!
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,970,if (x == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,971,// Zero
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,972,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,973,hiPrec[0] = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,976,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,979,/* Normalize the subnormal number. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,980,bits <<= 1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,981,while ( (bits & 0x0010000000000000L) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,982,exp--;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,983,bits <<= 1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,988,if (exp == -1 || exp == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,989,if (x < 1.01 && x > 0.99 && hiPrec == null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,990,"/* The normal method doesn't work well in the range [0.99, 1.01], so call do a straight"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,991,polynomial expansion in higer precision. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,993,/* Compute x - 1.0 and split it */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,994,double xa = x - 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,995,double xb = xa - x + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,996,double tmp = xa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,997,double aa = xa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,998,double ab = xa - aa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,999,xa = aa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1000,xb = ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1002,double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1003,double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1005,for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1006,/* Multiply a = y * x */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1007,aa = ya * xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1008,ab = ya * xb + yb * xa + yb * xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1009,"/* split, so now y = a */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1010,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1011,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1012,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1014,/* Add  a = y + lnQuickCoef */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1015,aa = ya + LN_QUICK_COEF[i][0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1016,ab = yb + LN_QUICK_COEF[i][1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1017,/* Split y = a */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1018,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1019,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1020,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1023,/* Multiply a = y * x */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1024,aa = ya * xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1025,ab = ya * xb + yb * xa + yb * xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1026,"/* split, so now y = a */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1027,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1028,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1029,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1031,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1032,hiPrec[0] = ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1033,hiPrec[1] = yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1036,return ya + yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1040,"// lnm is a log of a number in the range of 1.0 - 2.0, so 0 <= lnm < ln(2)"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1041,double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1044,double epsilon = x / Double.longBitsToDouble(bits & 0xfffffc0000000000L);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1046,epsilon -= 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1049,// y is the most significant 10 bits of the mantissa
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1050,//double y = Double.longBitsToDouble(bits & 0xfffffc0000000000L);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1051,//double epsilon = (x - y) / y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1052,double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1054,double lnza = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1055,double lnzb = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1057,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1058,/* split epsilon -> x */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1059,double tmp = epsilon * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1060,double aa = epsilon + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1061,double ab = epsilon - aa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1062,double xa = aa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1063,double xb = ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1065,"/* Need a more accurate epsilon, so adjust the division. */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1066,double numer = (double)(bits & 0x3ffffffffffL);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1067,double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1068,aa = numer - xa*denom - xb * denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1069,xb += aa / denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1071,/* Remez polynomial evaluation */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1072,double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1073,double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1075,for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1076,/* Multiply a = y * x */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1077,aa = ya * xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1078,ab = ya * xb + yb * xa + yb * xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1079,"/* split, so now y = a */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1080,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1081,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1082,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1084,/* Add  a = y + lnHiPrecCoef */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1085,aa = ya + LN_HI_PREC_COEF[i][0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1086,ab = yb + LN_HI_PREC_COEF[i][1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1087,/* Split y = a */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1088,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1089,ya = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1090,yb = aa - ya + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1093,/* Multiply a = y * x */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1094,aa = ya * xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1095,ab = ya * xb + yb * xa + yb * xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1097,"/* split, so now lnz = a */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1099,tmp = aa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1100,lnza = aa + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1101,lnzb = aa - lnza + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1103,lnza = aa + ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1104,lnzb = -(lnza - aa - ab);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1105,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1106,/* High precision not required.  Eval Remez polynomial
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1107,using standard double precision */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1108,lnza = -0.16624882440418567;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1109,lnza = lnza * epsilon + 0.19999954120254515;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1110,lnza = lnza * epsilon + -0.2499999997677497;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1111,lnza = lnza * epsilon + 0.3333333333332802;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1112,lnza = lnza * epsilon + -0.5;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1113,lnza = lnza * epsilon + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1114,lnza = lnza * epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1117,/* Relative sizes:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1118,"* lnzb     [0, 2.33E-10]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1119,"* lnm[1]   [0, 1.17E-7]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1120,"* ln2B*exp [0, 1.12E-4]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1121,"* lnza      [0, 9.7E-4]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1122,"* lnm[0]   [0, 0.692]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1123,"* ln2A*exp [0, 709]"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1126,/* Compute the following sum:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1127,* lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1130,//return lnzb + lnm[1] + ln2B*exp + lnza + lnm[0] + ln2A*exp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1131,double a = LN_2_A*exp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1132,double b = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1133,double c = a+lnm[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1134,double d = -(c-a-lnm[0]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1135,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1136,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1138,c = a + lnza;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1139,d = -(c - a - lnza);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1140,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1141,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1143,c = a + LN_2_B*exp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1144,d = -(c - a - LN_2_B*exp);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1145,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1146,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1148,c = a + lnm[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1149,d = -(c - a - lnm[1]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1150,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1151,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1153,c = a + lnzb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1154,d = -(c - a - lnzb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1155,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1156,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1158,if (hiPrec != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1159,hiPrec[0] = a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1160,hiPrec[1] = b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1163,return a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1166,/** Compute log(1 + x).
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1167,* @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1168,* @return log(1 + x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1170,public static double log1p(final double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1171,double xpa = 1.0 + x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1172,double xpb = -(xpa - 1.0 - x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1174,if (x>1e-6 || x<-1e-6) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1175,double hiPrec[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1177,"log(xpa, hiPrec);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1179,/* Do a taylor series expansion around xpa */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1180,/* f(x+y) = f(x) + f'(x)*y + f''(x)/2 y^2 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1181,double fx1 = xpb/xpa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1183,double epsilon = 0.5 * fx1 + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1184,epsilon = epsilon * fx1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1186,return epsilon + hiPrec[1] + hiPrec[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1189,"/* Value is small |x| < 1e6, do a Taylor series centered on 1.0 */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1190,double y = x * 0.333333333333333 - 0.5;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1191,y = y * x + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1192,y = y * x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1194,return y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1197,/** Compute the base 10 logarithm.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1198,* @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1199,* @return log10(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1201,public static double log10(final double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1202,final double hiPrec[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1204,"log(x, hiPrec);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1206,final double tmp = hiPrec[0] * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1207,final double lna = hiPrec[0] + tmp - tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1208,final double lnb = hiPrec[0] - lna + hiPrec[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1210,final double rln10a = 0.4342944622039795;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1211,final double rln10b = 1.9699272335463627E-8;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1213,return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1217,* Power function.  Compute x^y.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1219,* @param x   a double
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1220,* @param y   a double
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1221,* @return double
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1223,"public static double pow(double x, double y) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1224,final double lns[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1226,if (y == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1227,return 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1230,/* Handle special case x<0 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1231,if (x < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1232,if (y == (long) y) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1233,// If y is an integer
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1234,"return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1235,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1236,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1240,if (x == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1241,long bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1242,if ((bits & 0x8000000000000000L) != 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1243,// -zero
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1244,if (y < 0 && y == (long)y)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1245,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1248,if (y < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1249,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1251,if (y > 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1252,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1255,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1258,if (x == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1259,if (y < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1260,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1261,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1262,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1266,if (y == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1267,if (x * x > 1.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1268,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1269,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1270,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1274,if (y == Double.NEGATIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1275,if (x*x < 1.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1276,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1277,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1278,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1282,/* Split y into ya and yb such that y = ya+yb */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1283,double tmp1 = y * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1284,final double ya = y + tmp1 - tmp1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1285,final double yb = y - ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1287,/* Compute ln(x) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1288,"log(x, lns);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1289,double lna = lns[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1290,double lnb = lns[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1292,/* resplit lns */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1293,tmp1 = lna * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1294,final double tmp2 = lna + tmp1 - tmp1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1295,lnb += lna - tmp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1296,lna = tmp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1298,// y*ln(x) = (aa+ab)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1299,final double aa = lna * ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1300,final double ab = lna * yb + lnb * ya + lnb * yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1302,lna = aa+ab;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1303,lnb = -(lna - aa - ab);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1305,double z = 1.0 / 120.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1306,z = z * lnb + (1.0 / 24.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1307,z = z * lnb + (1.0 / 6.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1308,z = z * lnb + 0.5;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1309,z = z * lnb + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1310,z = z * lnb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1312,"final double result = exp(lna, z, null);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1313,//result = result + result * z;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1314,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1317,"/** xi in the range of [1, 2]."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1318,*                                3        5        7
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1319,*      x+1           /          x        x        x          \
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1320,*  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1321,*      1-x           \          3        5        7          /
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1323,"* So, compute a Remez approximation of the following function"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1325,*  ln ((sqrt(x)+1)/(1-sqrt(x)))  /  x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1327,* This will be an even function with only positive coefficents.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1328,* x is in the range [0 - 1/3].
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1330,* Transform xi for input to the above function by setting
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1331,"* x = (xi-1)/(xi+1).   Input to the polynomial is x^2, then"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1332,* the result is multiplied by x.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1333,* @param xi number from which log is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1334,* @return log(xi)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1336,private static double[] slowLog(double xi) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1337,double x[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1338,double x2[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1339,double y[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1340,double a[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1342,"split(xi, x);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1344,/* Set X = (x-1)/(x+1) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1345,x[0] += 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1346,resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1347,"splitReciprocal(x, a);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1348,x[0] -= 2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1349,resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1350,"splitMult(x, a, y);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1351,x[0] = y[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1352,x[1] = y[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1354,/* Square X -> X2*/
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1355,"splitMult(x, x, x2);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1358,//x[0] -= 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1359,//resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1361,y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1362,y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1364,for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1365,"splitMult(y, x2, a);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1366,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1367,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1368,"splitAdd(y, LN_SPLIT_COEF[i], a);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1369,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1370,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1373,"splitMult(y, x, a);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1374,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1375,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1377,return y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1381,* For x between 0 and pi/4 compute sine.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1382,* @param x number from which sine is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1383,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1384,* @return sin(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1386,"private static double slowSin(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1387,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1388,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1389,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1390,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1391,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1392,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1394,for (int i = 19; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1395,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1396,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1398,if ( (i & 1) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1399,continue;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1402,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1403,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1405,if ( (i & 2) != 0 ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1406,facts[0] = -facts[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1407,facts[1] = -facts[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1410,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1411,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1414,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1415,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1416,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1419,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1423,*  For x between 0 and pi/4 compute cosine
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1424,* @param x number from which cosine is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1425,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1426,* @return cos(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1428,"private static double slowCos(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1430,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1431,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1432,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1433,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1434,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1435,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1437,for (int i = 19; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1438,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1439,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1441,if ( (i & 1) != 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1442,continue;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1445,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1446,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1448,if ( (i & 2) != 0 ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1449,facts[0] = -facts[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1450,facts[1] = -facts[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1453,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1454,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1457,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1458,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1459,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1462,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1465,/** Build the sine and cosine tables.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1467,private static void buildSinCosTables() {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1468,final double result[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1470,/* Use taylor series for 0 <= x <= 6/8 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1471,for (int i = 0; i < 7; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1472,double x = i / 8.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1474,"slowSin(x, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1475,SINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1476,SINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1478,"slowCos(x, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1479,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1480,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1483,"/* Use angle addition formula to complete table to 13/8, just beyond pi/2 */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1484,for (int i = 7; i < 14; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1485,double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1486,double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1487,double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1488,double bs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1489,double temps[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1491,if ( (i & 1) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1492,"// Even, use double angle"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1493,xs[0] = SINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1494,xs[1] = SINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1495,ys[0] = COSINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1496,ys[1] = COSINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1498,/* compute sine */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1499,"splitMult(xs, ys, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1500,SINE_TABLE_A[i] = result[0] * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1501,SINE_TABLE_B[i] = result[1] * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1503,/* Compute cosine */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1504,"splitMult(ys, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1505,"splitMult(xs, xs, temps);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1506,temps[0] = -temps[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1507,temps[1] = -temps[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1508,"splitAdd(as, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1509,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1510,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1511,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1512,xs[0] = SINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1513,xs[1] = SINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1514,ys[0] = COSINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1515,ys[1] = COSINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1516,as[0] = SINE_TABLE_A[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1517,as[1] = SINE_TABLE_B[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1518,bs[0] = COSINE_TABLE_A[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1519,bs[1] = COSINE_TABLE_B[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1521,/* compute sine */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1522,"splitMult(xs, bs, temps);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1523,"splitMult(ys, as, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1524,"splitAdd(result, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1525,SINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1526,SINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1528,/* Compute cosine */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1529,"splitMult(ys, bs, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1530,"splitMult(xs, as, temps);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1531,temps[0] = -temps[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1532,temps[1] = -temps[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1533,"splitAdd(result, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1534,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1535,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1539,/* Compute tangent = sine/cosine */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1540,for (int i = 0; i < 14; i++) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1541,double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1542,double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1543,double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1545,as[0] = COSINE_TABLE_A[i];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1546,as[1] = COSINE_TABLE_B[i];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1548,"splitReciprocal(as, ys);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1550,xs[0] = SINE_TABLE_A[i];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1551,xs[1] = SINE_TABLE_B[i];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1553,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1555,TANGENT_TABLE_A[i] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1556,TANGENT_TABLE_B[i] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1562,"*  Computes sin(x) - x, where |x| < 1/16."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1563,*  Use a Remez polynomial approximation.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1564,*  @param x a number smaller than 1/16
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1565,*  @return sin(x) - x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1567,private static double polySine(final double x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1569,double x2 = x*x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1571,double p = 2.7553817452272217E-6;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1572,p = p * x2 + -1.9841269659586505E-4;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1573,p = p * x2 + 0.008333333333329196;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1574,p = p * x2 + -0.16666666666666666;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1575,//p *= x2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1576,//p *= x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1577,p = p * x2 * x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1579,return p;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1583,"*  Computes cos(x) - 1, where |x| < 1/16."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1584,*  Use a Remez polynomial approximation.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1585,*  @param x a number smaller than 1/16
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1586,*  @return cos(x) - 1
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1588,private static double polyCosine(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1589,double x2 = x*x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1591,double p = 2.479773539153719E-5;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1592,p = p * x2 + -0.0013888888689039883;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1593,p = p * x2 + 0.041666666666621166;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1594,p = p * x2 + -0.49999999999999994;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1595,p *= x2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1597,return p;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1601,*  Compute sine over the first quadrant (0 < x < pi/2).
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1602,*  Use combination of table lookup and rational polynomial expansion.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1603,*  @param xa number from which sine is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1604,*  @param xb extra bits for x (may be 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1605,*  @return sin(xa + xb)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1607,"private static double sinQ(double xa, double xb) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1608,int idx = (int) ((xa * 8.0) + 0.5);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1609,final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1611,// Table lookups
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1612,final double sintA = SINE_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1613,final double sintB = SINE_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1614,final double costA = COSINE_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1615,final double costB = COSINE_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1617,"// Polynomial eval of sin(epsilon), cos(epsilon)"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1618,double sinEpsA = epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1619,double sinEpsB = polySine(epsilon);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1620,final double cosEpsA = 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1621,final double cosEpsB = polyCosine(epsilon);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1623,// Split epsilon   xa + xb = x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1624,final double temp = sinEpsA * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1625,double temp2 = (sinEpsA + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1626,sinEpsB +=  sinEpsA - temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1627,sinEpsA = temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1629,/* Compute sin(x) by angle addition formula */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1630,double result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1632,/* Compute the following sum:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1634,* result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1635,*          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1637,* Ranges of elements
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1639,* xxxtA   0            PI/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1640,* xxxtB   -1.5e-9      1.5e-9
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1641,* sinEpsA -0.0625      0.0625
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1642,* sinEpsB -6e-11       6e-11
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1643,* cosEpsA  1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1644,* cosEpsB  0           -0.0625
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1648,//result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1649,//          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1651,//result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1652,//result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1653,double a = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1654,double b = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1656,double t = sintA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1657,double c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1658,double d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1659,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1660,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1662,t = costA * sinEpsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1663,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1664,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1665,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1666,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1668,b = b + sintA * cosEpsB + costA * sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1670,t = sintA*cosEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1671,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1672,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1673,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1674,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1676,t = costA*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1677,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1678,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1679,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1680,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1683,b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1685,t = sintB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1686,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1687,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1688,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1689,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1691,t = costB*sinEpsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1692,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1693,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1694,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1695,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1697,t = sintB*cosEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1698,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1699,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1700,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1701,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1703,t = costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1704,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1705,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1706,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1707,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1710,if (xb != 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1711,t = ((costA + costB) * (cosEpsA + cosEpsB) -
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1712,(sintA + sintB) * (sinEpsA + sinEpsB)) * xb;  // approximate cosine*xb
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1713,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1714,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1715,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1716,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1719,result = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1721,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1725,* Compute cosine in the first quadrant by subtracting input from PI/2 and
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1726,* then calling sinQ.  This is more accurate as the input approaches PI/2.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1727,*  @param xa number from which cosine is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1728,*  @param xb extra bits for x (may be 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1729,*  @return cos(xa + xb)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1731,"private static double cosQ(double xa, double xb) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1732,final double pi2a = 1.5707963267948966;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1733,final double pi2b = 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1735,final double a = pi2a - xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1736,double b = -(a - pi2a + xa);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1737,b += pi2b - xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1739,"return sinQ(a, b);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1743,*  Compute tangent (or cotangent) over the first quadrant.   0 < x < pi/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1744,*  Use combination of table lookup and rational polynomial expansion.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1745,*  @param xa number from which sine is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1746,*  @param xb extra bits for x (may be 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1747,"*  @param cotanFlag if true, compute the cotangent instead of the tangent"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1748,"*  @return tan(xa+xb) (or cotangent, depending on cotanFlag)"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1750,"private static double tanQ(double xa, double xb, boolean cotanFlag) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1752,int idx = (int) ((xa * 8.0) + 0.5);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1753,final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1755,// Table lookups
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1756,final double sintA = SINE_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1757,final double sintB = SINE_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1758,final double costA = COSINE_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1759,final double costB = COSINE_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1761,"// Polynomial eval of sin(epsilon), cos(epsilon)"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1762,double sinEpsA = epsilon;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1763,double sinEpsB = polySine(epsilon);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1764,final double cosEpsA = 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1765,final double cosEpsB = polyCosine(epsilon);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1767,// Split epsilon   xa + xb = x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1768,double temp = sinEpsA * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1769,double temp2 = (sinEpsA + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1770,sinEpsB +=  sinEpsA - temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1771,sinEpsA = temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1773,/* Compute sin(x) by angle addition formula */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1775,/* Compute the following sum:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1777,* result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1778,*          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1780,* Ranges of elements
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1782,* xxxtA   0            PI/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1783,* xxxtB   -1.5e-9      1.5e-9
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1784,* sinEpsA -0.0625      0.0625
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1785,* sinEpsB -6e-11       6e-11
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1786,* cosEpsA  1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1787,* cosEpsB  0           -0.0625
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1791,//result = sintA + costA*sinEpsA + sintA*cosEpsB + costA*sinEpsB +
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1792,//          sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1794,//result = sintA + sintA*cosEpsB + sintB + sintB * cosEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1795,//result += costA*sinEpsA + costA*sinEpsB + costB*sinEpsA + costB * sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1796,double a = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1797,double b = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1799,// Compute sine
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1800,double t = sintA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1801,double c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1802,double d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1803,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1804,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1806,t = costA*sinEpsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1807,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1808,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1809,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1810,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1812,b = b + sintA*cosEpsB + costA*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1813,b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1815,double sina = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1816,double sinb = -(sina - a - b);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1818,// Compute cosine
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1820,a = b = c = d = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1822,t = costA*cosEpsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1823,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1824,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1825,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1826,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1828,t = -sintA*sinEpsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1829,c = a + t;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1830,d = -(c - a - t);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1831,a = c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1832,b = b + d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1834,b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1835,b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1837,double cosa = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1838,double cosb = -(cosa - a - b);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1840,if (cotanFlag) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1841,double tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1842,tmp = cosa; cosa = sina; sina = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1843,tmp = cosb; cosb = sinb; sinb = tmp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1847,"/* estimate and correct, compute 1.0/(cosa+cosb) */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1849,double est = (sina+sinb)/(cosa+cosb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1850,double err = (sina - cosa*est) + (sinb - cosb*est);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1851,est += err/(cosa+cosb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1852,err = (sina - cosa*est) + (sinb - cosb*est);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1855,"// f(x) = 1/x,   f'(x) = -1/x^2"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1857,double est = sina/cosa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1859,/* Split the estimate to get more accurate read on division rounding */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1860,temp = est * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1861,double esta = (est + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1862,double estb =  est - esta;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1864,temp = cosa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1865,double cosaa = (cosa + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1866,double cosab =  cosa - cosaa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1868,//double err = (sina - est*cosa)/cosa;  // Correction for division rounding
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1869,double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1870,err += sinb/cosa;                     // Change in est due to sinb
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1871,err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1873,if (xb != 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1874,// tan' = 1 + tan^2      cot' = -(1 + cot^2)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1875,// Approximate impact of xb
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1876,double xbadj = xb + est*est*xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1877,if (cotanFlag) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1878,xbadj = -xbadj;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1881,err += xbadj;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1884,return est+err;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1887,/** Reduce the input argument using the Payne and Hanek method.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1888,*  This is good for all inputs 0.0 < x < inf
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1889,*  Output is remainder after dividing by PI/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1890,*  The result array should contain 3 numbers.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1891,"*  result[0] is the integer portion, so mod 4 this gives the quadrant."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1892,*  result[1] is the upper bits of the remainder
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1893,*  result[2] is the lower bits of the remainder
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1895,* @param x number to reduce
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1896,* @param result placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1898,"private static void reducePayneHanek(double x, double result[])"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1900,/* Convert input double to bits */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1901,long inbits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1902,int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1904,/* Convert to fixed point representation */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1905,inbits &= 0x000fffffffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1906,inbits |= 0x0010000000000000L;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1908,/* Normalize input to be between 0.5 and 1.0 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1909,exponent++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1910,inbits <<= 11;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1912,"/* Based on the exponent, get a shifted copy of recip2pi */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1913,long shpi0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1914,long shpiA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1915,long shpiB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1916,int idx = exponent >> 6;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1917,int shift = exponent - (idx << 6);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1919,if (shift != 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1920,shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1921,shpi0 |= RECIP_2PI[idx] >>> (64-shift);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1922,shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1923,shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1924,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1925,shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1926,shpiA = RECIP_2PI[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1927,shpiB = RECIP_2PI[idx+1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1930,/* Multiply input by shpiA */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1931,long a = inbits >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1932,long b = inbits & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1934,long c = shpiA >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1935,long d = shpiA & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1937,long ac = a * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1938,long bd = b * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1939,long bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1940,long ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1942,long prodB = bd + (ad << 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1943,long prodA = ac + (ad >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1945,boolean bita = (bd & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1946,boolean bitb = (ad & 0x80000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1947,boolean bitsum = (prodB & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1949,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1950,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1951,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1952,prodA++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1955,bita = (prodB & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1956,bitb = (bc & 0x80000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1958,prodB = prodB + (bc << 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1959,prodA = prodA + (bc >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1961,bitsum = (prodB & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1963,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1964,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1965,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1966,prodA++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1969,/* Multiply input by shpiB */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1970,c = shpiB >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1971,d = shpiB & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1972,ac = a * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1973,bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1974,ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1976,/* Collect terms */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1977,ac = ac + ((bc + ad) >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1979,bita = (prodB & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1980,bitb = (ac & 0x8000000000000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1981,prodB += ac;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1982,bitsum = (prodB & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1983,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1984,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1985,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1986,prodA++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1989,/* Multiply by shpi0 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1990,c = shpi0 >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1991,d = shpi0 & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1993,bd = b * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1994,bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1995,ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1997,prodA += bd + ((bc + ad) << 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2000,"* prodA, prodB now contain the remainder as a fraction of PI.  We want this as a fraction of"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2001,"* PI/2, so use the following steps:"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2002,* 1.) multiply by 4.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2003,* 2.) do a fixed point muliply by PI/4.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2004,* 3.) Convert to floating point.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2005,* 4.) Multiply by 2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2008,/* This identifies the quadrant */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2009,int intPart = (int)(prodA >>> 62);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2011,/* Multiply by 4 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2012,prodA <<= 2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2013,prodA |= prodB >>> 62;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2014,prodB <<= 2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2016,/* Multiply by PI/4 */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2017,a = prodA >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2018,b = prodA & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2020,c = PI_O_4_BITS[0] >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2021,d = PI_O_4_BITS[0] & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2023,ac = a * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2024,bd = b * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2025,bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2026,ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2028,long prod2B = bd + (ad << 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2029,long prod2A = ac + (ad >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2031,bita = (bd & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2032,bitb = (ad & 0x80000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2033,bitsum = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2035,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2036,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2037,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2038,prod2A++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2041,bita = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2042,bitb = (bc & 0x80000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2044,prod2B = prod2B + (bc << 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2045,prod2A = prod2A + (bc >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2047,bitsum = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2049,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2050,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2051,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2052,prod2A++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2055,/* Multiply input by pio4bits[1] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2056,c = PI_O_4_BITS[1] >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2057,d = PI_O_4_BITS[1] & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2058,ac = a * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2059,bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2060,ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2062,/* Collect terms */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2063,ac = ac + ((bc + ad) >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2065,bita = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2066,bitb = (ac & 0x8000000000000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2067,prod2B += ac;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2068,bitsum = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2069,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2070,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2071,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2072,prod2A++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2075,/* Multiply inputB by pio4bits[0] */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2076,a = prodB >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2077,b = prodB & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2078,c = PI_O_4_BITS[0] >>> 32;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2079,d = PI_O_4_BITS[0] & 0xffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2080,ac = a * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2081,bc = b * c;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2082,ad = a * d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2084,/* Collect terms */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2085,ac = ac + ((bc + ad) >>> 32);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2087,bita = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2088,bitb = (ac & 0x8000000000000000L ) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2089,prod2B += ac;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2090,bitsum = (prod2B & 0x8000000000000000L) != 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2091,/* Carry */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2092,if ( (bita && bitb) ||
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2093,((bita || bitb) && !bitsum) ) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2094,prod2A++;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2097,/* Convert to double */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2098,double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2099,double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2101,double sumA = tmpA + tmpB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2102,double sumB = -(sumA - tmpA - tmpB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2104,/* Multiply by PI/2 and return */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2105,result[0] = intPart;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2106,result[1] = sumA * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2107,result[2] = sumB * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2111,*  Sine function.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2112,*  @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2113,*  @return sin(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2115,public static double sin(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2116,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2117,int quadrant = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2118,double xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2119,double xb = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2121,/* Take absolute value of the input */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2122,xa = x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2123,if (x < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2124,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2125,xa = -xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2128,/* Check for zero and negative zero */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2129,if (xa == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2130,long bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2131,if (bits < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2132,return -0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2134,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2137,if (xa != xa || xa == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2138,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2141,/* Perform any argument reduction */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2142,if (xa > 3294198.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2143,// PI * (2**20)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2144,// Argument too big for CodyWaite reduction.  Must use
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2145,// PayneHanek.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2146,double reduceResults[] = new double[3];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2147,"reducePayneHanek(xa, reduceResults);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2148,quadrant = ((int) reduceResults[0]) & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2149,xa = reduceResults[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2150,xb = reduceResults[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2151,} else if (xa > 1.5707963267948966) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2152,/* Inline the Cody/Waite reduction for performance */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2154,// Estimate k
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2155,//k = (int)(xa / 1.5707963267948966);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2156,int k = (int)(xa * 0.6366197723675814);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2158,// Compute remainder
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2159,double remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2160,double remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2161,while (true) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2162,double a = -k * 1.570796251296997;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2163,remA = xa + a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2164,remB = -(remA - xa - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2166,a = -k * 7.549789948768648E-8;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2167,double b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2168,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2169,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2171,a = -k * 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2172,b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2173,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2174,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2176,if (remA > 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2177,break;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2179,"// Remainder is negative, so decrement k and try again."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2180,// This should only happen if the input is very close
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2181,// to an even multiple of pi/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2182,k--;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2184,quadrant = k & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2185,xa = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2186,xb = remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2189,if (negative) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2190,quadrant ^= 2;  // Flip bit 1
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2193,switch (quadrant) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2194,case 0:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2195,"return sinQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2196,case 1:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2197,"return cosQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2198,case 2:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2199,"return -sinQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2200,case 3:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2201,"return -cosQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2202,default:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2203,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2208,*  Cosine function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2209,*  @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2210,*  @return cos(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2212,public static double cos(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2213,int quadrant = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2215,/* Take absolute value of the input */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2216,double xa = x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2217,if (x < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2218,xa = -xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2221,if (xa != xa || xa == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2222,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2225,/* Perform any argument reduction */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2226,double xb = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2227,if (xa > 3294198.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2228,// PI * (2**20)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2229,// Argument too big for CodyWaite reduction.  Must use
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2230,// PayneHanek.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2231,double reduceResults[] = new double[3];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2232,"reducePayneHanek(xa, reduceResults);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2233,quadrant = ((int) reduceResults[0]) & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2234,xa = reduceResults[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2235,xb = reduceResults[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2236,} else if (xa > 1.5707963267948966) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2237,/* Inline the Cody/Waite reduction for performance */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2239,// Estimate k
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2240,//k = (int)(xa / 1.5707963267948966);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2241,int k = (int)(xa * 0.6366197723675814);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2243,// Compute remainder
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2244,double remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2245,double remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2246,while (true) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2247,double a = -k * 1.570796251296997;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2248,remA = xa + a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2249,remB = -(remA - xa - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2251,a = -k * 7.549789948768648E-8;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2252,double b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2253,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2254,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2256,a = -k * 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2257,b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2258,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2259,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2261,if (remA > 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2262,break;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2264,"// Remainder is negative, so decrement k and try again."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2265,// This should only happen if the input is very close
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2266,// to an even multiple of pi/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2267,k--;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2269,quadrant = k & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2270,xa = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2271,xb = remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2274,//if (negative)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2275,//  quadrant = (quadrant + 2) % 4;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2277,switch (quadrant) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2278,case 0:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2279,"return cosQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2280,case 1:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2281,"return -sinQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2282,case 2:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2283,"return -cosQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2284,case 3:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2285,"return sinQ(xa, xb);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2286,default:
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2287,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2292,*   Tangent function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2293,*  @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2294,*  @return tan(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2296,public static double tan(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2297,boolean negative = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2298,int quadrant = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2300,/* Take absolute value of the input */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2301,double xa = x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2302,if (x < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2303,negative = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2304,xa = -xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2307,/* Check for zero and negative zero */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2308,if (xa == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2309,long bits = Double.doubleToLongBits(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2310,if (bits < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2311,return -0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2313,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2316,if (xa != xa || xa == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2317,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2320,/* Perform any argument reduction */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2321,double xb = 0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2322,if (xa > 3294198.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2323,// PI * (2**20)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2324,// Argument too big for CodyWaite reduction.  Must use
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2325,// PayneHanek.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2326,double reduceResults[] = new double[3];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2327,"reducePayneHanek(xa, reduceResults);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2328,quadrant = ((int) reduceResults[0]) & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2329,xa = reduceResults[1];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2330,xb = reduceResults[2];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2331,} else if (xa > 1.5707963267948966) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2332,/* Inline the Cody/Waite reduction for performance */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2334,// Estimate k
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2335,//k = (int)(xa / 1.5707963267948966);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2336,int k = (int)(xa * 0.6366197723675814);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2338,// Compute remainder
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2339,double remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2340,double remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2341,while (true) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2342,double a = -k * 1.570796251296997;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2343,remA = xa + a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2344,remB = -(remA - xa - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2346,a = -k * 7.549789948768648E-8;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2347,double b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2348,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2349,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2351,a = -k * 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2352,b = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2353,remA = a + b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2354,remB += -(remA - b - a);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2356,if (remA > 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2357,break;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2359,"// Remainder is negative, so decrement k and try again."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2360,// This should only happen if the input is very close
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2361,// to an even multiple of pi/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2362,k--;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2364,quadrant = k & 3;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2365,xa = remA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2366,xb = remB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2369,if (xa > 1.5) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2370,// Accurracy suffers between 1.5 and PI/2
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2371,final double pi2a = 1.5707963267948966;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2372,final double pi2b = 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2374,final double a = pi2a - xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2375,double b = -(a - pi2a + xa);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2376,b += pi2b - xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2378,xa = a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2379,xb = b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2380,quadrant ^= 1;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2381,negative ^= true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2384,double result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2385,if ((quadrant & 1) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2386,"result = tanQ(xa, xb, false);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2387,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2388,"result = -tanQ(xa, xb, true);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2391,if (negative) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2392,result = -result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2395,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2399,* Arctangent function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2400,*  @param x a number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2401,*  @return atan(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2403,public static double atan(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2404,"return atan(x, 0.0, false);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2407,/** Internal helper function to compute arctangent.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2408,* @param xa number from which arctangent is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2409,* @param xb extra bits for x (may be 0.0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2410,"* @param leftPlane if true, result angle must be put in the left half plane"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2411,* @return atan(xa + xb) (or angle shifted by &pi; if leftPlane is true)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2413,"private static double atan(double xa, double xb, boolean leftPlane) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2414,boolean negate = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2415,boolean recip = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2416,int idx;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2418,if (xa < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2419,// negative
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2420,xa = -xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2421,xb = -xb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2422,negate = true;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2425,if (xa > 1.633123935319537E16) { // Very large input
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2426,return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2429,"/* Estimate the closest tabulated arctan value, compute eps = xa-tangentTable */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2430,if (xa < 1.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2431,idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2432,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2433,double temp = 1.0/xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2434,idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2436,double epsA = xa - TANGENT_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2437,double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2438,epsB += xb - TANGENT_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2440,double temp = epsA + epsB;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2441,epsB = -(temp - epsA - epsB);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2442,epsA = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2444,/* Compute eps = eps / (1.0 + xa*tangent) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2445,temp = xa * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2446,double ya = xa + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2447,double yb = xb + xa - ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2448,xa = ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2449,xb += yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2451,//if (idx > 8 || idx == 0)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2452,if (idx == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2453,"/* If the slope of the arctan is gentle enough (< 0.45), this approximation will suffice */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2454,//double denom = 1.0 / (1.0 + xa*tangentTableA[idx] + xb*tangentTableA[idx] + xa*tangentTableB[idx] + xb*tangentTableB[idx]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2455,double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2456,//double denom = 1.0 / (1.0 + xa*tangentTableA[idx]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2457,ya = epsA * denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2458,yb = epsB * denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2459,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2460,double temp2 = xa * TANGENT_TABLE_A[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2461,double za = 1.0 + temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2462,double zb = -(za - 1.0 - temp2);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2463,temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2464,temp = za + temp2;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2465,zb += -(temp - za - temp2);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2466,za = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2468,zb += xb * TANGENT_TABLE_B[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2469,ya = epsA / za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2471,temp = ya * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2472,final double yaa = (ya + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2473,final double yab = ya - yaa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2475,temp = za * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2476,final double zaa = (za + temp) - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2477,final double zab = za - zaa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2479,/* Correct for rounding in division */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2480,yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2482,yb += -epsA * zb / za / za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2483,yb += epsB / za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2487,epsA = ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2488,epsB = yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2490,/* Evaluate polynomial */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2491,double epsA2 = epsA*epsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2494,yb = -0.09001346640161823;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2495,yb = yb * epsA2 + 0.11110718400605211;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2496,yb = yb * epsA2 + -0.1428571349122913;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2497,yb = yb * epsA2 + 0.19999999999273194;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2498,yb = yb * epsA2 + -0.33333333333333093;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2499,yb = yb * epsA2 * epsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2502,yb = 0.07490822288864472;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2503,yb = yb * epsA2 + -0.09088450866185192;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2504,yb = yb * epsA2 + 0.11111095942313305;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2505,yb = yb * epsA2 + -0.1428571423679182;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2506,yb = yb * epsA2 + 0.19999999999923582;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2507,yb = yb * epsA2 + -0.33333333333333287;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2508,yb = yb * epsA2 * epsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2511,ya = epsA;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2513,temp = ya + yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2514,yb = -(temp - ya - yb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2515,ya = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2517,/* Add in effect of epsB.   atan'(x) = 1/(1+x^2) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2518,yb += epsB / (1.0 + epsA * epsA);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2520,double result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2521,double resultb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2522,if (recip) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2523,final double pi2a = 1.5707963267948966;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2524,final double pi2b = 6.123233995736766E-17;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2526,double za = pi2a - ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2527,double zb = -(za - pi2a + ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2528,temp = za - EIGHTHES[idx];
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2529,zb += -(temp - za + EIGHTHES[idx]);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2530,za = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2532,zb += pi2b - yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2533,ya = za;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2534,yb = zb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2536,result = yb + ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2537,resultb = -(result - yb - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2538,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2539,//result = yb + eighths[idx] + ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2540,double za = EIGHTHES[idx] + ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2541,double zb = -(za - EIGHTHES[idx] - ya);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2542,temp = za + yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2543,zb += -(temp - za - yb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2544,za = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2546,result = za + zb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2547,resultb = -(result - za - zb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2550,if (leftPlane) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2551,// Result is in the left plane
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2552,final double pia = 1.5707963267948966*2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2553,final double pib = 6.123233995736766E-17*2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2555,final double za = pia - result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2556,double zb = -(za - pia + result);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2557,zb += pib - resultb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2559,result = za + zb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2560,resultb = -(result - za - zb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2564,if (negate ^ leftPlane) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2565,result = -result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2568,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2572,* Two arguments arctangent function
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2573,* @param y ordinate
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2574,* @param x abscissa
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2575,"* @return phase angle of point (x,y) between -&pi; and &pi;"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2577,"public static double atan2(double y, double x) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2578,if (x !=x || y != y) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2579,return Double.NaN;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2582,if (y == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2583,double result = x*y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2584,double invx = 1.0/x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2585,double invy = 1.0/y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2587,if (invx == 0.0) { // X is infinite
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2588,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2591,if (result != result) { // y must be infinite
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2592,return x/y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2595,if (x < 0.0 || invx < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2596,if (y < 0.0 || invy < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2597,return -Math.PI;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2598,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2599,return Math.PI;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2601,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2602,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2606,if (y == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2607,if (x == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2608,return Math.PI/4.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2611,if (x == Double.NEGATIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2612,return Math.PI*3.0/4.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2615,return Math.PI/2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2618,if (y == Double.NEGATIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2619,if (x == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2620,return -Math.PI/4.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2623,if (x == Double.NEGATIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2624,return -Math.PI*3.0/4.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2627,return -Math.PI/2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2630,if (x == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2631,if (y > 0.0 || 1/y > 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2632,return 0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2635,if (y < 0.0 || 1/y < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2636,return -0.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2640,if (x == Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2642,if (y > 0.0 || 1/y > 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2643,return Math.PI;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2646,if (y < 0.0 || 1/y < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2647,return -Math.PI;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2651,if (x == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2652,if (y > 0.0 || 1/y > 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2653,return Math.PI/2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2656,if (y < 0.0 || 1/y < 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2657,return -Math.PI/2.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2661,if (x > 8e298 || x < -8e298) { // This would cause split of x to fail
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2662,x *= 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2663,y *= 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2666,// Split y
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2667,double temp = x * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2668,final double xa = x + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2669,final double xb = x - xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2671,// Compute ratio r = x/y
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2672,final double r = y/x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2673,temp = r * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2674,double ra = r + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2675,double rb = r - ra;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2677,rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2679,temp = ra + rb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2680,rb = -(temp - ra - rb);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2681,ra = temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2683,// Call atan
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2684,"double result = atan(ra, rb, x < 0);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2686,return result;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2690,"*  Convert degrees to radians, with error of less than 0.5 ULP"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2691,*  @param x angle in degrees
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2692,*  @return x converted into radians
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2694,public static double toRadians(double x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2696,final double facta = 0.01745329052209854;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2697,final double factb = 1.997844754509471E-9;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2699,double temp = x * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2700,double xa = x + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2701,double xb = x - xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2703,return xb * factb + xb * facta + xa * factb + xa * facta;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2707,"*  Convert radians to degrees, with error of less than 0.5 ULP"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2708,*  @param x angle in radians
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2709,*  @return x converted into degrees
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2711,public static double toDegrees(double x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2713,final double facta = 57.2957763671875;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2714,final double factb = 3.145894820876798E-6;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2716,double temp = x * 1073741824.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2717,double xa = x + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2718,double xb = x - xa;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2720,return xb * factb + xb * facta + xa * factb + xa * facta;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2724,* Absolute value.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2725,* @param x number from which absolute value is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2726,* @return abs(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2728,public static int abs(final int x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2729,return (x < 0) ? -x : x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2733,* Absolute value.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2734,* @param x number from which absolute value is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2735,* @return abs(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2737,public static long abs(final long x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2738,return (x < 0l) ? -x : x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2742,* Absolute value.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2743,* @param x number from which absolute value is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2744,* @return abs(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2746,public static float abs(final float x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2747,return (x < 0.0f) ? -x : x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2751,* Absolute value.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2752,* @param x number from which absolute value is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2753,* @return abs(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2755,public static double abs(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2756,return (x < 0.0) ? -x : x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2760,* Compute least significant bit (Unit in Last Position) for a number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2761,* @param x number from which ulp is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2762,* @return ulp(x)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2765,public static double ulp(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2766,return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2770,"* Get the next machine representable number after a number, moving"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2771,* in the direction of another number.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2772,* <p>
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2773,"* If <code>direction</code> is greater than or equal to<code>d</code>,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2774,* the smallest machine representable number strictly greater than
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2775,* <code>d</code> is returned; otherwise the largest representable number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2776,* strictly less than <code>d</code> is returned.</p>
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2777,* <p>
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2778,"* If <code>d</code> is NaN or Infinite, it is returned unchanged.</p>"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2780,* @param d base number
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2781,* @param direction (the only important thing is whether
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2782,* direction is greater or smaller than d)
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2783,* @return the next machine representable number in the specified direction
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2785,"public static double nextAfter(double d, double direction) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2787,// handling of some important special cases
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2788,if (Double.isNaN(d) || Double.isInfinite(d)) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2789,return d;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2790,} else if (d == 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2791,return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2793,// special cases MAX_VALUE to infinity and  MIN_VALUE to 0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2794,// are handled just as normal numbers
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2796,// split the double in raw components
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2797,long bits     = Double.doubleToLongBits(d);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2798,long sign     = bits & 0x8000000000000000L;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2799,long exponent = bits & 0x7ff0000000000000L;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2800,long mantissa = bits & 0x000fffffffffffffL;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2802,if (d * (direction - d) >= 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2803,// we should increase the mantissa
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2804,if (mantissa == 0x000fffffffffffffL) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2805,return Double.longBitsToDouble(sign |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2806,(exponent + 0x0010000000000000L));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2807,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2808,return Double.longBitsToDouble(sign |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2809,exponent | (mantissa + 1));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2811,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2812,// we should decrease the mantissa
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2813,if (mantissa == 0L) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2814,return Double.longBitsToDouble(sign |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2815,(exponent - 0x0010000000000000L) |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2816,0x000fffffffffffffL);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2817,} else {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2818,return Double.longBitsToDouble(sign |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2819,exponent | (mantissa - 1));
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2825,/** Get the largest whole number smaller than x.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2826,* @param x number from which floor is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2827,* @return a double number f such that f is an integer f <= x < f + 1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2829,public static double floor(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2830,long y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2832,if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2833,return x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2836,y = (long) x;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2837,if (x < 0) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2838,y--;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2841,return (double) y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2844,/** Get the smallest whole number larger than x.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2845,* @param x number from which ceil is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2846,* @return a double number c such that c is an integer c - 1.0 < x <= c
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2848,public static double ceil(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2849,double y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2851,y = floor(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2852,if (y == x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2853,return y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2856,return y + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2859,"/** Get the whole number that is the nearest to x, or the even one if x is exactly half way between two integers."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2860,* @param x number from which nearest whole number is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2861,* @return a double number r such that r is an integer r - 0.5 <= x <= r + 0.5
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2863,public static double rint(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2864,double y = floor(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2865,double d = x - y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2867,if (d > 0.5) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2868,return y+1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2870,if (d < 0.5) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2871,return y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2874,"/* half way, round to even */"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2875,long z = (long) y;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2876,return (z & 1) == 0 ? y : y + 1.0;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2879,/** Get the closest long to x.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2880,* @param x number from which closest long is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2881,* @return closest long to x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2883,public static long round(double x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2884,return (long) floor(x + 0.5);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2887,/** Get the closest int to x.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2888,* @param x number from which closest int is requested
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2889,* @return closest int to x
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2891,public static int round(final float x) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2892,return Math.round(x);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2895,/** Compute the minimum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2896,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2897,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2898,"* @return a if a is lesser or equal to b, b otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2900,"public static int min(final int a, final int b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2901,return (a <= b) ? a : b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2904,/** Compute the minimum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2905,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2906,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2907,"* @return a if a is lesser or equal to b, b otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2909,"public static long min(final long a, final long b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2910,return (a <= b) ? a : b;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2913,/** Compute the minimum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2914,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2915,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2916,"* @return a if a is lesser or equal to b, b otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2918,"public static float min(final float a, final float b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2919,return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2922,/** Compute the minimum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2923,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2924,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2925,"* @return a if a is lesser or equal to b, b otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2927,"public static double min(final double a, final double b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2928,return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2931,/** Compute the maximum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2932,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2933,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2934,"* @return b if a is lesser or equal to b, a otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2936,"public static int max(final int a, final int b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2937,return (a <= b) ? b : a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2940,/** Compute the maximum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2941,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2942,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2943,"* @return b if a is lesser or equal to b, a otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2945,"public static long max(final long a, final long b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2946,return (a <= b) ? b : a;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2949,/** Compute the maximum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2950,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2951,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2952,"* @return b if a is lesser or equal to b, a otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2954,"public static float max(final float a, final float b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2955,return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2958,/** Compute the maximum of two values
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2959,* @param a first value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2960,* @param b second value
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2961,"* @return b if a is lesser or equal to b, a otherwise"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2963,"public static double max(final double a, final double b) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,2964,return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,48,ublic static final double TWO_PI = 2 * Math.PI;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,48,public static final double TWO_PI = 2 * FastMath.PI;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,290,eturn Math.floor(result + 0.5);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,290,return FastMath.floor(result + 0.5);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,317,eturn Math.log(n);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,317,return FastMath.log(n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,325,"eturn Math.log(binomialCoefficient(n,k));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,325,"return FastMath.log(binomialCoefficient(n,k));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,333,"eturn Math.log(binomialCoefficientDouble(n, k));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,333,"return FastMath.log(binomialCoefficientDouble(n, k));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,347,ogSum += Math.log(i);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,347,logSum += FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,352,ogSum -= Math.log(i);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,352,logSum -= FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,eturn (Math.exp(x) + Math.exp(-x)) / 2.0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405,return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448,"eturn equals(x, y, 1) || Math.abs(y - x) <= eps;"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448,"return equals(x, y, 1) || FastMath.abs(y - x) <= eps;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,462,"eturn equalsIncludingNaN(x, y) || (Math.abs(y - x) <= eps);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,462,"return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,498,inal boolean isEqual = Math.abs(xInt - yInt) <= maxUlps;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,498,final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,638,eturn Math.floor(Math.exp(factorialLog(n)) + 0.5);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,638,return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,661,eturn Math.log(factorial(n));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,661,return FastMath.log(factorial(n));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,665,ogSum += Math.log(i);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,665,logSum += FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,708,eturn Math.abs(u) + Math.abs(v);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,708,return FastMath.abs(u) + FastMath.abs(v);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,797,eturn Math.abs(u) + Math.abs(v);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,797,return FastMath.abs(u) + FastMath.abs(v);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,967,"nt lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,967,"int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1002,"ong lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1002,"long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1028,eturn Math.log(x)/Math.log(base);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1028,return FastMath.log(x)/FastMath.log(base);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1120,"* @deprecated as of 2.2, replaced by {@link FastMath#nextAfter(double, double)}"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1122,@Deprecated
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1123,/ handling of some important special cases
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1124,f (Double.isNaN(d) || Double.isInfinite(d)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1125,eturn d;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1126, else if (d == 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1127,eturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1129,/ special cases MAX_VALUE to infinity and  MIN_VALUE to 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1130,/ are handled just as normal numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1132,/ split the double in raw components
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1133,ong bits     = Double.doubleToLongBits(d);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1134,ong sign     = bits & 0x8000000000000000L;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1135,ong exponent = bits & 0x7ff0000000000000L;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1136,ong mantissa = bits & 0x000fffffffffffffL;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1138,f (d * (direction - d) >= 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1139,/ we should increase the mantissa
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1140,f (mantissa == 0x000fffffffffffffL) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1141,eturn Double.longBitsToDouble(sign |
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1142,exponent + 0x0010000000000000L));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1143, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1144,eturn Double.longBitsToDouble(sign |
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1145,xponent | (mantissa + 1));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1147, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1148,/ we should decrease the mantissa
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1149,f (mantissa == 0L) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1150,eturn Double.longBitsToDouble(sign |
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1151,exponent - 0x0010000000000000L) |
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1152,x000fffffffffffffL);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1153, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1154,eturn Double.longBitsToDouble(sign |
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1155,xponent | (mantissa - 1));
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1124,"return FastMath.nextAfter(d, direction);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1193,"       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1159,"*       <code>a = MathUtils.normalizeAngle(a, FastMath.PI);</code></li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1208,eturn a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1174,return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1334,"loat factor = (float)Math.pow(10.0f, scale) * sign;"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1300,"float factor = (float)FastMath.pow(10.0f, scale) * sign;"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1355,"nscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1321,"unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1357,"nscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1323,"unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1361,"nscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1327,"unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1365,"nscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1331,"unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1367,"nscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1333,"unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1372,ouble fraction = unscaled - Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1338,double fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1374,nscaled = Math.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1340,unscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1376,nscaled = Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1342,unscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1381,ouble fraction = unscaled - Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1347,double fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1383,nscaled = Math.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1349,unscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1385,nscaled = Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1351,unscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1388,f (Math.floor(unscaled) / 2.0 == Math.floor(Math
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1354,if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1390,nscaled = Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1356,unscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1392,nscaled = Math.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1358,unscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1399,ouble fraction = unscaled - Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1365,double fraction = unscaled - FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1401,nscaled = Math.ceil(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1367,unscaled = FastMath.ceil(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1403,nscaled = Math.floor(unscaled);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1369,unscaled = FastMath.floor(unscaled);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1408,f (unscaled != Math.floor(unscaled)) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1374,if (unscaled != FastMath.floor(unscaled)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1413,"nscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1379,"unscaled = FastMath.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1533,eturn (Math.exp(x) - Math.exp(-x)) / 2.0;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1499,return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1790,um += Math.abs(p1[i] - p2[i]);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1756,sum += FastMath.abs(p1[i] - p2[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1805,um += Math.abs(p1[i] - p2[i]);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1771,sum += FastMath.abs(p1[i] - p2[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1823,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1789,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1839,eturn Math.sqrt(sum);
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1805,return FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1852,"ax = Math.max(max, Math.abs(p1[i] - p2[i]));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1818,"max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1867,"ax = Math.max(max, Math.abs(p1[i] - p2[i]));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1833,"max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
False,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,156,inal int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,156,final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);
False,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,168,inal int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,168,final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,476,"/ notice the use of Math.ceil(), this guarantees that we will always"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,476,"// notice the use of FastMath.ceil(), this guarantees that we will always"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,483,ewSize = (int) Math.ceil(internalArray.length * expansionFactor);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,483,newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,485,ewSize = internalArray.length + Math.round(expansionFactor);
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,485,newSize = internalArray.length + FastMath.round(expansionFactor);
True,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,30,"rgumentOutsideDomainException ex = new ArgumentOutsideDomainException(Math.PI, 10.0, 20.0);"
True,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,32,"ArgumentOutsideDomainException ex = new ArgumentOutsideDomainException(FastMath.PI, 10.0, 20.0);"
False,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,34,"ssertEquals(Math.PI, ex.getArgument()[0], 0);"
True,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java,36,"assertEquals(FastMath.PI, ex.getArgument()[0], 0);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,176,ouble absError = Math.abs(expected) * relativeError;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,177,double absError = FastMath.abs(expected) * relativeError;
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,57,"ssert.assertEquals(Math.PI / 4, BinaryFunction.ATAN2.value(1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,58,"ssert.assertEquals(-Math.PI / 4, BinaryFunction.ATAN2.value(-1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,58,"Assert.assertEquals(FastMath.PI / 4, BinaryFunction.ATAN2.value(1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,59,"Assert.assertEquals(-FastMath.PI / 4, BinaryFunction.ATAN2.value(-1, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,65,"ssert.assertEquals(Math.pow(2.0, x), f.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java,66,"Assert.assertEquals(FastMath.pow(2.0, x), f.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,81,"ssert.assertEquals(Math.sqrt(Math.abs(Math.expm1(Math.cbrt(Math.tanh(x))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,82,"Assert.assertEquals(FastMath.sqrt(FastMath.abs(FastMath.expm1(FastMath.cbrt(FastMath.tanh(x))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,87,"ssert.assertEquals(Math.cosh(Math.sinh(Math.tanh(Math.cosh(Math.log(Math.ceil(x)))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,88,"Assert.assertEquals(FastMath.cosh(FastMath.sinh(FastMath.tanh(FastMath.cosh(FastMath.log(FastMath.ceil(x)))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,93,"ssert.assertEquals(Math.cos(Math.sin(Math.tan(Math.acos(Math.asin(Math.log10(Math.log(Math.ulp(x)))))))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,94,"Assert.assertEquals(FastMath.cos(FastMath.sin(FastMath.tan(FastMath.acos(FastMath.asin(FastMath.log10(FastMath.log(FastMath.ulp(x)))))))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,99,"ssert.assertEquals(Math.atan(Math.exp(-Math.floor(x))),"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,100,"Assert.assertEquals(FastMath.atan(FastMath.exp(-FastMath.floor(x))),"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,111,"ssert.assertEquals(Math.pow(Math.cos(x), Math.asin(x)), f.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,112,"Assert.assertEquals(FastMath.pow(FastMath.cos(x), FastMath.asin(x)), f.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,126,"ssert.assertEquals(Math.cos(x) + 3, f1.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,127,"ssert.assertEquals(Math.cos(x) + Math.sin(x), f2.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,128,"ssert.assertEquals(Math.cos(x) - Math.sin(x), f3.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,129,"ssert.assertEquals(Math.cos(x) * Math.sin(x), f4.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,130,"ssert.assertEquals(Math.cos(x) * 5, f5.value(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,131,"ssert.assertEquals(Math.cos(x) / Math.sin(x), f6.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,127,"Assert.assertEquals(FastMath.cos(x) + 3, f1.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,128,"Assert.assertEquals(FastMath.cos(x) + FastMath.sin(x), f2.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,129,"Assert.assertEquals(FastMath.cos(x) - FastMath.sin(x), f3.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,130,"Assert.assertEquals(FastMath.cos(x) * FastMath.sin(x), f4.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,131,"Assert.assertEquals(FastMath.cos(x) * 5, f5.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java,132,"Assert.assertEquals(FastMath.cos(x) / FastMath.sin(x), f6.value(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,29,/ Math.expm1() is available in jdk 1.5 but not in jdk 1.4.2.
False,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,30,eturn Math.exp(x) - 1.0;
True,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,30,// FastMath.expm1() is available in jdk 1.5 but not in jdk 1.4.2.
True,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,31,return FastMath.exp(x) - 1.0;
False,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,36,eturn Math.exp(x);
True,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,src/test/java/org/apache/commons/math/analysis/Expm1Function.java,37,return FastMath.exp(x);
True,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,37,eturn Math.sin(x);
True,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,38,return FastMath.sin(x);
False,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,45,eturn Math.cos(x);
True,src/test/java/org/apache/commons/math/analysis/SinFunction.java,src/test/java/org/apache/commons/math/analysis/SinFunction.java,46,return FastMath.cos(x);
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,28,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,47,in = 0; max = Math.PI; expected = 2;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,48,"olerance = Math.max(integrator.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,49,ath.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,48,min = 0; max = FastMath.PI; expected = 2;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,49,"tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,50,FastMath.abs(expected * integrator.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,53,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,54,"olerance = Math.max(integrator.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,55,ath.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,54,min = -FastMath.PI/3; max = 0; expected = -0.5;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,55,"tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,56,FastMath.abs(expected * integrator.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,95,"ssertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + Math.abs(reference)));"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,96,"assertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + FastMath.abs(reference)));"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,45,in = 0; max = Math.PI; expected = 2;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,46,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,46,min = 0; max = FastMath.PI; expected = 2;
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,47,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,50,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,51,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,51,min = -FastMath.PI/3; max = 0; expected = -0.5;
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,52,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,65,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,66,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,70,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,71,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,75,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,76,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,44,in = 0; max = Math.PI; expected = 2;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,45,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,45,min = 0; max = FastMath.PI; expected = 2;
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,46,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,49,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,50,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,50,min = -FastMath.PI/3; max = 0; expected = -0.5;
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,51,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,64,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,65,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,69,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,70,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,74,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,75,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,44,in = 0; max = Math.PI; expected = 2;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,45,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,45,min = 0; max = FastMath.PI; expected = 2;
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,46,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,49,in = -Math.PI/3; max = 0; expected = -0.5;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,50,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,50,min = -FastMath.PI/3; max = 0; expected = -0.5;
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,51,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,64,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,65,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,69,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,70,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,74,olerance = Math.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,75,tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,54,"ouble min = 0.0, max = 2 * Math.PI;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,55,"double min = 0.0, max = 2 * FastMath.PI;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,64, = Math.PI / 4; expected = f.value(z); result = p.value(z);
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,65,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,65,z = FastMath.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,66,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,68, = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,69,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,69,z = FastMath.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,70,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,92,ouble derivativebound = Math.E;
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,93,double derivativebound = FastMath.E;
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,96,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,97,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,100,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,101,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,104,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,105,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,80,ouble expected = Math.sin(xval[i]);
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,81,double expected = FastMath.sin(xval[i]);
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,84,"oisyResidualSum += Math.pow(noisy - expected, 2);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,85,"itResidualSum += Math.pow(fit - expected, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,85,"noisyResidualSum += FastMath.pow(noisy - expected, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,86,"fitResidualSum += FastMath.pow(fit - expected, 2);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,113,"ariances[i] += Math.pow(res[j] - res[j-1], 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,114,"variances[i] += FastMath.pow(res[j] - res[j-1], 2);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,146,ariances[i] += Math.abs(res[j] - res[j-1]);
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,147,variances[i] += FastMath.abs(res[j] - res[j-1]);
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,245,ouble dx = 2 * Math.PI / xval.length;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,246,double dx = 2 * FastMath.PI / xval.length;
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,249,val[i] = Math.sin(x) + (2 * Math.random() - 1) * ynoise;
False,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,250, += dx * (1 + (2 * Math.random() - 1) * xnoise);
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,250,yval[i] = FastMath.sin(x) + (2 * FastMath.random() - 1) * ynoise;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,251,x += dx * (1 + (2 * FastMath.random() - 1) * xnoise);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,72,"ssert.assertEquals(""On sample point"", expected, result, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,73,"Assert.assertEquals(""On sample point"", expected, result, FastMath.ulp(1d));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,124,"ssert.assertEquals(""On sample point"", expected, result, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,125,"Assert.assertEquals(""On sample point"", expected, result, FastMath.ulp(1d));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,54,"ouble min = 0.0, max = 2 * Math.PI;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,55,"double min = 0.0, max = 2 * FastMath.PI;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,64, = Math.PI / 4; expected = f.value(z); result = p.value(z);
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,65,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,65,z = FastMath.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,66,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,68, = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,69,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,69,z = FastMath.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,70,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,92,ouble derivativebound = Math.E;
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,93,double derivativebound = FastMath.E;
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,96,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,97,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,100,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,101,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,104,"olerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,105,"tolerance = FastMath.abs(derivativebound * partialerror(x, z));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,94, ((int) (Math.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,95,+ ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,142, ((int) (Math.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,143,+ ((int) (FastMath.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,115,"ath.PI / 6d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,116,"ath.PI / 2d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,117,"d * Math.PI / 6d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,118,"ath.PI,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,119,"d * Math.PI / 6d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,120,"d * Math.PI / 2d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,121,"1d * Math.PI / 6d,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,122,.d * Math.PI };
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,116,"FastMath.PI / 6d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,117,"FastMath.PI / 2d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,118,"5d * FastMath.PI / 6d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,119,"FastMath.PI,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,120,"7d * FastMath.PI / 6d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,121,"3d * FastMath.PI / 2d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,122,"11d * FastMath.PI / 6d,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,123,2.d * FastMath.PI };
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,157,"ssert.assertEquals(Math.sqrt(2d) / 2d,f.value(Math.PI/4d),interpolationTolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,158,"ssert.assertEquals(Math.sqrt(2d) / 2d,f.value(3d*Math.PI/4d),interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,158,"Assert.assertEquals(FastMath.sqrt(2d) / 2d,f.value(FastMath.PI/4d),interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,159,"Assert.assertEquals(FastMath.sqrt(2d) / 2d,f.value(3d*FastMath.PI/4d),interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,395,eturn a * Math.cos(omega * z - kx * x - ky * y);
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,396,return a * FastMath.cos(omega * z - kx * x - ky * y);
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,412,eturn a * Math.sin(omega * z - kx * x - ky * y) * kx;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,413,return a * FastMath.sin(omega * z - kx * x - ky * y) * kx;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,427,eturn a * Math.sin(omega * z - kx * x - ky * y) * ky;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,428,return a * FastMath.sin(omega * z - kx * x - ky * y) * ky;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,442,eturn -a * Math.sin(omega * z - kx * x - ky * y) * omega;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,443,return -a * FastMath.sin(omega * z - kx * x - ky * y) * omega;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,457,eturn -a * Math.cos(omega * z - kx * x - ky * y) * kx * ky;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,458,return -a * FastMath.cos(omega * z - kx * x - ky * y) * kx * ky;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,472,eturn a * Math.cos(omega * z - kx * x - ky * y) * kx * omega;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,473,return a * FastMath.cos(omega * z - kx * x - ky * y) * kx * omega;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,487,eturn a * Math.cos(omega * z - kx * x - ky * y) * ky * omega;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,488,return a * FastMath.cos(omega * z - kx * x - ky * y) * ky * omega;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,502,eturn a * Math.sin(omega * z - kx * x - ky * y) * kx * ky * omega;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,503,return a * FastMath.sin(omega * z - kx * x - ky * y) * kx * ky * omega;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,168,eturn a * Math.cos(omega * z - kx * x - ky * y);
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,169,return a * FastMath.cos(omega * z - kx * x - ky * y);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,158,"ssertEquals( g.derivative().value(Math.PI), h.value(Math.PI), tolerance );"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,159,"ssertEquals( g.derivative().value(Math.E),  h.value(Math.E),  tolerance );"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,159,"assertEquals( g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance );"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,160,"assertEquals( g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance );"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,258,"ssertEquals( g.derivative().value(Math.PI), h.value(Math.PI), tolerance );"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,259,"ssertEquals( g.derivative().value(Math.E),  h.value(Math.E),  tolerance );"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,259,"assertEquals( g.derivative().value(FastMath.PI), h.value(FastMath.PI), tolerance );"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,260,"assertEquals( g.derivative().value(FastMath.E),  h.value(FastMath.E),  tolerance );"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,19,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,46,"ssertTrue(k + "" "" + Tk.value(x), Math.abs(Tk.value(x)) < (1.0 + 1.0e-12));"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,48,"assertTrue(k + "" "" + Tk.value(x), FastMath.abs(Tk.value(x)) < (1.0 + 1.0e-12));"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,194,"ssertEquals(ci, l40[i], Math.abs(ci) * 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,196,"assertEquals(ci, l40[i], FastMath.abs(ci) * 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,38,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,39,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,41,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,42,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,50,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,51,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,53,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,54,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,101,"ssertEquals(Math.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,102,"assertEquals(FastMath.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,26,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,56,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,57,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,63,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,64,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,70,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,71,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,76,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,77,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,93,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,94,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,100,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,101,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,107,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,108,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,113,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,114,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,310,"ouble result = solver.solve(f, Math.PI, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,311,"ssertEquals(Math.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,311,"double result = solver.solve(f, FastMath.PI, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,312,"assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,313,"esult = solver.solve(f, 3, Math.PI);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,314,"ssertEquals(Math.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,314,"result = solver.solve(f, 3, FastMath.PI);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,315,"assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,316,"esult = solver.solve(f, Math.PI, 4, 3.5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,317,"ssertEquals(Math.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,317,"result = solver.solve(f, FastMath.PI, 4, 3.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,318,"assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,319,"esult = solver.solve(f, 3, Math.PI, 3.07);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,320,"ssertEquals(Math.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,320,"result = solver.solve(f, 3, FastMath.PI, 3.07);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,321,"assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,51,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,52,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,53,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,54,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,69,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,70,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,71,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,72,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,87,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,88,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,89,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,90,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,93,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,94,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,95,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,96,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,111,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,112,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,113,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,114,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,117,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,118,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,119,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,120,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,123,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,124,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,125,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,126,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,142,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,143,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,144,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,145,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,147,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,148,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,149,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,150,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,151,"xpected = new Complex(0.5, 0.5 * Math.sqrt(3.0));"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,152,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,153,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,153,"expected = new Complex(0.5, 0.5 * FastMath.sqrt(3.0));"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,154,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,155,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,157,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,158,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,159,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,160,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,161,"xpected = new Complex(0.5, -0.5 * Math.sqrt(3.0));"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,162,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,163,ath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,163,"expected = new Complex(0.5, -0.5 * FastMath.sqrt(3.0));"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,164,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,165,FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,51,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,52,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,53,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,52,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,53,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,54,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,58,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,59,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,59,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,60,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,74,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,75,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,75,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,76,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,80,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,81,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,81,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,82,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,86,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,87,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,87,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,88,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,100,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,101,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,102,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,101,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,102,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,103,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,107,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,108,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,108,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,109,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,121,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,122,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,123,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,122,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,123,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,124,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,128,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,129,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,129,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,130,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,143,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,144,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,144,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,145,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,149,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,150,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,150,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,151,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,155,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,156,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,156,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,157,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,170,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,171,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,171,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,172,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,176,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,177,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,177,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,178,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,182,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,183,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,183,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,184,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,201,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,202,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,202,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,203,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,207,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,208,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,208,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,209,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,213,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,214,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,214,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,215,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,230,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,231,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,231,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,232,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,236,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,237,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,237,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,238,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,242,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,243,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,243,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,244,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,39,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,40,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,42,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,43,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,57,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,58,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,60,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,61,"assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,49,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,50,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,51,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,50,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,51,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,52,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,56,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,57,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,57,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,58,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,70,in = 3.0; max = 4.0; expected = Math.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,71,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,72,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,71,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,72,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,73,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,77,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,78,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,78,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,79,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,92,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,93,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,93,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,94,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,98,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,99,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,99,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,100,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,104,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,105,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,105,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,106,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,119,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,120,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,120,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,121,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,125,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,126,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,126,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,127,FastMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,131,"olerance = Math.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,132,ath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,132,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,133,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,57,"ssertEquals(Math.PI, x, 1.0e-4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,58,"assertEquals(FastMath.PI, x, 1.0e-4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,74,"ssertEquals(Math.PI, x, accuracy);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,75,"assertEquals(FastMath.PI, x, accuracy);"
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,26,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,340,ouble pi = Double.valueOf(Math.PI);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,341,Double pi = Double.valueOf(FastMath.PI);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,35,rivate double pi = Math.PI;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,36,private double pi = FastMath.PI;
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,350,"estUtils.assertEquals(new Complex(Math.acos(0), 0),"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,351,"TestUtils.assertEquals(new Complex(FastMath.acos(0), 0),"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,659,"omplex sqrtz = ComplexUtils.polar2Complex(Math.sqrt(r), theta / 2);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,660,"Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,906,"ssertEquals(Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,907,"assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,909,"ssertEquals(Math.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,910,"assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,912,"ssertEquals(3 * Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,913,"assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,915,"ssertEquals(Math.PI, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,916,"assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,918,"ssertEquals(-3 * Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,919,"assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,921,"ssertEquals(-Math.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,922,"assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,924,"ssertEquals(-Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,925,"assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,932,"ssertEquals(Math.PI/4, infInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,933,"ssertEquals(Math.PI/2, oneInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,933,"assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,934,"assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,935,"ssertEquals(Math.PI/2, zeroInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,936,"assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,937,"ssertEquals(Math.PI, negInfOne.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,938,"ssertEquals(-3.0*Math.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,939,"ssertEquals(-Math.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,938,"assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,939,"assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,940,"assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,32,rivate double pi = Math.PI;
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,33,private double pi = FastMath.PI;
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,86,ouble expected = Math.random();
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,88,double expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,93,ouble expected = Math.random();
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,95,double expected = FastMath.random();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,226,"ouble upper = Math.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,227,"ouble lower = Math.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,227,"double upper = FastMath.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,228,"double lower = FastMath.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,19,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,97,"ssertEquals(Math.exp(-1), d1.density(1.0));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,"ssertEquals(Math.exp(-2), d1.density(2.0));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"assertEquals(FastMath.exp(-1), d1.density(1.0));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,100,"assertEquals(FastMath.exp(-2), d1.density(2.0));"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,215,rg = arg - Math.random();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,216,rg2 = arg2 + Math.random();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,216,arg = arg - FastMath.random();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,217,arg2 = arg2 + FastMath.random();
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,124,ouble mu = Math.random();
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,125,double mu = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,136,ouble sigma = 0.1d + Math.random();
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,137,double sigma = 0.1d + FastMath.random();
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,155,ouble sigma = Math.sqrt(mean);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,156,double sigma = FastMath.sqrt(mean);
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,77,ouble expected = Math.random();
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,79,double expected = FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,ouble expected = Math.random();
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,86,double expected = FastMath.random();
True,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,70,ssertTrue(Math.abs(value - expected) < 1.0e-10);
True,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java,71,assertTrue(FastMath.abs(value - expected) < 1.0e-10);
True,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,511,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
True,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,513,"assertEquals(1.768262623567235,  FastMath.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,703,eturn Math.sqrt(dx * dx + dy * dy);
True,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,705,return FastMath.sqrt(dx * dx + dy * dy);
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,270,ssertTrue(Math.sqrt(m.length) * estimator.getRMS(problem) > 0.6);
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,272,assertTrue(FastMath.sqrt(m.length) * estimator.getRMS(problem) > 0.6);
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,504,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getM()) * rms,  1.0e-10);"
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,506,"assertEquals(1.768262623567235,  FastMath.sqrt(circle.getM()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,521,or (double d= 0; d < 2 * Math.PI; d += 0.01) {
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,522,"ircle.addPoint(cx + r * Math.cos(d), cy + r * Math.sin(d));"
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,523,for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,524,"circle.addPoint(cx + r * FastMath.cos(d), cy + r * FastMath.sin(d));"
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,748,eturn Math.sqrt(dx * dx + dy * dy);
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,750,return FastMath.sqrt(dx * dx + dy * dy);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,121,"ath.sqrt(24.2)), false);"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,122,"FastMath.sqrt(24.2)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,123,"ath.sqrt(1795769.0)), false);"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,124,"FastMath.sqrt(1795769.0)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,125,"1.0 * Math.sqrt(169000121.0)), false);"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,126,"11.0 * FastMath.sqrt(169000121.0)), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,493,stimator.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,494,stimator.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,494,estimator.setCostRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,495,estimator.setParRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,547,eturn Math.abs(Math.sqrt(m) * rms - theoreticalStartCost) <= threshold;
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,548,return FastMath.abs(FastMath.sqrt(m) * rms - theoreticalStartCost) <= threshold;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,552,eturn Math.abs(Math.sqrt(m) * rms - theoreticalMinCost) <= threshold;
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,553,return FastMath.abs(FastMath.sqrt(m) * rms - theoreticalMinCost) <= threshold;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,560,f (Math.abs(mi - vi) > (paramsAccuracy * (1.0 + Math.abs(mi)))) {
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,561,if (FastMath.abs(mi - vi) > (paramsAccuracy * (1.0 + FastMath.abs(mi)))) {
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,714,"ath.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,715,"ath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,715,"FastMath.sqrt(m + (n+1)*(n-2)*(m-2)*(m-1) * ((n+1)*(n-2)*(2*m-3) - 12) / 24.0),"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,716,"FastMath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,790,ouble tmp2 = Math.sqrt(tmpSquare);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,791,double tmp2 = FastMath.sqrt(tmpSquare);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,807,mp1 = Math.atan(x2 / x1) / twoPi;
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,808,tmp1 = FastMath.atan(x2 / x1) / twoPi;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,812,ouble tmp2 = Math.sqrt(x1 * x1 + x2 * x2);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,813,double tmp2 = FastMath.sqrt(x1 * x1 + x2 * x2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,820,rivate static final double twoPi = 2.0 * Math.PI;
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,821,private static final double twoPi = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,859,rivate static final double sqrt5  = Math.sqrt( 5.0);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,860,rivate static final double sqrt10 = Math.sqrt(10.0);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,860,private static final double sqrt5  = FastMath.sqrt( 5.0);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,861,private static final double sqrt10 = FastMath.sqrt(10.0);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1023,ouble tmp2 = Math.exp(tmp1);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1024,double tmp2 = FastMath.exp(tmp1);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1037,[i] = x1 * Math.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1038,f[i] = x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1141,"tmp * Math.exp(-tmp * x1),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1142,"mp * Math.exp(-tmp * x2),"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1143,ath.exp(-i - 1) - Math.exp(-tmp)
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1142,"-tmp * FastMath.exp(-tmp * x1),"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1143,"tmp * FastMath.exp(-tmp * x2),"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1144,FastMath.exp(-i - 1) - FastMath.exp(-tmp)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1157,[i] = Math.exp(-tmp * x1) - Math.exp(-tmp * x2)
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1158, (Math.exp(-i - 1) - Math.exp(-tmp)) * x3;
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1158,f[i] = FastMath.exp(-tmp * x1) - FastMath.exp(-tmp * x2)
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1159,+ (FastMath.exp(-i - 1) - FastMath.exp(-tmp)) * x3;
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1182,"acobian[i] = new double[] { -t * Math.exp(t * x1), -t * Math.exp(t * x2) };"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1183,"jacobian[i] = new double[] { -t * FastMath.exp(t * x1), -t * FastMath.exp(t * x2) };"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1194,[i] = 2 + 2 * temp - Math.exp(temp * x1) - Math.exp(temp * x2);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1195,f[i] = 2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1221,ouble ti   = Math.sin(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1222,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1223,ouble tmp2 = x3 + ti   * x4 - Math.cos(temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1222,double ti   = FastMath.sin(temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1223,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1224,double tmp2 = x3 + ti   * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1240,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1241,ouble tmp2 = x3 + Math.sin(temp) * x4 - Math.cos(temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1241,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1242,double tmp2 = x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1413,ouble tmp1 = Math.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1414,ouble tmp2 = Math.exp(-temp * x5);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1414,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1415,double tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1432,ouble tmp1 = Math.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1433,ouble tmp2 = Math.exp(-temp * x5);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1433,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1434,double tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1473,ouble tmp1 = Math.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1474,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1475,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1476,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1474,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1475,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1476,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1477,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1510,ouble tmp1 = Math.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1511,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1512,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1513,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1511,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1512,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1513,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1514,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,82,ssertTrue(Math.abs(value - expected) < 1.0e-10);
True,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java,83,assertTrue(FastMath.abs(value - expected) < 1.0e-10);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,26,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,258,"ssertEquals(Math.PI, f1.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,260,"assertEquals(FastMath.PI, f1.doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,264,"ssertEquals(Math.PI, f2.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,266,"assertEquals(FastMath.PI, f2.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,92,"ew BigFraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,93,"new BigFraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,567,"ew BigFraction(17), new BigFraction(Math.PI, 1000),"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,568,"new BigFraction(17), new BigFraction(FastMath.PI, 1000),"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,299,"ssertEquals(""355 / 113"", improperFormat.format(Math.PI));"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,301,"assertEquals(""355 / 113"", improperFormat.format(FastMath.PI));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,71,"ew Fraction((1 + Math.sqrt(5)) / 2, 1.0e-12, 25);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,72,"new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,578,"ew Fraction(17), new Fraction(Math.PI, 1000),"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,579,"new Fraction(17), new Fraction(FastMath.PI, 1000),"
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,118,es += Math.abs(value - i);
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,119,res += FastMath.abs(value - i);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,60,"otation r = new Rotation(new Vector3D(10, 10, 10), 2 * Math.PI / 3);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,61,"Rotation r = new Rotation(new Vector3D(10, 10, 10), 2 * FastMath.PI / 3);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,64,ouble s = 1 / Math.sqrt(3);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,65,double s = 1 / FastMath.sqrt(3);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,66,"heckAngle(r.getAngle(), 2 * Math.PI / 3);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,67,"checkAngle(r.getAngle(), 2 * FastMath.PI / 3);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,69,"ew Rotation(new Vector3D(0, 0, 0), 2 * Math.PI / 3);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,70,"new Rotation(new Vector3D(0, 0, 0), 2 * FastMath.PI / 3);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,76," = new Rotation(Vector3D.PLUS_K, 1.5 * Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,77,"r = new Rotation(Vector3D.PLUS_K, 1.5 * FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,78,"heckAngle(r.getAngle(), 0.5 * Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,79,"checkAngle(r.getAngle(), 0.5 * FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,80," = new Rotation(Vector3D.PLUS_J, Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,81,"r = new Rotation(Vector3D.PLUS_J, FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,82,"heckAngle(r.getAngle(), Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,83,"checkAngle(r.getAngle(), FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,104,"heckAngle(new Rotation(u, u.negate()).getAngle(), Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,105,"checkAngle(new Rotation(u, u.negate()).getAngle(), FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,134,"heckAngle(r.getAngle(), Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,135,"checkAngle(r.getAngle(), FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,136,ouble sqrt = Math.sqrt(2) / 2;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,137,double sqrt = FastMath.sqrt(2) / 2;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,248,ssertTrue(Math.abs(d00) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,249,ssertTrue(Math.abs(d01) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,250,ssertTrue(Math.abs(d02) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,251,ssertTrue(Math.abs(d10) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,252,ssertTrue(Math.abs(d11) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,253,ssertTrue(Math.abs(d12) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,254,ssertTrue(Math.abs(d20) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,255,ssertTrue(Math.abs(d21) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,256,ssertTrue(Math.abs(d22) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,258,ssertTrue(Math.abs(d00) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,259,ssertTrue(Math.abs(d01) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,260,ssertTrue(Math.abs(d02) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,261,ssertTrue(Math.abs(d10) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,262,ssertTrue(Math.abs(d11) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,263,ssertTrue(Math.abs(d12) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,264,ssertTrue(Math.abs(d20) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,265,ssertTrue(Math.abs(d21) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,266,ssertTrue(Math.abs(d22) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,249,assertTrue(FastMath.abs(d00) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,250,assertTrue(FastMath.abs(d01) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,251,assertTrue(FastMath.abs(d02) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,252,assertTrue(FastMath.abs(d10) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,253,assertTrue(FastMath.abs(d11) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,254,assertTrue(FastMath.abs(d12) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,255,assertTrue(FastMath.abs(d20) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,256,assertTrue(FastMath.abs(d21) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,257,assertTrue(FastMath.abs(d22) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,259,assertTrue(FastMath.abs(d00) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,260,assertTrue(FastMath.abs(d01) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,261,assertTrue(FastMath.abs(d02) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,262,assertTrue(FastMath.abs(d10) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,263,assertTrue(FastMath.abs(d11) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,264,assertTrue(FastMath.abs(d12) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,265,assertTrue(FastMath.abs(d20) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,266,assertTrue(FastMath.abs(d21) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,267,assertTrue(FastMath.abs(d22) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,274,ssertTrue(Math.abs(m3tm3 - 1.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,275,assertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,276,ssertTrue(Math.abs(m3tm3) < 1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,277,assertTrue(FastMath.abs(m3tm3) < 1.0e-10);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,292,"heckAngle(r.getAngle(), Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,293,"checkAngle(r.getAngle(), FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,359,"ouble[] singularCardanAngle = { Math.PI / 2, -Math.PI / 2 };"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,360,"double[] singularCardanAngle = { FastMath.PI / 2, -FastMath.PI / 2 };"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,379,"ouble[] singularEulerAngle = { 0, Math.PI };"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,380,"double[] singularEulerAngle = { 0, FastMath.PI };"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,457,"ector3D u = new Vector3D(Math.cos(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,458,"ath.sin(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,459,ath.sin(phi));
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,458,"Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,459,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,460,FastMath.sin(phi));
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,469,"ector3D u = new Vector3D(Math.cos(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,470,"ath.sin(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,471,ath.sin(phi));
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,470,"Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,471,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,472,FastMath.sin(phi));
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,477," = new Rotation(Vector3D.PLUS_K, Math.PI);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,478,"r = new Rotation(Vector3D.PLUS_K, FastMath.PI);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,480,"ector3D u = new Vector3D(Math.cos(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,481,"ath.sin(lambda) * Math.cos(phi),"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,482,ath.sin(phi));
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,481,"Vector3D u = new Vector3D(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,482,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,483,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,32,ouble r = Math.sqrt(2) /2;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,33,"heckVector(new Vector3D(2, new Vector3D(Math.PI / 3, -Math.PI / 4)),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,34,", r * Math.sqrt(3), -2 * r);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,33,double r = FastMath.sqrt(2) /2;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,34,"checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,35,"r, r * FastMath.sqrt(3), -2 * r);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,51,ssertTrue(Math.abs(v.getX() - 1) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,52,ssertTrue(Math.abs(v.getY() - 2) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,53,ssertTrue(Math.abs(v.getZ() - 3) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,52,assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,53,assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,54,assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,63,"ssertEquals(Math.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,64,"assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,83,"ssertEquals(Math.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,84,"assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,140,"ssertTrue(Math.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,141,"assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,145,"ssertTrue(Math.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,146,"ssertTrue(Math.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,146,"assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,147,"assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,154,"ssertEquals(Math.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,155,"assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,157,"ssertEquals(Math.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,158,"assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,160,"ssertEquals(3 * Math.PI /4, u.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,161,"ssertEquals(-1.0 / Math.sqrt(3), Math.sin(u.getDelta()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,161,"assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,162,"assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,170,ector3D v2 = k.scalarMultiply(Math.cos(1.2)).add(i.scalarMultiply(Math.sin(1.2)));
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,171,Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,172,"ssertTrue(Math.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,173,"assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,101,"alues[i] = Math.pow(values[i], d);"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,102,"values[i] = FastMath.pow(values[i], d);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,156,"ssertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,157,"ssertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,157,"assertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,158,"assertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1287,"ssertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1288,"assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2 + FastMath.ulp(2)}));"
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,129,inal double s3  = Math.sqrt(3.0);
False,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,130,inal double s14 = Math.sqrt(14.0);
False,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,131,inal double s1553 = Math.sqrt(1553.0);
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,130,final double s3  = FastMath.sqrt(3.0);
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,131,final double s14 = FastMath.sqrt(14.0);
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,132,final double s1553 = FastMath.sqrt(1553.0);
False,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,167,inal double s17 = Math.sqrt(17.0);
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,168,final double s17 = FastMath.sqrt(17.0);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,160,"ssertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,161,"ssertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,161,"assertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,162,"assertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,380,ouble isqrt3 = 1/Math.sqrt(3.0);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,381,double isqrt3 = 1/FastMath.sqrt(3.0);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,382,ouble isqrt2 = 1/Math.sqrt(2.0);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,383,double isqrt2 = 1/FastMath.sqrt(2.0);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,384,ouble isqrt6 = 1/Math.sqrt(6.0);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,385,double isqrt6 = 1/FastMath.sqrt(6.0);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,411,f (Math.abs(value - searchArray[i]) < tolerance) {
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,412,if (FastMath.abs(value - searchArray[i]) < tolerance) {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,444,f (Math.abs(multiplier - 1.0) <= Math.ulp(1.0) && Math.abs(colEntry) > 1E-14
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,445,& Math.abs(column[j]) > 1e-14) {
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,445,if (FastMath.abs(multiplier - 1.0) <= FastMath.ulp(1.0) && FastMath.abs(colEntry) > 1E-14
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,446,&& FastMath.abs(column[j]) > 1e-14) {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,448,f (Math.abs(column[j] * multiplier - colEntry) > tolerance) {
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,449,if (FastMath.abs(column[j] * multiplier - colEntry) > tolerance) {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,511,inal double inv = 1.0 / Math.sqrt(norm2);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,512,final double inv = 1.0 / FastMath.sqrt(norm2);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,526,"or (int i = 0; i < Math.min(rows, columns); ++i) {"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,527,"for (int i = 0; i < FastMath.min(rows, columns); ++i) {"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,156,"ssertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,157,"ssertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,157,"assertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,158,"assertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1190,"ssertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1191,"assertNotSame(v, new OpenMapRealVector(new double[] { 0, 1, 2 + FastMath.ulp(2)}));"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,132,"ew double[] { -Math.sqrt(15), -3.0832882879592476, 0.6082710842351517, 1.1786086405912128 });"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,134,"new double[] { -FastMath.sqrt(15), -3.0832882879592476, 0.6082710842351517, 1.1786086405912128 });"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,31,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,104,"nteg1.integrate(problem, Math.PI, new double[] { -1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,105,"integ1.integrate(problem, FastMath.PI, new double[] { -1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,112,"nteg2.integrate(problem, 2.0 * Math.PI, new double[] { 1.0, 0.0 },"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,113,"ath.PI, new double[2]);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,113,"integ2.integrate(problem, 2.0 * FastMath.PI, new double[] { 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,114,"FastMath.PI, new double[2]);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,122,"ssertEquals(2.0 * Math.PI, cm.getInitialTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,123,"assertEquals(2.0 * FastMath.PI, cm.getInitialTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,125,or (double t = 0; t < 2.0 * Math.PI; t += 0.1) {
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,126,for (double t = 0; t < 2.0 * FastMath.PI; t += 0.1) {
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,128,"ssertEquals(Math.cos(t), y[0], 1.0e-7);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,129,"ssertEquals(Math.sin(t), y[1], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,129,"assertEquals(FastMath.cos(t), y[0], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,130,"assertEquals(FastMath.sin(t), y[1], 1.0e-7);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,177,ssertTrue(Math.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,178,assertTrue(FastMath.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,49,"ouble step  = Math.pow(2.0, -(i + 1));"
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,50,"double step  = FastMath.pow(2.0, -(i + 1));"
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,51, Math.sin(4.0);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,52,- FastMath.sin(4.0);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,53,ssertTrue(Math.abs(error) < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,54,assertTrue(FastMath.abs(error) < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,63, Math.sin(4.0);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,64,ssertTrue(Math.abs(error) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,64,- FastMath.sin(4.0);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,65,assertTrue(FastMath.abs(error) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,70, Math.sin(4.0);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,71,ssertTrue(Math.abs(error) > 0.1);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,71,- FastMath.sin(4.0);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,72,assertTrue(FastMath.abs(error) > 0.1);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,104,0[0] = Math.sin(omega * t0);
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,105,0[1] = omega * Math.cos(omega * t0);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,105,y0[0] = FastMath.sin(omega * t0);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,106,y0[1] = omega * FastMath.cos(omega * t0);
True,src/test/java/org/apache/commons/math/ode/TestProblem1.java,src/test/java/org/apache/commons/math/ode/TestProblem1.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/TestProblem1.java,src/test/java/org/apache/commons/math/ode/TestProblem1.java,82,ouble c = Math.exp (t0 - t);
True,src/test/java/org/apache/commons/math/ode/TestProblem1.java,src/test/java/org/apache/commons/math/ode/TestProblem1.java,84,double c = FastMath.exp (t0 - t);
True,src/test/java/org/apache/commons/math/ode/TestProblem2.java,src/test/java/org/apache/commons/math/ode/TestProblem2.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/TestProblem2.java,src/test/java/org/apache/commons/math/ode/TestProblem2.java,84,ouble c = t2 + 2 * (Math.exp (-0.5 * t2) - 1);
True,src/test/java/org/apache/commons/math/ode/TestProblem2.java,src/test/java/org/apache/commons/math/ode/TestProblem2.java,86,double c = t2 + 2 * (FastMath.exp (-0.5 * t2) - 1);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,56,"ouble[] y0 = { 1 - e, 0, 0, Math.sqrt((1+e)/(1-e)) };"
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,58,"double[] y0 = { 1 - e, 0, 0, FastMath.sqrt((1+e)/(1-e)) };"
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,92,ouble invR3 = 1 / (r2 * Math.sqrt(r2));
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,94,double invR3 = 1 / (r2 * FastMath.sqrt(r2));
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,109,or (int i = 0; (i < 50) && (Math.abs(corr) > 1.0e-12); ++i) {
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,110,ouble f2  = e * Math.sin(E);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,111,for (int i = 0; (i < 50) && (FastMath.abs(corr) > 1.0e-12); ++i) {
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,112,double f2  = e * FastMath.sin(E);
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,112,ouble f1  = 1 - e * Math.cos(E);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,114,double f1  = 1 - e * FastMath.cos(E);
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,119,ouble cosE = Math.cos(E);
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,120,ouble sinE = Math.sin(E);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,121,double cosE = FastMath.cos(E);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,122,double sinE = FastMath.sin(E);
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,123,[1] = Math.sqrt(1 - e * e) * sinE;
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,125,y[1] = FastMath.sqrt(1 - e * e) * sinE;
False,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,125,[3] = Math.sqrt(1 - e * e) * cosE / (1 - e * cosE);
True,src/test/java/org/apache/commons/math/ode/TestProblem3.java,src/test/java/org/apache/commons/math/ode/TestProblem3.java,127,y[3] = FastMath.sqrt(1 - e * e) * cosE / (1 - e * cosE);
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,53,"ouble[] y0 = { Math.sin(a), Math.cos(a) };"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,54,"double[] y0 = { FastMath.sin(a), FastMath.cos(a) };"
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,90,ouble sin = Math.sin(t + a);
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,91,ouble cos = Math.cos(t + a);
False,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,92,[0] = Math.abs(sin);
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,91,double sin = FastMath.sin(t + a);
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,92,double cos = FastMath.cos(t + a);
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,93,y[0] = FastMath.abs(sin);
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,78,f (Math.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,79,if (FastMath.abs((start - problem.getInitialTime()) / integrator.getCurrentSignedStepsize()) > 0.001) {
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,82,"axTimeError = Math.max(maxTimeError, Math.abs(start - expectedStepStart));"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,83,"maxTimeError = FastMath.max(maxTimeError, FastMath.abs(start - expectedStepStart));"
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,96,ouble error = Math.abs(interpolatedY[i] - theoreticalY[i]);
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,97,"astError = Math.max(error, lastError);"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,97,double error = FastMath.abs(interpolatedY[i] - theoreticalY[i]);
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,98,"lastError = FastMath.max(error, lastError);"
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,112,ouble error = errorScale[i] * Math.abs(interpolatedY[i] - theoreticalY[i]);
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,113,"axValueError = Math.max(error, maxValueError);"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,113,double error = errorScale[i] * FastMath.abs(interpolatedY[i] - theoreticalY[i]);
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,114,"maxValueError = FastMath.max(error, maxValueError);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,87,ssert.assertTrue(residualsP1.getStandardDeviation() > 0.006);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,88,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.007);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,88,Assert.assertTrue(residualsP1.getStandardDeviation() > 0.007);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,89,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.008);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,162,ouble t = 18 * Math.PI;
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,163,double t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,189,ouble t = 18 * Math.PI;
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,190,double t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,253,ouble t = 18 * Math.PI;
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,254,double t = 18 * FastMath.PI;
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,275,ssert.assertTrue(stopTime < 5.0 * Math.PI);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,276,Assert.assertTrue(stopTime < 5.0 * FastMath.PI);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,370,ouble cos = Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,371,ouble sin = Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,371,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,372,double sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,381,ouble cos = Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,382,ouble sin = Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,382,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,383,double sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,390,ouble cos = Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,391,ouble sin = Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,391,double cos = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,392,double sin = FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,401,ouble oCos = omega * Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,402,ouble oSin = omega * Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,402,double oCos = omega * FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,403,double oSin = omega * FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,412,ouble oCos = omega * Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,413,ouble oSin = omega * Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,413,double oCos = omega * FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,414,double oSin = omega * FastMath.sin(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,421,ouble cos  = Math.cos(omega * t);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,422,ouble sin  = Math.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,422,double cos  = FastMath.cos(omega * t);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,423,double sin  = FastMath.sin(omega * t);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,30,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,73,"ouble scalAbsoluteTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,74,"double scalAbsoluteTolerance = FastMath.pow(10.0, i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,121,ouble range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,122,double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,138,ouble range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,139,double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,30,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,73,"ouble scalAbsoluteTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,74,"double scalAbsoluteTolerance = FastMath.pow(10.0, i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,121,ouble range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,122,double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,138,ouble range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,139,double range = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,72,"ssert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,73,"Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,92,"ssert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,93,"Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,140,"ouble step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,141,"double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,159,ssertTrue(error < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,160,assertTrue(error < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,211,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,212,double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,34,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,89,ouble maxStep = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,90,double maxStep = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,150,ssertTrue(Math.abs(h) < minStep);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,151,assertTrue(FastMath.abs(h) < minStep);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,171,"ouble scalAbsoluteTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,172,"double scalAbsoluteTolerance = FastMath.pow(10.0, i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,336,ouble step = Math.abs(interpolator.getCurrentTime()
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,337,double step = FastMath.abs(interpolator.getCurrentTime()
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,339,inStep   = Math.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,340,minStep   = FastMath.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,123,ouble halfStep = Math.abs(tB - tA) / 2;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,124,double halfStep = FastMath.abs(tB - tA) / 2;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,129,ssertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,130,assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,34,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,74,"ssert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,75,"Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,95,"ssert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,96,"Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,163,"ouble scalAbsoluteTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,164,"double scalAbsoluteTolerance = FastMath.pow(10.0, i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,386,ouble step = Math.abs(interpolator.getCurrentTime()
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,387,double step = FastMath.abs(interpolator.getCurrentTime()
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,389,inStep   = Math.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,390,minStep   = FastMath.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,123,ouble halfStep = Math.abs(tB - tA) / 2;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,124,double halfStep = FastMath.abs(tB - tA) / 2;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,129,ssertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,130,assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,35,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,67," Math.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,68,"* FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,85,ssertTrue(error < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,86,assertTrue(error < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,139,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,140,double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,53,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,54,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,84,ssertTrue(Math.abs(result[i] - y0[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,85,assertTrue(FastMath.abs(result[i] - y0[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,90,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,91,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,109,ssertTrue(Math.abs(result[0] - 0.1) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,110,ssertTrue(Math.abs(result[1] - 1.2) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,111,ssertTrue(Math.abs(result[2] + 2.2) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,110,assertTrue(FastMath.abs(result[0] - 0.1) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,111,assertTrue(FastMath.abs(result[1] - 1.2) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,112,assertTrue(FastMath.abs(result[2] + 2.2) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,115,ssertTrue(Math.abs(result[0] - 0.5) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,116,ssertTrue(Math.abs(result[1] - 2.0) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,117,ssertTrue(Math.abs(result[2] + 3.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,116,assertTrue(FastMath.abs(result[0] - 0.5) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,117,assertTrue(FastMath.abs(result[1] - 2.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,118,assertTrue(FastMath.abs(result[2] + 3.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,68," Math.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,69,"* FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,86,ssertTrue(error < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,87,assertTrue(error < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,138,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,139,double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,33,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,77,ouble minStep   = 0.1 * Math.abs(pb.getFinalTime() - pb.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,78,ouble maxStep   = Math.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,78,double minStep   = 0.1 * FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,79,double maxStep   = FastMath.abs(pb.getFinalTime() - pb.getInitialTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,129,"ouble absTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,130,"double absTolerance = FastMath.pow(10.0, i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,339,ouble step = Math.abs(interpolator.getCurrentTime()
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,340,double step = FastMath.abs(interpolator.getCurrentTime()
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,342,inStep   = Math.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,343,minStep   = FastMath.abs(step);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,125,ouble halfStep = Math.abs(tB - tA) / 2;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,126,double halfStep = FastMath.abs(tB - tA) / 2;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,131,ssertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,132,assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,117,"ouble scalAbsoluteTolerance = Math.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,118,"double scalAbsoluteTolerance = FastMath.pow(10.0, i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,37,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,123,ouble halfStep = Math.abs(tB - tA) / 2;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,124,double halfStep = FastMath.abs(tB - tA) / 2;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,129,ssertTrue(Math.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,130,assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,35,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,67," Math.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,68,"* FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,85,ssertTrue(error < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,86,assertTrue(error < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,139,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,140,double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,68," Math.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,69,"* FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,86,ssertTrue(error < Math.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,87,assertTrue(error < FastMath.abs(previousError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,138,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,139,double step = FastMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,33,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,48,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,49,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,66,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,67,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,72,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,73,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,101,ssertTrue(Math.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,102,assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,44,f (Math.abs(h) < 10 * Math.ulp(t)) {
True,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,45,if (FastMath.abs(h) < 10 * FastMath.ulp(t)) {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,92,ssertTrue(Math.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,93,assertTrue(FastMath.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,30,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,46,ouble d = (optima[i] - optima[i-1]) / (2 * Math.PI);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,47,ssertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,47,double d = (optima[i] - optima[i-1]) / (2 * FastMath.PI);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,48,assertTrue (FastMath.abs(d - FastMath.rint(d)) < 1.0e-8);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,eturn ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,88,return ((x == 0) || (y == 0)) ? 0 : (FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,241,eturn 1.0 / (twoS2 * Math.PI) * Math.exp(-(x * x + y * y) / twoS2);
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,242,return 1.0 / (twoS2 * FastMath.PI) * FastMath.exp(-(x * x + y * y) / twoS2);
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,eturn ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,return ((x == 0) || (y == 0)) ? 0 : (FastMath.atan(x) * FastMath.atan(x + 2) * FastMath.atan(y) * FastMath.atan(y) / (x * y));
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,97,"eturn d + ((a - d) / (1 + Math.pow(x / c, b)));"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,98,"return d + ((a - d) / (1 + FastMath.pow(x / c, b)));"
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,108,"ouble den = 1 + Math.pow(x / c, b);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,109,"double den = 1 + FastMath.pow(x / c, b);"
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,115,"radients[1] = -((a - d) * Math.pow(x / c, b) * Math.log(x / c)) / (den * den);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,116,"gradients[1] = -((a - d) * FastMath.pow(x / c, b) * FastMath.log(x / c)) / (den * den);"
False,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,118,"radients[2] = (b * Math.pow(x / c, b - 1) * (x / (c * c)) * (a - d)) / (den * den);"
True,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java,119,"gradients[2] = (b * FastMath.pow(x / c, b - 1) * (x / (c * c)) * (a - d)) / (den * den);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,48,ssertTrue(Math.abs(f.value(x) - fitted.value(x)) < 1.0e-13);
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,49,assertTrue(FastMath.abs(f.value(x) - fitted.value(x)) < 1.0e-13);
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,30,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,49,ouble error = Math.abs(p.value(x) - fitted.value(x)) /
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,50,1.0 + Math.abs(p.value(x)));
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,50,double error = FastMath.abs(p.value(x) - fitted.value(x)) /
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,51,(1.0 + FastMath.abs(p.value(x)));
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,75,ouble error = Math.abs(p.value(x) - fitted.value(x)) /
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,76,1.0 + Math.abs(p.value(x)));
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,77,"axError = Math.max(maxError, error);"
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,78,ssertTrue(Math.abs(error) < 0.1);
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,76,double error = FastMath.abs(p.value(x) - fitted.value(x)) /
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,77,(1.0 + FastMath.abs(p.value(x)));
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,78,"maxError = FastMath.max(maxError, error);"
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,79,assertTrue(FastMath.abs(error) < 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,414,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,415,"assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,36,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,214,ssertTrue(Math.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,215,assertTrue(FastMath.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,412,"ssertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,413,"assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,428,or (double d= 0; d < 2 * Math.PI; d += 0.01) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,429,"ircle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,429,for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,430,"circle.addPoint(center.x + r * FastMath.cos(d), center.y + r * FastMath.sin(d));"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,30,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,120,"ath.sqrt(24.2)), false);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,121,"FastMath.sqrt(24.2)), false);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,122,"ath.sqrt(1795769.0)), false);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,123,"FastMath.sqrt(1795769.0)), false);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,124,"1.0 * Math.sqrt(169000121.0)), false);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,125,"11.0 * FastMath.sqrt(169000121.0)), false);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,493,ptimizer.setCostRelativeTolerance(Math.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,494,ptimizer.setParRelativeTolerance(Math.sqrt(2.22044604926e-16));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,494,optimizer.setCostRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,495,optimizer.setParRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,567,"ssertEquals(theoreticalMinCost, Math.sqrt(m) * rms, threshold);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,568,"assertEquals(theoreticalMinCost, FastMath.sqrt(m) * rms, threshold);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,576,"ssertEquals(mi, vi, paramsAccuracy * (1.0 + Math.abs(mi)));"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,577,"assertEquals(mi, vi, paramsAccuracy * (1.0 + FastMath.abs(mi)));"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,680,"ath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,681,"FastMath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,758,ouble tmp2 = Math.sqrt(tmpSquare);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,759,double tmp2 = FastMath.sqrt(tmpSquare);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,775,mp1 = Math.atan(x2 / x1) / twoPi;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,776,tmp1 = FastMath.atan(x2 / x1) / twoPi;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,780,ouble tmp2 = Math.sqrt(x1 * x1 + x2 * x2);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,781,double tmp2 = FastMath.sqrt(x1 * x1 + x2 * x2);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,788,rivate static final double twoPi = 2.0 * Math.PI;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,789,private static final double twoPi = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,829,rivate static final double sqrt5  = Math.sqrt( 5.0);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,830,rivate static final double sqrt10 = Math.sqrt(10.0);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,830,private static final double sqrt5  = FastMath.sqrt( 5.0);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,831,private static final double sqrt10 = FastMath.sqrt(10.0);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1001,ouble tmp2 = Math.exp(tmp1);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1002,double tmp2 = FastMath.exp(tmp1);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1015,[i] = x1 * Math.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1016,f[i] = x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1123,"tmp * Math.exp(-tmp * x1),"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1124,"mp * Math.exp(-tmp * x2),"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1125,ath.exp(-i - 1) - Math.exp(-tmp)
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1124,"-tmp * FastMath.exp(-tmp * x1),"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1125,"tmp * FastMath.exp(-tmp * x2),"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1126,FastMath.exp(-i - 1) - FastMath.exp(-tmp)
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1139,[i] = Math.exp(-tmp * x1) - Math.exp(-tmp * x2)
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1140, (Math.exp(-i - 1) - Math.exp(-tmp)) * x3;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1140,f[i] = FastMath.exp(-tmp * x1) - FastMath.exp(-tmp * x2)
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1141,+ (FastMath.exp(-i - 1) - FastMath.exp(-tmp)) * x3;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1166,"acobian[i] = new double[] { -t * Math.exp(t * x1), -t * Math.exp(t * x2) };"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1167,"jacobian[i] = new double[] { -t * FastMath.exp(t * x1), -t * FastMath.exp(t * x2) };"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1178,[i] = 2 + 2 * temp - Math.exp(temp * x1) - Math.exp(temp * x2);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1179,f[i] = 2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1207,ouble ti   = Math.sin(temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1208,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1209,ouble tmp2 = x3 + ti   * x4 - Math.cos(temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1208,double ti   = FastMath.sin(temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1209,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1210,double tmp2 = x3 + ti   * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1226,ouble tmp1 = x1 + temp * x2 - Math.exp(temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1227,ouble tmp2 = x3 + Math.sin(temp) * x4 - Math.cos(temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1227,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1228,double tmp2 = x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1404,ouble tmp1 = Math.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1405,ouble tmp2 = Math.exp(-temp * x5);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1405,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1406,double tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1423,ouble tmp1 = Math.exp(-temp * x4);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1424,ouble tmp2 = Math.exp(-temp * x5);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1424,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1425,double tmp2 = FastMath.exp(-temp * x5);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1466,ouble tmp1 = Math.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1467,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1468,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1469,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1467,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1468,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1469,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1470,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1503,ouble tmp1 = Math.exp(-x05 * temp);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1504,ouble tmp2 = Math.exp(-x06 * (temp - x09) * (temp - x09));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1505,ouble tmp3 = Math.exp(-x07 * (temp - x10) * (temp - x10));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1506,ouble tmp4 = Math.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1504,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1505,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1506,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1507,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,33,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,54,"ssertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,55,"assertEquals(3 * FastMath.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,56,"ssertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,57,"assertEquals(3 * FastMath.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,"ssertEquals(medianIter, 17, Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"ssertEquals(medianEval, 18, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"assertEquals(medianIter, 17, FastMath.ulp(1d));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,115,"assertEquals(medianEval, 18, FastMath.ulp(1d));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,143,"ouble result = solver.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"ssertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"double result = solver.optimize(f, GoalType.MINIMIZE, 3 * FastMath.PI / 2, 5);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,145,"assertEquals(3 * FastMath.PI / 2, result, 10 * solver.getRelativeAccuracy());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,146,"esult = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,147,"ssertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,147,"result = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * FastMath.PI / 2);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,148,"assertEquals(3 * FastMath.PI / 2, result, 10 * solver.getRelativeAccuracy());"
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,28,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,61,ssertTrue(Math.abs(generated[0] - 1) > 0.1);
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,62,assertTrue(FastMath.abs(generated[0] - 1) > 0.1);
False,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,93,.1 * (1.0 + Math.abs(mean[i])) * (1.0 + Math.abs(mean[j])));
True,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,94,0.1 * (1.0 + FastMath.abs(mean[i])) * (1.0 + FastMath.abs(mean[j])));
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,23,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,46,"ssertEquals(1.0 / (2.0 * Math.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,47,"assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,59,"ssertEquals(1.0 / (2.0 * Math.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,60,"assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,98,ssertTrue(Math.abs(walk) < 120);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,99,assertTrue(FastMath.abs(walk) < 120);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,112,ssertTrue(Math.abs(walk) < 50);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,113,assertTrue(FastMath.abs(walk) < 50);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,126,ssertTrue(Math.abs(walk) < 250);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,127,assertTrue(FastMath.abs(walk) < 250);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,143,"in = Math.min(min, c);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,144,"ax = Math.max(max, c);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,144,"min = FastMath.min(min, c);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,145,"max = FastMath.max(max, c);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,49,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,306,"idthSufficient = Math.min(lowerBinMass, upperBinMass) * sampleSize >= minExpectedCount;"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,307,"widthSufficient = FastMath.min(lowerBinMass, upperBinMass) * sampleSize >= minExpectedCount;"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,566,ssertTrue(Math.abs(xbar) / (s / Math.sqrt(n)) < 3.29);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,567,assertTrue(FastMath.abs(xbar) / (s / FastMath.sqrt(n)) < 3.29);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,36,ouble x = 1.960 / Math.sqrt(2.0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,37,double x = 1.960 / FastMath.sqrt(2.0);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,47,ouble x = 2.576 / Math.sqrt(2.0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,48,double x = 2.576 / FastMath.sqrt(2.0);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,58,ouble x = 2.807 / Math.sqrt(2.0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,59,double x = 2.807 / FastMath.sqrt(2.0);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,69,ouble x = 3.291 / Math.sqrt(2.0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,70,double x = 3.291 / FastMath.sqrt(2.0);
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,118,"heckRelativeError(String.format(""Test %.0f: "", n), expected[(int) (n - 1)], Gamma.digamma(Math.pow(10.0, -n)), 1e-8);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,119,"checkRelativeError(String.format(""Test %.0f: "", n), expected[(int) (n - 1)], Gamma.digamma(FastMath.pow(10.0, -n)), 1e-8);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,148,"ssertEquals(msg, expected, actual, Math.abs(tolerance * actual));"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,149,"assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,22,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,206,"estUtils.assertEquals(Math.log(two), StatUtils.sumLog(x), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,207,"estUtils.assertEquals(Math.log(two), StatUtils.sumLog(x, 0, 1), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,207,"TestUtils.assertEquals(FastMath.log(two), StatUtils.sumLog(x), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,208,"TestUtils.assertEquals(FastMath.log(two), StatUtils.sumLog(x, 0, 1), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,211,"estUtils.assertEquals(Math.log(one) + 2.0 * Math.log(two) + Math.log(three), StatUtils.sumLog(x), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,212,"estUtils.assertEquals(2.0 * Math.log(two), StatUtils.sumLog(x, 1, 2), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,212,"TestUtils.assertEquals(FastMath.log(one) + 2.0 * FastMath.log(two) + FastMath.log(three), StatUtils.sumLog(x), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,213,"TestUtils.assertEquals(2.0 * FastMath.log(two), StatUtils.sumLog(x, 1, 2), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,417,"ssertEquals(Math.exp(0.25d * StatUtils.sumLog(test)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,418,"assertEquals(FastMath.exp(0.25d * StatUtils.sumLog(test)),"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,419,"ssertEquals(Math.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,420,"assertEquals(FastMath.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,41,"ssertEquals(Math.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,42,"assertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,230,"ouble t = Math.abs(rValues.getEntry(i, j)) / stdErrors.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,231,"double t = FastMath.abs(rValues.getEntry(i, j)) / stdErrors.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,86,"ength = list.size() - Math.max(0, list.size() - windowSize);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,87,"length = list.size() - FastMath.max(0, list.size() - windowSize);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,42,rivate double std = Math.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,43,private double std = FastMath.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,25,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,43,rivate double std = Math.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,44,private double std = FastMath.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,205,"ssertEquals(Math.sqrt(2.0 / 3.0), u.getStandardDeviation()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,206,"ssertEquals(Math.sqrt(2.0 / 3.0), u.getStandardDeviation()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,206,"assertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,207,"assertEquals(FastMath.sqrt(2.0 / 3.0), u.getStandardDeviation()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,186,ong index = Math.round((Math.random()) * testArray.length);
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,187,long index = FastMath.round((FastMath.random()) * testArray.length);
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,24,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,40,rivate double std = Math.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,41,private double std = FastMath.sqrt(var);
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,278,"ssertEquals(Math.exp(2), u.getGeometricMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,279,"assertEquals(FastMath.exp(2), u.getGeometricMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,38,rotected double std = Math.sqrt(var);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,39,protected double std = FastMath.sqrt(var);
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,59,rotected double weightedStd = Math.sqrt(weightedVar);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,60,protected double weightedStd = FastMath.sqrt(weightedVar);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,95,eturn Math.sqrt(sum / v.length);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,96,return FastMath.sqrt(sum / v.length);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,55,"astFourierTransformer.scaleArray(x, Math.sqrt(0.5 * (x.length-1)));"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,56,"FastFourierTransformer.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,79,in = 0.0; max = 2.0 * Math.PI * N / (N-1);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,80,min = 0.0; max = 2.0 * FastMath.PI * N / (N-1);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,85,in = -Math.PI; max = Math.PI * (N+1) / (N-1);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,86,min = -FastMath.PI; max = FastMath.PI * (N+1) / (N-1);
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,21,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,65,"astFourierTransformer.scaleArray(x2, 1.0 / Math.sqrt(x2.length));"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,66,"FastFourierTransformer.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,122,in = 0.0; max = 2.0 * Math.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,123,min = 0.0; max = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,133,in = -Math.PI; max = Math.PI;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,134,min = -FastMath.PI; max = FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,20,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,55,"astFourierTransformer.scaleArray(x, Math.sqrt(x.length / 2.0));"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,56,"FastFourierTransformer.scaleArray(x, FastMath.sqrt(x.length / 2.0));"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,76,in = 0.0; max = 2.0 * Math.PI;
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,77,min = 0.0; max = 2.0 * FastMath.PI;
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,83,in = -Math.PI; max = Math.PI;
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,84,min = -FastMath.PI; max = FastMath.PI;
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,120,"ew BigReal(17), new BigReal(Math.PI),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,120,"new BigReal(17), new BigReal(FastMath.PI),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,167,"ssertEquals(n + "" choose "" + k, Math.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,167,"assertEquals(n + "" choose "" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,179,"ssertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", Math.log(expected),"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,179,"assertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", FastMath.log(expected),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,214,"athUtils.binomialCoefficientLog(n, k) / Math.log(exactResult), 1e-10);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,214,"MathUtils.binomialCoefficientLog(n, k) / FastMath.log(exactResult), 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,240,"ssertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / Math.log(exactResult), 1e-10);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,240,"assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,365,"ssertTrue(MathUtils.equals(1.0, 1 + Math.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,366,"ssertFalse(MathUtils.equals(1.0, 1 + 2 * Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,365,"assertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,366,"assertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,368,"inal double nUp1 = MathUtils.nextAfter(1d, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"inal double nnUp1 = MathUtils.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,368,"final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"ssertTrue(MathUtils.equals(0.0, Math.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,375,"ssertTrue(MathUtils.equals(0.0, -Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"assertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,375,"assertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"ssertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + Math.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,404,"ssertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * Math.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,404,"assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,"inal double nUp1 = MathUtils.nextAfter(1d, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,"inal double nnUp1 = Math.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,"final double nUp1 = FastMath.nextAfter(1d, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,"final double nnUp1 = FastMath.nextAfter(nUp1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,412,"ssertTrue(MathUtils.equalsIncludingNaN(0.0, Math.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,"ssertTrue(MathUtils.equalsIncludingNaN(0.0, -Math.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,412,"assertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,"assertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,459,"ew double[] { MathUtils.nextAfter(1d, 2d) }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,459,"new double[] { FastMath.nextAfter(1d, 2d) }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,480,"ew double[] { MathUtils.nextAfter(MathUtils.nextAfter(1d, 2d), 2d) }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,480,"new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,487,"ssertEquals(i + ""! "", Math.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,487,"assertEquals(i + ""! "", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,683,"athUtils.hash(new double[] { MathUtils.nextAfter(1d, 2d) }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,683,"MathUtils.hash(new double[] { FastMath.nextAfter(1d, 2d) }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,910,"ssertEquals(16.0, MathUtils.nextAfter(15.999999999999998, 34.27555555555555), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,910,"assertEquals(16.0, FastMath.nextAfter(15.999999999999998, 34.27555555555555), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,913,"ssertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,913,"assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,916,"ssertEquals(15.999999999999996, MathUtils.nextAfter(15.999999999999998, 2.142222222222222), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,916,"assertEquals(15.999999999999996, FastMath.nextAfter(15.999999999999998, 2.142222222222222), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,919,"ssertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,919,"assertEquals(-15.999999999999996, FastMath.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,922,"ssertEquals(8.000000000000002, MathUtils.nextAfter(8.0, 34.27555555555555), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,922,"assertEquals(8.000000000000002, FastMath.nextAfter(8.0, 34.27555555555555), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,925,"ssertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 34.27555555555555), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,925,"assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 34.27555555555555), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,928,"ssertEquals(7.999999999999999, MathUtils.nextAfter(8.0, 2.142222222222222), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,928,"assertEquals(7.999999999999999, FastMath.nextAfter(8.0, 2.142222222222222), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,931,"ssertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 2.142222222222222), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,931,"assertEquals(-7.999999999999999, FastMath.nextAfter(-8.0, 2.142222222222222), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,934,"ssertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,934,"assertEquals(2.308922399667661E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,937,"ssertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,937,"assertEquals(2.308922399667661E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,940,"ssertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,940,"assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,943,"ssertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,943,"assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,946,"ssertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,946,"assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,949,"ssertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,949,"assertEquals(2.3089223996676603E-4, FastMath.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,952,"ssertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,952,"assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,955,"ssertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,955,"assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,958,"ssertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,958,"assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,961,"ssertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,961,"assertEquals(-2.308922399667661E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,964,"ssertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,964,"assertEquals(-2.308922399667661E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,967,"ssertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,967,"assertEquals(-2.3089223996676603E-4, FastMath.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,972,"ssertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,973,"ssertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,974,"ssertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN, 0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,975,"ssertTrue(Double.isInfinite(MathUtils.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,976,"ssertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,977,"ssertEquals(Double.MIN_VALUE, MathUtils.nextAfter(0, 1), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,978,"ssertEquals(-Double.MIN_VALUE, MathUtils.nextAfter(0, -1), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,979,"ssertEquals(0, MathUtils.nextAfter(Double.MIN_VALUE, -1), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,980,"ssertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,972,"assertTrue(Double.isInfinite(FastMath.nextAfter(Double.NEGATIVE_INFINITY, 0)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,973,"assertTrue(Double.isInfinite(FastMath.nextAfter(Double.POSITIVE_INFINITY, 0)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,974,"assertTrue(Double.isNaN(FastMath.nextAfter(Double.NaN, 0)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,975,"assertTrue(Double.isInfinite(FastMath.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,976,"assertTrue(Double.isInfinite(FastMath.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,977,"assertEquals(Double.MIN_VALUE, FastMath.nextAfter(0, 1), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,978,"assertEquals(-Double.MIN_VALUE, FastMath.nextAfter(0, -1), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,979,"assertEquals(0, FastMath.nextAfter(Double.MIN_VALUE, -1), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,980,"assertEquals(0, FastMath.nextAfter(-Double.MIN_VALUE, 1), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,987,"ssertEquals(Math.PI, MathUtils.scalb(Math.PI, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,987,"assertEquals(FastMath.PI, MathUtils.scalb(FastMath.PI, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,997,ssertTrue((b - Math.PI) <= c);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,998,ssertTrue(c <= (b + Math.PI));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,999,ouble twoK = Math.rint((a - c) / Math.PI);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1000,"ssertEquals(c, a - twoK * Math.PI, 1.0e-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,997,assertTrue((b - FastMath.PI) <= c);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,998,assertTrue(c <= (b + FastMath.PI));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,999,double twoK = FastMath.rint((a - c) / FastMath.PI);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1000,"assertEquals(c, a - twoK * FastMath.PI, 1.0e-14);"

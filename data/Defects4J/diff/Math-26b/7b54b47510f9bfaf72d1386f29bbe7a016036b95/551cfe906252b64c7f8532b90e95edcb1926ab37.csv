is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,20,mport org.apache.commons.math.fraction.Fraction;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,21,mport org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,22,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,mport org.apache.commons.math.ode.IntegratorException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,24,mport org.apache.commons.math.ode.MultistepIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,25,mport org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,26,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,30, This class implements explicit Adams-Bashforth integrators for Ordinary
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,31, Differential Equations.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,33, <p>Adams-Bashforth (in fact due to Adams alone) methods are explicit
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,34, multistep ODE solvers witch fixed stepsize. The value of state vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,35, at step n+1 is a simple combination of the value at step n and of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,36," derivatives at steps n, n-1, n-2 ... Depending on the number k of previous"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,37," steps one wants to use for computing the next value, different formulas"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,38, are available:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,39, <ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,40,   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h f<sub>n</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,41,   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (3f<sub>n</sub>-f<sub>n-1</sub>)/2</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,42,   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (23f<sub>n</sub>-16f<sub>n-1</sub>+5f<sub>n-2</sub>)/12</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,43,   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (55f<sub>n</sub>-59f<sub>n-1</sub>+37f<sub>n-2</sub>-9f<sub>n-3)/24</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,44,   <li>...</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,45, </ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,47, <p>A k-steps Adams-Bashforth method is of order k. There is no limit to the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,48, value of k.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,50, <p>These methods are explicit: f<sub>n+1</sub> is not used to compute
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,51, y<sub>n+1</sub>. More accurate implicit Adams methods exist: the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,52, Adams-Moulton methods (which are also due to Adams alone). They are
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,53, provided by the {@link AdamsMoultonIntegrator AdamsMoultonIntegrator} class.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,55, @see AdamsMoultonIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,56, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,57, @since 2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,59,ublic class AdamsBashforthIntegrator extends MultistepIntegrator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,61,** Serializable version identifier. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,62,rivate static final long serialVersionUID = 1676381657635800870L;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,64,** Integrator method name. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,65,"rivate static final String METHOD_NAME = ""Adams-Bashforth"";"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,67,** Coefficients for the current method. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,68,rivate final double[] coeffs;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,70,** Integration step. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,71,rivate final double step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,74, Build an Adams-Bashforth integrator with the given order and step size.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,75, @param order order of the method (must be strictly positive)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,76, @param step integration step size
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,78,"ublic AdamsBashforthIntegrator(final int order, final double step) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,80,"uper(METHOD_NAME, order, new AdamsBashforthStepInterpolator());"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,82,/ compute the integration coefficients
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,83,nt[][] bdArray = computeBackwardDifferencesArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,84,raction[] gamma = computeGammaArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,85,oeffs = new double[order];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,86,or (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,87,raction f = Fraction.ZERO;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,88,or (int j = i; j < order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,89," = f.add(gamma[j].multiply(new Fraction(bdArray[j][i], 1)));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,91,oeffs[i] = f.doubleValue();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,94,his.step = Math.abs(step);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,98,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,99,"ublic double integrate(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,100,"ouble t0, double[] y0, double t, double[] y)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,101,"hrows DerivativeException, IntegratorException {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,103,"anityChecks(equations, t0, y0, t, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,104,inal boolean forward = (t > t0);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,106,/ initialize working arrays
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,107,f (y != y0) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,108,"ystem.arraycopy(y0, 0, y, 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,110,inal double[] yTmp = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,112,/ set up an interpolator sharing the integrator arrays
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,113,inal AdamsBashforthStepInterpolator interpolator =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,114,AdamsBashforthStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,115,"nterpolator.reinitialize(yTmp, previousT, previousF, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,117,/ set up integration control objects
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,118,tepStart = t0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,119,tepSize  = forward ? step : -step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,120,or (StepHandler handler : stepHandlers) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,121,andler.reset();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,123,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,125,/ compute the first few steps using the configured starter integrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,126,ouble stopTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,127,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,128,f (Double.isNaN(previousT[0])) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,129,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,131,tepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,132,nterpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,134,oolean lastStep = false;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,135,hile (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,137,/ shift all data
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,138,nterpolator.shift();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,140,/ estimate the state at the end of the step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,141,or (int j = 0; j < y0.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,142,ouble sum = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,143,or (int l = 0; l < coeffs.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,144,um += coeffs[l] * previousF[l][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,146,Tmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,149,/ discrete events handling
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,150,nterpolator.storeTime(stepStart + stepSize);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,151,inal boolean truncated;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,152,f (manager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,153,runcated = true;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,154,nterpolator.truncateStep(manager.getEventTime());
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,155, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,156,runcated = false;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,159,/ the step has been accepted (may have been truncated)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,160,inal double nextStep = interpolator.getCurrentTime();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,161,nterpolator.setInterpolatedTime(nextStep);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,162,"ystem.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,163,"anager.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,164,astStep = manager.stop();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,166,/ provide the step data to the step handler
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,167,or (StepHandler handler : stepHandlers) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,168,"andler.handleStep(interpolator, lastStep);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,170,tepStart = nextStep;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,172,f (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,173,/ prepare next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,175,"f (manager.reset(stepStart, y)) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,177,/ some events handler has triggered changes that
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,178,"/ invalidate the derivatives, we need to restart from scratch"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,179,topTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,180,"tart(previousF.length, stepSize, manager, equations, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,181,f (Double.isNaN(previousT[0])) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,182,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,184,tepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,186, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,188,f (truncated) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,189,"/ the step has been truncated, we need to adjust the previous steps"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,190,or (int i = 1; i < previousF.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,191,reviousT[i] = stepStart - i * stepSize;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,nterpolator.setInterpolatedTime(previousT[i]);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,"ystem.arraycopy(interpolator.getInterpolatedState(), 0,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,"reviousF[i], 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,196, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,otatePreviousSteps();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,200,/ evaluate differential equations for next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,201,reviousT[0] = stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,202,"quations.computeDerivatives(stepStart, y, previousF[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,209,topTime  = stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,tepStart = Double.NaN;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,211,tepSize  = Double.NaN;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,216,** Get the coefficients of the method.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,217, <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,218, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,219,   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k-1</sup> c<sub>i</sub>f<sub>n-i</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,220, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,221, @return a copy of the coefficients of the method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,223,ublic double[] getCoeffs() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,224,eturn coeffs.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,227,** Compute the backward differences coefficients array.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,228, <p>This is quite similar to the Pascal triangle containing the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,229," binomial coefficients, except for an additional (-1)<sup>i</sup> sign."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,230," We use a straightforward approach here, since we don't expect this to"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,231, be run too many times with too high k. It is based on the recurrence
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,232, relations:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,233, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,234,   &nabla;<sup>0</sup> f<sub>n</sub> = f<sub>n</sub>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,235,   &nabla;<sup>i+1</sup> f<sub>n</sub> = &nabla;<sup>i</sup>f<sub>n</sub> - &nabla;<sup>i</sup>f<sub>n-1</sub>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,236, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,237, @param order order of the integration method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,238, @return the coefficients array for backward differences
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,240,tatic int[][] computeBackwardDifferencesArray(final int order) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,242,/ create the array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,243,nt[][] bdArray = new int[order][];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,245,/ recurrence initialization
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,dArray[0] = new int[] { 1 };
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,248,/ fill up array using recurrence relation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,249,or (int i = 1; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,250,dArray[i] = new int[i + 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,251,dArray[i][0] = 1;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,252,or (int j = 0; j < i - 1; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,253,dArray[i][j + 1] = bdArray[i - 1][j + 1] - bdArray[i - 1][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,255,dArray[i][i] = -bdArray[i - 1][i - 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,258,eturn bdArray;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,262,** Compute the gamma coefficients.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,263, @param order order of the integration method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264, @return gamma coefficients array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,266,tatic Fraction[] computeGammaArray(final int order) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,268,/ create the array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,269,raction[] gammaArray = new Fraction[order];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,271,/ recurrence initialization
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,272,ammaArray[0] = Fraction.ONE;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,274,/ fill up array using recurrence relation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,275,or (int i = 1; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,276,raction gamma = Fraction.ONE;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,277,or (int j = 1; j <= i; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,278,"amma = gamma.subtract(gammaArray[i - j].multiply(new Fraction(1, j + 1)));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,280,ammaArray[i] = gamma;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,283,eturn gammaArray;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,20,mport java.io.IOException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,21,mport java.io.ObjectInput;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,22,mport java.io.ObjectOutput;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,24,mport org.apache.commons.math.fraction.Fraction;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,25,mport org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,26,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,27,mport org.apache.commons.math.ode.sampling.MultistepStepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,28,mport org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,31, This class implements an interpolator for Adams-Bashforth multiple steps.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,33, <p>This interpolator computes dense output inside the last few
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,34, steps computed. The interpolation equation is consistent with the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,35," integration scheme, it is based on a kind of <em>rollback</em> of the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,36, integration from step end to interpolation date:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,37, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,38,   y(t<sub>n</sub> + theta h) = y (t<sub>n</sub> + h) - &int;<sub>t<sub>n</sub> + theta h</sub><sup>t<sub>n</sub> + h</sup>p(t)dt
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,39, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,40, where theta belongs to [0 ; 1] and p(t) is the interpolation polynomial based on
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,41," the derivatives at previous steps f<sub>n-k+1</sub>, f<sub>n-k+2</sub> ..."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,42, f<sub>n</sub> and f<sub>n</sub>.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,44, @see AdamsBashforthIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,45, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,46, @since 2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,49,lass AdamsBashforthStepInterpolator extends MultistepStepInterpolator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,51,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,52,rivate static final long serialVersionUID = -7179861704951334960L;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,54,** Neville's interpolation array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,55,rivate double[] neville;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,57,** Integration rollback array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,58,rivate double[] rollback;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,60,** &gamma; array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,61,rivate double[] gamma;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,63,** Backward differences array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,64,rivate int[][] bdArray;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,66,** Original non-truncated step end time. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,67,rivate double nonTruncatedEnd;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,69,** Original non-truncated step size. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,70,rivate double nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,72,** Simple constructor.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,73," This constructor builds an instance that is not usable yet, the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,74, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,75, before using the instance in order to initialize the internal arrays. This
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,76, constructor is used only in order to delay the initialization in
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,77, some cases.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,79,ublic AdamsBashforthStepInterpolator() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,82,** Copy constructor.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,83, @param interpolator interpolator to copy from. The copy is a deep
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,84, copy: its arrays are separated from the original arrays of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,85, instance
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,87,ublic AdamsBashforthStepInterpolator(final AdamsBashforthStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,88,uper(interpolator);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,89,onTruncatedEnd = interpolator.nonTruncatedEnd;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,90,onTruncatedH   = interpolator.nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,93,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,94,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,95,rotected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,96,eturn new AdamsBashforthStepInterpolator(this);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,99,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,100,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,101,rotected void initializeCoefficients() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,103,eville  = new double[previousF.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,104,ollback = new double[previousF.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,106,dArray = AdamsBashforthIntegrator.computeBackwardDifferencesArray(previousF.length);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,108,raction[] fGamma = AdamsBashforthIntegrator.computeGammaArray(previousF.length);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,109,amma = new double[fGamma.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,110,or (int i = 0; i < fGamma.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,111,amma[i] = fGamma[i].doubleValue();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,116,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,117,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,118,ublic void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,119,onTruncatedEnd = t;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,120,onTruncatedH   = nonTruncatedEnd - previousTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,121,uper.storeTime(t);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,124,** Truncate a step.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,125, <p>Truncating a step is necessary when an event is triggered
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,126, before the nominal end of the step.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,127, @param truncatedEndTime end time of truncated step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,129,oid truncateStep(final double truncatedEndTime) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,130,urrentTime = truncatedEndTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,131, = currentTime - previousTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,134,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,135,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,136,ublic void setInterpolatedTime(final double time)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,137,hrows DerivativeException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,138,nterpolatedTime = time;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,139,inal double oneMinusThetaH = nonTruncatedEnd - interpolatedTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,140,inal double theta = (nonTruncatedH == 0) ?
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,141, : (nonTruncatedH - oneMinusThetaH) / nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,142,"omputeInterpolatedState(theta, oneMinusThetaH);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,145,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,146,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,147,"rotected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,148,nterpolateDerivatives();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,149,nterpolateState(theta);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,152,** Interpolate the derivatives.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,153, <p>The Adams method is based on a polynomial interpolation of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,154, derivatives based on the preceding steps. So the interpolation of
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,155, the derivatives here is strictly equivalent: it is a simple polynomial
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,156, interpolation.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,158,rivate void interpolateDerivatives() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,160,or (int i = 0; i < interpolatedDerivatives.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,162,/ initialize the Neville's interpolation algorithm
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,163,or (int k = 0; k < previousF.length; ++k) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,164,eville[k] = previousF[k][i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,167,/ combine the contributions of each points
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,168,or (int l = 1; l < neville.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,169,or (int m = neville.length - 1; m >= l; --m) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,170,inal double xm   = previousT[m];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,171,inal double xmMl = previousT[m - l];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,172,eville[m] = ((interpolatedTime - xm) * neville[m-1] +
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,173,xmMl - interpolatedTime) * neville[m]) / (xmMl - xm);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,177,/ the interpolation polynomial value is in the array last element
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,178,nterpolatedDerivatives[i] = neville[neville.length - 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,184,** Interpolate the state.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,185, <p>The Adams method is based on a polynomial interpolation of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,186, derivatives based on the preceding steps. The polynomial model is
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,187, integrated analytically throughout the last step. Using the notations
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,188, found in the second edition of the first volume (Nonstiff Problems)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,189," of the reference book by Hairer, Norsett and Wanner: <i>Solving Ordinary"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,190," Differential Equations</i> (Springer-Verlag, ISBN 3-540-56670-8), this"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,191, process leads to the following expression:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,192, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,193, y<sub>n+1</sub> = y<sub>n</sub> +
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,194, h &times; &sum;<sub>j=0</sub><sup>j=k-1</sup> &gamma;<sub>j</sub>&nabla;<sup>j</sup>f<sub>n</sub>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,195, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,196," <p>In the previous expression, the &gamma;<sub>j</sub> terms are the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,197," ones that result from the analytical integration, and can be computed form"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,198, the binomial coefficients C<sub>j</sub><sup>-s</sup>:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,199, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,200, &gamma;<sub>j</sub> = (-1)<sup>j</sup>&int;<sub>0</sub><sup>1</sup>C<sub>j</sub><sup>-s</sup>ds
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,201, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,202, <p>In order to interpolate the state in a manner that is consistent with the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,203," integration scheme, we simply subtract from the current state (at the end of the step)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,204, the integral computed from interpolation time to step end time.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,205, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,206, &eta;<sub>j</sub>(&theta;)=
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,207, (-1)<sup>j</sup>&int;<sub>&theta;</sub><sup>1</sup>C<sub>j</sub><sup>-s</sup>ds
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,208, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,209," The method described in the Hairer, Norsett and Wanner book to compute &gamma;<sub>j</sub>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,210, is easily extended to compute &gamma;<sub>j</sub>(&theta;)=
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,211," (-1)<sup>j</sup>&int;<sub>0</sub><sup>&theta;</sup>C<sub>j</sub><sup>-s</sup>ds. From this,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,212, we can compute &eta;<sub>j</sub>(&theta;) = &gamma;<sub>j</sub>-&gamma;<sub>j</sub>(&theta;).
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,213, The first few values are:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,214, <table>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,215, <tr><td>j</td><td>&gamma;<sub>j</sub></td><td>&gamma;<sub>j</sub>(&theta;)</td><td>&eta;<sub>j</sub>(&theta;)</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,216, <tr><td>0</td><td>1</td><td></td>&theta;<td>1-&theta;</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,217, <tr><td>1</td><td>1/2</td><td></td>&theta;<sup>2</sup>/2<td>(1-&theta;<sup>2</sup>)/2</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,218, <tr><td>2</td><td>5/12</td><td></td>(3&theta;<sup>2</sup>+2&theta;<sup>3</sup>)/12<td>(5-3&theta;<sup>2</sup>-2&theta;<sup>3</sup>)/12</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,219, </table>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,220, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,221," The &eta;<sub>j</sub>(&theta;) functions appear to be polynomial ones. As expected,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,222, we see that &eta;<sub>j</sub>(1)= 0. The recurrence relation derived for
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,223, &gamma;<sub>j</sub>(&theta;) is:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,224, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,225, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,226, &sum<sub>j=0</sub><sup>j=m</sup>&gamma;<sub>j</sub>(&theta;)/(m+1-j) =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,227, 1/(m+1)! &prod;<sub>k=0</sub><sup>k=m</sup>(&theta;+k)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,228, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,229, @param theta location of the interpolation point within the last step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,231,rivate void interpolateState(final double theta) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,233,/ compute the integrals to remove from the final state
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,234,"omputeRollback(previousT.length - 1, theta);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,236,/ remove these integrals from the final state
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,237,or (int j = 0; j < interpolatedState.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,238,ouble sum = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,239,or (int l = 0; l < previousT.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,240,um += rollback[l] * previousF[l][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,242,nterpolatedState[j] = currentState[j] - h * sum;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,247,** Compute the rollback coefficients.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,248, @param order order of the integration method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,249, @param theta current value for theta
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,251,"rivate void computeRollback(final int order, final double theta) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,253,/ compute the gamma(theta) values from the recurrence relation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,254,ouble product = theta;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,255,ollback[0]  = theta;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,256,or (int i = 1; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,257,roduct *= (i + theta) / (i + 1);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,258,ouble g = product;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,259,or (int j = 1; j <= i; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,260, -= rollback[i - j] / (j + 1);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,262,ollback[i] = g;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,265,/ subtract it from gamma to get eta(theta)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,266,or (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,267,ollback[i] -= gamma[i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,270,/ combine the eta integrals with the backward differences array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,271,/ to get the rollback coefficients
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,272,or (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,273,ouble f = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,274,or (int j = i; j <= order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,275, -= rollback[j] * bdArray[j][i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,277,ollback[i] = f;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,282,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,283,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,284,ublic void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,285,hrows IOException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,286,uper.writeExternal(out);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,287,ut.writeDouble(nonTruncatedEnd);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,290,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,291,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,292,ublic void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,293,hrows IOException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthStepInterpolator.java,294,onTruncatedEnd = in.readDouble();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,21,import java.io.ObjectInputStream;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,22,import java.io.ObjectOutputStream;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,import java.lang.reflect.Field;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,24,import java.util.Arrays;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,25,import java.util.HashMap;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,26,import java.util.Map;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,28,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,29,import org.apache.commons.math.fraction.BigFraction;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,30,import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,31,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,32,import org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,33,import org.apache.commons.math.linear.MatrixUtils;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,34,import org.apache.commons.math.linear.MatrixVisitorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,35,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,36,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,37,import org.apache.commons.math.linear.RealMatrixPreservingVisitor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,38,import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,39,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,40,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,41,import org.apache.commons.math.ode.IntegratorException;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,42,import org.apache.commons.math.ode.MultistepIntegrator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,43,import org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,44,import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,45,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,49,* This class implements explicit Adams-Bashforth and Adams-Moulton integrators for Ordinary
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,50,* Differential Equations.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,52,* <p>Adams-Bashforth (in fact due to Adams alone) methods are explicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,53,* multistep ODE solvers witch fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,54,* at step n+1 is a simple combination of the value at step n and of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,55,"* derivatives at steps n, n-1, n-2 ... Depending on the number k of previous"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,56,"* steps one wants to use for computing the next value, different formulas"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,57,* are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,58,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,59,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h y'<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,60,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (3y'<sub>n</sub>-y'<sub>n-1</sub>)/2</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,61,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (23y'<sub>n</sub>-16y'<sub>n-1</sub>+5y'<sub>n-2</sub>)/12</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,62,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (55y'<sub>n</sub>-59y'<sub>n-1</sub>+37y'<sub>n-2</sub>-9y'<sub>n-3)/24</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,63,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,64,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,66,* <p>A k-steps Adams-Bashforth method is of order k. There is no theoretical limit to the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,67,"* value of k, but due to an implementation limitation k must be greater than 1.</p>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,69,* <p>Adams-Moulton (also due to Adams alone) methods are implicit
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,70,* multistep ODE solvers witch fixed stepsize. The value of state vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,71,* at step n+1 is a simple combination of the value at step n and of the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,72,"* derivatives at steps n+1, n, n-1 ... Depending on the number k of previous"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,73,"* steps one wants to use for computing the next value, different formulas"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,74,* are available:</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,75,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,76,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h y'<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,77,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (y'<sub>n+1</sub>+y'<sub>n</sub>)/2</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,78,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (5y'<sub>n+1</sub>+8y'<sub>n</sub>-y'<sub>n-1</sub>)/12</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,79,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + h (9y'<sub>n+1</sub>+19y'<sub>n</sub>-5y'<sub>n-1</sub>+y'<sub>n-2)/24</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,80,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,81,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,83,* <p>A k-steps Adams-Moulton method is of order k+1. There is no theoretical limit to the
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,84,"* value of k, but due to an implementation limitation k must be greater than 1.</p>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,86,* <h3>Implementation details</h3>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,88,* <p>We define scaled derivatives s<sub>i</sub>(n) at step n as:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,90,* s<sub>1</sub>(n) = h y'<sub>n</sub> for first derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,91,* s<sub>2</sub>(n) = h<sup>2</sup>/2 y''<sub>n</sub> for second derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,92,* s<sub>3</sub>(n) = h<sup>3</sup>/6 y'''<sub>n</sub> for third derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,94,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,95,* </pre></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,97,* <p>The definitions above use the classical representation with several previous first
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,98,* derivatives. Lets define
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,99,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,100,*   q<sub>n</sub> = [ s<sub>1</sub>(n-1) s<sub>1</sub>(n-2) ... s<sub>1</sub>(n-(k-1)) ]<sup>T</sup>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,101,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,102,"* (we omit the k index in the notation for clarity). With these definitions,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,103,* Adams-Bashforth methods can be written:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,104,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,105,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n)</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,106,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + 3/2 s<sub>1</sub>(n) + [ -1/2 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,107,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + 23/12 s<sub>1</sub>(n) + [ -16/12 5/12 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,108,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + 55/24 s<sub>1</sub>(n) + [ -59/24 37/24 -9/24 ] q<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,109,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,110,* </ul>and Adams-Moulton methods can be written:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,111,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,112,*   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n+1)</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,113,*   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + 1/2 s<sub>1</sub>(n+1) + [ 1/2 ] q<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,114,*   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + 5/12 s<sub>1</sub>(n+1) + [ 8/12 -1/12 ] q<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,115,*   <li>k = 4: y<sub>n+1</sub> = y<sub>n</sub> + 9/24 s<sub>1</sub>(n+1) + [ 19/24 -5/24 1/24 ] q<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,116,*   <li>...</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,117,* </ul></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,119,"* <p>Taylor series formulas show that for any index offset i, s<sub>1</sub>(n-i) can be"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,120,"* computed from s<sub>1</sub>(n), s<sub>2</sub>(n) ... s<sub>k</sub>(n), the formula being exact"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,121,* for degree k polynomials.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,122,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,123,* s<sub>1</sub>(n-i) = s<sub>1</sub>(n) + &sum;<sub>j</sub> j (-i)<sup>j-1</sup> s<sub>j</sub>(n)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,124,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,125,* The previous formula can be used with several values for i to compute the transform between
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,126,* classical representation (q<sub>n</sub> for Adams-Bashforth or q<sub>n+1</sub> for Adams-Moulton)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,127,* and Nordsieck vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,128,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,129,"* r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<supT</sup>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,130,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,131,* (here again we omit the k index in the notation for clarity). The transform between r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,132,* and q<sub>n</sub> resulting from the Taylor series formulas above is:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,133,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,134,* q<sub>n</sub> = s<sub>1</sub>(n) u + P r<sub>n</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,135,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,136,* where u is the [ 1 1 ... 1 ]<sup>T</sup> vector and P is the (k-1)&times;(k-1) matrix built
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,137,* with the j (-i)<sup>j-1</sup> terms:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,138,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,139,*        [  -2   3   -4    5  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,140,*        [  -4  12  -32   80  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,141,*   P =  [  -6  27 -108  405  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,142,*        [  -8  48 -256 1280  ... ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,144,* </pre></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,146,* <p>This class implements the Adams-Bashforth and Adams-Moulton method using the Nordsieck vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,147,"* (i.e. y<sub>n</sub>, s<sub>1</sub>(n) and r<sub>n</sub>) rather than the classical representation."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,148,* Using the Nordsieck vector has several advantages:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,149,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,150,*   <li>it leverages Adams-Bashforth and Adams-Moulton methods as in this representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,151,"*   they share most of their coefficients and most of their implementation,</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,152,*   <li>it greatly simplifies step interpolation as the interpolator mainly applies
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,153,"*   Taylor series formulas,</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,154,*   <li>it simplifies step changes that occur when discrete events that truncate
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,155,"*   the step are triggered,</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,156,*   <li>it allows to extend the methods in order to support adaptive stepsize (not implemented yet).</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,157,* </ul></p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,159,* <p>The Nordsieck vector at step n+1 is computed from the Nordsieck vector at step n as follows:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,160,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,161,*   <li>y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,162,"*   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,163,*   <li>r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,164,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,165,* where A is a rows shifting matrix (the lower left part is an identity matrix):
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,166,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,167,*        [ 0 0   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,169,*        [ 1 0   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,170,*    A = [ 0 1   ...  0 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,171,*        [       ...      | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,172,*        [ 0 0   ...  1 0 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,173,*        [ 0 0   ...  0 1 | 0 ]
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,174,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,175,"* If the method is an Adams-Moulton method, the following additional correction is performed:"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,176,* <ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,177,*   <li>Y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n+1) + [ -1 +1 -1 +1 ... &plusmn;1 ] r<sub>n+1</sub></li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,178,"*   <li>S<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, Y<sub>n+1</sub>)</li>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,179,*   <li>R<sub>n+1</sub> = r<sub>n+1</sub> + (s<sub>1</sub>(n) - S<sub>1</sub>(n+1)) P<sup>-1</sup> u</li>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,180,* </ul>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,181,"* where the upper case Y<sub>n+1</sub>, S<sub>n+1</sub> and R<sub>n+1</sub> represent the"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,182,"* corrected states whereas the lower case y<sub>n+1</sub>, s<sub>n+1</sub> and r<sub>n+1</sub>"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,183,* represent the predicted states.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,185,"* <p>The P<sup>-1</sup>u vector and the P<sup>-1</sup> A P matrix do not depend on the state,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,186,* they are precomputed once for all.</p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,188,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,189,* @since 2.0
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,191,public class AdamsIntegrator extends MultistepIntegrator {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,193,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,194,private static final long serialVersionUID = -5893911062100008922L;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,196,/** Cache for already computed coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,197,"private static final Map<Integer, CachedCoefficients> cache ="
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,198,"new HashMap<Integer, CachedCoefficients>();"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,200,/** No correction integrator method name. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,201,"private static final String NO_CORRECTION_METHOD_NAME = ""Adams-Bashforth"";"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,203,/** Correction integrator method name. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,204,"private static final String CORRECTION_METHOD_NAME = ""Adams-Moulton"";"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,206,/** Correction indicator (to choose between Adams-Bashforth and Adams-Moulton). */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,207,private final boolean withCorrection;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,209,/** Coefficients of the method. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,210,private final transient CachedCoefficients coefficients;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,212,/** Integration step. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,213,private final double step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,216,* Build an Adams-Bashforth or Adams-Moulton integrator with the given order and step size.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,217,* @param order order of the method (must be greater than 1: due to
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,218,* an implementation limitation the order 1 method is not supported)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,219,* @param withCorrection if true apply Adams-Moulton correction at end of
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,220,"* step, otherwise use only Adams-Bashforth prediction"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,221,* @param step integration step size
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,222,* @exception IllegalArgumentException if order is 1 or less
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,224,"public AdamsIntegrator(final int order, final boolean withCorrection,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,225,final double step)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,226,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,228,"super(withCorrection ? CORRECTION_METHOD_NAME : NO_CORRECTION_METHOD_NAME,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,229,"order, new NordsieckStepInterpolator());"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,230,if (order <= 1) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,231,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,232,"""{0} is supported only for orders 2 or more"","
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,233,getName());
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,235,this.withCorrection = withCorrection;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,237,"// cache the coefficients for each order, to avoid recomputing them"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,238,synchronized(cache) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,239,CachedCoefficients coeff = cache.get(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,240,if (coeff == null) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,241,coeff = new CachedCoefficients(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,242,"cache.put(order, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,244,coefficients = coeff;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,247,this.step = Math.abs(step);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,251,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,252,"public double integrate(final FirstOrderDifferentialEquations equations,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,253,"final double t0, final double[] y0,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,254,"final double t, final double[] y)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,255,"throws DerivativeException, IntegratorException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,257,final int n = y0.length;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,258,"sanityChecks(equations, t0, y0, t, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,259,final boolean forward = (t > t0);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,261,// initialize working arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,262,if (y != y0) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,263,"System.arraycopy(y0, 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,265,final double[] yTmp = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,267,// set up an interpolator sharing the integrator arrays
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,268,final NordsieckStepInterpolator interpolator =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,269,(NordsieckStepInterpolator) prototype.copy();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,270,"interpolator.reinitialize(yTmp, forward);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,272,// set up integration control objects
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,273,stepStart = t0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,274,stepSize  = forward ? step : -step;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,275,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,276,handler.reset();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,278,"CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,280,// compute the first few steps using the configured starter integrator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,281,double stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,282,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,283,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,284,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,286,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,287,"System.arraycopy(y, 0, yTmp, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,289,// convert to Nordsieck representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,290,double[]   scaled    = convertToNordsieckLow();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,291,RealMatrix nordsieck = convertToNordsieckHigh(scaled);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,292,"interpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,293,interpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,295,boolean lastStep = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,296,while (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,298,// shift all data
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,299,interpolator.shift();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,301,if (withCorrection) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,303,// evaluate derivative at predicted state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,304,final double stepEnd = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,305,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,306,previousT[0] = stepEnd;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,307,"equations.computeDerivatives(stepEnd, interpolator.getInterpolatedState(), f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,309,// update Nordsieck vector
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,310,nordsieck = coefficients.msUpdate.multiply(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,311,final double[] end = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,312,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,313,end[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,315,"nordsieck.walkInOptimizedOrder(new NordsieckUpdater(scaled, end, coefficients.c1));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,316,scaled = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,318,// update interpolator
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,319,"nordsieck.walkInOptimizedOrder(new Corrector(y, scaled, yTmp));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,320,"interpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,324,// discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,325,interpolator.storeTime(stepStart + stepSize);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,326,if (manager.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,327,stepSize = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,330,// the step has been accepted (may have been truncated)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,331,final double nextStep = stepStart + stepSize;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,332,interpolator.setInterpolatedTime(nextStep);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,333,"System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,334,"manager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,335,lastStep = manager.stop();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,337,// provide the step data to the step handler
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,338,for (StepHandler handler : stepHandlers) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,339,"handler.handleStep(interpolator, lastStep);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,341,stepStart = nextStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,343,if (!lastStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,344,// prepare next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,346,"if (manager.reset(stepStart, y)) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,348,// some events handler has triggered changes that
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,349,"// invalidate the derivatives, we need to restart from scratch"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,350,stopTime =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,351,"start(previousF.length, stepSize, manager, equations, stepStart, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,352,if (Double.isNaN(previousT[0])) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,353,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,355,stepStart = previousT[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,357,// convert to Nordsieck representation
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,358,scaled    = convertToNordsieckLow();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,359,nordsieck = convertToNordsieckHigh(scaled);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,361,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,363,// evaluate differential equations for next step
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,364,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,365,previousT[0] = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,366,"equations.computeDerivatives(stepStart, y, f0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,367,if (!withCorrection) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,368,nordsieck = coefficients.msUpdate.multiply(nordsieck);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,370,final double[] end = new double[y0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,371,for (int j = 0; j < y0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,372,end[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,374,"nordsieck.walkInOptimizedOrder(new NordsieckUpdater(scaled, end, coefficients.c1));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,375,scaled = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,379,"System.arraycopy(y, 0, yTmp, 0, n);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,380,"interpolator.reinitialize(stepSize, scaled, nordsieck);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,386,stopTime  = stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,387,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,388,stepSize  = Double.NaN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,389,return stopTime;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,393,/** Convert the multistep representation after a restart to Nordsieck representation.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,394,* @return first scaled derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,396,private double[] convertToNordsieckLow() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,398,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,399,final double[] scaled = new double[f0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,400,for (int j = 0; j < f0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,401,scaled[j] = stepSize * f0[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,403,return scaled;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,407,/** Convert the multistep representation after a restart to Nordsieck representation.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,408,* @param scaled first scaled derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,409,* @return Nordsieck matrix of the higher scaled derivatives
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,411,private RealMatrix convertToNordsieckHigh(final double[] scaled) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,413,final double[] f0 = previousF[0];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,414,final double[][] multistep = new double[coefficients.msToN.getColumnDimension()][f0.length];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,415,for (int i = 0; i < multistep.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,416,final double[] msI = multistep[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,417,final double[] fI  = previousF[i + 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,418,for (int j = 0; j < f0.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,419,msI[j] = stepSize * fI[j] - scaled[j];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,423,"return coefficients.msToN.multiply(new RealMatrixImpl(multistep, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,427,/** Corrector for current state in Adams-Moulton method.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,428,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,429,* This visitor implements the Taylor series formula:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,430,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,431,* Y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n+1) + [ -1 +1 -1 +1 ... &plusmn;1 ] r<sub>n+1</sub>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,432,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,433,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,435,private static class Corrector implements RealMatrixPreservingVisitor {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,437,/** Previous state. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,438,private final double[] previous;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,440,/** Current scaled first derivative. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,441,private final double[] scaled;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,443,/** Placeholder where to put the recomputed current state. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,444,private final double[] corrected;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,446,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,447,* @param previous previous state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,448,* @param scaled current scaled first derivative
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,449,* @param corrected placeholder where to put the corrected current state
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,451,"public Corrector(final double[] previous, final double[] scaled, final double[] corrected) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,452,this.previous = previous;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,453,this.scaled    = scaled;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,454,this.corrected  = corrected;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,457,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,458,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,459,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,460,"Arrays.fill(corrected, 0.0);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,463,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,464,"public void visit(int row, int column, double value)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,465,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,466,if ((row & 0x1) == 0) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,467,corrected[column] -= value;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,468,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,469,corrected[column] += value;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,473,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,474,public double end() {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,475,for (int i = 0; i < corrected.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,476,corrected[i] += previous[i] + scaled[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,478,return 0;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,482,/** Updater for Nordsieck vector. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,483,private static class NordsieckUpdater extends DefaultRealMatrixChangingVisitor {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,485,/** Scaled first derivative at step start. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,486,private final double[] start;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,488,/** Scaled first derivative at step end. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,489,private final double[] end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,491,/** Update coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,492,private final double[] c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,494,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,495,* @param start scaled first derivative at step start
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,496,* @param end scaled first derivative at step end
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,497,* @param c1 update coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,499,"public NordsieckUpdater(final double[] start, final double[] end,"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,500,final double[] c1) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,501,this.start = start;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,502,this.end   = end;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,503,this.c1    = c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,506,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,507,@Override
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,508,"public double visit(int row, int column, double value)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,509,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,510,return value + c1[row] * (start[column] - end[column]);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,515,/** Cache for already computed coefficients. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,516,private static class CachedCoefficients {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,518,/** Transformer between multistep and Nordsieck representations. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,519,private final RealMatrix msToN;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,521,"/** Update coefficients of the higher order derivatives wrt y'', y''' ... */"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,522,private final RealMatrix msUpdate;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,524,/** Update coefficients of the higher order derivatives wrt y'. */
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,525,private final double[] c1;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,527,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,528,* @param order order of the method (must be greater than 1: due to
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,529,* an implementation limitation the order 1 method is not supported)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,531,public CachedCoefficients(int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,533,// compute exact coefficients
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,534,FieldMatrix<BigFraction> bigNtoMS = buildP(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,535,FieldMatrix<BigFraction> bigMStoN =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,536,new FieldLUDecompositionImpl<BigFraction>(bigNtoMS).getSolver().getInverse();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,537,BigFraction[] u = new BigFraction[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,538,"Arrays.fill(u, BigFraction.ONE);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,539,BigFraction[] bigC1 = bigMStoN.operate(u);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,541,// update coefficients are computed by combining transform from
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,542,"// Nordsieck to multistep, then shifting rows to represent step advance"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,543,// then applying inverse transform
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,544,BigFraction[][] shiftedP = bigNtoMS.getData();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,545,for (int i = shiftedP.length - 1; i > 0; --i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,546,// shift rows
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,547,shiftedP[i] = shiftedP[i - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,549,shiftedP[0] = new BigFraction[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,550,"Arrays.fill(shiftedP[0], BigFraction.ZERO);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,551,FieldMatrix<BigFraction> bigMSupdate =
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,552,"bigMStoN.multiply(new FieldMatrixImpl<BigFraction>(shiftedP, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,554,// convert coefficients to double
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,555,msToN    = MatrixUtils.bigFractionMatrixToRealMatrix(bigMStoN);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,556,msUpdate = MatrixUtils.bigFractionMatrixToRealMatrix(bigMSupdate);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,557,c1       = new double[order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,558,for (int i = 0; i < order - 1; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,559,c1[i] = bigC1[i].doubleValue();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,564,/** Build the P matrix transforming multistep to Nordsieck.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,565,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,566,* <p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,567,"* Multistep representation uses y(k), s<sub>1</sub>(k), s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1))."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,568,"* Nordsieck representation uses y(k), s<sub>1</sub>(k), s<sub>2</sub>(k) ... s<sub>n</sub>(k)."
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,569,* The two representations share their two first components y(k) and
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,570,* s<sub>1</sub>(k). The P matrix is used to transform the remaining ones:
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,571,* <pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,572,* [ s<sub>1</sub>(k-1) ... s<sub>1</sub>(k-(n-1)]<sup>T</sup> = s<sub>1</sub>(k) [1 ... 1]<sup>T</sup> + P [s<sub>2</sub>(k) ... s<sub>n</sub>(k)]<sup>T</sup>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,573,* </pre>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,574,* </p>
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,575,* @param order order of the method (must be strictly positive)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,576,* @return P matrix
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,578,private static FieldMatrix<BigFraction> buildP(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,580,final BigFraction[][] pData = new BigFraction[order - 1][order - 1];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,582,for (int i = 0; i < pData.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,583,// build the P matrix elements from Taylor series formulas
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,584,final BigFraction[] pI = pData[i];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,585,final int factor = -(i + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,586,int aj = factor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,587,for (int j = 0; j < pI.length; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,588,pI[j] = new BigFraction(aj * (j + 2));
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,589,aj *= factor;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,593,"return new FieldMatrixImpl<BigFraction>(pData, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,599,/** Serialize the instance.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,600,* @param oos stream where object should be written
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,601,* @throws IOException if object cannot be written to stream
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,603,private void writeObject(ObjectOutputStream oos)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,604,throws IOException {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,605,oos.defaultWriteObject();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,606,oos.writeInt(coefficients.msToN.getRowDimension() + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,609,/** Deserialize the instance.
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,610,* @param ois stream from which the object should be read
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,611,* @throws ClassNotFoundException if a class in the stream cannot be found
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,612,* @throws IOException if object cannot be read from the stream
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,614,private void readObject(ObjectInputStream ois)
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,615,"throws ClassNotFoundException, IOException {"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,616,try {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,618,ois.defaultReadObject();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,619,final int order = ois.readInt();
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,621,final Class<AdamsIntegrator> cl = AdamsIntegrator.class;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,622,"final Field f = cl.getDeclaredField(""coefficients"");"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,623,f.setAccessible(true);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,625,"// cache the coefficients for each order, to avoid recomputing them"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,626,synchronized(cache) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,627,CachedCoefficients coeff = cache.get(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,628,if (coeff == null) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,629,coeff = new CachedCoefficients(order);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,630,"cache.put(order, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,632,"f.set(this, coeff);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,635,} catch (NoSuchFieldException nsfe) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,636,throw new IOException(nsfe);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,637,} catch (IllegalAccessException iae) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,638,throw new IOException(iae);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,20,mport org.apache.commons.math.fraction.Fraction;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,21,mport org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,22,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,23,mport org.apache.commons.math.ode.IntegratorException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,24,mport org.apache.commons.math.ode.MultistepIntegrator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,25,mport org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,26,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,30, This class implements implicit Adams-Moulton integrators for Ordinary
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,31, Differential Equations.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,33, <p>Adams-Moulton (in fact due to Adams alone) methods are implicit
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,34, multistep ODE solvers witch fixed stepsize. The value of state vector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,35, at step n+1 is a simple combination of the value at step n and of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,36," derivatives at steps n+1, n, n-1 ... Depending on the number k of previous"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,37," steps one wants to use for computing the next value, different formulas"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,38, are available:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,39, <ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,40,   <li>k = 0: y<sub>n+1</sub> = y<sub>n</sub> + h f<sub>n+1</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,41,   <li>k = 1: y<sub>n+1</sub> = y<sub>n</sub> + h (f<sub>n+1</sub>+f<sub>n</sub>)/2</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,42,   <li>k = 2: y<sub>n+1</sub> = y<sub>n</sub> + h (5f<sub>n+1</sub>+8f<sub>n</sub>-f<sub>n-1</sub>)/12</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,43,   <li>k = 3: y<sub>n+1</sub> = y<sub>n</sub> + h (9f<sub>n+1</sub>+19f<sub>n</sub>-5f<sub>n-1</sub>+f<sub>n-2)/24</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,44,   <li>...</li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,45, </ul>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,47, <p>A k-steps Adams-Moulton method is of order k+1. There is no limit to the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,48, value of k.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,50, <p>These methods are implicit: f<sub>n+1</sub> is used to compute
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,51, y<sub>n+1</sub>. Simpler explicit Adams methods exist: the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,52, Adams-Bashforth methods (which are also due to Adams alone). They are
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,53, provided by the {@link AdamsBashforthIntegrator AdamsBashforthIntegrator} class.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,55, @see AdamsBashforthIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,56, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,57, @since 2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,59,ublic class AdamsMoultonIntegrator extends MultistepIntegrator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,61,** Serializable version identifier. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,62,rivate static final long serialVersionUID = 4990335331377040417L;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,64,** Integrator method name. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,65,"rivate static final String METHOD_NAME = ""Adams-Moulton"";"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,67,** Coefficients for the predictor phase of the method. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,68,rivate final double[] predictorCoeffs;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,70,** Coefficients for the corrector phase of the method. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,71,rivate final double[] correctorCoeffs;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,73,** Integration step. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,74,rivate final double step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,77, Build an Adams-Moulton integrator with the given order and step size.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,78, @param order order of the method (must be strictly positive)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,79, @param step integration step size
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,81,"ublic AdamsMoultonIntegrator(final int order, final double step) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,83,"uper(METHOD_NAME, order + 1, new AdamsMoultonStepInterpolator());"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,85,/ compute the integration coefficients
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,86,nt[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,88,raction[] gamma     = AdamsBashforthIntegrator.computeGammaArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,89,redictorCoeffs = new double[order];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,90,or (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,91,raction fPredictor = Fraction.ZERO;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,92,or (int j = i; j < order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,93,"raction f = new Fraction(bdArray[j][i], 1);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,94,Predictor = fPredictor.add(gamma[j].multiply(f));
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,96,redictorCoeffs[i] = fPredictor.doubleValue();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,99,raction[] gammaStar = computeGammaStarArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,100,orrectorCoeffs = new double[order];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,101,or (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,102,raction fCorrector = Fraction.ZERO;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103,or (int j = i; j < order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,104,"raction f = new Fraction(bdArray[j][i], 1);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,105,Corrector = fCorrector.add(gammaStar[j].multiply(f));
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,107,orrectorCoeffs[i] = fCorrector.doubleValue();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,110,his.step = Math.abs(step);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,114,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,115,"ublic double integrate(FirstOrderDifferentialEquations equations,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,116,"ouble t0, double[] y0, double t, double[] y)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,117,"hrows DerivativeException, IntegratorException {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,119,"anityChecks(equations, t0, y0, t, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,120,inal boolean forward = (t > t0);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,122,/ initialize working arrays
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,123,f (y != y0) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,124,"ystem.arraycopy(y0, 0, y, 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,126,inal double[] yTmp = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,128,/ set up an interpolator sharing the integrator arrays
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,129,inal AdamsMoultonStepInterpolator interpolator =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,130,AdamsMoultonStepInterpolator) prototype.copy();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,131,"nterpolator.reinitialize(yTmp, previousT, previousF, forward);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,133,/ set up integration control objects
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,134,tepStart = t0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,135,tepSize  = forward ? step : -step;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,136,or (StepHandler handler : stepHandlers) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,137,andler.reset();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,139,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,141,/ compute the first few steps using the configured starter integrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,142,ouble stopTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,143,"tart(previousF.length - 1, stepSize, manager, equations, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,144,f (Double.isNaN(previousT[0])) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,145,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,147,tepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,148,otatePreviousSteps();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,149,reviousF[0] = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,150,nterpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,152,oolean lastStep = false;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,153,hile (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,155,/ shift all data
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,156,nterpolator.shift();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,158,/ predict state at end of step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,159,or (int j = 0; j < y0.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,160,ouble sum = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,161,or (int l = 0; l < predictorCoeffs.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,162,um += predictorCoeffs[l] * previousF[l+1][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,164,Tmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,167,/ evaluate the derivatives
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,168,inal double stepEnd = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,169,"quations.computeDerivatives(stepEnd, yTmp, previousF[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,171,/ apply corrector
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,172,or (int j = 0; j < y0.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,173,ouble sum = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,174,or (int l = 0; l < correctorCoeffs.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,175,um += correctorCoeffs[l] * previousF[l][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,177,Tmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,180,/ discrete events handling
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,181,nterpolator.storeTime(stepEnd);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,182,inal boolean truncated;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,183,f (manager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,184,runcated = true;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,185,nterpolator.truncateStep(manager.getEventTime());
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,186, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,187,runcated = false;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,190,/ the step has been accepted (may have been truncated)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,191,inal double nextStep = interpolator.getCurrentTime();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,192,nterpolator.setInterpolatedTime(nextStep);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,193,"ystem.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,194,"anager.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,195,astStep = manager.stop();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,197,/ provide the step data to the step handler
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,198,or (StepHandler handler : stepHandlers) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,199,"andler.handleStep(interpolator, lastStep);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,201,tepStart = nextStep;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,203,f (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,204,/ prepare next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,206,"f (manager.reset(stepStart, y)) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,208,/ some events handler has triggered changes that
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"/ invalidate the derivatives, we need to restart from scratch"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,210,topTime =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,211,"tart(previousF.length - 1, stepSize, manager, equations, stepStart, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,212,f (Double.isNaN(previousT[0])) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,213,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,215,tepStart = previousT[0];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,216,otatePreviousSteps();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,217,reviousF[0] = new double[y0.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,219, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,221,f (truncated) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,"/ the step has been truncated, we need to adjust the previous steps"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,223,or (int i = 1; i < previousF.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,reviousT[i] = stepStart - i * stepSize;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,nterpolator.setInterpolatedTime(previousT[i]);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,226,"ystem.arraycopy(interpolator.getInterpolatedState(), 0,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,"reviousF[i], 0, y0.length);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229, else {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,230,otatePreviousSteps();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,233,/ evaluate differential equations for next step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,234,reviousT[0] = stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,235,"quations.computeDerivatives(stepStart, y, previousF[0]);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,242,topTime  = stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,243,tepStart = Double.NaN;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,244,tepSize  = Double.NaN;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,245,eturn stopTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,249,** Get the coefficients of the predictor phase of the method.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,250, <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,251, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,252,   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k-1</sup> c<sub>i</sub>f<sub>n-i</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,253, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,254, @return a copy of the coefficients of the method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,256,ublic double[] getPredictorCoeffs() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,257,eturn predictorCoeffs.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,260,** Get the coefficients of the corrector phase of the method.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,261, <p>The coefficients are the c<sub>i</sub> terms in the following formula:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,262, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,263,   y<sub>n+1</sub> = y<sub>n</sub> + h &times; &sum;<sub>i=0</sub><sup>i=k</sup> c<sub>i</sub>f<sub>n-i</sub></li>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,264, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,265, @return a copy of the coefficients of the method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,267,ublic double[] getCorrectorCoeffs() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,268,eturn correctorCoeffs.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,271,** Compute the gamma star coefficients.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,272, @param order order of the integration method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,273, @return gamma star coefficients array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,275,ublic static Fraction[] computeGammaStarArray(final int order) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,277,/ create the array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,278,raction[] gammaStarArray = new Fraction[order + 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,280,/ recurrence initialization
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,281,ammaStarArray[0] = Fraction.ONE;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,283,/ fill up array using recurrence relation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,284,or (int i = 1; i <= order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,285,raction gammaStar = Fraction.ZERO;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,286,or (int j = 1; j <= i; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,287,"ammaStar = gammaStar.subtract(gammaStarArray[i - j].multiply(new Fraction(1, j + 1)));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,289,ammaStarArray[i] = gammaStar;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,eturn gammaStarArray;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,20,mport java.io.IOException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,21,mport java.io.ObjectInput;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,22,mport java.io.ObjectOutput;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,24,mport org.apache.commons.math.fraction.Fraction;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,25,mport org.apache.commons.math.ode.DerivativeException;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,26,mport org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,27,mport org.apache.commons.math.ode.sampling.MultistepStepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,28,mport org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,31, This class implements an interpolator for Adams-Moulton multiple steps.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,33, <p>This interpolator computes dense output inside the last few
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,34, steps computed. The interpolation equation is consistent with the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,35," integration scheme, it is based on a kind of <em>rollback</em> of the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,36, integration from step end to interpolation date:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,37, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,38,   y(t<sub>n</sub> + theta h) = y (t<sub>n</sub> + h) - &int;<sub>t<sub>n</sub> + theta h</sub><sup>t<sub>n</sub> + h</sup>p(t)dt
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,39, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,40, where theta belongs to [0 ; 1] and p(t) is the interpolation polynomial based on
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,41," the derivatives at previous steps f<sub>n-k+1</sub>, f<sub>n-k+2</sub> ..."
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,42," f<sub>n</sub>, f<sub>n</sub> and f<sub>n+1</sub>.</p>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,44, @see AdamsMoultonIntegrator
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,45, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,46, @since 2.0
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,49,lass AdamsMoultonStepInterpolator extends MultistepStepInterpolator {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,51,** Serializable version identifier */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,52,rivate static final long serialVersionUID = 735568489801241899L;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,54,** Neville's interpolation array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,55,rivate double[] neville;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,57,** Integration rollback array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,58,rivate double[] rollback;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,60,** &gamma; star array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,61,rivate double[] gammaStar;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,63,** Backward differences array. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,64,rivate int[][] bdArray;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,66,** Original non-truncated step end time. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,67,rivate double nonTruncatedEnd;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,69,** Original non-truncated step size. */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,70,rivate double nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,72,** Simple constructor.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,73," This constructor builds an instance that is not usable yet, the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,74, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,75, before using the instance in order to initialize the internal arrays. This
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,76, constructor is used only in order to delay the initialization in
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,77, some cases.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,79,ublic AdamsMoultonStepInterpolator() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,82,** Copy constructor.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,83, @param interpolator interpolator to copy from. The copy is a deep
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,84, copy: its arrays are separated from the original arrays of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,85, instance
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,87,ublic AdamsMoultonStepInterpolator(final AdamsMoultonStepInterpolator interpolator) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,88,uper(interpolator);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,89,onTruncatedEnd = interpolator.nonTruncatedEnd;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,90,onTruncatedH   = interpolator.nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,93,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,94,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,95,rotected StepInterpolator doCopy() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,96,eturn new AdamsMoultonStepInterpolator(this);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,99,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,100,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,101,rotected void initializeCoefficients() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,103,eville  = new double[previousF.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,104,ollback = new double[previousF.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,106,dArray = AdamsBashforthIntegrator.computeBackwardDifferencesArray(previousF.length);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,108,raction[] fGammaStar = AdamsMoultonIntegrator.computeGammaStarArray(previousF.length);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,109,ammaStar = new double[fGammaStar.length];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,110,or (int i = 0; i < fGammaStar.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,111,ammaStar[i] = fGammaStar[i].doubleValue();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,116,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,117,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,118,ublic void storeTime(final double t) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,119,onTruncatedEnd = t;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,120,onTruncatedH   = nonTruncatedEnd - previousTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,121,uper.storeTime(t);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,124,** Truncate a step.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,125, <p>Truncating a step is necessary when an event is triggered
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,126, before the nominal end of the step.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,127, @param truncatedEndTime end time of truncated step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,129,oid truncateStep(final double truncatedEndTime) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,130,urrentTime = truncatedEndTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,131, = currentTime - previousTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,134,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,135,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,136,ublic void setInterpolatedTime(final double time)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,137,hrows DerivativeException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,138,nterpolatedTime = time;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,139,inal double oneMinusThetaH = nonTruncatedEnd - interpolatedTime;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,140,inal double theta = (nonTruncatedH == 0) ?
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,141, : (nonTruncatedH - oneMinusThetaH) / nonTruncatedH;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,142,"omputeInterpolatedState(theta, oneMinusThetaH);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,145,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,146,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,147,"rotected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,148,nterpolateDerivatives();
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,149,nterpolateState(theta);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,152,** Interpolate the derivatives.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,153, <p>The Adams method is based on a polynomial interpolation of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,154, derivatives based on the preceding steps. So the interpolation of
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,155, the derivatives here is strictly equivalent: it is a simple polynomial
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,156, interpolation.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,158,rivate void interpolateDerivatives() {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,160,or (int i = 0; i < interpolatedDerivatives.length; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,162,/ initialize the Neville's interpolation algorithm
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,163,or (int k = 0; k < previousF.length; ++k) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,164,eville[k] = previousF[k][i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,167,/ combine the contributions of each points
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,168,or (int l = 1; l < neville.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,169,or (int m = neville.length - 1; m >= l; --m) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,170,inal double xm   = previousT[m];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,171,inal double xmMl = previousT[m - l];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,172,eville[m] = ((interpolatedTime - xm) * neville[m-1] +
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,173,xmMl - interpolatedTime) * neville[m]) / (xmMl - xm);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,177,/ the interpolation polynomial value is in the array last element
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,178,nterpolatedDerivatives[i] = neville[neville.length - 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,184,** Interpolate the state.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,185, <p>The Adams method is based on a polynomial interpolation of the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,186, derivatives based on the preceding steps. The polynomial model is
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,187, integrated analytically throughout the last step. Using the notations
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,188, found in the second edition of the first volume (Nonstiff Problems)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,189," of the reference book by Hairer, Norsett and Wanner: <i>Solving Ordinary"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,190," Differential Equations</i> (Springer-Verlag, ISBN 3-540-56670-8), this"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,191, process leads to the following expression:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,192, <pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,193, y<sub>n+1</sub> = y<sub>n</sub> +
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,194, h &times; &sum;<sub>j=0</sub><sup>j=k</sup> &gamma;<sub>j</sub><sup>*</sup>&nabla;<sup>j</sup>f<sub>n+1</sub>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,195, </pre>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,196," <p>In the previous expression, the &gamma;<sub>j</sub><sup>*</sup> terms are the"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,197," ones that result from the analytical integration, and can be computed form"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,198, the binomial coefficients C<sub>j</sub><sup>-s</sup>:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,199, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,200, &gamma;<sub>j</sub><sup>*</sup> = (-1)<sup>j</sup>&int;<sub>0</sub><sup>1</sup>C<sub>j</sub><sup>1-s</sup>ds
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,201, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,202, <p>In order to interpolate the state in a manner that is consistent with the
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,203," integration scheme, we simply subtract from the current state (at the end of the step)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,204, the integral computed from interpolation time to step end time.</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,205, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,206, &eta;<sub>j</sub><sup>*</sup>(&theta;)=
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,207, (-1)<sup>j</sup>&int;<sub>&theta;</sub><sup>1</sup>C<sub>j</sub><sup>1-s</sup>ds
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,208, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,209," The method described in the Hairer, Norsett and Wanner book to compute &gamma;<sub>j</sub><sup>*</sup>"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,210, is easily extended to compute &gamma;<sub>j</sub><sup>*</sup>(&theta;)=
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,211," (-1)<sup>j</sup>&int;<sub>0</sub><sup>&theta;</sup>C<sub>j</sub><sup>1-s</sup>ds. From this,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,212, we can compute &eta;<sub>j</sub><sup>*</sup>(&theta;) =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,213, &gamma;<sub>j</sub><sup>*</sup>-&gamma;<sub>j</sub><sup>*</sup>(&theta;).
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,214, The first few values are:</p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,215, <table>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,216, <tr><td>j</td><td>&gamma;<sub>j</sub><sup>*</sup></td><td>&gamma;<sub>j</sub><sup>*</sup>(&theta;)</td><td>&eta;<sub>j</sub><sup>*</sup>(&theta;)</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,217, <tr><td>0</td><td>1</td><td>&theta;</td><td>1-&theta;</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,218, <tr><td>1</td><td>-1/2</td><td>(&theta;<sup>2</sup>-2&theta;)/2</td><td>(-1+2&theta;-&theta;<sup>2</sup>)/2</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,219, <tr><td>2</td><td>-1/12</td><td>(2&theta;<sup>3</sup>-3&theta;<sup>2</sup>)/12</td><td>(-1+3&theta;<sup>2</sup>-2&theta;<sup>3</sup>)/12</td></tr>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,220, </table>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,221, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,222," The &eta;<sub>j</sub>(&theta;) functions appear to be polynomial ones. As expected,"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,223, we see that &eta;<sub>j</sub>(1)= 0. The recurrence relation derived for
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,224, &gamma;<sub>j</sub>(&theta;) is:
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,225, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,226, <p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,227, &sum<sub>j=0</sub><sup>j=m</sup>&gamma;<sub>j</sub><sup>*</sup>(&theta;)/(m+1-j) =
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,228, 1/(m+1)! &prod;<sub>k=0</sub><sup>k=m</sup>(&theta;+k-1)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,229, </p>
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,230, @param theta location of the interpolation point within the last step
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,232,rivate void interpolateState(final double theta) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,234,/ compute the integrals to remove from the final state
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,235,"omputeRollback(previousT.length - 1, theta);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,237,/ remove these integrals from the final state
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,238,or (int j = 0; j < interpolatedState.length; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,239,ouble sum = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,240,or (int l = 0; l < previousT.length; ++l) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,241,um += rollback[l] * previousF[l][j];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,243,nterpolatedState[j] = currentState[j] - h * sum;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,248,** Compute the rollback coefficients.
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,249, @param order order of the integration method
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,250, @param theta current value for theta
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,252,"rivate void computeRollback(final int order, final double theta) {"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,254,/ compute the gamma star(theta) values from the recurrence relation
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,255,ouble product = theta - 1;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,256,ollback[0]  = theta;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,257,or (int i = 1; i <= order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,258,roduct *= (i - 1 + theta) / (i + 1);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,259,ouble gStar = product;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,260,or (int j = 1; j <= i; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,261,Star -= rollback[i - j] / (j + 1);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,263,ollback[i] = gStar;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,266,/ subtract it from gamma star to get eta star(theta)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,267,or (int i = 0; i <= order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,268,ollback[i] -= gammaStar[i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,271,/ combine the eta star integrals with the backward differences array
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,272,/ to get the rollback coefficients
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,273,or (int i = 0; i <= order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,274,ouble f = 0;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,275,or (int j = i; j <= order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,276, -= rollback[j] * bdArray[j][i];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,278,ollback[i] = f;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,283,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,284,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,285,ublic void writeExternal(final ObjectOutput out)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,286,hrows IOException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,287,uper.writeExternal(out);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,288,ut.writeDouble(nonTruncatedEnd);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,291,** {@inheritDoc} */
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,292,Override
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,293,ublic void readExternal(final ObjectInput in)
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,294,hrows IOException {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonStepInterpolator.java,295,onTruncatedEnd = in.readDouble();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,20,mport junit.framework.Test;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,22,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,24,mport org.apache.commons.math.ode.DerivativeException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,25,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,26,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,27,mport org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,29,ublic class AdamsBashforthIntegratorTest
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,30,xtends TestCase {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,32,ublic AdamsBashforthIntegratorTest(String name) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,33,uper(name);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,36,ublic void testCoefficients() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,38,"ouble[] coeffs1 = new AdamsBashforthIntegrator(1, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,39,"ssertEquals(1, coeffs1.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,40,"ssertEquals(1.0, coeffs1[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,42,"ouble[] coeffs2 = new AdamsBashforthIntegrator(2, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,43,"ssertEquals(2, coeffs2.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,44,"ssertEquals( 3.0 / 2.0, coeffs2[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,45,"ssertEquals(-1.0 / 2.0, coeffs2[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,47,"ouble[] coeffs3 = new AdamsBashforthIntegrator(3, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,48,"ssertEquals(3, coeffs3.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,49,"ssertEquals( 23.0 / 12.0, coeffs3[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,50,"ssertEquals(-16.0 / 12.0, coeffs3[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,51,"ssertEquals(  5.0 / 12.0, coeffs3[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,53,"ouble[] coeffs4 = new AdamsBashforthIntegrator(4, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,54,"ssertEquals(4, coeffs4.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,55,"ssertEquals( 55.0 / 24.0, coeffs4[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,56,"ssertEquals(-59.0 / 24.0, coeffs4[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,57,"ssertEquals( 37.0 / 24.0, coeffs4[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,58,"ssertEquals( -9.0 / 24.0, coeffs4[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,60,"ouble[] coeffs5 = new AdamsBashforthIntegrator(5, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,61,"ssertEquals(5, coeffs5.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,62,"ssertEquals( 1901.0 / 720.0, coeffs5[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,63,"ssertEquals(-2774.0 / 720.0, coeffs5[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,64,"ssertEquals( 2616.0 / 720.0, coeffs5[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,65,"ssertEquals(-1274.0 / 720.0, coeffs5[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,66,"ssertEquals(  251.0 / 720.0, coeffs5[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,68,"ouble[] coeffs6 = new AdamsBashforthIntegrator(6, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,69,"ssertEquals(6, coeffs6.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,70,"ssertEquals( 4277.0 / 1440.0, coeffs6[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,71,"ssertEquals(-7923.0 / 1440.0, coeffs6[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,72,"ssertEquals( 9982.0 / 1440.0, coeffs6[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,73,"ssertEquals(-7298.0 / 1440.0, coeffs6[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,74,"ssertEquals( 2877.0 / 1440.0, coeffs6[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,75,"ssertEquals( -475.0 / 1440.0, coeffs6[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,77,"ouble[] coeffs7 = new AdamsBashforthIntegrator(7, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,78,"ssertEquals(7, coeffs7.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,79,"ssertEquals( 198721.0 / 60480.0, coeffs7[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,80,"ssertEquals(-447288.0 / 60480.0, coeffs7[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,81,"ssertEquals( 705549.0 / 60480.0, coeffs7[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,82,"ssertEquals(-688256.0 / 60480.0, coeffs7[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,83,"ssertEquals( 407139.0 / 60480.0, coeffs7[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,84,"ssertEquals(-134472.0 / 60480.0, coeffs7[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,85,"ssertEquals(  19087.0 / 60480.0, coeffs7[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,87,"ouble[] coeffs8 = new AdamsBashforthIntegrator(8, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,"ssertEquals(8, coeffs8.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,"ssertEquals(  434241.0 / 120960.0, coeffs8[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,90,"ssertEquals(-1152169.0 / 120960.0, coeffs8[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,91,"ssertEquals( 2183877.0 / 120960.0, coeffs8[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,92,"ssertEquals(-2664477.0 / 120960.0, coeffs8[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,93,"ssertEquals( 2102243.0 / 120960.0, coeffs8[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,94,"ssertEquals(-1041723.0 / 120960.0, coeffs8[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,95,"ssertEquals(  295767.0 / 120960.0, coeffs8[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,96,"ssertEquals(  -36799.0 / 120960.0, coeffs8[7], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,98,"ouble[] coeffs9 = new AdamsBashforthIntegrator(9, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,99,"ssertEquals(9, coeffs9.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,100,"ssertEquals(  14097247.0 / 3628800.0, coeffs9[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,101,"ssertEquals( -43125206.0 / 3628800.0, coeffs9[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,102,"ssertEquals(  95476786.0 / 3628800.0, coeffs9[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,103,"ssertEquals(-139855262.0 / 3628800.0, coeffs9[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,104,"ssertEquals( 137968480.0 / 3628800.0, coeffs9[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,105,"ssertEquals( -91172642.0 / 3628800.0, coeffs9[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,106,"ssertEquals(  38833486.0 / 3628800.0, coeffs9[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,107,"ssertEquals(  -9664106.0 / 3628800.0, coeffs9[7], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,108,"ssertEquals(   1070017.0 / 3628800.0, coeffs9[8], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,112,ublic void testDimensionCheck() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,113,ry  {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,114,estProblem1 pb = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,115,"ew AdamsBashforthIntegrator(3, 0.01).integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,116,".0, new double[pb.getDimension()+10],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,117,".0, new double[pb.getDimension()+10]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,118,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,119, catch(DerivativeException de) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,120,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,121, catch(IntegratorException ie) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,125,ublic void testDecreasingSteps()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,126,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,128,estProblemAbstract[] problems = TestProblemFactory.getProblems();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,129,or (int k = 0; k < problems.length; ++k) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,131,ouble previousError = Double.NaN;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,132,or (int i = 6; i < 10; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,134,estProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,135,"ouble step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,137,"irstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,138,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,139,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,140,ventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,141,or (int l = 0; l < functions.length; ++l) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,142,"nteg.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,143,"ouble.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,145,"ouble stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,146,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,147,f (functions.length == 0) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,ouble error = handler.getMaximalValueError();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,152,f (i > 6) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,153,ssertTrue(error < Math.abs(previousError));
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,155,reviousError = error;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,163,ublic void testSmallStep()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,164,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,166,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,167,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,169,"irstOrderIntegrator integ = new AdamsBashforthIntegrator(3, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,170,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,171,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,172,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,173,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,174,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,176,ssertTrue(handler.getLastError() < 2.0e-9);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,177,ssertTrue(handler.getMaximalValueError() < 3.0e-8);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,178,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,179,"ssertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,183,ublic void testBigStep()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,184,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,186,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,187,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,189,"irstOrderIntegrator integ = new AdamsBashforthIntegrator(3, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,190,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,191,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,192,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,193,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,194,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,196,ssertTrue(handler.getLastError() > 0.05);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,197,ssertTrue(handler.getMaximalValueError() > 0.1);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,198,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,202,ublic void testBackward()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,203,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,205,estProblem5 pb = new TestProblem5();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,206,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,208,"irstOrderIntegrator integ = new AdamsBashforthIntegrator(5, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,209,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,210,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,211,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,212,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,214,ssertTrue(handler.getLastError() < 8.0e-11);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,215,ssertTrue(handler.getMaximalValueError() < 8.0e-11);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,216,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,217,"ssertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,220,ublic static Test suite() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,221,eturn new TestSuite(AdamsBashforthIntegratorTest.class);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,18,package org.apache.commons.math.ode.nonstiff;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,23,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,24,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,25,import java.io.IOException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,26,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,27,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,29,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,30,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,31,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,32,import org.apache.commons.math.ode.MultistepIntegrator;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,33,import org.apache.commons.math.ode.events.EventHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,34,import org.junit.Test;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,36,public class AdamsIntegratorTest {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,38,@Test(expected=IntegratorException.class)
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,39,"public void dimensionCheckBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,40,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,41,"new AdamsIntegrator(3, false, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,42,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,43,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,46,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,47,"public void decreasingStepsBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,49,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,50,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,52,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,53,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,55,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,56,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,58,"FirstOrderIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,59,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,60,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,61,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,62,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,63,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,64,"Double.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,66,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,67,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,68,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,69,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,72,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,73,if ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,74,assertTrue(error <= Math.abs(1.05 * previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,76,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,84,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,85,"public void smallStepBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,87,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,88,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,90,"FirstOrderIntegrator integ = new AdamsIntegrator(3, false, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,91,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,92,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,93,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,94,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,95,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,97,assertTrue(handler.getLastError() < 2.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,98,assertTrue(handler.getMaximalValueError() < 9.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,99,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,100,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,104,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,105,"public void bigStepBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,107,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,108,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,110,"FirstOrderIntegrator integ = new AdamsIntegrator(3, false, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,111,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,112,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,113,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,114,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,115,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,117,assertTrue(handler.getLastError() > 0.06);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,118,assertTrue(handler.getMaximalValueError() > 0.06);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,119,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,123,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,124,"public void backwardBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,126,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,127,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,129,"FirstOrderIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,130,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,131,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,132,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,133,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,135,assertTrue(handler.getLastError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,136,assertTrue(handler.getMaximalValueError() < 8.0e-11);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,137,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,138,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,141,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,142,"public void polynomialBashforth() throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,143,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,144,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,146,for (int order = 2; order < 9; ++order) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,147,"MultistepIntegrator integ = new AdamsIntegrator(order, false, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,148,"integ.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,149,"1.0e-5, 1.0e-5));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,150,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,151,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,152,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,153,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,154,if (order < 5) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,155,assertTrue(handler.getMaximalValueError() > 1.0e-5);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,156,} else {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,157,assertTrue(handler.getMaximalValueError() < 7.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,163,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,164,public void serializationBashforth()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,165,"throws IntegratorException, DerivativeException,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,166,"IOException, ClassNotFoundException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,168,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,169,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.01;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,171,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,172,ObjectOutputStream    oos = new ObjectOutputStream(bos);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,173,"oos.writeObject(new AdamsIntegrator(8, false, step));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,174,assertTrue(bos.size() > 3000);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,175,assertTrue(bos.size() < 3100);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,177,ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,178,ObjectInputStream     ois = new ObjectInputStream(bis);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,179,FirstOrderIntegrator integ  = (AdamsIntegrator) ois.readObject();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,180,"assertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,181,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,182,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,183,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,184,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,185,assertTrue(handler.getMaximalValueError() < 7.0e-13);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,189,@Test(expected=IntegratorException.class)
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,190,public void dimensionCheckMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,191,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,192,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,193,"new AdamsIntegrator(3, true, 0.01).integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,194,"0.0, new double[pb.getDimension()+10],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,195,"1.0, new double[pb.getDimension()+10]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,198,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,199,public void decreasingStepsMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,200,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,202,TestProblemAbstract[] problems = TestProblemFactory.getProblems();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,203,for (int k = 0; k < problems.length; ++k) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,205,double previousError = Double.NaN;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,206,for (int i = 6; i < 10; ++i) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,208,TestProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,209,"double step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,211,"FirstOrderIntegrator integ = new AdamsIntegrator(5, true, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,212,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,213,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,214,EventHandler[] functions = pb.getEventsHandlers();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,215,for (int l = 0; l < functions.length; ++l) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,216,"integ.addEventHandler(functions[l],"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,217,"Double.POSITIVE_INFINITY, 1.0e-3 * step, 1000);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,219,"double stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,220,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,221,if (functions.length == 0) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,222,"assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,225,double error = handler.getMaximalValueError();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,226,if ((i > 6) && !(pb instanceof TestProblem4) && !(pb instanceof TestProblem6)) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,227,assertTrue(error <= Math.abs(1.05 * previousError));
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,229,previousError = error;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,237,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,238,public void smallStepMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,239,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,241,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,242,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,244,"FirstOrderIntegrator integ = new AdamsIntegrator(3, true, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,245,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,246,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,247,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,248,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,249,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,251,assertTrue(handler.getLastError() < 1.0e-14);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,252,assertTrue(handler.getMaximalValueError() < 2.0e-17);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,253,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,254,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,258,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,259,public void bigStepMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,260,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,262,TestProblem1 pb  = new TestProblem1();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,263,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,265,"FirstOrderIntegrator integ = new AdamsIntegrator(3, true, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,266,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,267,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,268,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,269,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,270,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,272,assertTrue(handler.getMaximalValueError() > 6.0e-6);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,276,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,277,public void backwardMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,278,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,280,TestProblem5 pb = new TestProblem5();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,281,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,283,"FirstOrderIntegrator integ = new AdamsIntegrator(5, true, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,284,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,285,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,286,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,287,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,289,assertTrue(handler.getLastError() < 1.0e-15);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,290,assertTrue(handler.getMaximalValueError() < 3.0e-16);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,291,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,292,"assertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,295,@Test
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,296,public void polynomialMoulton()
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,297,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,298,TestProblem6 pb = new TestProblem6();
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,299,double step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.02;
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,301,for (int order = 2; order < 9; ++order) {
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,302,"MultistepIntegrator integ = new AdamsIntegrator(order, true, step);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,303,"integ.setStarterIntegrator(new DormandPrince853Integrator(1.0e-3 * step, 1.0e3 * step,"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,304,"1.0e-5, 1.0e-5));"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,305,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,306,integ.addStepHandler(handler);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,307,"integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,308,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsIntegratorTest.java,309,assertTrue(handler.getMaximalValueError() < 2.0e-13);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,18,ackage org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,20,mport org.apache.commons.math.ode.DerivativeException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,21,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,22,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,23,mport org.apache.commons.math.ode.events.EventHandler;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,25,mport junit.framework.Test;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,27,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,29,ublic class AdamsMoultonIntegratorTest
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,30,xtends TestCase {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,32,ublic AdamsMoultonIntegratorTest(String name) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,33,uper(name);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,36,ublic void testPredictorCoefficients() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,37,or (int order = 1; order < 10; ++order) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,38,"ouble[] moulton = new AdamsMoultonIntegrator(order, 0.01).getPredictorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,39,"ouble[] bashforth  = new AdamsBashforthIntegrator(order, 0.01).getCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,40,"ssertEquals(bashforth.length, moulton.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,41,or (int i = 0; i < moulton.length; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,42,"ssertEquals(bashforth[i], moulton[i], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,47,ublic void testCorrectorCoefficients() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,49,"ouble[] coeffs1 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,50,"ssertEquals(2, coeffs1.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,51,"ssertEquals(1.0 / 2.0, coeffs1[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,52,"ssertEquals(1.0 / 2.0, coeffs1[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,54,"ouble[] coeffs2 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,55,"ssertEquals(3, coeffs2.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,56,"ssertEquals( 5.0 / 12.0, coeffs2[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,57,"ssertEquals( 8.0 / 12.0, coeffs2[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,58,"ssertEquals(-1.0 / 12.0, coeffs2[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,60,"ouble[] coeffs3 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,61,"ssertEquals(4, coeffs3.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,62,"ssertEquals( 9.0 / 24.0, coeffs3[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,63,"ssertEquals(19.0 / 24.0, coeffs3[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,64,"ssertEquals(-5.0 / 24.0, coeffs3[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,65,"ssertEquals( 1.0 / 24.0, coeffs3[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,67,"ouble[] coeffs4 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,68,"ssertEquals(5, coeffs4.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,69,"ssertEquals( 251.0 / 720.0, coeffs4[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,70,"ssertEquals( 646.0 / 720.0, coeffs4[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,71,"ssertEquals(-264.0 / 720.0, coeffs4[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,72,"ssertEquals( 106.0 / 720.0, coeffs4[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,73,"ssertEquals( -19.0 / 720.0, coeffs4[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,75,"ouble[] coeffs5 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,76,"ssertEquals(6, coeffs5.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,77,"ssertEquals( 475.0 / 1440.0, coeffs5[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,78,"ssertEquals(1427.0 / 1440.0, coeffs5[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,79,"ssertEquals(-798.0 / 1440.0, coeffs5[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,80,"ssertEquals( 482.0 / 1440.0, coeffs5[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,81,"ssertEquals(-173.0 / 1440.0, coeffs5[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,82,"ssertEquals(  27.0 / 1440.0, coeffs5[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,84,"ouble[] coeffs6 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,85,"ssertEquals(7, coeffs6.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,86,"ssertEquals( 19087.0 / 60480.0, coeffs6[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,87,"ssertEquals( 65112.0 / 60480.0, coeffs6[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,88,"ssertEquals(-46461.0 / 60480.0, coeffs6[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,"ssertEquals( 37504.0 / 60480.0, coeffs6[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,90,"ssertEquals(-20211.0 / 60480.0, coeffs6[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,91,"ssertEquals(  6312.0 / 60480.0, coeffs6[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,92,"ssertEquals(  -863.0 / 60480.0, coeffs6[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"ouble[] coeffs7 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,95,"ssertEquals(8, coeffs7.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,96,"ssertEquals(  36799.0 / 120960.0, coeffs7[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,97,"ssertEquals( 139849.0 / 120960.0, coeffs7[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,98,"ssertEquals(-121797.0 / 120960.0, coeffs7[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,99,"ssertEquals( 123133.0 / 120960.0, coeffs7[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,100,"ssertEquals( -88547.0 / 120960.0, coeffs7[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,101,"ssertEquals(  41499.0 / 120960.0, coeffs7[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,102,"ssertEquals( -11351.0 / 120960.0, coeffs7[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,103,"ssertEquals(   1375.0 / 120960.0, coeffs7[7], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,105,"ouble[] coeffs8 = new AdamsMoultonIntegrator(9, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,106,"ssertEquals(9, coeffs8.length);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,107,"ssertEquals( 1070017.0 / 3628800.0, coeffs8[0], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,108,"ssertEquals( 4467094.0 / 3628800.0, coeffs8[1], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,109,"ssertEquals(-4604594.0 / 3628800.0, coeffs8[2], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,110,"ssertEquals( 5595358.0 / 3628800.0, coeffs8[3], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,111,"ssertEquals(-5033120.0 / 3628800.0, coeffs8[4], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,112,"ssertEquals( 3146338.0 / 3628800.0, coeffs8[5], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,113,"ssertEquals(-1291214.0 / 3628800.0, coeffs8[6], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,114,"ssertEquals(  312874.0 / 3628800.0, coeffs8[7], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,115,"ssertEquals(  -33953.0 / 3628800.0, coeffs8[8], 1.0e-16);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,119,ublic void testDimensionCheck() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,120,ry  {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,121,estProblem1 pb = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,122,"ew AdamsMoultonIntegrator(3, 0.01).integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,123,".0, new double[pb.getDimension()+10],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,124,".0, new double[pb.getDimension()+10]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,125,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,126, catch(DerivativeException de) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,127,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,128, catch(IntegratorException ie) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,132,ublic void testDecreasingSteps()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,133,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,135,estProblemAbstract[] problems = TestProblemFactory.getProblems();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,136,or (int k = 0; k < problems.length; ++k) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,138,ouble previousError = Double.NaN;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,139,or (int i = 6; i < 10; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,141,estProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,142,"ouble step = (pb.getFinalTime() - pb.getInitialTime()) * Math.pow(2.0, -i);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,143,f (pb instanceof TestProblem3) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,144,tep /= 8;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,147,"irstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,149,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,ventHandler[] functions = pb.getEventsHandlers();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,151,or (int l = 0; l < functions.length; ++l) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,152,"nteg.addEventHandler(functions[l],"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,153,"ouble.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,155,"ouble stopTime = integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,156,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,157,f (functions.length == 0) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,158,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,161,ouble error = handler.getMaximalValueError();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,162,f (i > 6) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,163,ssertTrue(error < Math.abs(previousError));
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,165,reviousError = error;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,173,ublic void testSmallStep()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,174,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,176,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,177,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,179,"irstOrderIntegrator integ = new AdamsMoultonIntegrator(3, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,180,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,181,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,182,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,183,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,184,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,186,ssertTrue(handler.getLastError() < 3.0e-10);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,187,ssertTrue(handler.getMaximalValueError() < 2.0e-9);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,188,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,189,"ssertEquals(""Adams-Moulton"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,193,ublic void testBigStep()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,194,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,196,estProblem1 pb  = new TestProblem1();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,197,ouble step = (pb.getFinalTime() - pb.getInitialTime()) * 0.2;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,199,"irstOrderIntegrator integ = new AdamsMoultonIntegrator(3, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,200,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,201,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,202,"nteg.integrate(pb,"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,203,"b.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,204,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,206,ssertTrue(handler.getLastError() > 0.01);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,207,ssertTrue(handler.getMaximalValueError() > 0.03);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,208,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,212,ublic void testBackward()
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,213,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,215,estProblem5 pb = new TestProblem5();
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,216,ouble step = Math.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,218,"irstOrderIntegrator integ = new AdamsMoultonIntegrator(5, step);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,219,"estProblemHandler handler = new TestProblemHandler(pb, integ);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,220,nteg.addStepHandler(handler);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,221,"nteg.integrate(pb, pb.getInitialTime(), pb.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,222,"b.getFinalTime(), new double[pb.getDimension()]);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,224,ssertTrue(handler.getLastError() < 5.0e-10);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,225,ssertTrue(handler.getMaximalValueError() < 7.0e-10);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,226,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,227,"ssertEquals(""Adams-Moulton"", integ.getName());"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,230,ublic static Test suite() {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,231,eturn new TestSuite(AdamsMoultonIntegratorTest.class);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,17,ackage org.apache.commons.math.ode.nonstiff;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,19,mport org.apache.commons.math.ode.DerivativeException;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,20,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,21,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,22,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,23,mport org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,27,ublic class StepInterpolatorAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,29,rotected StepInterpolatorAbstractTest(String name) {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,30,uper(name);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,33,"rotected void checkDerivativesConsistency(final FirstOrderIntegrator integrator,"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,34,"inal TestProblemAbstract problem,"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,35,inal double threshold)
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,36,"hrows DerivativeException, IntegratorException {"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,37,ntegrator.addStepHandler(new StepHandler() {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,39,rivate static final long serialVersionUID = 2462564234755682953L;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,41,ublic boolean requiresDenseOutput() {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,42,eturn true;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,45,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,46,hrows DerivativeException {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,48,inal double h = 0.001 * (interpolator.getCurrentTime() - interpolator.getPreviousTime());
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,49,inal double t = interpolator.getCurrentTime() - 300 * h;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,51,f (Math.abs(h) < 10 * Math.ulp(t)) {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,52,eturn;
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,55,nterpolator.setInterpolatedTime(t - 4 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,56,inal double[] yM4h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,57,nterpolator.setInterpolatedTime(t - 3 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,58,inal double[] yM3h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,59,nterpolator.setInterpolatedTime(t - 2 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,60,inal double[] yM2h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,61,nterpolator.setInterpolatedTime(t - h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,62,inal double[] yM1h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,63,nterpolator.setInterpolatedTime(t + h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,64,inal double[] yP1h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,65,nterpolator.setInterpolatedTime(t + 2 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,66,inal double[] yP2h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,67,nterpolator.setInterpolatedTime(t + 3 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,68,inal double[] yP3h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,69,nterpolator.setInterpolatedTime(t + 4 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,70,inal double[] yP4h = interpolator.getInterpolatedState().clone();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,72,nterpolator.setInterpolatedTime(t);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,73,inal double[] yDot = interpolator.getInterpolatedDerivatives();
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,75,or (int i = 0; i < yDot.length; ++i) {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,76,inal double approYDot = ( -3 * (yP4h[i] - yM4h[i]) +
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,77,2 * (yP3h[i] - yM3h[i]) +
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,78,168 * (yP2h[i] - yM2h[i]) +
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,79,72 * (yP1h[i] - yM1h[i])) / (840 * h);
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,80,"ssertEquals(approYDot, yDot[i], threshold);"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,85,ublic void reset() {
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,90,"ntegrator.integrate(problem,"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,91,"roblem.getInitialTime(), problem.getInitialState(),"
False,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,92,"roblem.getFinalTime(), new double[problem.getDimension()]);"

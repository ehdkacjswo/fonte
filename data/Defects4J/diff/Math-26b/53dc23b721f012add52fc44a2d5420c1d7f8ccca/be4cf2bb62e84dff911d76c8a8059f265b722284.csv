is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,30,"* @deprecated Since 3.1 (to be removed in 4.0, see <a href=""https://issues.apache.org/jira/browse/MATH-800"">MATH-800</a>)."
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,31,"* Please use {@link CurveFitter} directly, by passing an instance of"
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,32,* {@link org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric PolynomialFunction.Parametric}
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,33,* as an argument to the
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,34,"* {@link CurveFitter#fit(int,org.apache.commons.math3.analysis.ParametricUnivariateFunction,double[]) fit}"
True,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java,35,* method.
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,27,import org.apache.commons.math3.optimization.SimpleVectorValueChecker;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,34,* Test for class {@link CurveFitter} where the function to fit is a
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,35,* polynomial.
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,40,olynomialFitter fitter =
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,41,"ew PolynomialFitter(degree, new LevenbergMarquardtOptimizer());"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,45,CurveFitter fitter = new CurveFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,46,olynomialFunction fitted = new PolynomialFunction(fitter.fit());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,50,final double[] init = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,51,"PolynomialFunction fitted = new PolynomialFunction(fitter.fit(Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,52,"new PolynomialFunction.Parametric(),"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,53,init));
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,63,olynomialFitter fitter =
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,64,"ew PolynomialFitter(degree, new LevenbergMarquardtOptimizer());"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,70,CurveFitter fitter = new CurveFitter(new LevenbergMarquardtOptimizer());
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,70,olynomialFunction fitted = new PolynomialFunction(fitter.fit());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,76,final double[] init = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,77,"PolynomialFunction fitted = new PolynomialFunction(fitter.fit(Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,78,"new PolynomialFunction.Parametric(),"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,79,init));
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,92,ifferentiableMultivariateVectorOptimizer optimizer =
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,93,ew GaussNewtonOptimizer(true);
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,94,"heckUnsolvableProblem(optimizer, false);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,100,"checkUnsolvableProblem(new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-15, 1e-15)), false);"
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,103,"olynomialFitter fitter = new PolynomialFitter(degree, optimizer);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,109,CurveFitter fitter = new CurveFitter(optimizer);
False,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,114,itter.fit();
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,120,final double[] init = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,121,"fitter.fit(Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,122,"new PolynomialFunction.Parametric(),"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,123,init);

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,22,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,66,rivate void checkAEqualPTPt(RealMatrix matrix) {
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,67,churTransformer transformer = new SchurTransformer(matrix);
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,68,ealMatrix p  = transformer.getP();
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,69,ealMatrix t  = transformer.getT();
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,70,ealMatrix pT = transformer.getPT();
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,72,ealMatrix result = p.multiply(t).multiply(pT);
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,74,ouble norm = result.subtract(matrix).getNorm();
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,75,"ssert.assertEquals(0, norm, 4.0e-14);"
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,92,rivate void checkOrthogonal(RealMatrix m) {
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,93,ealMatrix mTm = m.transpose().multiply(m);
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,94,ealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,95,"ssert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,90,@Test
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,91,public void testRandomData() {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,92,for (int run = 0; run < 100; run++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,93,Random r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,95,// matrix size
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,96,int size = r.nextInt(20) + 4;
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,98,double[][] data = new double[size][size];
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,99,for (int i = 0; i < size; i++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,100,for (int j = 0; j < size; j++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,101,data[i][j] = r.nextInt(100);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,105,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,106,RealMatrix s = checkAEqualPTPt(m);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,107,checkSchurForm(s);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,111,@Test
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,112,public void testRandomDataNormalDistribution() {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,113,for (int run = 0; run < 100; run++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,114,Random r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,115,"NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,117,// matrix size
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,118,int size = r.nextInt(20) + 4;
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,120,double[][] data = new double[size][size];
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,121,for (int i = 0; i < size; i++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,122,for (int j = 0; j < size; j++) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,123,data[i][j] = dist.sample();
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,127,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,128,RealMatrix s = checkAEqualPTPt(m);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,129,checkSchurForm(s);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,134,// Test helpers
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,137,private RealMatrix checkAEqualPTPt(RealMatrix matrix) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,138,SchurTransformer transformer = new SchurTransformer(matrix);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,139,RealMatrix p  = transformer.getP();
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,140,RealMatrix t  = transformer.getT();
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,141,RealMatrix pT = transformer.getPT();
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,143,RealMatrix result = p.multiply(t).multiply(pT);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,145,double norm = result.subtract(matrix).getNorm();
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,146,"Assert.assertEquals(0, norm, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,148,return t;
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,151,private void checkOrthogonal(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,152,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,153,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,154,"Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"

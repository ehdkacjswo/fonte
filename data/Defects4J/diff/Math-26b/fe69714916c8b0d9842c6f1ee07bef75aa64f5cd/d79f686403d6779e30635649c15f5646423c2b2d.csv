is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,61,import org.apache.commons.math.stat.Univariate;
False,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,82, @version $Revision: 1.1 $
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,84,* @version $Revision: 1.2 $
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,64,import org.apache.commons.math.stat.Univariate;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,65,import org.apache.commons.math.stat.UnivariateImpl;
False,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,90, @version $Revision: 1.2 $
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,93,* @version $Revision: 1.3 $
True,src/java/org/apache/commons/math/TestStatisticImpl.java,src/java/org/apache/commons/math/TestStatisticImpl.java,57,import org.apache.commons.math.stat.Univariate;
True,src/java/org/apache/commons/math/TestStatisticImpl.java,src/java/org/apache/commons/math/TestStatisticImpl.java,58,import org.apache.commons.math.stat.UnivariateImpl;
False,src/java/org/apache/commons/math/TestStatisticImpl.java,src/java/org/apache/commons/math/TestStatisticImpl.java,69, @version $Revision: 1.2 $ $Date: 2003/05/26 17:29:36 $
True,src/java/org/apache/commons/math/TestStatisticImpl.java,src/java/org/apache/commons/math/TestStatisticImpl.java,72,* @version $Revision: 1.3 $ $Date: 2003/05/29 20:35:44 $
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,54,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,54,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,85, @version $Revision: 1.1 $ $Date: 2003/05/26 02:11:50 $
True,src/java/org/apache/commons/math/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,85,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,54,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,54,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,56,import org.apache.commons.math.DoubleArray;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,57,import org.apache.commons.math.ContractableDoubleArray;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,54,package org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76, @version $Revision: 1.8 $ $Date: 2003/05/29 19:49:18 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,58,import org.apache.commons.math.DoubleArray;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,59,import org.apache.commons.math.FixedDoubleArray;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70, @version $Revision: 1.9 $ $Date: 2003/05/29 19:49:18 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:45 $
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,63,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,64,import org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,67, @version $Revision: 1.1 $ $Date: 2003/05/21 14:21:15 $
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,70,* @version $Revision: 1.2 $ $Date: 2003/05/29 20:35:45 $
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,5, reserved.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,9, are met:
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,17,    distribution.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,59,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,61, Test suite for the Math package.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,63, @author Phil Steitz
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,64," @version $Id: MathTestSuite.java,v 1.3 2003/05/18 00:58:52 tobrien Exp $"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,66,ublic class MathTestSuite extends TestCase {
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,69, Construct a new instance.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,71,ublic MathTestSuite(String name) {
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,72,uper(name);
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,76, Command-line interface.
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,78,ublic static void main(String[] args) {
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,79,estRunner.run(suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,83, Get the suite of tests
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,85,ublic static Test suite() {
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,86,estSuite suite = new TestSuite();
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,87,"uite.setName(""Commons Math Tests"");"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,88,uite.addTest(RealMatrixImplTest.suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,89,uite.addTest(FreqTest.suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,90,uite.addTest(UnivariateImplTest.suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,91,uite.addTest(TestStatisticTest.suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,92,uite.addTest(RandomDataTest.suite());
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,93,eturn suite;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,65,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,66,import org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,68, @version $Revision: 1.3 $ $Date: 2003/05/29 19:45:35 $
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,72,* @version $Revision: 1.4 $ $Date: 2003/05/29 20:35:45 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,62,import org.apache.commons.math.stat.Univariate;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,63,import org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,66, @version $Revision: 1.2 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,69,* @version $Revision: 1.3 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,63,import org.apache.commons.math.beans.*;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,66,* Test cases for the {@link BeanListUnivariateImpl} class.
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,69,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,72,public final class BeanListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,74,private List patientList = null;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,75,private double tolerance = Double.MIN_VALUE;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,77,public BeanListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,78,super(name);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,81,public void setUp() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,82,patientList = new ArrayList();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,84,// Create and add patient bean 1
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,85,"VitalStats vs1 = new VitalStats( new Double(120.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,86,new Double(96.4) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,87,"Patient p1 = new Patient( vs1, new Integer( 35 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,88,patientList.add( p1 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,90,// Create and add patient bean 2
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,91,"VitalStats vs2 = new VitalStats( new Double(70.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,92,new Double(97.4) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,93,"Patient p2 = new Patient( vs2, new Integer( 23 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,94,patientList.add( p2 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,96,// Create and add patient bean 3
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,97,"VitalStats vs3 = new VitalStats( new Double(90.0),"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,98,new Double(98.6) );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,99,"Patient p3 = new Patient( vs3, new Integer( 42 ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,100,patientList.add( p3 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,103,public static Test suite() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,104,TestSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,105,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,106,return suite;
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,109,/** test stats */
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,110,public void testStats() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,112,StoreUnivariate u = new BeanListUnivariateImpl( patientList );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,114,"assertEquals(""total count"",3,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,116,u.clear();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,117,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,120,public void testPropStats() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,122,"StoreUnivariate heartU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,123,"""vitalStats.heartRate"" );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,127,"assertEquals( ""Mean heart rate unexpected"", 93.333,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,128,"heartU.getMean(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,129,"assertEquals( ""Max heart rate unexpected"", 120.0,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,130,"heartU.getMax(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,132,"StoreUnivariate ageU = new BeanListUnivariateImpl( patientList,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,133,"""age"" );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,135,"assertEquals( ""Mean age unexpected"", 33.333,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,136,"ageU.getMean(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,137,"assertEquals( ""Max age unexpected"", 42.0,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,138,"ageU.getMax(), 0.001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,142,/*    public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,143,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,145,StoreUnivariate u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,147,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,148,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,149,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,151,list.add( new Double(one));
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,153,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,154,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,155,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,158,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,159,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,161,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,162,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,163,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,164,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,167,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,168,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,169,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,170,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,173,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,174,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,175,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,177,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,178,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,179,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,180,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,182,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,183,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,185,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,186,// of a discarded element
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,187,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,188,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,190,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,192,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,193,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,60,* Test cases for the TestStatistic class.
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,62,* @author Phil Steitz
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,63,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,66,public final class BivariateRegressionTest extends TestCase {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,69,"* NIST ""Norris"" refernce data set from"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,70,* http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,71,"* Strangely, order is {y,x}"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,73,"private double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,74,"{888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,75,"{449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,76,"{778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,77,"{557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,78,"{0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,79,"{998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,80,"{668.4,669.1},{449.2,448.9},{0.2,0.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,83,* Correlation example from
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,84,* http://www.xycoon.com/correlation.htm
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,86,"private double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,87,"{90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,88,"{70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,89,"{52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,91,public BivariateRegressionTest(String name) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,92,super(name);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,95,public void setUp() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,98,public static Test suite() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,99,TestSuite suite = new TestSuite(BivariateRegressionTest.class);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,100,"suite.setName(""BivariateRegression Tests"");"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,101,return suite;
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,104,public void testNorris() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,105,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,106,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,107,"regression.addData(data[i][1],data[i][0]);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,109,"assertEquals(""slope"",1.00211681802045,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,110,"regression.getSlope(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,111,"assertEquals(""slope std err"",0.429796848199937E-03,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,112,"regression.getSlopeStdErr(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,113,"assertEquals(""number of observations"",36,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,114,"assertEquals(""intercept"", -0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,115,"regression.getIntercept(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,116,"assertEquals(""std err intercept"", 0.232818234301152,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,117,"regression.getInterceptStdErr(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,118,"assertEquals(""r-square"",0.999993745883712,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,119,"regression.getRSquare(),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,120,"assertEquals(""SSR"",4255954.13232369,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,121,"regression.getRegressionSumSquares(),10E-8);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,122,"assertEquals(""MSE"",0.782864662630069,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,123,"regression.getMeanSquareError(),10E-8);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,124,"assertEquals(""SSE"",26.6173985294224,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,125,"regression.getSumSquaredErrors(),10E-8);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,126,"assertEquals(""predict(0)"",-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,127,"regression.predict(0),10E-12);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,128,"assertEquals(""predict(1)"",1.00211681802045-0.262323073774029,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,129,"regression.predict(1),10E-11);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,132,public void testCorr() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,133,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,134,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,135,"assertEquals(""number of observations"",17,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,136,"assertEquals(""r-square"",.896123,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,137,"regression.getRSquare(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,138,"assertEquals(""r"",-.946638,"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,139,"regression.getR(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,142,public void testNaNs() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,144,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,146,"assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,147,"assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,148,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,149,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,150,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,151,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,152,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,153,"assertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,154,"assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,155,"assertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,156,Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,157,"assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,158,"assertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,159,"assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,161,"regression.addData(1,2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,162,"regression.addData(1,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,164,"// No x variation, so these should still blow..."
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,165,"assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,166,"assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,167,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,168,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,169,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,170,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,171,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,172,"assertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,173,"assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,174,"assertTrue(""RSS not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,175,Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,176,"assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,177,"assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,179,// but SSTO should be OK
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,180,"assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,182,regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,184,"regression.addData(1,2);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,185,"regression.addData(3,3);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,187,"// All should be OK except MSE, s(b0), s(b1) which need one more df"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,188,"assertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,189,"assertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,190,"assertTrue(""slope std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,191,Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,192,"assertTrue(""intercept std err not NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,193,Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,194,"assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,195,"assertTrue(""r NaN"",!Double.isNaN(regression.getR()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,196,"assertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,197,"assertTrue(""RSS NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,198,!Double.isNaN(regression.getRegressionSumSquares()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,199,"assertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,200,"assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,201,"assertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,203,"regression.addData(1,4);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,205,"// MSE, MSE, s(b0), s(b1) should all be OK now"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,206,"assertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,207,"assertTrue(""slope std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,208,!Double.isNaN(regression.getSlopeStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,209,"assertTrue(""intercept std err NaN"","
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,210,!Double.isNaN(regression.getInterceptStdErr()));
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,213,public void testClear() {
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,214,BivariateRegression regression = new BivariateRegression();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,215,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,216,"assertEquals(""number of observations"",17,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,217,regression.clear();
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,218,"assertEquals(""number of observations"",0,regression.getN());"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,219,regression.addData(corrData);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,220,"assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);"
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,221,regression.addData(data);
True,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,222,"assertEquals(""number of observations"",53,regression.getN());"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,59,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,61,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,64,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,67,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,70,public final class ListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,71,private double one = 1;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,72,private float two = 2;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,73,private int three = 3;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,75,private double mean = 2;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,76,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,77,private double sum = 8;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,78,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,79,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,80,private double n = 4;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,81,private double min = 1;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,82,private double max = 3;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,83,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,84,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,85,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,86,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,88,public ListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,89,super(name);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,92,public void setUp() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,95,public static Test suite() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,96,TestSuite suite = new TestSuite(ListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,97,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,98,return suite;
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,101,/** test stats */
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,102,public void testStats() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,103,List externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,105,StoreUnivariate u = new ListUnivariateImpl( externalList );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,107,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,108,u.addValue(one);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,109,u.addValue(two);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,110,u.addValue(two);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,111,u.addValue(three);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,112,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,113,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,114,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,115,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,116,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,117,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,118,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,119,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,120,u.clear();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,121,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,124,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,125,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,127,StoreUnivariate u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,129,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,130,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,131,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,133,list.add( new Double(one));
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,135,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,136,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,137,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,140,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,141,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,143,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,144,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,145,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,146,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,149,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,150,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,151,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,152,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,155,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,156,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,157,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,159,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,160,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,161,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,162,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,164,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,165,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,167,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,168,// of a discarded element
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,169,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,170,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,172,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,174,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,175,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,61,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,63,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,64,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,67,public final class StoreUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,68,private double one = 1;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,69,private float two = 2;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,70,private int three = 3;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,71,private double mean = 2;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,72,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,73,private double sum = 8;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,74,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,75,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,76,private double n = 4;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,77,private double min = 1;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,78,private double max = 3;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,79,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,80,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,81,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,82,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,84,public StoreUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,85,super(name);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,88,public void setUp() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,91,public static Test suite() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,92,TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,93,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,94,return suite;
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,97,/** test stats */
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,98,public void testStats() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,99,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,100,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,101,u.addValue(one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,102,u.addValue(two);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,103,u.addValue(two);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,104,u.addValue(three);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,105,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,106,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,107,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,108,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,109,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,110,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,111,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,112,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,113,u.clear();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,114,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,117,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,118,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,121,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,122,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,124,u.addValue(one);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,126,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,127,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,128,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,131,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,132,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,134,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,135,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,136,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,137,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,140,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,141,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,142,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,143,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,146,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,147,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,148,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,150,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,151,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,152,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,153,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,155,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,158,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,159,// of a discarded element
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,160,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,161,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,163,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,165,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,166,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,61,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,63,* @author Phil Steitz
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,64,* @author Tim Obrien
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,65,* @version $Revision: 1.1 $ $Date: 2003/05/29 20:35:46 $
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,68,public final class UnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,69,private double one = 1;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,70,private float twoF = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,71,private long twoL = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,72,private int three = 3;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,73,private double mean = 2;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,74,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,75,private double sum = 8;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,76,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,77,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,78,private double n = 4;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,79,private double min = 1;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,80,private double max = 3;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,81,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,83,public UnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,84,super(name);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,87,public void setUp() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,90,public static Test suite() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,91,TestSuite suite = new TestSuite(UnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,92,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,93,return suite;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,96,/** test stats */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,97,public void testStats() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,98,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,99,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,100,u.addValue(one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,101,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,102,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,103,u.addValue(three);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,104,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,105,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,106,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,107,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,108,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,109,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,110,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,111,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,112,u.clear();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,113,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,116,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,117,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,118,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,119,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,120,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,121,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,122,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,123,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,124,"assertTrue(""skew of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,125,Double.isNaN(u.getSkewness() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,126,"assertTrue(""kurtosis of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,127,Double.isNaN(u.getKurtosis() ) );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,130,/* n=1 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,131,u.addValue(one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,132,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,133,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,134,"assertTrue(""geometric should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,135,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,136,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,137,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,138,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,139,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,140,"assertTrue(""skew should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,141,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,142,"assertTrue(""kurtosis should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,143,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,145,/* n=2 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,146,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,147,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,148,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,149,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,150,u.getVariance() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,151,"assertTrue(""skew should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,152,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,153,"assertTrue(""kurtosis should be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,154,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,156,/* n=3 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,157,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,158,"assertTrue(""skew should not be zero (n = 3)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,159,u.getSkewness() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,160,"assertTrue(""kurtosis should be zero (n = 3)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,161,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,163,/* n=4 */
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,164,u.addValue(three);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,165,"assertTrue(""kurtosis should not be zero (n = 4)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,166,u.getKurtosis() != 0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,170,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,171,UnivariateImpl u = new UnivariateImpl(10);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,173,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,174,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,175,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,176,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,178,"assertEquals( ""Product not expected"", 24.0, u.getProduct(),"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,179,Double.MIN_VALUE );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,180,"assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,181,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,183,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,184,// of a discarded element
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,185,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,186,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,188,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,190,"assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,191,"u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,192,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,193,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,196,public void testRollingMinMax() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,197,UnivariateImpl u = new UnivariateImpl(3);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,198,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,199,u.addValue( 5.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,200,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,201,u.addValue( 4.0 ); // discarding min
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,202,"assertEquals( ""min not expected"", 3.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,203,"u.getMin(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,204,u.addValue(1.0);  // discarding max
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,205,"assertEquals( ""max not expected"", 4.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,206,"u.getMax(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,209,public void testNaNContracts() {
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,210,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,211,double nan = Double.NaN;
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,212,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,213,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,214,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,215,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,216,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,218,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,220,"assertEquals( ""mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,221,"u.getMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,222,"assertEquals( ""variance not expected"", 0.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,223,"u.getVariance(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,224,"assertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,225,"u.getGeometricMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,227,u.addValue(-1.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,229,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,231,u.addValue(0.0);
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,233,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,235,//FiXME: test all other NaN contract specs

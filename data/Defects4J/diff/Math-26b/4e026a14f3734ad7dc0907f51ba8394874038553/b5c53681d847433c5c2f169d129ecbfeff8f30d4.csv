is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,21,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,23,import org.apache.commons.math.special.Erf;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,27,* Implementation of the log-normal (gaussian) distribution.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,29,* <p>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,30,"* <a id=""parameters""><strong>Parameters:</strong></a>"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,31,* {@code X} is log-normally distributed if its natural logarithm {@code log(X)}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,32,* is normally distributed. The probability distribution function of {@code X}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,33,* is given by (for {@code x >= 0})
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,34,* </p>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,35,* <p>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,36,* {@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,37,* </p>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,38,* <ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,39,* <li>{@code m} is the <em>scale</em> parameter: this is the mean of the
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,40,"* normally distributed natural logarithm of this distribution,</li>"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,41,* <li>{@code s} is the <em>shape</em> parameter: this is the standard
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,42,* deviation of the normally distributed natural logarithm of this
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,43,* distribution.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,44,* </ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,46,"* @see <a href=""http://en.wikipedia.org/wiki/Log-normal_distribution"">"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,47,* Log-normal distribution (Wikipedia)</a>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,48,"* @see <a href=""http://mathworld.wolfram.com/LogNormalDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,49,* Log Normal distribution (MathWorld)</a>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,51,* @version $Id$
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,52,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,54,public class LogNormalDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,55,/** Default inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,56,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,58,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,59,private static final long serialVersionUID = 20120112;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,61,/** &radic;(2 &pi;) */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,62,private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,64,/** &radic;(2) */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,65,private static final double SQRT2 = FastMath.sqrt(2.0);
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,67,"/** The <a href=""#parameters"">scale</a> parameter of this distribution. */"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,68,private final double scale;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,70,"/** The <a href=""#parameters"">shape</a> parameter of this distribution. */"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,71,private final double shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,73,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,74,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,77,* Create a log-normal distribution using the specified
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,78,"* <a href=""#parameters"">scale</a> and"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,79,"* <a href=""#parameters"">shape</a>."
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,81,* @param scale the scale parameter of this distribution
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,82,* @param shape the shape parameter of this distribution
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,83,* @throws NotStrictlyPositiveException if {@code shape <= 0}.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,85,"public LogNormalDistribution(double scale, double shape)"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,86,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,87,"this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,91,* Create a log-normal distribution using the specified
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,92,"* <a href=""#parameters"">scale</a>, <a href=""#parameters"">shape</a> and"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,93,* inverse cumulative distribution accuracy.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,95,* @param scale the scale parameter of this distribution
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,96,* @param shape the shape parameter of this distribution
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,97,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,98,* @throws NotStrictlyPositiveException if {@code shape <= 0}.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,100,"public LogNormalDistribution(double scale, double shape,"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,101,double inverseCumAccuracy) throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,102,if (shape <= 0) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,103,"throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, shape);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,106,this.scale = scale;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,107,this.shape = shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,108,this.solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,112,"* Create a log-normal distribution, where the mean and standard deviation"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,113,* of the {@link NormalDistribution normally distributed} natural
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,114,* logarithm of the log-normal distribution are equal to zero and one
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,115,"* respectively. In other words, the scale of the returned distribution is"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,116,"* {@code 0}, while its shape is {@code 1}."
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,118,public LogNormalDistribution() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,119,"this(0, 1);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,123,"* Returns the <a href=""#parameters"">scale</a> parameter of this distribution."
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,125,* @return the scale parameter
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,127,public double getScale() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,128,return scale;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,132,"* Returns the <a href=""#parameters"">shape</a> parameter of this"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,133,* distribution.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,135,* @return the shape parameter
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,137,public double getShape() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,138,return shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,142,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,144,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,146,* @return 0
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,148,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,149,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,153,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,155,"* For scale {@code m}, and shape {@code s} of this distribution, the PDF"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,156,* is given by
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,157,* <ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,158,"* <li>{@code 0} if {@code x <= 0},</li>"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,159,* <li>{@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,160,* otherwise.</li>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,161,* </ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,163,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,164,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,165,return 0;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,167,final double x0 = FastMath.log(x) - scale;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,168,final double x1 = x0 / shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,169,return FastMath.exp(-0.5 * x1 * x1) / (shape * SQRT2PI * x);
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,173,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,175,"* For scale {@code m}, and shape {@code s} of this distribution, the CDF"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,176,* is given by
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,177,* <ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,178,"* <li>{@code 0} if {@code x <= 0},</li>"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,179,"* <li>{@code 0} if {@code ln(x) - m < 0} and {@code m - ln(x) > 40 * s}, as"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,180,"* in these cases the actual value is within {@code Double.MIN_VALUE} of 0,"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,181,"* <li>{@code 1} if {@code ln(x) - m >= 0} and {@code ln(x) - m > 40 * s},"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,182,* as in these cases the actual value is within {@code Double.MIN_VALUE} of
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,183,"* 1,</li>"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,184,* <li>{@code 0.5 + 0.5 * erf((ln(x) - m) / (s * sqrt(2))} otherwise.</li>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,185,* </ul>
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,187,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,188,if (x <= 0) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,189,return 0;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,191,final double dev = FastMath.log(x) - scale;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,192,if (FastMath.abs(dev) > 40 * shape) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,193,return dev < 0 ? 0.0d : 1.0d;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,195,return 0.5 + 0.5 * Erf.erf(dev / (shape * SQRT2));
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,198,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,199,@Override
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,200,"public double cumulativeProbability(double x0, double x1)"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,201,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,202,if (x0 > x1) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,203,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,204,"x0, x1, true);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,206,if (x0 <= 0 || x1 <= 0) {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,207,"return super.cumulativeProbability(x0, x1);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,209,final double denom = shape * SQRT2;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,210,final double v0 = (FastMath.log(x0) - scale) / denom;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,211,final double v1 = (FastMath.log(x1) - scale) / denom;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,212,"return 0.5 * Erf.erf(v0, v1);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,215,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,216,@Override
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,217,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,218,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,222,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,224,"* For scale {@code m} and shape {@code s}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,225,* {@code exp(m + s^2 / 2)}.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,227,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,228,double s = shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,229,return FastMath.exp(scale + (s * s / 2));
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,233,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,235,"* For scale {@code m} and shape {@code s}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,236,* {@code (exp(s^2) - 1) * exp(2 * m + s^2)}.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,238,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,239,final double s = shape;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,240,final double ss = s * s;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,241,return (FastMath.exp(ss) - 1) * FastMath.exp(2 * scale + ss);
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,245,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,247,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,249,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,251,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,252,return 0;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,256,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,258,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,259,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,261,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,262,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,264,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,265,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,268,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,269,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,270,return true;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,273,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,274,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,275,return false;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,279,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,281,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,283,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,285,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,286,return true;
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,289,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,290,@Override
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,291,public double sample()  {
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,292,"double n = randomData.nextGaussian(0, 1);"
True,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,src/main/java/org/apache/commons/math/distribution/LogNormalDistribution.java,293,return FastMath.exp(scale + shape * n);
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,25,* Test cases for {@link LogNormalDistribution}. Extends
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,26,* {@link RealDistributionAbstractTest}. See class javadoc of that class
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,27,* for details.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,29,* @version $Id$
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,30,* @since 3.0
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,32,public class LogNormalDistributionTest extends RealDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,34,//-------------- Implementations for abstract methods -----------------------
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,36,/** Creates the default real distribution instance to use in tests. */
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,37,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,38,public LogNormalDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,39,"return new LogNormalDistribution(2.1, 1.4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,42,/** Creates the default cumulative probability distribution test input values */
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,43,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,44,public double[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,45,// quantiles computed using R
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,46,"return new double[] { -2.226325228634938, -1.156887023657177,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,47,"-0.643949578356075, -0.2027950777320613,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,48,"0.305827808237559, 6.42632522863494,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,49,"5.35688702365718, 4.843949578356074,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,50,"4.40279507773206, 3.89417219176244 };"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,53,/** Creates the default cumulative probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,54,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,55,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,56,"return new double[] { 0, 0, 0, 0, 0.00948199951485, 0.432056525076,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,57,"0.381648158697, 0.354555726206, 0.329513316888,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,58,0.298422824228 };
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,61,/** Creates the default probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,62,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,63,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,64,"return new double[] { 0, 0, 0, 0, 0.0594218160072, 0.0436977691036,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,65,"0.0508364857798, 0.054873528325, 0.0587182664085,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,66,0.0636229042785 };
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,70,* Creates the default inverse cumulative probability distribution test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,71,* input values.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,73,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,74,public double[] makeInverseCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,75,"// Exclude the test points less than zero, as they have cumulative"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,76,"// probability of zero, meaning the inverse returns zero, and not the"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,77,// points less than zero.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,78,double[] points = makeCumulativeTestValues();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,79,double[] points2 = new double[points.length - 4];
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,80,"System.arraycopy(points, 4, points2, 0, points2.length - 4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,81,return points2;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,82,"//return Arrays.copyOfRange(points, 4, points.length - 4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,86,* Creates the default inverse cumulative probability test expected
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,87,* values.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,89,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,90,public double[] makeInverseCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,91,"// Exclude the test points less than zero, as they have cumulative"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,92,"// probability of zero, meaning the inverse returns zero, and not the"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,93,// points less than zero.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,94,double[] points = makeCumulativeTestPoints();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,95,double[] points2 = new double[points.length - 4];
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,96,"System.arraycopy(points, 4, points2, 0, points2.length - 4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,97,return points2;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,98,"//return Arrays.copyOfRange(points, 1, points.length - 4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,101,// --------------------- Override tolerance  --------------
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,102,@Override
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,103,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,104,super.setUp();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,105,setTolerance(LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,108,//---------------------------- Additional test cases -------------------------
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,110,private void verifyQuantiles() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,111,LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,112,double mu = distribution.getScale();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,113,double sigma = distribution.getShape();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,114,"setCumulativeTestPoints( new double[] { mu - 2 *sigma, mu - sigma,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,115,"mu, mu + sigma, mu + 2 * sigma,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,116,"mu + 3 * sigma,mu + 4 * sigma,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,117,mu + 5 * sigma });
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,118,verifyCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,121,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,122,public void testQuantiles() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,123,"setCumulativeTestValues(new double[] {0, 0.0396495152787,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,124,"0.16601209243, 0.272533253269,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,125,"0.357618409638, 0.426488363093,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,126,"0.483255136841, 0.530823013877});"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,127,"setDensityTestValues(new double[] {0, 0.0873055825147, 0.0847676303432,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,128,"0.0677935186237, 0.0544105523058,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,129,"0.0444614628804, 0.0369750288945,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,130,0.0312206409653});
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,131,verifyQuantiles();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,132,verifyDensities();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,134,"setDistribution(new LogNormalDistribution(0, 1));"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,135,"setCumulativeTestValues(new double[] {0, 0, 0, 0.5, 0.755891404214,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,136,"0.864031392359, 0.917171480998,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,137,0.946239689548});
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,138,"setDensityTestValues(new double[] {0, 0, 0, 0.398942280401,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,139,"0.156874019279, 0.07272825614,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,140,"0.0381534565119, 0.0218507148303});"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,141,verifyQuantiles();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,142,verifyDensities();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,144,"setDistribution(new LogNormalDistribution(0, 0.1));"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,145,"setCumulativeTestValues(new double[] {0, 0, 0, 1.28417563064e-117,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,146,"1.39679883412e-58,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,147,"1.09839325447e-33,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,148,"2.52587961726e-20,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,149,2.0824223487e-12});
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,150,"setDensityTestValues(new double[] {0, 0, 0, 2.96247992535e-114,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,151,"1.1283370232e-55, 4.43812313223e-31,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,152,"5.85346445002e-18,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,153,2.9446618076e-10});
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,154,verifyQuantiles();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,155,verifyDensities();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,158,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,159,public void testInverseCumulativeProbabilityExtremes() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,160,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,161,setInverseCumulativeTestValues(
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,162,"new double[] {0, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,163,verifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,166,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,167,public void testGetMean() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,168,LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,169,"Assert.assertEquals(2.1, distribution.getScale(), 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,172,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,173,public void testGetStandardDeviation() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,174,LogNormalDistribution distribution = (LogNormalDistribution)getDistribution();
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,175,"Assert.assertEquals(1.4, distribution.getShape(), 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,178,@Test(expected=NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,179,public void testPreconditions() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,180,"new LogNormalDistribution(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,183,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,184,public void testDensity() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,185,"double [] x = new double[]{-2, -1, 0, 1, 2};"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,186,"// R 2.13: print(dlnorm(c(-2,-1,0,1,2)), digits=10)"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,187,"checkDensity(0, 1, x, new double[] { 0.0000000000, 0.0000000000,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,188,"0.0000000000, 0.3989422804,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,189,0.1568740193 });
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,190,"// R 2.13: print(dlnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,191,"checkDensity(1.1, 1, x, new double[] { 0.0000000000, 0.0000000000,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,192,"0.0000000000, 0.2178521770,"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,193,0.1836267118});
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,196,"private void checkDensity(double mean, double sd, double[] x, double[] expected) {"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,197,"LogNormalDistribution d = new LogNormalDistribution(mean, sd);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,198,for (int i = 0; i < x.length; i++) {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,199,"Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,204,* Check to make sure top-coding of extreme values works correctly.
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,205,"* Verifies fixes for JIRA MATH-167, MATH-414"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,207,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,208,public void testExtremeValues() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,209,"LogNormalDistribution d = new LogNormalDistribution(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,210,for (int i = 0; i < 1e5; i++) { // make sure no convergence exception
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,211,double upperTail = d.cumulativeProbability(i);
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,212,if (i <= 72) { // make sure not top-coded
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,213,Assert.assertTrue(upperTail < 1.0d);
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,215,else { // make sure top coding not reversed
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,216,Assert.assertTrue(upperTail > 0.99999);
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,220,"Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,221,"Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,222,"Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,223,"Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,226,@Test
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,227,public void testMeanVariance() {
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,228,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,229,LogNormalDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,231,"dist = new LogNormalDistribution(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,232,"Assert.assertEquals(dist.getNumericalMean(), 1.6487212707001282, tol);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,233,"Assert.assertEquals(dist.getNumericalVariance(),"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,234,"4.670774270471604, tol);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,236,"dist = new LogNormalDistribution(2.2, 1.4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,237,"Assert.assertEquals(dist.getNumericalMean(), 24.046753552064498, tol);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,238,"Assert.assertEquals(dist.getNumericalVariance(),"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,239,"3526.913651880464, tol);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,241,"dist = new LogNormalDistribution(-2000.9, 10.4);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,242,"Assert.assertEquals(dist.getNumericalMean(), 0.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/LogNormalDistributionTest.java,243,"Assert.assertEquals(dist.getNumericalVariance(), 0.0, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,25, Test cases for NormalDistribution.
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,26, Extends ContinuousDistributionAbstractTest.  See class javadoc for
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,27, ContinuousDistributionAbstractTest for details.
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,25,* Test cases for {@link NormalDistribution}. Extends
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,26,* {@link RealDistributionAbstractTest}. See class javadoc of that class
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,27,* for details.
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,35,** Creates the default continuous distribution instance to use in tests. */
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,35,/** Creates the default real distribution instance to use in tests. */

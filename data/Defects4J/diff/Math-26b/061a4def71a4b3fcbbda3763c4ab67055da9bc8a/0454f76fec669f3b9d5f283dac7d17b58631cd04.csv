is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,20,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,22,import org.apache.commons.math.analysis.function.Logit;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,23,import org.apache.commons.math.analysis.function.Sigmoid;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,25,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,26,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,27,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,28,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,31,* <p>Adapter for mapping bounded {@link MultivariateRealFunction} to unbounded ones.</p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,33,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,34,* This adapter can be used to wrap functions subject to simple bounds on
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,35,* parameters so they can be used by optimizers that do <em>not</em> directly
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,36,* support simple bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,37,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,38,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,39,* The principle is that the user function that will be wrapped will see its
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,40,"* parameters bounded as required, i.e when its {@code value} method is called"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,41,"* with argument array {@code point}, the elements array will fulfill requirement"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,42,* {@code lower[i] <= point[i] <= upper[i]} for all i. Some of the components
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,43,* may be unbounded or bounded only on one side if the corresponding bound is
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,44,* set to an infinite value. The optimizer will not manage the user function by
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,45,"* itself, but it will handle this adapter and it is this adapter that will take"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,46,* care the bounds are fulfilled. The adapter {@link #value(double[])} method will
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,47,"* be called by the optimizer with unbound parameters, and the adapter will map"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,48,* the unbounded value to the bounded range using appropriate functions like
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,49,* {@link Sigmoid} for double bounded elements for example.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,50,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,51,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,52,"* As the optimizer sees only unbounded parameters, it should be noted that the"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,53,"* start point or simplex expected by the optimizer should be unbounded, so the"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,54,* user is responsible for converting his bounded point to unbounded by calling
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,55,* {@link #boundedToUnbounded(double[])} before providing them to the optimizer.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,56,"* For the same reason, the point returned by the {@link"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,57,"* org.apache.commons.math.optimization.BaseMultivariateRealOptimizer#optimize(int,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,58,"* MultivariateRealFunction, org.apache.commons.math.optimization.GoalType, double[])}"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,59,"* method is unbounded. So to convert this point to bounded, users must call"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,60,* {@link #unboundedToBounded(double[])} by themselves!</p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,61,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,62,* This adapter is only a poor man solution to simple bounds optimization constraints
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,63,* that can be used with simple optimizers like {@link SimplexOptimizer} with {@link
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,64,* NelderMeadSimplex} or {@link MultiDirectionalSimplex}. A better solution is to use
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,65,* an optimizer that directly supports simple bounds like {@link CMAESOptimizer} or
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,66,* {@link BOBYQAOptimizer}. One caveat of this poor man solution is that behavior near
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,67,* the bounds may be numerically unstable as bounds are mapped from infinite values.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,68,* Another caveat is that convergence values are evaluated by the optimizer with respect
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,69,"* to unbounded variables, so there will be scales differences when converted to bounded"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,70,* variables.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,71,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,73,* @see MultivariateRealFunctionPenaltyAdapter
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,75,* @version $Id$
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,76,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,79,public class MultivariateRealFunctionMappingAdapter implements MultivariateRealFunction {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,81,/** Underlying bounded function. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,82,private final MultivariateRealFunction bounded;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,84,/** Mapping functions. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,85,private final Mapper[] mappers;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,87,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,88,* @param bounded bounded function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,89,* @param lower lower bounds for each element of the input parameters array
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,90,* (some elements may be set to {@code Double.NEGATIVE_INFINITY} for
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,91,* unbounded values)
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,92,* @param upper upper bounds for each element of the input parameters array
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,93,* (some elements may be set to {@code Double.POSITIVE_INFINITY} for
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,94,* unbounded values)
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,95,* @exception MathIllegalArgumentException if lower and upper bounds are not
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,96,"* consistent, either according to dimension or to values"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,98,"public MultivariateRealFunctionMappingAdapter(final MultivariateRealFunction bounded,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,99,"final double[] lower, final double[] upper) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,101,// safety checks
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,102,MathUtils.checkNotNull(lower);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,103,MathUtils.checkNotNull(upper);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,104,if (lower.length != upper.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,105,"throw new DimensionMismatchException(lower.length, upper.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,107,for (int i = 0; i < lower.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,108,// note the following test is written in such a way it also fails for NaN
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,109,if (!(upper[i] >= lower[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,110,"throw new NumberIsTooSmallException(upper[i], lower[i], true);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,114,this.bounded = bounded;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,115,this.mappers = new Mapper[lower.length];
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,116,for (int i = 0; i < mappers.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,117,if (Double.isInfinite(lower[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,118,if (Double.isInfinite(upper[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,119,"// element is unbounded, no transformation is needed"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,120,mappers[i] = new NoBoundsMapper();
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,121,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,122,// element is simple-bounded on the upper side
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,123,mappers[i] = new UpperBoundMapper(upper[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,125,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,126,if (Double.isInfinite(upper[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,127,// element is simple-bounded on the lower side
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,128,mappers[i] = new LowerBoundMapper(lower[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,129,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,130,// element is double-bounded
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,131,"mappers[i] = new LowerUpperBoundMapper(lower[i], upper[i]);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,138,/** Map an array from unbounded to bounded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,139,* @param x unbounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,140,* @return bounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,142,public double[] unboundedToBounded(double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,144,// map unbounded input point to bounded point
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,145,final double[] mapped = new double[mappers.length];
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,146,for (int i = 0; i < mappers.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,147,mapped[i] = mappers[i].unboundedToBounded(point[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,150,return mapped;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,154,/** Map an array from bounded to unbounded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,155,* @param y bounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,156,* @return unbounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,158,public double[] boundedToUnbounded(double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,160,// map bounded input point to unbounded point
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,161,final double[] mapped = new double[mappers.length];
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,162,for (int i = 0; i < mappers.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,163,mapped[i] = mappers[i].boundedToUnbounded(point[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,166,// call underlying function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,167,return mapped;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,171,/** Compute the underlying function value from an unbounded point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,172,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,173,* This method simply bounds the unbounded point using the mappings
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,174,* set up at construction and calls the underlying function using
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,175,* the bounded point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,176,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,177,* @see #unboundedToBounded(double[])
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,179,public double value(double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,180,return bounded.value(unboundedToBounded(point));
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,183,/** Mapping interface. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,184,private static interface Mapper {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,186,/** Map a value from unbounded to bounded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,187,* @param y unbounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,188,* @return bounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,190,public double unboundedToBounded(double y);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,192,/** Map a value from bounded to unbounded.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,193,* @param x bounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,194,* @return unbounded value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,196,public double boundedToUnbounded(double x);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,200,/** Local class for no bounds mapping. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,201,private static class NoBoundsMapper implements Mapper {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,203,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,205,public NoBoundsMapper() {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,208,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,209,public double unboundedToBounded(final double y) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,210,return y;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,213,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,214,public double boundedToUnbounded(final double x) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,215,return x;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,220,/** Local class for lower bounds mapping. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,221,private static class LowerBoundMapper implements Mapper {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,223,/** Low bound. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,224,private final double lower;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,226,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,227,* @param lower lower bound
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,229,public LowerBoundMapper(final double lower) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,230,this.lower = lower;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,233,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,234,public double unboundedToBounded(final double y) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,235,return lower + FastMath.exp(y);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,238,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,239,public double boundedToUnbounded(final double x) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,240,return FastMath.log(x - lower);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,245,/** Local class for upper bounds mapping. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,246,private static class UpperBoundMapper implements Mapper {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,248,/** Upper bound. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,249,private final double upper;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,251,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,252,* @param upper upper bound
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,254,public UpperBoundMapper(final double upper) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,255,this.upper = upper;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,258,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,259,public double unboundedToBounded(final double y) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,260,return upper - FastMath.exp(-y);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,263,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,264,public double boundedToUnbounded(final double x) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,265,return -FastMath.log(upper - x);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,270,/** Local class for lower and bounds mapping. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,271,private static class LowerUpperBoundMapper implements Mapper {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,273,/** Function from unbounded to bounded. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,274,private final UnivariateRealFunction boundingFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,276,/** Function from bounded to unbounded. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,277,private final UnivariateRealFunction unboundingFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,279,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,280,* @param lower lower bound
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,281,* @param upper upper bound
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,283,"public LowerUpperBoundMapper(final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,284,"boundingFunction   = new Sigmoid(lower, upper);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,285,"unboundingFunction = new Logit(lower, upper);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,288,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,289,public double unboundedToBounded(final double y) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,290,return boundingFunction.value(y);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,293,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,294,public double boundedToUnbounded(final double x) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapter.java,295,return unboundingFunction.value(x);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,18,package org.apache.commons.math.optimization.direct;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,20,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,25,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,28,* <p>Adapter extending bounded {@link MultivariateRealFunction} to an unbouded
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,29,* domain using a penalty function.</p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,31,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,32,* This adapter can be used to wrap functions subject to simple bounds on
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,33,* parameters so they can be used by optimizers that do <em>not</em> directly
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,34,* support simple bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,35,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,36,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,37,* The principle is that the user function that will be wrapped will see its
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,38,"* parameters bounded as required, i.e when its {@code value} method is called"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,39,"* with argument array {@code point}, the elements array will fulfill requirement"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,40,* {@code lower[i] <= point[i] <= upper[i]} for all i. Some of the components
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,41,* may be unbounded or bounded only on one side if the corresponding bound is
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,42,* set to an infinite value. The optimizer will not manage the user function by
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,43,"* itself, but it will handle this adapter and it is this adapter that will take"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,44,* care the bounds are fulfilled. The adapter {@link #value(double[])} method will
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,45,"* be called by the optimizer with unbound parameters, and the adapter will check"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,46,"* if the parameters is within range or not. If it is in range, then the underlying"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,47,"* user function will be called, and if it is not the value of a penalty function"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,48,* will be returned instead.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,49,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,50,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,51,* This adapter is only a poor man solution to simple bounds optimization constraints
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,52,* that can be used with simple optimizers like {@link SimplexOptimizer} with {@link
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,53,* NelderMeadSimplex} or {@link MultiDirectionalSimplex}. A better solution is to use
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,54,* an optimizer that directly supports simple bounds like {@link CMAESOptimizer} or
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,55,* {@link BOBYQAOptimizer}. One caveat of this poor man solution is that if start point
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,56,"* or start simplex is completely outside of the allowed range, only the penalty function"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,57,"* is used, and the optimizer may converge without ever entering the range."
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,58,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,60,* @see MultivariateRealFunctionMappingAdapter
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,62,* @version $Id$
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,63,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,66,public class MultivariateRealFunctionPenaltyAdapter implements MultivariateRealFunction {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,68,/** Underlying bounded function. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,69,private final MultivariateRealFunction bounded;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,71,/** Lower bounds. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,72,private final double[] lower;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,74,/** Upper bounds. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,75,private final double[] upper;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,77,/** Penalty offset. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,78,private final double offset;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,80,/** Penalty scales. */
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,81,private final double[] scale;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,83,/** Simple constructor.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,84,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,85,"* When the optimizer provided points are out of range, the value of the"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,86,* penalty function will be used instead of the value of the underlying
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,87,* function. In order for this penalty to be effective in rejecting this
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,88,"* point during the optimization process, the penalty function value should"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,89,* be defined with care. This value is computed as:
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,90,* <pre>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,91,*   penalty(point) = offset + &sum;<sub>i</sub>[scale[i] * &radic;|point[i]-boundary[i]|]
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,92,* </pre>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,93,* where indices i correspond to all the components that violates their boundaries.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,94,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,95,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,96,"* So when attempting a function minimization, offset should be larger than"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,97,* the maximum expected value of the underlying function and scale components
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,98,"* should all be positive. When attempting a function maximization, offset"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,99,* should be lesser than the minimum expected value of the underlying function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,100,* and scale components should all be negative.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,101,"* minimization, and lesser than the minimum expected value of the underlying"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,102,* function when attempting maximization.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,103,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,104,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,105,"* These choices for the penalty function have two properties. First, all out"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,106,* of range points will return a function value that is worse than the value
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,107,"* returned by any in range point. Second, the penalty is worse for large"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,108,"* boundaries violation than for small violations, so the optimizer has an hint"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,109,* about the direction in which it should search for acceptable points.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,110,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,111,* @param bounded bounded function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,112,* @param lower lower bounds for each element of the input parameters array
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,113,* (some elements may be set to {@code Double.NEGATIVE_INFINITY} for
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,114,* unbounded values)
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,115,* @param upper upper bounds for each element of the input parameters array
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,116,* (some elements may be set to {@code Double.POSITIVE_INFINITY} for
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,117,* unbounded values)
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,118,* @param offset base offset of the penalty function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,119,* @param scale scale of the penalty function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,120,"* @exception MathIllegalArgumentException if lower bounds, upper bounds and"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,121,"* scales are not consistent, either according to dimension or to bounadary"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,122,* values
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,124,"public MultivariateRealFunctionPenaltyAdapter(final MultivariateRealFunction bounded,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,125,"final double[] lower, final double[] upper,"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,126,"final double offset, final double[] scale) {"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,128,// safety checks
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,129,MathUtils.checkNotNull(lower);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,130,MathUtils.checkNotNull(upper);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,131,MathUtils.checkNotNull(scale);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,132,if (lower.length != upper.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,133,"throw new DimensionMismatchException(lower.length, upper.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,135,if (lower.length != scale.length) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,136,"throw new DimensionMismatchException(lower.length, scale.length);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,138,for (int i = 0; i < lower.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,139,// note the following test is written in such a way it also fails for NaN
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,140,if (!(upper[i] >= lower[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,141,"throw new NumberIsTooSmallException(upper[i], lower[i], true);"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,145,this.bounded = bounded;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,146,this.lower   = lower.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,147,this.upper   = upper.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,148,this.offset  = offset;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,149,this.scale   = scale.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,153,/** Compute the underlying function value from an unbounded point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,154,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,155,* This method simply bounds the unbounded point using the mappings
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,156,* set up at construction and calls the underlying function using
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,157,* the bounded point.
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,158,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,159,* @see #unboundedToBounded(double[])
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,161,public double value(double[] point) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,163,for (int i = 0; i < scale.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,164,if ((point[i] < lower[i]) || (point[i] > upper[i])) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,165,// bound violation starting at this component
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,166,double sum = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,167,for (int j = i; j < scale.length; ++j) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,168,final double overshoot;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,169,if (point[j] < lower[j]) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,170,overshoot = lower[j] - point[j];
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,171,} else if (point[j] > upper[j]) {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,172,overshoot = point[j] - upper[j];
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,173,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,174,overshoot = 0;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,176,sum += FastMath.sqrt(overshoot);
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,178,return offset + sum;
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,182,"// all boundaries are fulfilled, we are in the expected"
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,183,// domain of the underlying function
True,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,src/main/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapter.java,184,return bounded.value(point);
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,69,* <p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,70,* This simplex optimizer implementation does not directly support constrained
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,71,"* optimization with simple bounds, so for such optimizations, either a more"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,72,* dedicated method must be used like {@link CMAESOptimizer} or {@link
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,73,"* BOBYQAOptimizer}, or the optimized method must be wrapped in an adapter like"
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,74,* {@link MultivariateRealFunctionMappingAdapter} or {@link
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,75,* MultivariateRealFunctionPenaltyAdapter}.
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,76,* </p>
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,79,* @see MultivariateRealFunctionMappingAdapter
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,80,* @see MultivariateRealFunctionPenaltyAdapter
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,81,* @see CMAESOptimizer
True,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java,82,* @see BOBYQAOptimizer
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,22,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,23,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,27,public class MultivariateRealFunctionMappingAdapterTest {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,29,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,30,public void testStartSimplexInsideRange() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,32,"final BiQuadratic biQuadratic = new BiQuadratic(2.0, 2.5, 1.0, 3.0, 2.0, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,33,final MultivariateRealFunctionMappingAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,34,"new MultivariateRealFunctionMappingAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,35,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,36,biQuadratic.getUpper());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,38,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,39,optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,40,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.75 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,41,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.95 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,42,"wrapped.boundedToUnbounded(new double[] { 1.7, 2.90 })"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,45,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,46,"= optimizer.optimize(300, wrapped, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,47,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.25 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,48,final double[] bounded = wrapped.unboundedToBounded(optimum.getPoint());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,50,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), bounded[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,51,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), bounded[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,55,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,56,public void testOptimumOutsideRange() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,58,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 0.0, 1.0, 3.0, 2.0, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,59,final MultivariateRealFunctionMappingAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,60,"new MultivariateRealFunctionMappingAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,61,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,62,biQuadratic.getUpper());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,64,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,65,optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,66,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.75 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,67,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.95 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,68,"wrapped.boundedToUnbounded(new double[] { 1.7, 2.90 })"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,71,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,72,"= optimizer.optimize(100, wrapped, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,73,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.25 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,74,final double[] bounded = wrapped.unboundedToBounded(optimum.getPoint());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,76,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), bounded[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,77,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), bounded[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,81,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,82,public void testUnbounded() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,84,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 0.0,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,85,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,86,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,87,final MultivariateRealFunctionMappingAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,88,"new MultivariateRealFunctionMappingAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,89,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,90,biQuadratic.getUpper());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,92,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,93,optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,94,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.75 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,95,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.95 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,96,"wrapped.boundedToUnbounded(new double[] { 1.7, 2.90 })"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,99,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,100,"= optimizer.optimize(300, wrapped, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,101,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.25 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,102,final double[] bounded = wrapped.unboundedToBounded(optimum.getPoint());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,104,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), bounded[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,105,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), bounded[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,109,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,110,public void testHalfBounded() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,112,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 4.0,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,113,"1.0, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,114,"Double.NEGATIVE_INFINITY, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,115,final MultivariateRealFunctionMappingAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,116,"new MultivariateRealFunctionMappingAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,117,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,118,biQuadratic.getUpper());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,120,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-13, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,121,optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,122,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.75 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,123,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.95 }),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,124,"wrapped.boundedToUnbounded(new double[] { 1.7, 2.90 })"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,127,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,128,"= optimizer.optimize(200, wrapped, GoalType.MINIMIZE,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,129,"wrapped.boundedToUnbounded(new double[] { 1.5, 2.25 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,130,final double[] bounded = wrapped.unboundedToBounded(optimum.getPoint());
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,132,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), bounded[0], 1e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,133,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), bounded[1], 1e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,137,private static class BiQuadratic implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,139,private final double xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,140,private final double yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,142,private final double xMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,143,private final double xMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,144,private final double yMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,145,private final double yMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,147,"public BiQuadratic(final double xOptimum, final double yOptimum,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,148,"final double xMin, final double xMax,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,149,"final double yMin, final double yMax) {"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,150,this.xOptimum = xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,151,this.yOptimum = yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,152,this.xMin     = xMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,153,this.xMax     = xMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,154,this.yMin     = yMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,155,this.yMax     = yMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,158,public double value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,160,// the function should never be called with out of range points
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,161,Assert.assertTrue(point[0] >= xMin);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,162,Assert.assertTrue(point[0] <= xMax);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,163,Assert.assertTrue(point[1] >= yMin);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,164,Assert.assertTrue(point[1] <= yMax);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,166,final double dx = point[0] - xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,167,final double dy = point[1] - yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,168,return dx * dx + dy * dy;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,172,public double[] getLower() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,173,"return new double[] { xMin, yMin };"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,176,public double[] getUpper() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,177,"return new double[] { xMax, yMax };"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,180,public double getBoundedXOptimum() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,181,return (xOptimum < xMin) ? xMin : ((xOptimum > xMax) ? xMax : xOptimum);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,184,public double getBoundedYOptimum() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionMappingAdapterTest.java,185,return (yOptimum < yMin) ? yMin : ((yOptimum > yMax) ? yMax : yOptimum);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,22,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,23,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,24,import org.apache.commons.math.optimization.SimpleRealPointChecker;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,28,public class MultivariateRealFunctionPenaltyAdapterTest {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,30,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,31,public void testStartSimplexInsideRange() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,33,"final BiQuadratic biQuadratic = new BiQuadratic(2.0, 2.5, 1.0, 3.0, 2.0, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,34,final MultivariateRealFunctionPenaltyAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,35,"new MultivariateRealFunctionPenaltyAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,36,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,37,"biQuadratic.getUpper(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,38,"1000.0, new double[] { 100.0, 100.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,40,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,41,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 1.0, 0.5 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,43,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,44,"= optimizer.optimize(300, wrapped, GoalType.MINIMIZE, new double[] { 1.5, 2.25 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,46,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,47,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), optimum.getPoint()[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,51,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,52,public void testStartSimplexOutsideRange() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,54,"final BiQuadratic biQuadratic = new BiQuadratic(2.0, 2.5, 1.0, 3.0, 2.0, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,55,final MultivariateRealFunctionPenaltyAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,56,"new MultivariateRealFunctionPenaltyAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,57,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,58,"biQuadratic.getUpper(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,59,"1000.0, new double[] { 100.0, 100.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,61,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,62,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 1.0, 0.5 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,64,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,65,"= optimizer.optimize(300, wrapped, GoalType.MINIMIZE, new double[] { -1.5, 4.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,67,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,68,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), optimum.getPoint()[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,72,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,73,public void testOptimumOutsideRange() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,75,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 0.0, 1.0, 3.0, 2.0, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,76,final MultivariateRealFunctionPenaltyAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,77,"new MultivariateRealFunctionPenaltyAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,78,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,79,"biQuadratic.getUpper(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,80,"1000.0, new double[] { 100.0, 100.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,82,"SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleRealPointChecker(1.0e-11, 1.0e-20));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,83,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 1.0, 0.5 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,85,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,86,"= optimizer.optimize(600, wrapped, GoalType.MINIMIZE, new double[] { -1.5, 4.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,88,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,89,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), optimum.getPoint()[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,93,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,94,public void testUnbounded() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,96,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 0.0,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,97,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,98,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,99,final MultivariateRealFunctionPenaltyAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,100,"new MultivariateRealFunctionPenaltyAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,101,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,102,"biQuadratic.getUpper(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,103,"1000.0, new double[] { 100.0, 100.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,105,"SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,106,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 1.0, 0.5 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,108,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,109,"= optimizer.optimize(300, wrapped, GoalType.MINIMIZE, new double[] { -1.5, 4.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,111,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,112,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), optimum.getPoint()[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,116,@Test
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,117,public void testHalfBounded() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,119,"final BiQuadratic biQuadratic = new BiQuadratic(4.0, 4.0,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,120,"1.0, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,121,"Double.NEGATIVE_INFINITY, 3.0);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,122,final MultivariateRealFunctionPenaltyAdapter wrapped =
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,123,"new MultivariateRealFunctionPenaltyAdapter(biQuadratic,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,124,"biQuadratic.getLower(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,125,"biQuadratic.getUpper(),"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,126,"1000.0, new double[] { 100.0, 100.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,128,"SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleRealPointChecker(1.0e-10, 1.0e-20));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,129,"optimizer.setSimplex(new NelderMeadSimplex(new double[] { 1.0, 0.5 }));"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,131,final RealPointValuePair optimum
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,132,"= optimizer.optimize(400, wrapped, GoalType.MINIMIZE, new double[] { -1.5, 4.0 });"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,134,"Assert.assertEquals(biQuadratic.getBoundedXOptimum(), optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,135,"Assert.assertEquals(biQuadratic.getBoundedYOptimum(), optimum.getPoint()[1], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,139,private static class BiQuadratic implements MultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,141,private final double xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,142,private final double yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,144,private final double xMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,145,private final double xMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,146,private final double yMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,147,private final double yMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,149,"public BiQuadratic(final double xOptimum, final double yOptimum,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,150,"final double xMin, final double xMax,"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,151,"final double yMin, final double yMax) {"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,152,this.xOptimum = xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,153,this.yOptimum = yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,154,this.xMin     = xMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,155,this.xMax     = xMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,156,this.yMin     = yMin;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,157,this.yMax     = yMax;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,160,public double value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,162,// the function should never be called with out of range points
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,163,Assert.assertTrue(point[0] >= xMin);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,164,Assert.assertTrue(point[0] <= xMax);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,165,Assert.assertTrue(point[1] >= yMin);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,166,Assert.assertTrue(point[1] <= yMax);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,168,final double dx = point[0] - xOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,169,final double dy = point[1] - yOptimum;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,170,return dx * dx + dy * dy;
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,174,public double[] getLower() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,175,"return new double[] { xMin, yMin };"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,178,public double[] getUpper() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,179,"return new double[] { xMax, yMax };"
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,182,public double getBoundedXOptimum() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,183,return (xOptimum < xMin) ? xMin : ((xOptimum > xMax) ? xMax : xOptimum);
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,186,public double getBoundedYOptimum() {
True,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultivariateRealFunctionPenaltyAdapterTest.java,187,return (yOptimum < yMin) ? yMin : ((yOptimum > yMax) ? yMax : yOptimum);

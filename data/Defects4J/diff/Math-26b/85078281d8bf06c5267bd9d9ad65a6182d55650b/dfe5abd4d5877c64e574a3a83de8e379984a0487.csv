is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,22,import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,23,import org.apache.commons.math.stat.descriptive.moment.Mean;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,24,import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,25,import org.apache.commons.math.stat.descriptive.moment.Variance;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,26,import org.apache.commons.math.stat.descriptive.rank.Max;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,27,import org.apache.commons.math.stat.descriptive.rank.Min;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,28,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,29,import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,30,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,25, Abstract factory class for univariate statistical summaries.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,34,* <p>Computes summary statistics for a stream of data values added using the
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,35,* {@link #addValue(double) addValue} method. The data values are not stored in
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,36,"* memory, so this class can be used to compute statistics for very large"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,37,* data streams.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,39,* <p>The {@link StorelessUnivariateStatistic} instances used to maintain
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,40,* summary state and compute statistics are configurable via setters.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,41,"* For example, the default implementation for the variance can be overridden by"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,42,* calling {@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,43,* parameters to these methods must implement the
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,44,* {@link StorelessUnivariateStatistic} interface and configuration must be
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,45,* completed before <code>addValue</code> is called. No configuration is
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,46,"* necessary to use the default, commons-math provided implementations.</p>"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,48,* <p>Note: This class is not thread-safe. Use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,49,* {@link SynchronizedSummaryStatistics} if concurrent access from multiple
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,50,* threads is required.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,29,"ublic abstract class SummaryStatistics implements StatisticalSummary, Serializable {"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,54,"public class SummaryStatistics implements StatisticalSummary, Serializable {"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,32,rivate static final long serialVersionUID = -6400596334135654825L;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,57,private static final long serialVersionUID = -3346512372447011854L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,39, @return a new factory.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,64,* @return a new instance.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,65,* @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,53, @return a new SummaryStatistics instance.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,79,* @return a new SummaryStatistics instance.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,80,* @deprecated to be removed in commons-math 2.0
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,96,* Construct a SummaryStatistics instance
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,98,public SummaryStatistics() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,101,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,102,protected long n = 0;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,104,/** SecondMoment is used to compute the mean and variance */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,105,protected SecondMoment secondMoment = new SecondMoment();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,107,/** sum of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,108,protected Sum sum = new Sum();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,110,/** sum of the square of each value that has been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,111,protected SumOfSquares sumsq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,113,/** min of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,114,protected Min min = new Min();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,116,/** max of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,117,protected Max max = new Max();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,119,/** sumLog of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,120,protected SumOfLogs sumLog = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,122,/** geoMean of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,123,protected GeometricMean geoMean = new GeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,125,/** mean of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,126,protected Mean mean = new Mean();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,128,/** variance of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,129,protected Variance variance = new Variance();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,131,//  Statistics implementations - can be reset by setters
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,132,private StorelessUnivariateStatistic sumImpl = sum;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,133,private StorelessUnivariateStatistic sumsqImpl = sumsq;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,134,private StorelessUnivariateStatistic minImpl = min;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,135,private StorelessUnivariateStatistic maxImpl = max;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,136,private StorelessUnivariateStatistic sumLogImpl = sumLog;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,137,private StorelessUnivariateStatistic geoMeanImpl = geoMean;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,138,private StorelessUnivariateStatistic meanImpl = mean;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,139,private StorelessUnivariateStatistic varianceImpl = variance;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,81, Adds the value to the data to be summarized
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,82, @param v the value to be added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,153,* Add a value to the data
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,155,* @param value  the value to add
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,84,ublic abstract void addValue(double v);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,157,public void addValue(double value) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,158,sumImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,159,sumsqImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,160,minImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,161,maxImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,162,sumLogImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,163,geoMean.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,164,secondMoment.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,165,"// If mean or variance have been overridden,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,166,"// need to increment these, since they don't have secondMoment"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,167,if (!(meanImpl instanceof Mean)) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,168,meanImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,170,if (!(varianceImpl instanceof Variance)) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,171,varianceImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,173,n++;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,87," Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,88, arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,89, @return The mean or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,177,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,178,* @return The number of available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,91,ublic abstract double getMean();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,180,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,181,return n;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,94," Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,95, geometric mean </a> of the available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,96," @return The geometricMean, Double.NaN if no values have been added,"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,97, or if the productof the available values is less than or equal to 0.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,185,* Returns the sum of the values that have been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,186,* @return The sum or <code>Double.NaN</code> if no values have been added
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,99,ublic abstract double getGeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,188,public double getSum() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,189,return sumImpl.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,102, Returns the variance of the available values.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,103," @return The variance, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,104, or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,193,* Returns the sum of the squares of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,194,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,195,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,197,* @return The sum of squares
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,106,ublic abstract double getVariance();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,199,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,200,return sumsqImpl.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,109, Returns the standard deviation of the available values.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,110," @return The standard deviation, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,111, or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,204,* Returns the mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,205,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,206,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,208,* @return the mean
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,113,ublic abstract double getStandardDeviation();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,116, Returns the maximum of the available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,117, @return The max or Double.NaN if no values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,210,public double getMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,211,if (mean == meanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,212,return new Mean(secondMoment).getResult();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,213,} else {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,214,return meanImpl.getResult();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,219,* Returns the standard deviation of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,220,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,221,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,223,* @return the standard deviation
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,119,ublic abstract double getMax();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,225,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,226,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,227,if (getN() > 0) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,228,if (getN() > 1) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,229,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,230,} else {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,231,stdDev = 0.0;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,234,return (stdDev);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,122, Returns the minimum of the available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,123, @return The min or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,125,ublic abstract double getMin();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,238,* Returns the variance of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,239,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,240,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,242,* @return the variance
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,244,public double getVariance() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,245,if (varianceImpl == variance) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,246,return new Variance(secondMoment).getResult();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,247,} else {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,248,return varianceImpl.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,128, Returns the number of available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,129, @return The number of available values
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,253,* Returns the maximum of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,254,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,255,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,257,* @return the maximum
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,131,ublic abstract long getN();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,259,public double getMax() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,260,return maxImpl.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,134, Returns the sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,135, @return The sum or Double.NaN if no values have been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,264,* Returns the minimum of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,265,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,266,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,268,* @return the minimum
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,137,ublic abstract double getSum();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,270,public double getMin() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,271,return minImpl.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,140, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,141, @return The sum of the squares or Double.NaN if no
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,142, values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,275,* Returns the geometric mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,276,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,277,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,279,* @return the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,281,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,282,return geoMeanImpl.getResult();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,286,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,287,* summary statistics from values that
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,288,* have been added.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,289,* @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,144,ublic abstract double getSumsq();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,291,public String toString() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,292,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,293,"outBuffer.append(""SummaryStatistics:\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,294,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,295,"outBuffer.append(""min: "" + getMin() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,296,"outBuffer.append(""max: "" + getMax() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,297,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,298,"outBuffer.append(""geometric mean: "" + getGeometricMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,299,"outBuffer.append(""variance: "" + getVariance() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,300,"outBuffer.append(""sum of squares: "" + getSumsq() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,301,"outBuffer.append(""standard deviation: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,302,return outBuffer.toString();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,147, Resets all statistics
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,306,* Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,149,ublic abstract void clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,308,public void clear() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,309,this.n = 0;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,310,minImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,311,maxImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,312,sumImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,313,sumLogImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,314,sumsqImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,315,geoMeanImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,316,secondMoment.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,317,if (meanImpl != mean) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,318,meanImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,320,if (varianceImpl != variance) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,321,varianceImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,368,// Getters and setters for statistics implementations
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,370,* Returns the currently configured Sum implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,372,* @return the StorelessUnivariateStatistic implementing the sum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,374,public synchronized StorelessUnivariateStatistic getSumImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,375,return sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,379,* <p>Sets the implementation for the Sum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,380,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,381,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,382,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,384,* @param sumImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,385,* for computing the Sum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,386,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,387,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,389,public synchronized void setSumImpl(StorelessUnivariateStatistic sumImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,390,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,391,this.sumImpl = sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,395,* Returns the currently configured sum of squares implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,397,* @return the StorelessUnivariateStatistic implementing the sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,399,public synchronized StorelessUnivariateStatistic getSumsqImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,400,return sumsqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,404,* <p>Sets the implementation for the sum of squares.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,405,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,406,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,407,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,409,* @param sumsqImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,410,* for computing the sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,411,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,412,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,414,public synchronized void setSumsqImpl(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,415,StorelessUnivariateStatistic sumsqImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,416,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,417,this.sumsqImpl = sumsqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,421,* Returns the currently configured minimum implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,423,* @return the StorelessUnivariateStatistic implementing the minimum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,425,public synchronized StorelessUnivariateStatistic getMinImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,426,return minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,430,* <p>Sets the implementation for the minimum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,431,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,432,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,433,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,435,* @param minImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,436,* for computing the minimum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,437,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,438,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,440,public synchronized void setMinImpl(StorelessUnivariateStatistic minImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,441,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,442,this.minImpl = minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,446,* Returns the currently configured maximum implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,448,* @return the StorelessUnivariateStatistic implementing the maximum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,450,public synchronized StorelessUnivariateStatistic getMaxImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,451,return maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,455,* <p>Sets the implementation for the maximum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,456,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,457,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,458,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,460,* @param maxImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,461,* for computing the maximum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,462,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,463,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,465,public synchronized void setMaxImpl(StorelessUnivariateStatistic maxImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,466,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,467,this.maxImpl = maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,471,* Returns the currently configured sum of logs implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,473,* @return the StorelessUnivariateStatistic implementing the log sum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,475,public synchronized StorelessUnivariateStatistic getSumLogImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,476,return sumLogImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,480,* <p>Sets the implementation for the sum of logs.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,481,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,482,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,483,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,485,* @param sumLogImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,486,* for computing the log sum
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,487,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,488,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,490,public synchronized void setSumLogImpl(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,491,StorelessUnivariateStatistic sumLogImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,492,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,493,this.sumLogImpl = sumLogImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,497,* Returns the currently configured geometric mean implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,499,* @return the StorelessUnivariateStatistic implementing the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,501,public synchronized StorelessUnivariateStatistic getGeoMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,502,return geoMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,506,* <p>Sets the implementation for the geometric mean.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,507,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,508,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,509,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,511,* @param geoMeanImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,512,* for computing the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,513,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,514,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,516,public synchronized void setGeoMeanImpl(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,517,StorelessUnivariateStatistic geoMeanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,518,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,519,this.geoMeanImpl = geoMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,523,* Returns the currently configured mean implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,525,* @return the StorelessUnivariateStatistic implementing the mean
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,527,public synchronized StorelessUnivariateStatistic getMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,528,return meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,532,* <p>Sets the implementation for the mean.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,533,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,534,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,535,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,537,* @param meanImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,538,* for computing the mean
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,539,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,540,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,542,public synchronized void setMeanImpl(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,543,StorelessUnivariateStatistic meanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,544,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,545,this.meanImpl = meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,549,* Returns the currently configured variance implementation
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,551,* @return the StorelessUnivariateStatistic implementing the variance
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,553,public synchronized StorelessUnivariateStatistic getVarianceImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,554,return varianceImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,558,* <p>Sets the implementation for the variance.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,559,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,560,* before {@link #addValue(double) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,561,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,563,* @param varianceImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,564,* for computing the variance
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,565,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,566,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,568,public synchronized void setVarianceImpl(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,569,StorelessUnivariateStatistic varianceImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,570,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,571,this.varianceImpl = varianceImpl;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,575,* Throws IllegalStateException if n > 0.
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,577,private void checkEmpty() {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,578,if (n > 0) {
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,579,throw new IllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,580,"""Implementations must be configured before values are added."");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,20,mport org.apache.commons.math.stat.descriptive.moment.SecondMoment;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,21,mport org.apache.commons.math.stat.descriptive.moment.GeometricMean;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,22,mport org.apache.commons.math.stat.descriptive.moment.Mean;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,23,mport org.apache.commons.math.stat.descriptive.moment.Variance;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,24,mport org.apache.commons.math.stat.descriptive.rank.Max;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,25,mport org.apache.commons.math.stat.descriptive.rank.Min;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,26,mport org.apache.commons.math.stat.descriptive.summary.Sum;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,27,mport org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,28,mport org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,24,* @deprecated to be removed in commons math 2.0.  Use {@link SummaryStatistics}.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,38,rivate static final long serialVersionUID = 8787174276883311692L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,40,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,41,rotected long n = 0;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,43,** SecondMoment is used to compute the mean and variance */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,44,rotected SecondMoment secondMoment = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,46,** sum of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,47,rotected Sum sum = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,49,** sum of the square of each value that has been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,50,rotected SumOfSquares sumsq = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,52,** min of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,53,rotected Min min = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,55,** max of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,56,rotected Max max = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,58,** sumLog of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,59,rotected SumOfLogs sumLog = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,61,** geoMean of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,62,rotected GeometricMean geoMean = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,64,** mean of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,65,rotected Mean mean = null;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,67,** variance of values that have been added */
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,68,rotected Variance variance = null;
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,30,private static final long serialVersionUID = 8528794411480425963L;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,74,um = new Sum();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,75,umsq = new SumOfSquares();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,76,in = new Min();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,77,ax = new Max();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,78,umLog = new SumOfLogs();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,79,eoMean = new GeometricMean();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,80,econdMoment = new SecondMoment();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,84, Add a value to the data
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,86, @param value  the value to add
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,88,ublic void addValue(double value) {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,89,um.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,90,umsq.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,91,in.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,92,ax.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,93,umLog.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,94,eoMean.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,95,econdMoment.increment(value);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,96,++;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,100, Returns the number of available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,101, @return The number of available values
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,103,ublic long getN() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,104,eturn n;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,108, Returns the sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,109, @return The sum or Double.NaN if no values have been added
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,111,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,112,eturn sum.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,116, Returns the sum of the squares of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,117, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,118,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,120, @return The sum of squares
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,122,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,123,eturn sumsq.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,127, Returns the mean of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,128, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,129,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,131, @return the mean
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,133,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,134,eturn new Mean(secondMoment).getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,138, Returns the standard deviation of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,139, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,140,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,142, @return the standard deviation
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,144,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,145,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,146,f (getN() > 0) {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,147,f (getN() > 1) {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,148,tdDev = Math.sqrt(getVariance());
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,149, else {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,150,tdDev = 0.0;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,153,eturn (stdDev);
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,157, Returns the variance of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,158, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,159,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,161, @return the variance
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,163,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,164,eturn new Variance(secondMoment).getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,168, Returns the maximum of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,169, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,170,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,172, @return the maximum
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,174,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,175,eturn max.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,179, Returns the minimum of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,180, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,181,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,183, @return the minimum
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,185,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,186,eturn min.getResult();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,190, Returns the geometric mean of the values that have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,191, <p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,192,  Double.NaN is returned if no values have been added.</p>
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,194, @return the geometric mean
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,196,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,197,eturn geoMean.getResult();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,36,super();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,201, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,202, summary statistics from values that
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,203, have been added.
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,204, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,206,ublic String toString() {
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,207,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,208,"utBuffer.append(""SummaryStatistics:\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,209,"utBuffer.append(""n: "" + getN() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,210,"utBuffer.append(""min: "" + getMin() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,211,"utBuffer.append(""max: "" + getMax() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,212,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,213,"utBuffer.append(""geometric mean: "" + getGeometricMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,214,"utBuffer.append(""variance: "" + getVariance() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,215,"utBuffer.append(""sum of squares: "" + getSumsq() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,216,"utBuffer.append(""standard deviation: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,217,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,221, Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,224,his.n = 0;
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,225,in.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,226,ax.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,227,um.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,228,umLog.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,229,umsq.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,230,eoMean.clear();
False,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,231,econdMoment.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java,40,super.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,17,package org.apache.commons.math.stat.descriptive;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,24,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,25,import org.apache.commons.math.stat.descriptive.moment.Mean;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,27,* Test cases for the {@link SummaryStatistics} class.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,28,"* When SummaryStatisticsImpl is removed in math 2.0, test cases from"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,29,* SummaryStatisticsImplTest should be merged into this class.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,31,"* @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,34,public final class SummaryStatisticsTest extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,36,protected SummaryStatistics u = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,38,public SummaryStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,39,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,42,public void setUp() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,43,u = new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,46,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,47,TestSuite suite = new TestSuite(SummaryStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,48,"suite.setName(""SummaryStatistics tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,49,return suite;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,52,public void testSetterInjection() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,53,u.setMeanImpl(new sumMean());
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,54,u.addValue(1);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,55,u.addValue(3);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,56,"assertEquals(4, u.getMean(), 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,57,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,58,u.addValue(1);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,59,u.addValue(2);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,60,"assertEquals(3, u.getMean(), 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,61,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,62,u.setMeanImpl(new Mean()); // OK after clear
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,65,public void testSetterIllegalState() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,66,u.addValue(1);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,67,u.addValue(3);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,68,try {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,69,u.setMeanImpl(new sumMean());
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,70,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,71,} catch (IllegalStateException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,72,// expected
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,77,* Bogus mean implementation to test setter injection.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,78,* Returns the sum instead of the mean.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,80,class sumMean implements StorelessUnivariateStatistic {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,81,private double sum = 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,82,private long n = 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,83,"public double evaluate(double[] values, int begin, int length) {"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,84,return 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,86,public double evaluate(double[] values) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,87,return 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,89,public void clear() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,90,sum = 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,91,n = 0;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,93,public long getN() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,94,return n;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,96,public double getResult() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,97,return sum;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,99,public void increment(double d) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,100,sum += d;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,101,n++;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,103,"public void incrementAll(double[] values, int start, int length) {"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,105,public void incrementAll(double[] values) {

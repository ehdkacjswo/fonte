is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,170,"eturn FastFourierTransformer.scaleArray(fct(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,170,"return TransformUtils.scaleArray(fct(f), s);"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,206,"eturn FastFourierTransformer.scaleArray(fct(f), s1);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,206,"return TransformUtils.scaleArray(fct(f), s1);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,157,"eturn scaleArray(fft(f, false), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,157,"return TransformUtils.scaleArray(fft(f, false), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,187,"eturn scaleArray(fft(data, false), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,187,"return TransformUtils.scaleArray(fft(data, false), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,207,"eturn scaleArray(fft(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,207,"return TransformUtils.scaleArray(fft(f), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,224,"eturn scaleArray(fft(f, true), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,224,"return TransformUtils.scaleArray(fft(f, true), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,251,"eturn scaleArray(fft(data, true), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,251,"return TransformUtils.scaleArray(fft(data, true), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,267,"eturn scaleArray(fft(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,267,"return TransformUtils.scaleArray(fft(f), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,319,"eturn scaleArray(transformed, 0.5);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,319,"return TransformUtils.scaleArray(transformed, 0.5);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,405, Multiply every component in the given real array by the
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,406, given real number. The change is made in place.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,408, @param f the real array to be scaled
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,409, @param d the real scaling coefficient
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,410, @return a reference to the scaled array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,412,"ublic static double[] scaleArray(double[] f, double d) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,414,or (int i = 0; i < f.length; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,415,[i] *= d;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,417,eturn f;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,421, Multiply every component in the given complex array by the
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,422, given real number. The change is made in place.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,424, @param f the complex array to be scaled
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,425, @param d the real scaling coefficient
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,426, @return a reference to the scaled array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,428,"ublic static Complex[] scaleArray(Complex[] f, double d) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,430,or (int i = 0; i < f.length; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,431,"[i] = new Complex(d * f[i].getReal(), d * f[i].getImaginary());"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,433,eturn f;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,78,"eturn FastFourierTransformer.scaleArray(fht(f), 1.0 / f.length);"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,78,"return TransformUtils.scaleArray(fht(f), 1.0 / f.length);"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,99,"eturn FastFourierTransformer.scaleArray(unscaled, 1.0 / n);"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,99,"return TransformUtils.scaleArray(unscaled, 1.0 / n);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,171,"eturn FastFourierTransformer.scaleArray(fst(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,171,"return TransformUtils.scaleArray(fst(f), s);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,198,"eturn FastFourierTransformer.scaleArray(fst(data), s);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,198,"return TransformUtils.scaleArray(fst(data), s);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,218,"eturn FastFourierTransformer.scaleArray(fst(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,218,"return TransformUtils.scaleArray(fst(f), s);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,247,"eturn FastFourierTransformer.scaleArray(fst(data), s);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,247,"return TransformUtils.scaleArray(fst(data), s);"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,17,package org.apache.commons.math.transform;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,19,import org.apache.commons.math.complex.Complex;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,22,* Useful functions for the implementation of various transforms.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,24,public class TransformUtils {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,25,/** Private constructor. */
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,26,private TransformUtils() {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,27,super();
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,31,* Multiply every component in the given real array by the
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,32,* given real number. The change is made in place.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,34,* @param f the real array to be scaled
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,35,* @param d the real scaling coefficient
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,36,* @return a reference to the scaled array
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,38,"public static double[] scaleArray(double[] f, double d) {"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,40,for (int i = 0; i < f.length; i++) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,41,f[i] *= d;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,43,return f;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,47,* Multiply every component in the given complex array by the
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,48,* given real number. The change is made in place.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,50,* @param f the complex array to be scaled
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,51,* @param d the real scaling coefficient
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,52,* @return a reference to the scaled array
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,54,"public static Complex[] scaleArray(Complex[] f, double d) {"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,56,for (int i = 0; i < f.length; i++) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,57,"f[i] = new Complex(d * f[i].getReal(), d * f[i].getImaginary());"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,59,return f;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,57,"astFourierTransformer.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,57,"TransformUtils.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,67,"astFourierTransformer.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,67,"TransformUtils.scaleArray(x2, 1.0 / FastMath.sqrt(x2.length));"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,96,astFourierTransformer.scaleArray(
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,96,TransformUtils.scaleArray(
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,57,"astFourierTransformer.scaleArray(x, FastMath.sqrt(x.length / 2.0));"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,57,"TransformUtils.scaleArray(x, FastMath.sqrt(x.length / 2.0));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,35,** Default amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,/** Default amount of error to accept for algorithm convergence. */
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,38,** Amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,39,/** Amount of error to accept for algorithm convergence. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,42,/** Default amount of error to accept in floating point comparisons (as ulps). */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,43,private static final int DEFAULT_ULPS = 10;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,45,/** Amount of error to accept in floating point comparisons (as ulps). */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,46,protected final int maxUlps;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,45,his(DEFAULT_EPSILON);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,52,"this(DEFAULT_EPSILON, DEFAULT_ULPS);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,50, @param epsilon the amount of error to accept in floating point comparisons
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,57,* @param epsilon the amount of error to accept for algorithm convergence
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,58,* @param maxUlps amount of error to accept in floating point comparisons
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,52,ublic SimplexSolver(final double epsilon) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,60,"public SimplexSolver(final double epsilon, final int maxUlps) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,62,this.maxUlps = maxUlps;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,65,"f (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,66,"inValue = tableau.getEntry(0, i);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,74,"final double entry = tableau.getEntry(0, i);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,75,"if (MathUtils.compareTo(entry, minValue, getEpsilon(entry)) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,76,minValue = entry;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,86,"f (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,97,"if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,88,"f (MathUtils.equals(ratio, minRatio, epsilon)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,99,"final int cmp = MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,100,if (cmp == 0) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,90, else if (ratio < minRatio) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,102,} else if (cmp < 0) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,106,"f (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) &&"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,"final double entry = tableau.getEntry(row, column);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,119,"if (MathUtils.equals(entry, 1d, getEpsilon(entry)) &&"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,165,"f (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,178,"if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,174,"ew SimplexTableau(function, linearConstraints, goal, nonNegative, epsilon);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,187,"new SimplexTableau(function, linearConstraints, goal, nonNegative,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,188,"epsilon, maxUlps);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,200,* Get an epsilon that is adjusted to the magnitude of the given value.
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,201,* @param value the value for which to get the epsilon
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,202,* @return magnitude-adjusted epsilon using {@link FastMath.ulp}
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,204,private double getEpsilon(double value) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,205,return FastMath.ulp(value) * (double) maxUlps;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,36,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,69,/** Default amount of error to accept in floating point comparisons (as ulps). */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,70,private static final int DEFAULT_ULPS = 10;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,95,** Amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,99,/** Amount of error to accept when checking for optimality. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,102,/** Amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,103,private final int maxUlps;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,105, @param epsilon amount of error to accept in floating point comparisons
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,112,* @param epsilon amount of error to accept when checking for optimality
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,118,"this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,122,* Build a tableau for a linear problem.
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,123,* @param f linear objective function
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,124,* @param constraints linear constraints
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,125,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,126,* or {@link GoalType#MINIMIZE}
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,127,* @param restrictToNonNegative whether to restrict the variables to non-negative values
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,128,* @param epsilon amount of error to accept when checking for optimality
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,129,* @param maxUlps amount of error to accept in floating point comparisons
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,131,"SimplexTableau(final LinearObjectiveFunction f,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,132,"final Collection<LinearConstraint> constraints,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,133,"final GoalType goalType, final boolean restrictToNonNegative,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,134,"final double epsilon,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,135,final int maxUlps) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,140,this.maxUlps                = maxUlps;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,175,etInvertedCoeffiecientSum(objectiveCoefficients));
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,201,getInvertedCoefficientSum(objectiveCoefficients));
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,191,etInvertedCoeffiecientSum(constraint.getCoefficients()));
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,217,getInvertedCoefficientSum(constraint.getCoefficients()));
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,272,rotected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,298,protected static double getInvertedCoefficientSum(final RealVector coefficients) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,288,"f (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,"final double entry = getEntry(i, col);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,315,"if (MathUtils.equals(entry, 1d, getEpsilon(entry)) && (row == null)) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,290," else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,317,"} else if (!MathUtils.equals(entry, 0d, getEpsilon(entry))) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,311,"f (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,312,olumnsToDrop.add(i);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,338,"final double entry = tableau.getEntry(0, i);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,339,"if (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,340,columnsToDrop.add(i);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,356,"f (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,384,"final double entry = tableau.getEntry(0, i);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,385,"if (MathUtils.compareTo(entry, 0d, epsilon) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,385,oefficients[i] = 0;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,414,coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,577,(maxUlps                == rhs.maxUlps) &&
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,593,maxUlps ^
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,621,* Get an epsilon that is adjusted to the magnitude of the given value.
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,622,* @param value the value for which to get the epsilon
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,623,* @return magnitude-adjusted epsilon using {@link FastMath.ulp}
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,625,private double getEpsilon(double value) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,626,return FastMath.ulp(value) * (double) maxUlps;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,28,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,33,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,34,public void test434NegativeVariable() throws OptimizationException
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,36,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,37,ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,38,"constraints.add(new LinearConstraint(new double[] {1, 1, 0}, Relationship.EQ, 5));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,39,"constraints.add(new LinearConstraint(new double[] {0, 0, 1}, Relationship.GEQ, -10));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,41,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,42,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,43,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,45,"Assert.assertEquals(5.0, solution.getPoint()[0] + solution.getPoint()[1], epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,46,"Assert.assertEquals(-10.0, solution.getPoint()[2], epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,47,"Assert.assertEquals(-10.0, solution.getValue(), epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,51,@Test(expected = NoFeasibleSolutionException.class)
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,52,public void test434UnfeasibleSolution() throws OptimizationException
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,54,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,56,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 0.0}, 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,58,"constraints.add(new LinearConstraint(new double[] {epsilon/2, 0.5}, Relationship.EQ, 0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,59,"constraints.add(new LinearConstraint(new double[] {1e-3, 0.1}, Relationship.EQ, 10));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,61,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,62,"// allowing only non-negative values, no feasible solution shall be found"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,63,"solver.optimize(f, constraints, GoalType.MINIMIZE, true);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,66,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,67,public void test434PivotRowSelection() throws OptimizationException
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,69,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,71,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,72,ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,73,"constraints.add(new LinearConstraint(new double[] {200}, Relationship.GEQ, 1));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,74,"constraints.add(new LinearConstraint(new double[] {100}, Relationship.GEQ, 0.499900001));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,76,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,77,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,79,"Assert.assertTrue(MathUtils.compareTo(solution.getPoint()[0] * 200.d, 1.d, epsilon) >= 0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,80,"Assert.assertEquals(0.0050, solution.getValue(), epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,83,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,84,public void test434PivotRowSelection2() throws OptimizationException
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,86,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d}, 0.0d);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,88,ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,89,"constraints.add(new LinearConstraint(new double[] {1.0d, -0.1d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.EQ, -0.1d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,90,"constraints.add(new LinearConstraint(new double[] {1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, -1e-18d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,91,"constraints.add(new LinearConstraint(new double[] {0.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,92,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 1.0d, 0.0d, -0.0128588d, 1e-5d}, Relationship.EQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,93,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 0.0d, 0.0d, 1.0d, 1e-5d, -0.0128586d}, Relationship.EQ, 1e-10d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,94,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, -1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,95,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,96,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, -1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,97,"constraints.add(new LinearConstraint(new double[] {0.0d, 0.0d, 1.0d, 0.0d, 1.0d, 0.0d, 0.0d}, Relationship.GEQ, 0.0d));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,99,double epsilon = 1e-7;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,100,SimplexSolver simplex = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,101,"RealPointValuePair solution = simplex.optimize(f, constraints, GoalType.MINIMIZE, false);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,103,"Assert.assertTrue(MathUtils.compareTo(solution.getPoint()[0], -1e-18d, epsilon) >= 0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,104,"Assert.assertEquals(1.0d, solution.getPoint()[1], epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,105,"Assert.assertEquals(0.0d, solution.getPoint()[2], epsilon);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,106,"Assert.assertEquals(1.0d, solution.getValue(), epsilon);"

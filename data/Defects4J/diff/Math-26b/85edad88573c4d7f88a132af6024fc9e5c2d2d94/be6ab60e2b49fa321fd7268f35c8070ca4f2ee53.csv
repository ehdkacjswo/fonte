is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,15, limitations under the License.
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,18,ackage org.apache.commons.math.stat.clustering;
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,20,mport java.util.Collection;
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,23, Interface for points that can be clustered together.
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,24, @param <T> the type of point that can be clustered
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,25, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,26, @since 2.0
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,28,ublic interface Clusterable<T> {
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,31, Returns the distance from the given point.
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,33, @param p the point to compute the distance from
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,34, @return the distance from the given point
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,36,ouble distanceFrom(T p);
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,39, Returns the centroid of the given Collection of points.
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,41, @param p the Collection of points to compute the centroid of
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,42, @return the centroid of the given Collection of Points
False,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,44, centroidOf(Collection<T> p);
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,18,package org.apache.commons.math.stat.clustering;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,20,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,23,* Interface for points that can be clustered together.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,24,* @param <T> the type of point that can be clustered
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,26,* @since 2.0
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,28,public interface Clusterable<T> {
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,31,* Returns the distance from the given point.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,33,* @param p the point to compute the distance from
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,34,* @return the distance from the given point
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,36,double distanceFrom(T p);
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,39,* Returns the centroid of the given Collection of points.
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,41,* @param p the Collection of points to compute the centroid of
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,42,* @return the centroid of the given Collection of Points
True,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,src/java/org/apache/commons/math/stat/clustering/Clusterable.java,44,T centroidOf(Collection<T> p);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,15, limitations under the License.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,17,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,19,mport java.io.IOException;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,20,mport java.io.ObjectInputStream;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,21,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,22,mport java.lang.reflect.Array;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,23,mport java.util.ConcurrentModificationException;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,24,mport java.util.NoSuchElementException;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,26,mport org.apache.commons.math.Field;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,27,mport org.apache.commons.math.FieldElement;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,28,mport org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,31, Open addressed map from int to FieldElement.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,32, <p>This class provides a dedicated map from integers to FieldElements with a
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,33, much smaller memory overhead than standard <code>java.util.Map</code>.</p>
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,34, <p>This class is not synchronized. The specialized iterators returned by
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,35, {@link #iterator()} are fail-fast: they throw a
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,36, <code>ConcurrentModificationException</code> when they detect the map has been
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,37, modified during iteration.</p>
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,38, @param <T> the type of the field elements
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,39," @version $Revision: 746578 $ $Date: 2009-02-21 12:01:14 -0800 (Sat, 21 Feb 2009) $"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,40, @since 2.0
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,42,ublic class OpenIntToFieldHashMap<T extends FieldElement<T>> implements Serializable {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,44,** Serializable version identifier. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,45,rivate static final long serialVersionUID = -9179080286849120720L;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,47,** Load factor for the map. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,48,rivate static final float LOAD_FACTOR = 0.5f;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,50,** Default starting size.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,51, <p>This must be a power of two for bit mask to work properly. </p>
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,53,rivate static final int DEFAULT_EXPECTED_SIZE = 16;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,55,** Multiplier for size growth when map fills up.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,56, <p>This must be a power of two for bit mask to work properly. </p>
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,58,rivate static final int RESIZE_MULTIPLIER = 2;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,60,** Number of bits to perturb the index when probing for collision resolution. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,61,rivate static final int PERTURB_SHIFT = 5;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,63,** Status indicator for free table entries. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,64,rotected static final byte FREE    = 0;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,66,** Status indicator for full table entries. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,67,rotected static final byte FULL    = 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,69,** Status indicator for removed table entries. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,70,rotected static final byte REMOVED = 2;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,72,** Field to which the elements belong. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,73,rivate final Field<T> field;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,75,** Keys table. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,76,rivate int[] keys;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,78,** Values table. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,79,rivate T[] values;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,81,** States table. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,82,rivate byte[] states;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,84,** Return value for missing entries. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,85,rivate final T missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,87,** Current size of the map. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,88,rivate int size;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,90,** Bit mask for hash values. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,91,rivate int mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,93,** Modifications count. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,94,rivate transient int count;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,97, Build an empty map with default size and using zero for missing entries.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,98, @param field field to which the elements belong
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,100,ublic OpenIntToFieldHashMap(final Field<T>field) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,101,"his(field, DEFAULT_EXPECTED_SIZE, field.getZero());"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,105, Build an empty map with default size
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,106, @param field field to which the elements belong
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,107, @param missingEntries value to return when a missing entry is fetched
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,109,"ublic OpenIntToFieldHashMap(final Field<T>field, final T missingEntries) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,110,"his(field,DEFAULT_EXPECTED_SIZE, missingEntries);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,114, Build an empty map with specified size and using zero for missing entries.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,115, @param field field to which the elements belong
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,116, @param expectedSize expected number of elements in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,118,"ublic OpenIntToFieldHashMap(final Field<T> field,final int expectedSize) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,119,"his(field,expectedSize, field.getZero());"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,123, Build an empty map with specified size.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,124, @param field field to which the elements belong
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,125, @param expectedSize expected number of elements in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,126, @param missingEntries value to return when a missing entry is fetched
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,128,"ublic OpenIntToFieldHashMap(final Field<T> field,final int expectedSize,"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,129,inal T missingEntries) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,130,his.field = field;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,131,inal int capacity = computeCapacity(expectedSize);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,132,eys   = new int[capacity];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,133,alues = buildArray(capacity);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,134,tates = new byte[capacity];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,135,his.missingEntries = missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,136,ask   = capacity - 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,140, Copy constructor.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,141, @param source map to copy
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,143,ublic OpenIntToFieldHashMap(final OpenIntToFieldHashMap<T> source) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,144,ield = source.field;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,145,inal int length = source.keys.length;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,146,eys = new int[length];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,147,"ystem.arraycopy(source.keys, 0, keys, 0, length);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,148,alues = buildArray(length);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,149,"ystem.arraycopy(source.values, 0, values, 0, length);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,150,tates = new byte[length];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,151,"ystem.arraycopy(source.states, 0, states, 0, length);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,152,issingEntries = source.missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,153,ize  = source.size;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,154,ask  = source.mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,155,ount = source.count;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,159, Compute the capacity needed for a given size.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,160, @param expectedSize expected size of the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,161, @return capacity to use for the specified size
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,163,rivate static int computeCapacity(final int expectedSize) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,164,f (expectedSize == 0) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,165,eturn 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,167,inal int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,168,inal int powerOfTwo = Integer.highestOneBit(capacity);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,169,f (powerOfTwo == capacity) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,170,eturn capacity;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,172,eturn nextPowerOfTwo(capacity);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,176, Find the smallest power of two greater than the input value
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,177, @param i input value
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,178, @return smallest power of two greater than the input value
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,180,rivate static int nextPowerOfTwo(final int i) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,181,eturn Integer.highestOneBit(i) << 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,185, Get the stored value associated with the given key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,186, @param key key associated with the data
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,187, @return data associated with the key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,189,ublic T get(final int key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,191,inal int hash  = hashOf(key);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,192,nt index = hash & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,193,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,194,eturn values[index];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,197,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,198,eturn missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,201,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,202," = probe(perturb, j);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,203,ndex = j & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,204,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,205,eturn values[index];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,209,eturn missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,214, Check if a value is associated with a key.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,215, @param key key to check
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,216, @return true if a value is associated with key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,218,ublic boolean containsKey(final int key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,220,inal int hash  = hashOf(key);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,221,nt index = hash & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,222,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,223,eturn true;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,226,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,227,eturn false;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,230,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,231," = probe(perturb, j);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,232,ndex = j & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,233,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,234,eturn true;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,238,eturn false;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,243, Get an iterator over map elements.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,244, <p>The specialized iterators returned are fail-fast: they throw a
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,245, <code>ConcurrentModificationException</code> when they detect the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,246, has been modified during iteration.</p>
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,247, @return iterator over the map elements
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,249,ublic Iterator iterator() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,250,eturn new Iterator();
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,254, Perturb the hash for starting probing.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,255, @param hash initial hash
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,256, @return perturbed hash
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,258,rivate static int perturb(final int hash) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,259,eturn hash & 0x7fffffff;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,263, Find the index at which a key should be inserted
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,264, @param key key to lookup
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,265, @return index at which key should be inserted
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,267,rivate int findInsertionIndex(final int key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,268,"eturn findInsertionIndex(keys, states, key, mask);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,272, Find the index at which a key should be inserted
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,273, @param keys keys table
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,274, @param states states table
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,275, @param key key to lookup
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,276, @param mask bit mask for hash values
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,277, @return index at which key should be inserted
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,279,"rivate static int findInsertionIndex(final int[] keys, final byte[] states,"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,280,"inal int key, final int mask) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,281,inal int hash = hashOf(key);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,282,nt index = hash & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,283,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,284,eturn index;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,285, else if (states[index] == FULL && keys[index] == key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,286,eturn changeIndexSign(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,289,nt perturb = perturb(hash);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,290,nt j = index;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,291,f (states[index] == FULL) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,292,hile (true) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,293," = probe(perturb, j);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,294,ndex = j & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,295,erturb >>= PERTURB_SHIFT;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,297,f (states[index] != FULL || keys[index] == key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,298,reak;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,303,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,304,eturn index;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,305, else if (states[index] == FULL) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,306,"/ due to the loop exit condition,"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,307,/ if (states[index] == FULL) then keys[index] == key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,308,eturn changeIndexSign(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,311,inal int firstRemoved = index;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,312,hile (true) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,313," = probe(perturb, j);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,314,ndex = j & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,316,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,317,eturn firstRemoved;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,318, else if (states[index] == FULL && keys[index] == key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,319,eturn changeIndexSign(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,322,erturb >>= PERTURB_SHIFT;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,329, Compute next probe for collision resolution
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,330, @param perturb perturbed hash
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,331, @param j previous probe
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,332, @return next probe
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,334,"rivate static int probe(final int perturb, final int j) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,335,eturn (j << 2) + j + perturb + 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,339, Change the index sign
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,340, @param index initial index
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,341, @return changed index
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,343,rivate static int changeIndexSign(final int index) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,344,eturn -index - 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,348, Get the number of elements stored in the map.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,349, @return number of elements stored in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,351,ublic int size() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,352,eturn size;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,357, Remove the value associated with a key.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,358, @param key key to which the value is associated
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,359, @return removed value
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,361,ublic T remove(final int key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,363,inal int hash  = hashOf(key);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,364,nt index = hash & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,365,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,366,eturn doRemove(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,369,f (states[index] == FREE) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,370,eturn missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,373,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,374," = probe(perturb, j);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,375,ndex = j & mask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,376,"f (containsKey(key, index)) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,377,eturn doRemove(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,381,eturn missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,386, Check if the tables contain an element associated with specified key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,387, at specified index.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,388, @param key key to check
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,389, @param index index to check
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,390, @return true if an element is associated with key at index
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,392,"rivate boolean containsKey(final int key, final int index) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,393,eturn (key != 0 || states[index] == FULL) && keys[index] == key;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,397, Remove an element at specified index.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,398, @param index index of the element to remove
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,399, @return removed value
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,401,rivate T doRemove(int index) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,402,eys[index]   = 0;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,403,tates[index] = REMOVED;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,404,inal T previous = values[index];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,405,alues[index] = missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,406,-size;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,407,+count;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,408,eturn previous;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,412, Put a value associated with a key in the map.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,413, @param key key to which value is associated
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,414, @param value value to put in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,415, @return previous value associated with the key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,417,"ublic T put(final int key, final T value) {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,418,nt index = findInsertionIndex(key);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,419, previous = missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,420,oolean newMapping = true;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,421,f (index < 0) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,422,ndex = changeIndexSign(index);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,423,revious = values[index];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,424,ewMapping = false;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,426,eys[index]   = key;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,427,tates[index] = FULL;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,428,alues[index] = value;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,429,f (newMapping) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,430,+size;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,431,f (shouldGrowTable()) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,432,rowTable();
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,434,+count;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,436,eturn previous;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,441, Grow the tables.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,443,rivate void growTable() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,445,inal int oldLength      = states.length;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,446,inal int[] oldKeys      = keys;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,447,inal T[] oldValues = values;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,448,inal byte[] oldStates   = states;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,450,inal int newLength = RESIZE_MULTIPLIER * oldLength;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,451,inal int[] newKeys = new int[newLength];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,452,inal T[] newValues = buildArray(newLength);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,453,inal byte[] newStates = new byte[newLength];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,454,inal int newMask = newLength - 1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,455,or (int i = 0; i < oldLength; ++i) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,456,f (oldStates[i] == FULL) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,457,inal int key = oldKeys[i];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,458,"inal int index = findInsertionIndex(newKeys, newStates, key, newMask);"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,459,ewKeys[index]   = key;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,460,ewValues[index] = oldValues[i];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,461,ewStates[index] = FULL;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,465,ask   = newMask;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,466,eys   = newKeys;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,467,alues = newValues;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,468,tates = newStates;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,473, Check if tables should grow due to increased size.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,474, @return true if  tables should grow
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,476,rivate boolean shouldGrowTable() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,477,eturn size > (mask + 1) * LOAD_FACTOR;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,481, Compute the hash value of a key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,482, @param key key to hash
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,483, @return hash value of the key
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,485,rivate static int hashOf(final int key) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,486,inal int h = key ^ ((key >>> 20) ^ (key >>> 12));
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,487,eturn h ^ (h >>> 7) ^ (h >>> 4);
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,491,** Iterator class for the map. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,492,ublic class Iterator {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,494,** Reference modification count. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,495,rivate final int referenceCount;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,497,** Index of current element. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,498,rivate int current;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,500,** Index of next element. */
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,501,rivate int next;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,504, Simple constructor.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,506,rivate Iterator() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,508,/ preserve the modification count of the map to detect concurrent modifications later
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,509,eferenceCount = count;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,511,/ initialize current index
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,512,ext = -1;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,513,ry {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,514,dvance();
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,515, catch (NoSuchElementException nsee) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,516,/ ignored
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,522, Check if there is a next element in the map.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,523, @return true if there is a next element
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,525,ublic boolean hasNext() {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,526,eturn next >= 0;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,530, Get the key of current entry.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,531, @return key of current entry
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,532, @exception ConcurrentModificationException if the map is modified during iteration
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,533, @exception NoSuchElementException if there is no element left in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,535,ublic int key()
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,536,"hrows ConcurrentModificationException, NoSuchElementException {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,537,f (referenceCount != count) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,538,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,540,f (current < 0) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,541,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,543,eturn keys[current];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,547, Get the value of current entry.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,548, @return value of current entry
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,549, @exception ConcurrentModificationException if the map is modified during iteration
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,550, @exception NoSuchElementException if there is no element left in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,552,ublic T value()
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,553,"hrows ConcurrentModificationException, NoSuchElementException {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,554,f (referenceCount != count) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,555,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,557,f (current < 0) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,558,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,560,eturn values[current];
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,564, Advance iterator one step further.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,565, @exception ConcurrentModificationException if the map is modified during iteration
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,566, @exception NoSuchElementException if there is no element left in the map
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,568,ublic void advance()
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,569,"hrows ConcurrentModificationException, NoSuchElementException {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,571,f (referenceCount != count) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,572,"hrow MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,575,/ advance on step
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,576,urrent = next;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,578,/ prepare next step
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,579,ry {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,580,hile (states[++next] != FULL) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,581,/ nothing to do
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,583, catch (ArrayIndexOutOfBoundsException e) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,584,ext = -2;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,585,f (current < 0) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,586,"hrow MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,595, Read a serialized object.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,596, @param stream input stream
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,597, @throws IOException if object cannot be read
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,598, @throws ClassNotFoundException if the class corresponding
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,599, to the serialized object cannot be found
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,601,rivate void readObject(final ObjectInputStream stream)
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,602,"hrows IOException, ClassNotFoundException {"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,603,tream.defaultReadObject();
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,604,ount = 0;
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,607,** Build an array of elements.
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,608, @param length size of the array to build
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,609, @return a new array
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,611,"SuppressWarnings(""unchecked"")"
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,612,rivate T[] buildArray(final int length) {
False,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,613,"eturn (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,17,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,19,import java.io.IOException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,20,import java.io.ObjectInputStream;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,21,import java.io.Serializable;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,22,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,23,import java.util.ConcurrentModificationException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,24,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,26,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,27,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,28,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,31,* Open addressed map from int to FieldElement.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,32,* <p>This class provides a dedicated map from integers to FieldElements with a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,33,* much smaller memory overhead than standard <code>java.util.Map</code>.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,34,* <p>This class is not synchronized. The specialized iterators returned by
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,35,* {@link #iterator()} are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,36,* <code>ConcurrentModificationException</code> when they detect the map has been
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,37,* modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,38,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,39,"* @version $Revision: 746578 $ $Date: 2009-02-21 12:01:14 -0800 (Sat, 21 Feb 2009) $"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,40,* @since 2.0
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,42,public class OpenIntToFieldHashMap<T extends FieldElement<T>> implements Serializable {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,44,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,45,private static final long serialVersionUID = -9179080286849120720L;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,47,/** Load factor for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,48,private static final float LOAD_FACTOR = 0.5f;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,50,/** Default starting size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,51,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,53,private static final int DEFAULT_EXPECTED_SIZE = 16;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,55,/** Multiplier for size growth when map fills up.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,56,* <p>This must be a power of two for bit mask to work properly. </p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,58,private static final int RESIZE_MULTIPLIER = 2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,60,/** Number of bits to perturb the index when probing for collision resolution. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,61,private static final int PERTURB_SHIFT = 5;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,63,/** Status indicator for free table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,64,protected static final byte FREE    = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,66,/** Status indicator for full table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,67,protected static final byte FULL    = 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,69,/** Status indicator for removed table entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,70,protected static final byte REMOVED = 2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,72,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,73,private final Field<T> field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,75,/** Keys table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,76,private int[] keys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,78,/** Values table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,79,private T[] values;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,81,/** States table. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,82,private byte[] states;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,84,/** Return value for missing entries. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,85,private final T missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,87,/** Current size of the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,88,private int size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,90,/** Bit mask for hash values. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,91,private int mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,93,/** Modifications count. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,94,private transient int count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,97,* Build an empty map with default size and using zero for missing entries.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,98,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,100,public OpenIntToFieldHashMap(final Field<T>field) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,101,"this(field, DEFAULT_EXPECTED_SIZE, field.getZero());"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,105,* Build an empty map with default size
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,106,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,107,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,109,"public OpenIntToFieldHashMap(final Field<T>field, final T missingEntries) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,110,"this(field,DEFAULT_EXPECTED_SIZE, missingEntries);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,114,* Build an empty map with specified size and using zero for missing entries.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,115,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,116,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,118,"public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,119,"this(field,expectedSize, field.getZero());"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,123,* Build an empty map with specified size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,124,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,125,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,126,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,128,"public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,129,final T missingEntries) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,130,this.field = field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,131,final int capacity = computeCapacity(expectedSize);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,132,keys   = new int[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,133,values = buildArray(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,134,states = new byte[capacity];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,135,this.missingEntries = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,136,mask   = capacity - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,140,* Copy constructor.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,141,* @param source map to copy
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,143,public OpenIntToFieldHashMap(final OpenIntToFieldHashMap<T> source) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,144,field = source.field;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,145,final int length = source.keys.length;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,146,keys = new int[length];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,147,"System.arraycopy(source.keys, 0, keys, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,148,values = buildArray(length);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,149,"System.arraycopy(source.values, 0, values, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,150,states = new byte[length];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,151,"System.arraycopy(source.states, 0, states, 0, length);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,152,missingEntries = source.missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,153,size  = source.size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,154,mask  = source.mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,155,count = source.count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,159,* Compute the capacity needed for a given size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,160,* @param expectedSize expected size of the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,161,* @return capacity to use for the specified size
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,163,private static int computeCapacity(final int expectedSize) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,164,if (expectedSize == 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,165,return 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,167,final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,168,final int powerOfTwo = Integer.highestOneBit(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,169,if (powerOfTwo == capacity) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,170,return capacity;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,172,return nextPowerOfTwo(capacity);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,176,* Find the smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,177,* @param i input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,178,* @return smallest power of two greater than the input value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,180,private static int nextPowerOfTwo(final int i) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,181,return Integer.highestOneBit(i) << 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,185,* Get the stored value associated with the given key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,186,* @param key key associated with the data
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,187,* @return data associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,189,public T get(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,191,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,192,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,193,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,194,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,197,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,198,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,201,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,202,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,203,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,204,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,205,return values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,209,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,214,* Check if a value is associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,215,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,216,* @return true if a value is associated with key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,218,public boolean containsKey(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,220,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,221,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,222,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,223,return true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,226,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,227,return false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,230,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,231,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,232,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,233,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,234,return true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,238,return false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,243,* Get an iterator over map elements.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,244,* <p>The specialized iterators returned are fail-fast: they throw a
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,245,* <code>ConcurrentModificationException</code> when they detect the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,246,* has been modified during iteration.</p>
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,247,* @return iterator over the map elements
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,249,public Iterator iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,250,return new Iterator();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,254,* Perturb the hash for starting probing.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,255,* @param hash initial hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,256,* @return perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,258,private static int perturb(final int hash) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,259,return hash & 0x7fffffff;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,263,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,264,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,265,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,267,private int findInsertionIndex(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,268,"return findInsertionIndex(keys, states, key, mask);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,272,* Find the index at which a key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,273,* @param keys keys table
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,274,* @param states states table
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,275,* @param key key to lookup
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,276,* @param mask bit mask for hash values
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,277,* @return index at which key should be inserted
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,279,"private static int findInsertionIndex(final int[] keys, final byte[] states,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,280,"final int key, final int mask) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,281,final int hash = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,282,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,283,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,284,return index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,285,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,286,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,289,int perturb = perturb(hash);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,290,int j = index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,291,if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,292,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,293,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,294,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,295,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,297,if (states[index] != FULL || keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,298,break;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,303,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,304,return index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,305,} else if (states[index] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,306,"// due to the loop exit condition,"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,307,// if (states[index] == FULL) then keys[index] == key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,308,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,311,final int firstRemoved = index;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,312,while (true) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,313,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,314,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,316,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,317,return firstRemoved;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,318,} else if (states[index] == FULL && keys[index] == key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,319,return changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,322,perturb >>= PERTURB_SHIFT;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,329,* Compute next probe for collision resolution
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,330,* @param perturb perturbed hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,331,* @param j previous probe
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,332,* @return next probe
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,334,"private static int probe(final int perturb, final int j) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,335,return (j << 2) + j + perturb + 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,339,* Change the index sign
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,340,* @param index initial index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,341,* @return changed index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,343,private static int changeIndexSign(final int index) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,344,return -index - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,348,* Get the number of elements stored in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,349,* @return number of elements stored in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,351,public int size() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,352,return size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,357,* Remove the value associated with a key.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,358,* @param key key to which the value is associated
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,359,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,361,public T remove(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,363,final int hash  = hashOf(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,364,int index = hash & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,365,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,366,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,369,if (states[index] == FREE) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,370,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,373,"for (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,374,"j = probe(perturb, j);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,375,index = j & mask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,376,"if (containsKey(key, index)) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,377,return doRemove(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,381,return missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,386,* Check if the tables contain an element associated with specified key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,387,* at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,388,* @param key key to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,389,* @param index index to check
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,390,* @return true if an element is associated with key at index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,392,"private boolean containsKey(final int key, final int index) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,393,return (key != 0 || states[index] == FULL) && keys[index] == key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,397,* Remove an element at specified index.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,398,* @param index index of the element to remove
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,399,* @return removed value
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,401,private T doRemove(int index) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,402,keys[index]   = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,403,states[index] = REMOVED;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,404,final T previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,405,values[index] = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,406,--size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,407,++count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,408,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,412,* Put a value associated with a key in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,413,* @param key key to which value is associated
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,414,* @param value value to put in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,415,* @return previous value associated with the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,417,"public T put(final int key, final T value) {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,418,int index = findInsertionIndex(key);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,419,T previous = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,420,boolean newMapping = true;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,421,if (index < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,422,index = changeIndexSign(index);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,423,previous = values[index];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,424,newMapping = false;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,426,keys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,427,states[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,428,values[index] = value;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,429,if (newMapping) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,430,++size;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,431,if (shouldGrowTable()) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,432,growTable();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,434,++count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,436,return previous;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,441,* Grow the tables.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,443,private void growTable() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,445,final int oldLength      = states.length;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,446,final int[] oldKeys      = keys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,447,final T[] oldValues = values;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,448,final byte[] oldStates   = states;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,450,final int newLength = RESIZE_MULTIPLIER * oldLength;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,451,final int[] newKeys = new int[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,452,final T[] newValues = buildArray(newLength);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,453,final byte[] newStates = new byte[newLength];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,454,final int newMask = newLength - 1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,455,for (int i = 0; i < oldLength; ++i) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,456,if (oldStates[i] == FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,457,final int key = oldKeys[i];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,458,"final int index = findInsertionIndex(newKeys, newStates, key, newMask);"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,459,newKeys[index]   = key;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,460,newValues[index] = oldValues[i];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,461,newStates[index] = FULL;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,465,mask   = newMask;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,466,keys   = newKeys;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,467,values = newValues;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,468,states = newStates;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,473,* Check if tables should grow due to increased size.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,474,* @return true if  tables should grow
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,476,private boolean shouldGrowTable() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,477,return size > (mask + 1) * LOAD_FACTOR;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,481,* Compute the hash value of a key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,482,* @param key key to hash
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,483,* @return hash value of the key
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,485,private static int hashOf(final int key) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,486,final int h = key ^ ((key >>> 20) ^ (key >>> 12));
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,487,return h ^ (h >>> 7) ^ (h >>> 4);
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,491,/** Iterator class for the map. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,492,public class Iterator {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,494,/** Reference modification count. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,495,private final int referenceCount;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,497,/** Index of current element. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,498,private int current;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,500,/** Index of next element. */
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,501,private int next;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,504,* Simple constructor.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,506,private Iterator() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,508,// preserve the modification count of the map to detect concurrent modifications later
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,509,referenceCount = count;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,511,// initialize current index
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,512,next = -1;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,513,try {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,514,advance();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,515,} catch (NoSuchElementException nsee) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,516,// ignored
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,522,* Check if there is a next element in the map.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,523,* @return true if there is a next element
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,525,public boolean hasNext() {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,526,return next >= 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,530,* Get the key of current entry.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,531,* @return key of current entry
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,532,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,533,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,535,public int key()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,536,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,537,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,538,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,540,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,541,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,543,return keys[current];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,547,* Get the value of current entry.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,548,* @return value of current entry
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,549,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,550,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,552,public T value()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,553,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,554,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,555,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,557,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,558,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,560,return values[current];
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,564,* Advance iterator one step further.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,565,* @exception ConcurrentModificationException if the map is modified during iteration
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,566,* @exception NoSuchElementException if there is no element left in the map
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,568,public void advance()
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,569,"throws ConcurrentModificationException, NoSuchElementException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,571,if (referenceCount != count) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,572,"throw MathRuntimeException.createConcurrentModificationException(""map has been modified while iterating"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,575,// advance on step
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,576,current = next;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,578,// prepare next step
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,579,try {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,580,while (states[++next] != FULL) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,581,// nothing to do
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,583,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,584,next = -2;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,585,if (current < 0) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,586,"throw MathRuntimeException.createNoSuchElementException(""iterator exhausted"");"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,595,* Read a serialized object.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,596,* @param stream input stream
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,597,* @throws IOException if object cannot be read
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,598,* @throws ClassNotFoundException if the class corresponding
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,599,* to the serialized object cannot be found
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,601,private void readObject(final ObjectInputStream stream)
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,602,"throws IOException, ClassNotFoundException {"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,603,stream.defaultReadObject();
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,604,count = 0;
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,607,/** Build an array of elements.
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,608,* @param length size of the array to build
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,609,* @return a new array
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,611,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,612,private T[] buildArray(final int length) {
True,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,613,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,17,ackage org.apache.commons.math.linear;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,20,mport org.apache.commons.math.fraction.Fraction;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,21,mport org.apache.commons.math.fraction.FractionConversionException;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,22,mport org.apache.commons.math.fraction.FractionField;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,28, Test cases for the {@link SparseFieldVector} class.
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,30," @version $Revision: 728186 $ $Date: 2009-04-20 11:42:11 -0700 (Mon, 20 Apr 2009) $"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,32,ublic class SparseFieldVectorTest extends TestCase {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,35,"rotected Fraction[][] ma1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)}, {new Fraction(7), new Fraction(8), new Fraction(9)}};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,36,"rotected Fraction[] vec1 = {new Fraction(1), new Fraction(2), new Fraction(3)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,37,"rotected Fraction[] vec2 = {new Fraction(4), new Fraction(5), new Fraction(6)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,38,"rotected Fraction[] vec3 = {new Fraction(7), new Fraction(8), new Fraction(9)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,39,"rotected Fraction[] vec4 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8), new Fraction(9)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,40,"rotected Fraction[] vec_null = {new Fraction(0), new Fraction(0), new Fraction(0)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,41,"rotected Fraction[] dvec1 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8),new Fraction(9)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,42,"rotected Fraction[][] mat1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)},{ new Fraction(7), new Fraction(8), new Fraction(9)}};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,44,/ tolerances
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,45,rotected double entryTolerance = 10E-16;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,46,rotected double normTolerance = 10E-14;
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,48,rotected FractionField field = FractionField.getInstance();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,50,ublic void testMapFunctions() throws FractionConversionException {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,51,"parseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,53,/octave =  v1 .+ 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,54,ieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,55,"raction[] result_mapAdd = {new Fraction(3), new Fraction(4), new Fraction(5)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,56,"ssertEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,58,/octave =  v1 .+ 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,59,ieldVector<Fraction> v_mapAddToSelf = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,60,_mapAddToSelf.mapAddToSelf(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,61,"raction[] result_mapAddToSelf = {new Fraction(3), new Fraction(4), new Fraction(5)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,62,"ssertEquals(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,64,/octave =  v1 .- 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,65,ieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,66,"raction[] result_mapSubtract = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,67,"ssertEquals(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,69,/octave =  v1 .- 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,70,ieldVector<Fraction> v_mapSubtractToSelf = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,71,_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,72,"raction[] result_mapSubtractToSelf = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,73,"ssertEquals(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,75,/octave =  v1 .* 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,76,ieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,77,"raction[] result_mapMultiply = {new Fraction(2), new Fraction(4), new Fraction(6)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,78,"ssertEquals(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,80,/octave =  v1 .* 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,81,ieldVector<Fraction> v_mapMultiplyToSelf = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,82,_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,83,"raction[] result_mapMultiplyToSelf = {new Fraction(2), new Fraction(4), new Fraction(6)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,84,"ssertEquals(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,86,/octave =  v1 ./ 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,87,ieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,88,"raction[] result_mapDivide = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,89,"ssertEquals(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,91,/octave =  v1 ./ 2.0
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,92,ieldVector<Fraction> v_mapDivideToSelf = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,93,_mapDivideToSelf.mapDivideToSelf(new Fraction(2));
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,94,"raction[] result_mapDivideToSelf = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,95,"ssertEquals(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,97,/octave =  v1 .^-1
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,98,ieldVector<Fraction> v_mapInv = v1.mapInv();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,99,"raction[] result_mapInv = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,100,"ssertEquals(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,102,/octave =  v1 .^-1
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,103,ieldVector<Fraction> v_mapInvToSelf = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,104,_mapInvToSelf.mapInvToSelf();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,105,"raction[] result_mapInvToSelf = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,106,"ssertEquals(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,111,ublic void testBasicFunctions() throws FractionConversionException {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,112,"parseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,113,"parseFieldVector<Fraction> v2 = new SparseFieldVector<Fraction>(field,vec2);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,115,"parseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,117,/octave =  v1 + v2
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,118,ieldVector<Fraction> v_add = v1.add(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,119,"raction[] result_add = {new Fraction(5), new Fraction(7), new Fraction(9)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,120,"ssertEquals(""compare vect"" ,v_add.getData(),result_add);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,122,"parseFieldVector<Fraction> vt2 = new SparseFieldVector<Fraction>(field,vec2);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,123,ieldVector<Fraction> v_add_i = v1.add(vt2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,124,"raction[] result_add_i = {new Fraction(5), new Fraction(7), new Fraction(9)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,"ssertEquals(""compare vect"" ,v_add_i.getData(),result_add_i);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,127,/octave =  v1 - v2
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,128,parseFieldVector<Fraction> v_subtract = v1.subtract(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,129,"raction[] result_subtract = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,130,"ssertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,132,ieldVector<Fraction> v_subtract_i = v1.subtract(vt2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,133,"raction[] result_subtract_i = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,134,"ssertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,136,/ octave v1 .* v2
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,137,ieldVector<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,138,"raction[] result_ebeMultiply = {new Fraction(4), new Fraction(10), new Fraction(18)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,139,"ssertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,141,ieldVector<Fraction>  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,142,"raction[] result_ebeMultiply_2 = {new Fraction(4), new Fraction(10), new Fraction(18)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,143,"ssertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,145,/ octave v1 ./ v2
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,146,ieldVector<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,147,"raction[] result_ebeDivide = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,148,"ssertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,150,ieldVector<Fraction>  v_ebeDivide_2 = v1.ebeDivide(v2_t);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,151,"raction[] result_ebeDivide_2 = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,152,"ssertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,154,"/ octave  dot(v1,v2)"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,155,raction dot =  v1.dotProduct(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,156,"ssertEquals(""compare val "",new Fraction(32), dot);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,158,"/ octave  dot(v1,v2_t)"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,159,raction dot_2 =  v1.dotProduct(v2_t);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,160,"ssertEquals(""compare val "",new Fraction(32), dot_2);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,162,ieldMatrix<Fraction> m_outerProduct = v1.outerProduct(v2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,163,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,165,ieldMatrix<Fraction> m_outerProduct_2 = v1.outerProduct(v2_t);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,166,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,171,ublic void testMisc() {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,172,"parseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,174,tring out1 = v1.toString();
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,175,"ssertTrue(""some output "",  out1.length()!=0);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,176,ry {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,177,1.checkVectorDimensions(2);
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,178,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,179, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,180,/ expected behavior
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,181, catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,182,"ail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,188,ublic void testPredicates() {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,190,"parseFieldVector<Fraction> v = new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) });"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,192,".setEntry(0, field.getZero());"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,193,"ssertEquals(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) }));"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,194,"ssertNotSame(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2), new Fraction(3) }));"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,198,** verifies that two vectors are close (sup norm) */
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,199,"rotected void assertEquals(String msg, Fraction[] m, Fraction[] n) {"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,200,f (m.length != n.length) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,201,"ail(""vectors have different lengths"");"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,203,or (int i = 0; i < m.length; i++) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,204,"ssertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,208,** verifies that two vectors are close (sup norm) */
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,209,"rotected void assertClose(String msg, Fraction[] m, Fraction[] n, double tolerance) {"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,210,f (m.length != n.length) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,211,"ail(""vectors have different lengths"");"
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,213,or (int i = 0; i < m.length; i++) {
False,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,214,"ssertEquals(msg + "" "" +  i + "" elements differ"", m[i].doubleValue(),n[i].doubleValue(), tolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,20,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,21,import org.apache.commons.math.fraction.FractionConversionException;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,22,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,28,* Test cases for the {@link SparseFieldVector} class.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,30,"* @version $Revision: 728186 $ $Date: 2009-04-20 11:42:11 -0700 (Mon, 20 Apr 2009) $"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,32,public class SparseFieldVectorTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,35,"protected Fraction[][] ma1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)}, {new Fraction(7), new Fraction(8), new Fraction(9)}};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,36,"protected Fraction[] vec1 = {new Fraction(1), new Fraction(2), new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,37,"protected Fraction[] vec2 = {new Fraction(4), new Fraction(5), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,38,"protected Fraction[] vec3 = {new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,39,"protected Fraction[] vec4 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,40,"protected Fraction[] vec_null = {new Fraction(0), new Fraction(0), new Fraction(0)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,41,"protected Fraction[] dvec1 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8),new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,42,"protected Fraction[][] mat1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)},{ new Fraction(7), new Fraction(8), new Fraction(9)}};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,44,// tolerances
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,45,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,46,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,48,protected FractionField field = FractionField.getInstance();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,50,public void testMapFunctions() throws FractionConversionException {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,51,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,53,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,54,FieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,55,"Fraction[] result_mapAdd = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,56,"assertEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,58,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,59,FieldVector<Fraction> v_mapAddToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,60,v_mapAddToSelf.mapAddToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,61,"Fraction[] result_mapAddToSelf = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,62,"assertEquals(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,64,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,65,FieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,66,"Fraction[] result_mapSubtract = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,67,"assertEquals(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,69,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,70,FieldVector<Fraction> v_mapSubtractToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,71,v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,72,"Fraction[] result_mapSubtractToSelf = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,73,"assertEquals(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,75,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,76,FieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,77,"Fraction[] result_mapMultiply = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,78,"assertEquals(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,80,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,81,FieldVector<Fraction> v_mapMultiplyToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,82,v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,83,"Fraction[] result_mapMultiplyToSelf = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,84,"assertEquals(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,86,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,87,FieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,88,"Fraction[] result_mapDivide = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,89,"assertEquals(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,91,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,92,FieldVector<Fraction> v_mapDivideToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,93,v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,94,"Fraction[] result_mapDivideToSelf = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,95,"assertEquals(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,97,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,98,FieldVector<Fraction> v_mapInv = v1.mapInv();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,99,"Fraction[] result_mapInv = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,100,"assertEquals(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,102,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,103,FieldVector<Fraction> v_mapInvToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,104,v_mapInvToSelf.mapInvToSelf();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,105,"Fraction[] result_mapInvToSelf = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,106,"assertEquals(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,111,public void testBasicFunctions() throws FractionConversionException {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,112,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,113,"SparseFieldVector<Fraction> v2 = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,115,"SparseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,117,//octave =  v1 + v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,118,FieldVector<Fraction> v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,119,"Fraction[] result_add = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,120,"assertEquals(""compare vect"" ,v_add.getData(),result_add);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,122,"SparseFieldVector<Fraction> vt2 = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,123,FieldVector<Fraction> v_add_i = v1.add(vt2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,124,"Fraction[] result_add_i = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,"assertEquals(""compare vect"" ,v_add_i.getData(),result_add_i);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,127,//octave =  v1 - v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,128,SparseFieldVector<Fraction> v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,129,"Fraction[] result_subtract = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,130,"assertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,132,FieldVector<Fraction> v_subtract_i = v1.subtract(vt2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,133,"Fraction[] result_subtract_i = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,134,"assertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,136,// octave v1 .* v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,137,FieldVector<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,138,"Fraction[] result_ebeMultiply = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,139,"assertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,141,FieldVector<Fraction>  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,142,"Fraction[] result_ebeMultiply_2 = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,143,"assertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,145,// octave v1 ./ v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,146,FieldVector<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,147,"Fraction[] result_ebeDivide = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,148,"assertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,150,FieldVector<Fraction>  v_ebeDivide_2 = v1.ebeDivide(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,151,"Fraction[] result_ebeDivide_2 = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,152,"assertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,154,"// octave  dot(v1,v2)"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,155,Fraction dot =  v1.dotProduct(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,156,"assertEquals(""compare val "",new Fraction(32), dot);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,158,"// octave  dot(v1,v2_t)"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,159,Fraction dot_2 =  v1.dotProduct(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,160,"assertEquals(""compare val "",new Fraction(32), dot_2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,162,FieldMatrix<Fraction> m_outerProduct = v1.outerProduct(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,163,"assertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,165,FieldMatrix<Fraction> m_outerProduct_2 = v1.outerProduct(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,166,"assertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,171,public void testMisc() {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,172,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,174,String out1 = v1.toString();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,175,"assertTrue(""some output "",  out1.length()!=0);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,176,try {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,177,v1.checkVectorDimensions(2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,178,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,179,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,180,// expected behavior
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,181,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,182,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,188,public void testPredicates() {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,190,"SparseFieldVector<Fraction> v = new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) });"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,192,"v.setEntry(0, field.getZero());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,193,"assertEquals(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) }));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,194,"assertNotSame(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2), new Fraction(3) }));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,198,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,199,"protected void assertEquals(String msg, Fraction[] m, Fraction[] n) {"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,200,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,201,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,203,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,204,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,208,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,209,"protected void assertClose(String msg, Fraction[] m, Fraction[] n, double tolerance) {"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,210,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,211,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,213,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,214,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i].doubleValue(),n[i].doubleValue(), tolerance);"

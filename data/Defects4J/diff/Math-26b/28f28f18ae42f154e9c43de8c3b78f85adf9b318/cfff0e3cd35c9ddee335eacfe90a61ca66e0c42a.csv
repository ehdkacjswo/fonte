is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,24,* Optimization algorithms find the input point set that either {@link GoalType
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,25,* maximize or minimize} an objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,26,* This interface is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,27,* Commons-Math. Users of the API are advised to base their code on
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,28,* {@link MultivariateRealOptimizer} or on
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,29,* {@link DifferentiableMultivariateRealOptimizer}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,31,* @see MultivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,32,* @see DifferentiableMultivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,34,* @since 2.2
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,36,public interface BaseMultivariateRealOptimizer<T extends MultivariateRealFunction> {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,38,* Set the maximal number of iterations of the algorithm.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,40,* @param maxIterations Maximal number of algorithm iterations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,42,void setMaxIterations(int maxIterations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,45,* Get the maximal number of iterations of the algorithm.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,47,* @return the maximal number of iterations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,49,int getMaxIterations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,52,* Set the maximal number of functions evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,54,* @param maxEvaluations Maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,56,void setMaxEvaluations(int maxEvaluations);
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,59,* Get the maximal number of functions evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,61,* @return the maximal number of functions evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,63,int getMaxEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,66,* Get the number of iterations realized by the algorithm.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,67,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,68,"* {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,69,* method. It is 0 if the method has not been called yet.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,71,* @return the number of iterations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,73,int getIterations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,76,* Get the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,78,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,79,"* {@link #optimize(T, GoalType, double[]) optimize}"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,80,* method. It is 0 if the method has not been called yet.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,82,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,84,int getEvaluations();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,87,* Set the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,89,* @param checker Object to use to check for convergence.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,91,void setConvergenceChecker(RealConvergenceChecker checker);
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,94,* Get the convergence checker.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,96,* @return the object used to check for convergence.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,98,RealConvergenceChecker getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,101,* Optimize an objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,103,* @param f Objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,104,* @param goalType Type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,105,* or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,106,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,107,* @return the point/value pair giving the optimal value for objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,108,* @throws FunctionEvaluationException if the objective function throws one during
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,109,* the search.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,110,* @throws OptimizationException if the algorithm failed to converge.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,111,* @throws IllegalArgumentException if the start point dimension is wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,113,"RealPointValuePair optimize(T f, GoalType goalType, double[] startPoint)"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,114,"throws FunctionEvaluationException, OptimizationException;"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,33,ublic interface DifferentiableMultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,35,** Set the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,36, @param maxIterations maximal number of function calls
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,38,oid setMaxIterations(int maxIterations);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,40,** Get the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,41, @return maximal number of iterations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,43,nt getMaxIterations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,45,** Get the number of iterations realized by the algorithm.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,46, <p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,47, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,48," {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,49, method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,50, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,51, @return number of iterations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,53,nt getIterations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,55,** Set the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,56, @param maxEvaluations maximal number of function evaluations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,58,oid setMaxEvaluations(int maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,60,** Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,61, @return maximal number of functions evaluations
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,63,nt getMaxEvaluations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,65,** Get the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,66, <p>
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,33,public interface DifferentiableMultivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,34,extends BaseMultivariateRealOptimizer<DifferentiableMultivariateRealFunction> {
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,36,* Get the number of evaluations of the objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,70, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,71, @return number of evaluations of the objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,73,nt getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,75,** Get the number of evaluations of the objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,76, <p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,77, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,78," {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,79, method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,80, </p>
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,81, @return number of evaluations of the objective function gradient
True,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,41,* @return the number of evaluations of the objective function gradient.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,85,** Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,86, @param checker object to use to check for convergence
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,88,oid setConvergenceChecker(RealConvergenceChecker checker);
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,90,** Get the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,91, @return object used to check for convergence
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,93,ealConvergenceChecker getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,95,** Optimizes an objective function.
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,96, @param f objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,97, @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,98, or {@link GoalType#MINIMIZE}
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,99, @param startPoint the start point for optimization
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,100, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,101, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,102, the search
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,103, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,104, @exception IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,106,"ealPointValuePair optimize(DifferentiableMultivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,107,"oalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,108,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java,109,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,33,ublic interface MultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,35,** Set the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,36, @param maxIterations maximal number of algorithm iterations
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,38,oid setMaxIterations(int maxIterations);
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,40,** Get the maximal number of iterations of the algorithm.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,41, @return maximal number of iterations
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,43,nt getMaxIterations();
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,45,** Set the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,46, @param maxEvaluations maximal number of function evaluations
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,48,oid setMaxEvaluations(int maxEvaluations);
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,50,** Get the maximal number of functions evaluations.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,51, @return maximal number of functions evaluations
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,53,nt getMaxEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,55,** Get the number of iterations realized by the algorithm.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,56, <p>
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,57, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,58," {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,59, method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,60, </p>
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,61, @return number of iterations
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,63,nt getIterations();
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,65,** Get the number of evaluations of the objective function.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,66, <p>
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,67, The number of evaluations corresponds to the last call to the
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,68," {@link #optimize(MultivariateRealFunction, GoalType, double[]) optimize}"
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,69, method. It is 0 if the method has not been called yet.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,70, </p>
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,71, @return number of evaluations of the objective function
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,73,nt getEvaluations();
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,75,** Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,76, @param checker object to use to check for convergence
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,78,oid setConvergenceChecker(RealConvergenceChecker checker);
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,80,** Get the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,81, @return object used to check for convergence
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,83,ealConvergenceChecker getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,85,** Optimizes an objective function.
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,86, @param f objective function
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,87, @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,88, or {@link GoalType#MINIMIZE}
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,89, @param startPoint the start point for optimization
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,90, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,91, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,92, the search
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,93, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,94, @exception IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,96,"ealPointValuePair optimize(MultivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,97,"oalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,98,ouble[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,99,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,33,public interface MultivariateRealOptimizer
True,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,34,extends BaseMultivariateRealOptimizer<MultivariateRealFunction> {}
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,33, Base class for implementing optimizers for multivariate scalar functions.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,34, <p>This base class handles the boilerplate methods associated to thresholds
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,35," settings, iterations and evaluations counting.</p>"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,33,* Base class for implementing optimizers for multivariate scalar
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,34,* differentiable functions.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,35,* It contains boiler-plate code for dealing with gradient evaluation.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,41,extends BaseAbstractScalarOptimizer<DifferentiableMultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,43,/** Number of gradient evaluations. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,44,private int gradientEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,45,/** Objective function gradient. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,46,private MultivariateVectorialFunction gradient;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,42,** Default maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,43,ublic static final int DEFAULT_MAX_ITERATIONS = 100;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,45,** Convergence checker. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,48,/** Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,49,* @deprecated in 2.2 (to be removed in 3.0). Please use the accessor
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,50,* {@link BaseAbstractScalarOptimizer#getConvergenceChecker()} instead.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,56,* @deprecated in 2.2 (to be removed in 3.0). Please use the accessor
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,57,* {@link BaseAbstractScalarOptimizer#getGoalType()} instead.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,54,** Current point set. */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,60,/** Current point set.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,61,* @deprecated in 2.2 (to be removed in 3.0).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,57,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,58,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,60,** Number of iterations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,61,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,63,** Maximal number of evaluations allowed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,64,rivate int maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66,** Number of evaluations already performed. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67,rivate int evaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,69,** Number of gradient evaluations. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,70,rivate int gradientEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,72,** Objective function. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,73,rivate DifferentiableMultivariateRealFunction function;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,75,** Objective function gradient. */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,76,rivate MultivariateVectorialFunction gradient;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,78,** Simple constructor with default settings.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79, <p>The convergence check is set to a {@link SimpleScalarValueChecker}
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80, and the maximal number of evaluation is set to its default value.</p>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,67,"* The convergence check is set to a {@link SimpleScalarValueChecker},"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68,* the allowed number of iterations and evaluations are set to their
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,69,* default values.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,82,rotected AbstractScalarDifferentiableOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,83,etConvergenceChecker(new SimpleScalarValueChecker());
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,84,etMaxIterations(DEFAULT_MAX_ITERATIONS);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,85,etMaxEvaluations(Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,88,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,89,ublic void setMaxIterations(int maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,90,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,93,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,94,ublic int getMaxIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,95,eturn maxIterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,98,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,99,ublic int getIterations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,100,eturn iterations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,103,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,104,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,105,his.maxEvaluations = maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,108,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,109,ublic int getMaxEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,110,eturn maxEvaluations;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,113,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,114,ublic int getEvaluations() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,115,eturn evaluations;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,71,protected AbstractScalarDifferentiableOptimizer() {}
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,73,* @param convergenceChecker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,74,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,75,* @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,77,"protected AbstractScalarDifferentiableOptimizer(RealConvergenceChecker checker,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,78,"int maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,"super(checker, maxIterations, maxEvaluations);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,81,this.checker = checker; // Do not use (deprecated).
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,123,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,124,ublic void setConvergenceChecker(RealConvergenceChecker convergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,125,his.checker = convergenceChecker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,128,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,129,ublic RealConvergenceChecker getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,130,eturn checker;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,133,** Increment the iterations counter by 1.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,134, @exception OptimizationException if the maximal number
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,135, of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,137,rotected void incrementIterationsCounter()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,138,hrows OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,139,f (++iterations > maxIterations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,140,hrow new OptimizationException(new MaxIterationsExceededException(maxIterations));
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,157, Compute the objective function value.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,158, @param evaluationPoint point at which the objective function must be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,159, @return objective function value at specified point
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,160, @exception FunctionEvaluationException if the function cannot be evaluated
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,161, or its dimension doesn't match problem dimension or the maximal number
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,162, of iterations is exceeded
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,164,rotected double computeObjectiveValue(final double[] evaluationPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,165,hrows FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,166,f (++evaluations > maxEvaluations) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,167,"hrow new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,168,valuationPoint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,170,eturn function.value(evaluationPoint);
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,175,"inal GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,176,inal double[] startPoint)
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,177,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,103,"final GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,104,final double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,105,"throws FunctionEvaluationException,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,106,OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,180,terations          = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,181,valuations         = 0;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,185,unction = f;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,187,oal     = goalType;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,188,oint    = startPoint.clone();
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,190,eturn doOptimize();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,113,goal = goalType; // Do not use (deprecated).
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,114,point = startPoint.clone(); // Do not use (deprecated).
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,116,"return super.optimize(f, goalType, startPoint);"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,194,** Perform the bulk of optimization algorithm.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,195, @return the point/value pair giving the optimal value for objective function
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,196, @exception FunctionEvaluationException if the objective function throws one during
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,197, the search
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,198, @exception OptimizationException if the algorithm failed to converge
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,199, @exception IllegalArgumentException if the start point dimension is wrong
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,201,rotected abstract RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,202,"hrows FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,21,import org.apache.commons.math.MaxEvaluationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,22,import org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,24,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,26,import org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,27,import org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,28,import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,29,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,30,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,31,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,34,* Base class for implementing optimizers for multivariate (not necessarily
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,35,* differentiable) scalar functions.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,37,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,38,* @since 2.2
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,40,public abstract class AbstractScalarOptimizer
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,41,extends BaseAbstractScalarOptimizer<MultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,42,implements MultivariateRealOptimizer {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,44,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,45,"* The convergence check is set to a {@link SimpleScalarValueChecker},"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,46,* the allowed number of iterations and evaluations are set to their
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,47,* default values.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,49,protected AbstractScalarOptimizer() {}
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,51,* @param convergenceChecker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,52,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,53,* @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,55,"protected AbstractScalarOptimizer(RealConvergenceChecker checker,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,56,"int maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,57,int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java,58,"super(checker, maxIterations, maxEvaluations);"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,21,import org.apache.commons.math.MaxEvaluationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,22,import org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,24,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,26,import org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,27,import org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,28,import org.apache.commons.math.optimization.BaseMultivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,29,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,30,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,33,* Base class for implementing optimizers for multivariate scalar functions.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,34,* This base class handles the boiler-plate methods associated to thresholds
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,35,"* settings, iterations and evaluations counting."
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,36,* This class is mainly intended to enforce the internal coherence of
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,37,* Commons-Math.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,38,* A class that implements an optimization algorithm should inherit from
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,39,* {@link AbstractScalarOptimizer} or from
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,40,* {@link AbstractScalarDifferentiableOptimizer}.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,42,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,43,* @since 2.2
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,45,public abstract class BaseAbstractScalarOptimizer<T extends MultivariateRealFunction>
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,46,implements BaseMultivariateRealOptimizer<T> {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,47,/** Default maximal number of iterations allowed ({@value}). */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,48,public static final int DEFAULT_MAX_ITERATIONS = 1000;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,49,/** Default maximal number of iterations allowed ({@value}). */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,50,public static final int DEFAULT_MAX_EVALUATIONS = 10000;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,52,/** Convergence checker. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,53,private RealConvergenceChecker checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,54,/** Type of optimization. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,55,private GoalType goal;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,56,/** Initial guess. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,57,private double[] start;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,58,/** Maximal number of iterations allowed. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,59,private int maxIterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,60,/** Number of iterations already performed. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,61,private int iterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,62,/** Maximal number of evaluations allowed. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,63,private int maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,64,/** Number of evaluations already performed. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,65,private int evaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,66,/** Objective function. */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,67,private MultivariateRealFunction function;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,70,* Simple constructor with default settings.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,71,"* The convergence check is set to a {@link SimpleScalarValueChecker},"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,72,* the allowed number of iterations and evaluations are set to their
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,73,* default values.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,75,protected BaseAbstractScalarOptimizer() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,76,"this(new SimpleScalarValueChecker(),"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,77,"DEFAULT_MAX_ITERATIONS,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,78,DEFAULT_MAX_EVALUATIONS);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,81,* @param convergenceChecker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,82,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,83,* @param maxEvaluations Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,85,"protected BaseAbstractScalarOptimizer(RealConvergenceChecker checker,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,86,"int maxIterations,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,87,int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,88,this.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,89,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,90,this.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,93,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,94,public void setMaxIterations(int maxIterations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,95,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,98,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,99,public int getMaxIterations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,100,return maxIterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,103,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,104,public int getIterations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,105,return iterations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,108,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,109,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,110,this.maxEvaluations = maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,114,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,115,return maxEvaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,118,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,119,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,120,return evaluations;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,123,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,124,public void setConvergenceChecker(RealConvergenceChecker checker) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,125,this.checker = checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,128,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,129,public RealConvergenceChecker getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,130,return checker;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,134,* Increment the iterations counter by 1.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,135,* @throws OptimizationException if the maximal number
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,136,* of iterations is exceeded
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,138,protected void incrementIterationsCounter()
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,139,throws OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,140,if (++iterations > maxIterations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,141,throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,146,* Compute the objective function value.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,147,* @param evaluationPoint point at which the objective function must be evaluated
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,148,* @return objective function value at specified point
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,149,* @throws FunctionEvaluationException if the function cannot be evaluated
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,150,* or its dimension doesn't match problem dimension or the maximal number
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,151,* of iterations is exceeded
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,153,protected double computeObjectiveValue(double[] evaluationPoint)
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,154,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,155,if (++evaluations > maxEvaluations) {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,156,"throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,157,evaluationPoint);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,159,return function.value(evaluationPoint);
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,162,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,163,"public RealPointValuePair optimize(T f,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,164,"GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,165,double[] startPoint)
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,166,"throws FunctionEvaluationException, OptimizationException {"
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,168,// reset counters
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,169,iterations = 0;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,170,evaluations = 0;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,172,// store optimization problem characteristics
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,173,function = f;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,174,goal = goalType;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,175,start = startPoint.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,177,return doOptimize();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,181,* @return the optimization type.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,183,public GoalType getGoalType() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,184,return goal;
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,188,* @return the initial guess.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,190,public double[] getStartPoint() {
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,191,return start.clone();
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,195,* Perform the bulk of optimization algorithm.
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,196,* @return the point/value pair giving the optimal value for objective function
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,197,* @throws FunctionEvaluationException if the objective function throws one during
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,198,* the search
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,199,* @throws OptimizationException if the algorithm failed to converge
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,200,* @throws IllegalArgumentException if the start point dimension is wrong
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,202,protected abstract RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java,203,"throws FunctionEvaluationException, OptimizationException;"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,45,xtends AbstractScalarDifferentiableOptimizer
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,46,mplements DifferentiableMultivariateRealOptimizer {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,45,extends AbstractScalarDifferentiableOptimizer {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,54,/** Current point. */
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,55,private double[] point;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,122,point = getStartPoint();
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,123,final GoalType goal = getGoalType();
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,150,"f (checker.converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,148,"if (getConvergenceChecker().converged(getIterations(), previous, current)) {"

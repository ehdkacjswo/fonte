is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,51,rotected double absoluteAccuracy;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,51,private final double absoluteAccuracy;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,54,rotected double relativeAccuracy;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,54,private final double relativeAccuracy;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,57,rotected int minimalIterationCount;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,57,private final int minimalIterationCount;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,60,rotected Incrementor iterations;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,60,protected final Incrementor iterations;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,63,rotected Incrementor evaluations;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,63,private final Incrementor evaluations;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,66,rotected UnivariateFunction function;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,66,private UnivariateFunction function;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,69,rotected double min;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,69,private double min;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,72,rotected double max;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,72,private double max;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,193,* @return the lower bound.
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,195,protected double getMin() {
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,196,return min;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,199,* @return the upper bound.
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,201,protected double getMax() {
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,202,return max;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,232,his.min = lower;
False,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,233,his.max = upper;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,245,min = lower;
True,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java,246,max = upper;
False,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,213,"astMath.max(absoluteAccuracy,"
False,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,214,elativeAccuracy * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5);
True,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,213,"FastMath.max(getAbsoluteAccuracy(),"
True,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,214,getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5);
False,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,217,f ((iterations.getCount() + 1 >= minimalIterationCount) && (delta <= limit)) {
True,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,217,if ((iterations.getCount() + 1 >= getMinimalIterationCount()) && (delta <= limit)) {
False,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,242,inal double step     = (max - min) / n;
True,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,242,final double step     = (getMax() - getMin()) / n;
False,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,246,ouble midPoint = min + halfStep;
True,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java,246,double midPoint = getMin() + halfStep;
False,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,131,f (i >= minimalIterationCount) {
True,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,131,if (i >= getMinimalIterationCount()) {
False,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,133,inal double rLimit = relativeAccuracy * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
False,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,134,f ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
True,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,133,final double rLimit = getRelativeAccuracy() * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java,134,if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) {
False,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,105,f (minimalIterationCount == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,105,if (getMinimalIterationCount() == 1) {
False,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,116,f (iterations.getCount() >= minimalIterationCount) {
True,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,116,if (iterations.getCount() >= getMinimalIterationCount()) {
False,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,119,elativeAccuracy * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
False,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,120,f ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
True,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,119,getRelativeAccuracy() * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java,120,if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) {
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,120, = 0.5 * (baseIntegrator.max - baseIntegrator.min) *
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,121,baseIntegrator.computeObjectiveValue(baseIntegrator.min) +
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,122,aseIntegrator.computeObjectiveValue(baseIntegrator.max));
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,120,final double max = baseIntegrator.getMax();
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,121,final double min = baseIntegrator.getMin();
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,122,s = 0.5 * (max - min) *
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,123,(baseIntegrator.computeObjectiveValue(min) +
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,124,baseIntegrator.computeObjectiveValue(max));
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,129,final double max = baseIntegrator.getMax();
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,130,final double min = baseIntegrator.getMin();
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,128,inal double spacing = (baseIntegrator.max - baseIntegrator.min) / np;
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,129,ouble x = baseIntegrator.min + 0.5 * spacing;    // the first new point
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,132,final double spacing = (max - min) / np;
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,133,double x = min + 0.5 * spacing;    // the first new point
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,150,f (i >= minimalIterationCount) {
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,154,if (i >= getMinimalIterationCount()) {
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,153,elativeAccuracy * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5;
False,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,154,f ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,157,getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5;
True,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java,158,if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,119,or (Integer row : minRatioPositions) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,120,or (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,121,nt column = i + tableau.getArtificialVariableOffset();
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,122,"inal double entry = tableau.getEntry(row, column);"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,123,"f (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {"
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,124,eturn row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,119,if (tableau.getNumArtificialVariables() > 0) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,120,for (Integer row : minRatioPositions) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,121,for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,122,int column = i + tableau.getArtificialVariableOffset();
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,123,"final double entry = tableau.getEntry(row, column);"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,124,"if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,125,return row;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,134,nteger minRow = null;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,135,nt minIndex = tableau.getWidth();
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,136,or (Integer row : minRatioPositions) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,137,or (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,138,f (row == tableau.getBasicRow(i)) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,139,f (i < minIndex) {
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,140,inIndex = i;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,141,inRow = row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,137,// Additional heuristic: if we did not get a solution after half of maxIterations
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,138,//                       revert to the simple case of just returning the top-most row
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,139,// This heuristic is based on empirical data gathered while investigating MATH-828.
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,140,if (getIterations() < getMaxIterations() / 2) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,141,Integer minRow = null;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,142,int minIndex = tableau.getWidth();
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,143,for (Integer row : minRatioPositions) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,144,int i = tableau.getNumObjectiveFunctions();
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,145,for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,146,if (row == tableau.getBasicRow(i)) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,147,if (i < minIndex) {
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,148,minIndex = i;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,149,minRow = row;
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,154,return minRow;
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java,147,eturn minRow;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,55,public void testMath828Cycle() {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,56,LinearObjectiveFunction f = new LinearObjectiveFunction(
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,57,"new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,59,ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,61,"constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,62,"constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,63,"constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,64,"constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,65,"constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,66,"constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,67,"constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,69,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,70,"PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,71,"Assert.assertEquals(1.0d, solution.getValue(), epsilon);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,72,"Assert.assertTrue(validSolution(solution, constraints, epsilon));"
